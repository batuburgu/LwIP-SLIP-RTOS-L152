
lwIP-SLIP-RTOS-L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ab4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dc0  08013bf4  08013bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080179b4  080179b4  00019078  2**0
                  CONTENTS
  4 .ARM          00000008  080179b4  080179b4  000189b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080179bc  080179bc  00019078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080179bc  080179bc  000189bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080179c0  080179c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080179c4  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082f4  20000078  08017a3c  00019078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000836c  08017a3c  0001936c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00019078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278d1  00000000  00000000  000190a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007242  00000000  00000000  00040972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  00047bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d7  00000000  00000000  00049a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026530  00000000  00000000  0004b1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000308d2  00000000  00000000  0007170f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa3e2  00000000  00000000  000a1fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c3c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008414  00000000  00000000  0014c408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015481c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08013bdc 	.word	0x08013bdc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08013bdc 	.word	0x08013bdc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_uldivmod>:
 80001a4:	b953      	cbnz	r3, 80001bc <__aeabi_uldivmod+0x18>
 80001a6:	b94a      	cbnz	r2, 80001bc <__aeabi_uldivmod+0x18>
 80001a8:	2900      	cmp	r1, #0
 80001aa:	bf08      	it	eq
 80001ac:	2800      	cmpeq	r0, #0
 80001ae:	bf1c      	itt	ne
 80001b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001b8:	f000 b968 	b.w	800048c <__aeabi_idiv0>
 80001bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c4:	f000 f806 	bl	80001d4 <__udivmoddi4>
 80001c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d0:	b004      	add	sp, #16
 80001d2:	4770      	bx	lr

080001d4 <__udivmoddi4>:
 80001d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d8:	9d08      	ldr	r5, [sp, #32]
 80001da:	460c      	mov	r4, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14e      	bne.n	800027e <__udivmoddi4+0xaa>
 80001e0:	4694      	mov	ip, r2
 80001e2:	458c      	cmp	ip, r1
 80001e4:	4686      	mov	lr, r0
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	d962      	bls.n	80002b2 <__udivmoddi4+0xde>
 80001ec:	b14a      	cbz	r2, 8000202 <__udivmoddi4+0x2e>
 80001ee:	f1c2 0320 	rsb	r3, r2, #32
 80001f2:	4091      	lsls	r1, r2
 80001f4:	fa20 f303 	lsr.w	r3, r0, r3
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	4319      	orrs	r1, r3
 80001fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000202:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000206:	fbb1 f4f7 	udiv	r4, r1, r7
 800020a:	fb07 1114 	mls	r1, r7, r4, r1
 800020e:	fa1f f68c 	uxth.w	r6, ip
 8000212:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000216:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021a:	fb04 f106 	mul.w	r1, r4, r6
 800021e:	4299      	cmp	r1, r3
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x64>
 8000222:	eb1c 0303 	adds.w	r3, ip, r3
 8000226:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800022a:	f080 8110 	bcs.w	800044e <__udivmoddi4+0x27a>
 800022e:	4299      	cmp	r1, r3
 8000230:	f240 810d 	bls.w	800044e <__udivmoddi4+0x27a>
 8000234:	3c02      	subs	r4, #2
 8000236:	4463      	add	r3, ip
 8000238:	1a59      	subs	r1, r3, r1
 800023a:	fbb1 f0f7 	udiv	r0, r1, r7
 800023e:	fb07 1110 	mls	r1, r7, r0, r1
 8000242:	fb00 f606 	mul.w	r6, r0, r6
 8000246:	fa1f f38e 	uxth.w	r3, lr
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	429e      	cmp	r6, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x94>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800025a:	f080 80fa 	bcs.w	8000452 <__udivmoddi4+0x27e>
 800025e:	429e      	cmp	r6, r3
 8000260:	f240 80f7 	bls.w	8000452 <__udivmoddi4+0x27e>
 8000264:	4463      	add	r3, ip
 8000266:	3802      	subs	r0, #2
 8000268:	2100      	movs	r1, #0
 800026a:	1b9b      	subs	r3, r3, r6
 800026c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000270:	b11d      	cbz	r5, 800027a <__udivmoddi4+0xa6>
 8000272:	40d3      	lsrs	r3, r2
 8000274:	2200      	movs	r2, #0
 8000276:	e9c5 3200 	strd	r3, r2, [r5]
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	428b      	cmp	r3, r1
 8000280:	d905      	bls.n	800028e <__udivmoddi4+0xba>
 8000282:	b10d      	cbz	r5, 8000288 <__udivmoddi4+0xb4>
 8000284:	e9c5 0100 	strd	r0, r1, [r5]
 8000288:	2100      	movs	r1, #0
 800028a:	4608      	mov	r0, r1
 800028c:	e7f5      	b.n	800027a <__udivmoddi4+0xa6>
 800028e:	fab3 f183 	clz	r1, r3
 8000292:	2900      	cmp	r1, #0
 8000294:	d146      	bne.n	8000324 <__udivmoddi4+0x150>
 8000296:	42a3      	cmp	r3, r4
 8000298:	d302      	bcc.n	80002a0 <__udivmoddi4+0xcc>
 800029a:	4290      	cmp	r0, r2
 800029c:	f0c0 80ee 	bcc.w	800047c <__udivmoddi4+0x2a8>
 80002a0:	1a86      	subs	r6, r0, r2
 80002a2:	eb64 0303 	sbc.w	r3, r4, r3
 80002a6:	2001      	movs	r0, #1
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	d0e6      	beq.n	800027a <__udivmoddi4+0xa6>
 80002ac:	e9c5 6300 	strd	r6, r3, [r5]
 80002b0:	e7e3      	b.n	800027a <__udivmoddi4+0xa6>
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	f040 808f 	bne.w	80003d6 <__udivmoddi4+0x202>
 80002b8:	eba1 040c 	sub.w	r4, r1, ip
 80002bc:	2101      	movs	r1, #1
 80002be:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c2:	fa1f f78c 	uxth.w	r7, ip
 80002c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ca:	fb08 4416 	mls	r4, r8, r6, r4
 80002ce:	fb07 f006 	mul.w	r0, r7, r6
 80002d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	4298      	cmp	r0, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x11c>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x11a>
 80002e8:	4298      	cmp	r0, r3
 80002ea:	f200 80cb 	bhi.w	8000484 <__udivmoddi4+0x2b0>
 80002ee:	4626      	mov	r6, r4
 80002f0:	1a1c      	subs	r4, r3, r0
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4410 	mls	r4, r8, r0, r4
 80002fa:	fb00 f707 	mul.w	r7, r0, r7
 80002fe:	fa1f f38e 	uxth.w	r3, lr
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	429f      	cmp	r7, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x148>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x146>
 8000314:	429f      	cmp	r7, r3
 8000316:	f200 80ae 	bhi.w	8000476 <__udivmoddi4+0x2a2>
 800031a:	4620      	mov	r0, r4
 800031c:	1bdb      	subs	r3, r3, r7
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	e7a5      	b.n	8000270 <__udivmoddi4+0x9c>
 8000324:	f1c1 0720 	rsb	r7, r1, #32
 8000328:	408b      	lsls	r3, r1
 800032a:	fa22 fc07 	lsr.w	ip, r2, r7
 800032e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000332:	fa24 f607 	lsr.w	r6, r4, r7
 8000336:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800033a:	fbb6 f8f9 	udiv	r8, r6, r9
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	fb09 6618 	mls	r6, r9, r8, r6
 8000346:	fa20 f307 	lsr.w	r3, r0, r7
 800034a:	408c      	lsls	r4, r1
 800034c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000350:	fb08 f00e 	mul.w	r0, r8, lr
 8000354:	431c      	orrs	r4, r3
 8000356:	0c23      	lsrs	r3, r4, #16
 8000358:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800035c:	4298      	cmp	r0, r3
 800035e:	fa02 f201 	lsl.w	r2, r2, r1
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x1a6>
 8000364:	eb1c 0303 	adds.w	r3, ip, r3
 8000368:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 800036c:	f080 8081 	bcs.w	8000472 <__udivmoddi4+0x29e>
 8000370:	4298      	cmp	r0, r3
 8000372:	d97e      	bls.n	8000472 <__udivmoddi4+0x29e>
 8000374:	f1a8 0802 	sub.w	r8, r8, #2
 8000378:	4463      	add	r3, ip
 800037a:	1a1e      	subs	r6, r3, r0
 800037c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000380:	fb09 6613 	mls	r6, r9, r3, r6
 8000384:	fb03 fe0e 	mul.w	lr, r3, lr
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x1d0>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800039a:	d266      	bcs.n	800046a <__udivmoddi4+0x296>
 800039c:	45a6      	cmp	lr, r4
 800039e:	d964      	bls.n	800046a <__udivmoddi4+0x296>
 80003a0:	3b02      	subs	r3, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003a8:	fba0 8302 	umull	r8, r3, r0, r2
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	429c      	cmp	r4, r3
 80003b2:	46c6      	mov	lr, r8
 80003b4:	461e      	mov	r6, r3
 80003b6:	d350      	bcc.n	800045a <__udivmoddi4+0x286>
 80003b8:	d04d      	beq.n	8000456 <__udivmoddi4+0x282>
 80003ba:	b155      	cbz	r5, 80003d2 <__udivmoddi4+0x1fe>
 80003bc:	ebba 030e 	subs.w	r3, sl, lr
 80003c0:	eb64 0406 	sbc.w	r4, r4, r6
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	40cb      	lsrs	r3, r1
 80003ca:	431f      	orrs	r7, r3
 80003cc:	40cc      	lsrs	r4, r1
 80003ce:	e9c5 7400 	strd	r7, r4, [r5]
 80003d2:	2100      	movs	r1, #0
 80003d4:	e751      	b.n	800027a <__udivmoddi4+0xa6>
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80003f0:	fb08 1110 	mls	r1, r8, r0, r1
 80003f4:	4094      	lsls	r4, r2
 80003f6:	431c      	orrs	r4, r3
 80003f8:	fa1f f78c 	uxth.w	r7, ip
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000402:	fb00 f107 	mul.w	r1, r0, r7
 8000406:	4299      	cmp	r1, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x248>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000412:	d22c      	bcs.n	800046e <__udivmoddi4+0x29a>
 8000414:	4299      	cmp	r1, r3
 8000416:	d92a      	bls.n	800046e <__udivmoddi4+0x29a>
 8000418:	3802      	subs	r0, #2
 800041a:	4463      	add	r3, ip
 800041c:	1a5b      	subs	r3, r3, r1
 800041e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000422:	fb08 3311 	mls	r3, r8, r1, r3
 8000426:	b2a4      	uxth	r4, r4
 8000428:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800042c:	fb01 f307 	mul.w	r3, r1, r7
 8000430:	42a3      	cmp	r3, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x272>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800043c:	d213      	bcs.n	8000466 <__udivmoddi4+0x292>
 800043e:	42a3      	cmp	r3, r4
 8000440:	d911      	bls.n	8000466 <__udivmoddi4+0x292>
 8000442:	3902      	subs	r1, #2
 8000444:	4464      	add	r4, ip
 8000446:	1ae4      	subs	r4, r4, r3
 8000448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800044c:	e73b      	b.n	80002c6 <__udivmoddi4+0xf2>
 800044e:	4604      	mov	r4, r0
 8000450:	e6f2      	b.n	8000238 <__udivmoddi4+0x64>
 8000452:	4608      	mov	r0, r1
 8000454:	e708      	b.n	8000268 <__udivmoddi4+0x94>
 8000456:	45c2      	cmp	sl, r8
 8000458:	d2af      	bcs.n	80003ba <__udivmoddi4+0x1e6>
 800045a:	ebb8 0e02 	subs.w	lr, r8, r2
 800045e:	eb63 060c 	sbc.w	r6, r3, ip
 8000462:	3801      	subs	r0, #1
 8000464:	e7a9      	b.n	80003ba <__udivmoddi4+0x1e6>
 8000466:	4631      	mov	r1, r6
 8000468:	e7ed      	b.n	8000446 <__udivmoddi4+0x272>
 800046a:	4603      	mov	r3, r0
 800046c:	e79a      	b.n	80003a4 <__udivmoddi4+0x1d0>
 800046e:	4630      	mov	r0, r6
 8000470:	e7d4      	b.n	800041c <__udivmoddi4+0x248>
 8000472:	46b0      	mov	r8, r6
 8000474:	e781      	b.n	800037a <__udivmoddi4+0x1a6>
 8000476:	4463      	add	r3, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e74f      	b.n	800031c <__udivmoddi4+0x148>
 800047c:	4606      	mov	r6, r0
 800047e:	4623      	mov	r3, r4
 8000480:	4608      	mov	r0, r1
 8000482:	e711      	b.n	80002a8 <__udivmoddi4+0xd4>
 8000484:	3e02      	subs	r6, #2
 8000486:	4463      	add	r3, ip
 8000488:	e732      	b.n	80002f0 <__udivmoddi4+0x11c>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4a06      	ldr	r2, [pc, #24]	@ (80004b8 <vApplicationGetIdleTaskMemory+0x28>)
 80004a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <vApplicationGetIdleTaskMemory+0x2c>)
 80004a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000094 	.word	0x20000094
 80004bc:	20000134 	.word	0x20000134

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc86 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f829 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8bd 	bl	800064c <MX_GPIO_Init>
  MX_DMA_Init();
 80004d2:	f000 f89d 	bl	8000610 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004d6:	f000 f871 	bl	80005bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	490c      	ldr	r1, [pc, #48]	@ (8000510 <main+0x50>)
 80004de:	480d      	ldr	r0, [pc, #52]	@ (8000514 <main+0x54>)
 80004e0:	f002 f9dc 	bl	800289c <HAL_UART_Receive_IT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 80004e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <main+0x58>)
 80004e6:	1d3c      	adds	r4, r7, #4
 80004e8:	461d      	mov	r5, r3
 80004ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f003 fa37 	bl	800396e <osThreadCreate>
 8000500:	4603      	mov	r3, r0
 8000502:	4a06      	ldr	r2, [pc, #24]	@ (800051c <main+0x5c>)
 8000504:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000506:	f003 fa1b 	bl	8003940 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800050a:	bf00      	nop
 800050c:	e7fd      	b.n	800050a <main+0x4a>
 800050e:	bf00      	nop
 8000510:	2000784e 	.word	0x2000784e
 8000514:	20000334 	.word	0x20000334
 8000518:	08013c00 	.word	0x08013c00
 800051c:	200003c0 	.word	0x200003c0

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b092      	sub	sp, #72	@ 0x48
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2234      	movs	r2, #52	@ 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f012 fc33 	bl	8012d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	463b      	mov	r3, r7
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000542:	4b1d      	ldr	r3, [pc, #116]	@ (80005b8 <SystemClock_Config+0x98>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800054a:	4a1b      	ldr	r2, [pc, #108]	@ (80005b8 <SystemClock_Config+0x98>)
 800054c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000550:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000566:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800056c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000570:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4618      	mov	r0, r3
 8000578:	f001 f91a 	bl	80017b0 <HAL_RCC_OscConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000582:	f000 f9ab 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	230f      	movs	r3, #15
 8000588:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058a:	2303      	movs	r3, #3
 800058c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800059a:	463b      	mov	r3, r7
 800059c:	2101      	movs	r1, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fc36 	bl	8001e10 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005aa:	f000 f997 	bl	80008dc <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3748      	adds	r7, #72	@ 0x48
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40007000 	.word	0x40007000

080005bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c2:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_USART1_UART_Init+0x50>)
 80005c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005da:	4b0b      	ldr	r3, [pc, #44]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005e0:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <MX_USART1_UART_Init+0x4c>)
 80005f4:	f002 f902 	bl	80027fc <HAL_UART_Init>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005fe:	f000 f96d 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000334 	.word	0x20000334
 800060c:	40013800 	.word	0x40013800

08000610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <MX_DMA_Init+0x38>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	4a0b      	ldr	r2, [pc, #44]	@ (8000648 <MX_DMA_Init+0x38>)
 800061c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000620:	61d3      	str	r3, [r2, #28]
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_DMA_Init+0x38>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	200e      	movs	r0, #14
 8000634:	f000 fcb9 	bl	8000faa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000638:	200e      	movs	r0, #14
 800063a:	f000 fcd2 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	@ 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a31      	ldr	r2, [pc, #196]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <MX_GPIO_Init+0xe0>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	4a2b      	ldr	r2, [pc, #172]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000680:	f043 0320 	orr.w	r3, r3, #32
 8000684:	61d3      	str	r3, [r2, #28]
 8000686:	4b29      	ldr	r3, [pc, #164]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	f003 0320 	and.w	r3, r3, #32
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b26      	ldr	r3, [pc, #152]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4a25      	ldr	r2, [pc, #148]	@ (800072c <MX_GPIO_Init+0xe0>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	61d3      	str	r3, [r2, #28]
 800069e:	4b23      	ldr	r3, [pc, #140]	@ (800072c <MX_GPIO_Init+0xe0>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <MX_GPIO_Init+0xe0>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	4a1f      	ldr	r2, [pc, #124]	@ (800072c <MX_GPIO_Init+0xe0>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	61d3      	str	r3, [r2, #28]
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <MX_GPIO_Init+0xe0>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	481a      	ldr	r0, [pc, #104]	@ (8000730 <MX_GPIO_Init+0xe4>)
 80006c8:	f001 f85a 	bl	8001780 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4619      	mov	r1, r3
 80006e2:	4814      	ldr	r0, [pc, #80]	@ (8000734 <MX_GPIO_Init+0xe8>)
 80006e4:	f000 febc 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006e8:	230c      	movs	r3, #12
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80006f8:	2307      	movs	r3, #7
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	480b      	ldr	r0, [pc, #44]	@ (8000730 <MX_GPIO_Init+0xe4>)
 8000704:	f000 feac 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	4619      	mov	r1, r3
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <MX_GPIO_Init+0xe4>)
 8000720:	f000 fe9e 	bl	8001460 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000724:	bf00      	nop
 8000726:	3728      	adds	r7, #40	@ 0x28
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020800 	.word	0x40020800

08000738 <udp_echoserver_init>:

/* USER CODE BEGIN 4 */
void udp_echoserver_init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;

   /* Create a new UDP control block  */
   upcb = udp_new();
 800073e:	f00f fcf7 	bl	8010130 <udp_new>
 8000742:	6078      	str	r0, [r7, #4]

   if (upcb)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d00f      	beq.n	800076a <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_CLIENT_PORT);
 800074a:	2207      	movs	r2, #7
 800074c:	4909      	ldr	r1, [pc, #36]	@ (8000774 <udp_echoserver_init+0x3c>)
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f00f fbb0 	bl	800feb4 <udp_bind>
 8000754:	4603      	mov	r3, r0
 8000756:	70fb      	strb	r3, [r7, #3]

      if(err == ERR_OK)
 8000758:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d104      	bne.n	800076a <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000760:	2200      	movs	r2, #0
 8000762:	4905      	ldr	r1, [pc, #20]	@ (8000778 <udp_echoserver_init+0x40>)
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f00f fcc3 	bl	80100f0 <udp_recv>
      }
   }
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	080178b8 	.word	0x080178b8
 8000778:	0800077d 	.word	0x0800077d

0800077c <udp_echoserver_receive_callback>:

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 800078a:	2207      	movs	r2, #7
 800078c:	6839      	ldr	r1, [r7, #0]
 800078e:	68b8      	ldr	r0, [r7, #8]
 8000790:	f00f fc18 	bl	800ffc4 <udp_connect>

  /* Tell the client that we have accepted it */
  udp_sendto(upcb, p, addr, port);
 8000794:	8b3b      	ldrh	r3, [r7, #24]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	6879      	ldr	r1, [r7, #4]
 800079a:	68b8      	ldr	r0, [r7, #8]
 800079c:	f00f f9ba 	bl	800fb14 <udp_sendto>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 80007a0:	68b8      	ldr	r0, [r7, #8]
 80007a2:	f00f fc7d 	bl	80100a0 <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f008 fb88 	bl	8008ebc <pbuf_free>

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <tcp_echoserver_init>:

void tcp_echoserver_init(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
    struct tcp_pcb *pcb;

    pcb = tcp_new();
 80007ba:	f00a f9a1 	bl	800ab00 <tcp_new>
 80007be:	6078      	str	r0, [r7, #4]
    if (pcb == NULL) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d011      	beq.n	80007ea <tcp_echoserver_init+0x36>
        return;
    }

    if (tcp_bind(pcb, IP_ADDR_ANY, TCP_CLIENT_PORT) != ERR_OK) {
 80007c6:	2208      	movs	r2, #8
 80007c8:	490b      	ldr	r1, [pc, #44]	@ (80007f8 <tcp_echoserver_init+0x44>)
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f009 f8f2 	bl	80099b4 <tcp_bind>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d10b      	bne.n	80007ee <tcp_echoserver_init+0x3a>
        return;
    }

    pcb = tcp_listen(pcb);
 80007d6:	21ff      	movs	r1, #255	@ 0xff
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f009 f9a3 	bl	8009b24 <tcp_listen_with_backlog>
 80007de:	6078      	str	r0, [r7, #4]

    tcp_accept(pcb, tcp_echo_accept);
 80007e0:	4906      	ldr	r1, [pc, #24]	@ (80007fc <tcp_echoserver_init+0x48>)
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f00a fa18 	bl	800ac18 <tcp_accept>
 80007e8:	e002      	b.n	80007f0 <tcp_echoserver_init+0x3c>
        return;
 80007ea:	bf00      	nop
 80007ec:	e000      	b.n	80007f0 <tcp_echoserver_init+0x3c>
        return;
 80007ee:	bf00      	nop
}
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	080178b8 	.word	0x080178b8
 80007fc:	08000801 	.word	0x08000801

08000800 <tcp_echo_accept>:

err_t tcp_echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	4613      	mov	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]
    tcp_recv(newpcb, tcp_echo_recv);
 800080e:	4904      	ldr	r1, [pc, #16]	@ (8000820 <tcp_echo_accept+0x20>)
 8000810:	68b8      	ldr	r0, [r7, #8]
 8000812:	f00a f99b 	bl	800ab4c <tcp_recv>
    return ERR_OK;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	0800085b 	.word	0x0800085b

08000824 <tcp_echo_close>:

void tcp_echo_close(struct tcp_pcb *tpcb) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
    tcp_arg(tpcb, NULL);
 800082c:	2100      	movs	r1, #0
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f00a f97c 	bl	800ab2c <tcp_arg>
    tcp_sent(tpcb, NULL);
 8000834:	2100      	movs	r1, #0
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f00a f9aa 	bl	800ab90 <tcp_sent>
    tcp_recv(tpcb, NULL);
 800083c:	2100      	movs	r1, #0
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f00a f984 	bl	800ab4c <tcp_recv>
    tcp_err(tpcb, NULL);
 8000844:	2100      	movs	r1, #0
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f00a f9c4 	bl	800abd4 <tcp_err>
    tcp_close(tpcb);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f008 ffbb 	bl	80097c8 <tcp_close>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <tcp_echo_recv>:

err_t tcp_echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	60f8      	str	r0, [r7, #12]
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d104      	bne.n	8000878 <tcp_echo_recv+0x1e>
        tcp_echo_close(tpcb);
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	f7ff ffd8 	bl	8000824 <tcp_echo_close>
        return ERR_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	e00b      	b.n	8000890 <tcp_echo_recv+0x36>
    }

    // Gelen veriyi geri gönder (Echo)
    tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6859      	ldr	r1, [r3, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	895a      	ldrh	r2, [r3, #10]
 8000880:	2301      	movs	r3, #1
 8000882:	68b8      	ldr	r0, [r7, #8]
 8000884:	f00d f888 	bl	800d998 <tcp_write>

    // Belleği temizle
    pbuf_free(p);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f008 fb17 	bl	8008ebc <pbuf_free>

    return ERR_OK;
 800088e:	2300      	movs	r3, #0
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_LWIP_Init();
 80008a0:	f002 feee 	bl	8003680 <MX_LWIP_Init>
	udp_echoserver_init();
 80008a4:	f7ff ff48 	bl	8000738 <udp_echoserver_init>
	tcp_echoserver_init();
 80008a8:	f7ff ff84 	bl	80007b4 <tcp_echoserver_init>
	httpd_init();
 80008ac:	f006 fe04 	bl	80074b8 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f003 f8a8 	bl	8003a06 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <StartDefaultTask+0x18>

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 fa9d 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40001000 	.word	0x40001000

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80008ee:	4b17      	ldr	r3, [pc, #92]	@ (800094c <HAL_MspInit+0x64>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008f2:	4a16      	ldr	r2, [pc, #88]	@ (800094c <HAL_MspInit+0x64>)
 80008f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008f8:	6253      	str	r3, [r2, #36]	@ 0x24
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_MspInit+0x64>)
 80008fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_MspInit+0x64>)
 8000908:	6a1b      	ldr	r3, [r3, #32]
 800090a:	4a10      	ldr	r2, [pc, #64]	@ (800094c <HAL_MspInit+0x64>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6213      	str	r3, [r2, #32]
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_MspInit+0x64>)
 8000914:	6a1b      	ldr	r3, [r3, #32]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60bb      	str	r3, [r7, #8]
 800091c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_MspInit+0x64>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	4a0a      	ldr	r2, [pc, #40]	@ (800094c <HAL_MspInit+0x64>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6253      	str	r3, [r2, #36]	@ 0x24
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <HAL_MspInit+0x64>)
 800092c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 fb34 	bl	8000faa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a28 <HAL_UART_MspInit+0xd8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d156      	bne.n	8000a20 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000972:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	4a2d      	ldr	r2, [pc, #180]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097c:	6213      	str	r3, [r2, #32]
 800097e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 8000980:	6a1b      	ldr	r3, [r3, #32]
 8000982:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a27      	ldr	r2, [pc, #156]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 8000990:	f043 0301 	orr.w	r3, r3, #1
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <HAL_UART_MspInit+0xdc>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009a2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009b4:	2307      	movs	r3, #7
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	4619      	mov	r1, r3
 80009be:	481c      	ldr	r0, [pc, #112]	@ (8000a30 <HAL_UART_MspInit+0xe0>)
 80009c0:	f000 fd4e 	bl	8001460 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a38 <HAL_UART_MspInit+0xe8>)
 80009c8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009cc:	2210      	movs	r2, #16
 80009ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d0:	4b18      	ldr	r3, [pc, #96]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009d6:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009d8:	2280      	movs	r2, #128	@ 0x80
 80009da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80009f4:	480f      	ldr	r0, [pc, #60]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 80009f6:	f000 fb03 	bl	8001000 <HAL_DMA_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000a00:	f7ff ff6c 	bl	80008dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 8000a08:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <HAL_UART_MspInit+0xe4>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2100      	movs	r1, #0
 8000a14:	2025      	movs	r0, #37	@ 0x25
 8000a16:	f000 fac8 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a1a:	2025      	movs	r0, #37	@ 0x25
 8000a1c:	f000 fae1 	bl	8000fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	@ 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40013800 	.word	0x40013800
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40020000 	.word	0x40020000
 8000a34:	2000037c 	.word	0x2000037c
 8000a38:	40026044 	.word	0x40026044

08000a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08e      	sub	sp, #56	@ 0x38
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <HAL_InitTick+0xe0>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a56:	4a31      	ldr	r2, [pc, #196]	@ (8000b1c <HAL_InitTick+0xe0>)
 8000a58:	f043 0310 	orr.w	r3, r3, #16
 8000a5c:	6253      	str	r3, [r2, #36]	@ 0x24
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <HAL_InitTick+0xe0>)
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a6a:	f107 0210 	add.w	r2, r7, #16
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f001 fc31 	bl	80022dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a84:	f001 fc02 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8000a88:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a8a:	e004      	b.n	8000a96 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a8c:	f001 fbfe 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a98:	4a21      	ldr	r2, [pc, #132]	@ (8000b20 <HAL_InitTick+0xe4>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000aa6:	4a20      	ldr	r2, [pc, #128]	@ (8000b28 <HAL_InitTick+0xec>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000aac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ab6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ac4:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000ac6:	f001 fc99 	bl	80023fc <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11b      	bne.n	8000b10 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ad8:	4812      	ldr	r0, [pc, #72]	@ (8000b24 <HAL_InitTick+0xe8>)
 8000ada:	f001 fcd7 	bl	800248c <HAL_TIM_Base_Start_IT>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ae4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d111      	bne.n	8000b10 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000aec:	202b      	movs	r0, #43	@ 0x2b
 8000aee:	f000 fa78 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b0f      	cmp	r3, #15
 8000af6:	d808      	bhi.n	8000b0a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000af8:	2200      	movs	r2, #0
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	202b      	movs	r0, #43	@ 0x2b
 8000afe:	f000 fa54 	bl	8000faa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <HAL_InitTick+0xf0>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e002      	b.n	8000b10 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3738      	adds	r7, #56	@ 0x38
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	200003c4 	.word	0x200003c4
 8000b28:	40001000 	.word	0x40001000
 8000b2c:	20000004 	.word	0x20000004

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <NMI_Handler+0x4>

08000b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  __asm volatile
 8000b3c:	f01e 0f04 	tst.w	lr, #4
 8000b40:	bf0c      	ite	eq
 8000b42:	f3ef 8008 	mrseq	r0, MSP
 8000b46:	f3ef 8009 	mrsne	r0, PSP
 8000b4a:	f000 b804 	b.w	8000b56 <HardFault_HandlerC>
    "ITE EQ           \n"
    "MRSEQ R0, MSP    \n"
    "MRSNE R0, PSP    \n"
    "B HardFault_HandlerC \n"
  );
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <HardFault_HandlerC>:

void HardFault_HandlerC(uint32_t *fault_stack_address)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b08b      	sub	sp, #44	@ 0x2c
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  volatile uint32_t r0  = fault_stack_address[0];
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	627b      	str	r3, [r7, #36]	@ 0x24
  volatile uint32_t r1  = fault_stack_address[1];
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	623b      	str	r3, [r7, #32]
  volatile uint32_t r2  = fault_stack_address[2];
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	61fb      	str	r3, [r7, #28]
  volatile uint32_t r3  = fault_stack_address[3];
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	61bb      	str	r3, [r7, #24]
  volatile uint32_t r12 = fault_stack_address[4];
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	691b      	ldr	r3, [r3, #16]
 8000b7a:	617b      	str	r3, [r7, #20]
  volatile uint32_t lr  = fault_stack_address[5];
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	695b      	ldr	r3, [r3, #20]
 8000b80:	613b      	str	r3, [r7, #16]
  volatile uint32_t pc  = fault_stack_address[6]; // <== Hatanın oluştuğu adres!
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	60fb      	str	r3, [r7, #12]
  volatile uint32_t psr = fault_stack_address[7];
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	60bb      	str	r3, [r7, #8]

  // Sonsuz döngüde durdur (burada debug yapabilirsin)
  while (1);
 8000b8e:	bf00      	nop
 8000b90:	e7fd      	b.n	8000b8e <HardFault_HandlerC+0x38>

08000b92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b96:	bf00      	nop
 8000b98:	e7fd      	b.n	8000b96 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba6:	bf00      	nop
 8000ba8:	e7fd      	b.n	8000ba6 <UsageFault_Handler+0x4>

08000baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000bbc:	4802      	ldr	r0, [pc, #8]	@ (8000bc8 <DMA1_Channel4_IRQHandler+0x10>)
 8000bbe:	f000 fb71 	bl	80012a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000037c 	.word	0x2000037c

08000bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <USART1_IRQHandler+0x10>)
 8000bd2:	f001 ff05 	bl	80029e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000334 	.word	0x20000334

08000be0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <TIM6_IRQHandler+0x10>)
 8000be6:	f001 fca3 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200003c4 	.word	0x200003c4

08000bf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return 1;
 8000bf8:	2301      	movs	r3, #1
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
	...

08000c04 <_kill>:

int _kill(int pid, int sig)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <_kill+0x20>)
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
  return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000835c 	.word	0x2000835c

08000c28 <_exit>:

void _exit (int status)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ffe5 	bl	8000c04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c3a:	bf00      	nop
 8000c3c:	e7fd      	b.n	8000c3a <_exit+0x12>

08000c3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e00a      	b.n	8000c66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c50:	f3af 8000 	nop.w
 8000c54:	4601      	mov	r1, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	60ba      	str	r2, [r7, #8]
 8000c5c:	b2ca      	uxtb	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	3301      	adds	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	dbf0      	blt.n	8000c50 <_read+0x12>
  }

  return len;
 8000c6e:	687b      	ldr	r3, [r7, #4]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	e009      	b.n	8000c9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60ba      	str	r2, [r7, #8]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	dbf1      	blt.n	8000c8a <_write+0x12>
  }
  return len;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <_close>:

int _close(int file)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <_isatty>:

int _isatty(int file)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	60f8      	str	r0, [r7, #12]
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	@ (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	@ (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	@ (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	@ (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d205      	bcs.n	8000d4c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <_sbrk+0x6c>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d52:	4b08      	ldr	r3, [pc, #32]	@ (8000d74 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a06      	ldr	r2, [pc, #24]	@ (8000d74 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	371c      	adds	r7, #28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20014000 	.word	0x20014000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000404 	.word	0x20000404
 8000d78:	20008370 	.word	0x20008370
 8000d7c:	2000835c 	.word	0x2000835c

08000d80 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d8c:	f7ff fff8 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d92:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d94:	4a0c      	ldr	r2, [pc, #48]	@ (8000dc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a09      	ldr	r2, [pc, #36]	@ (8000dcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000da8:	4c09      	ldr	r4, [pc, #36]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f012 f8b3 	bl	8012f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dba:	f7ff fb81 	bl	80004c0 <main>
  bx lr
 8000dbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000dc8:	080179c4 	.word	0x080179c4
  ldr r2, =_sbss
 8000dcc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000dd0:	2000836c 	.word	0x2000836c

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>

08000dd6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f8d7 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	200f      	movs	r0, #15
 8000de8:	f7ff fe28 	bl	8000a3c <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff fd76 	bl	80008e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b05      	ldr	r3, [pc, #20]	@ (8000e28 <HAL_IncTick+0x20>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a03      	ldr	r2, [pc, #12]	@ (8000e24 <HAL_IncTick+0x1c>)
 8000e18:	6013      	str	r3, [r2, #0]
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000408 	.word	0x20000408
 8000e28:	20000008 	.word	0x20000008

08000e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e30:	4b02      	ldr	r3, [pc, #8]	@ (8000e3c <HAL_GetTick+0x10>)
 8000e32:	681b      	ldr	r3, [r3, #0]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000408 	.word	0x20000408

08000e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e72:	4a04      	ldr	r2, [pc, #16]	@ (8000e84 <__NVIC_SetPriorityGrouping+0x44>)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	60d3      	str	r3, [r2, #12]
}
 8000e78:	bf00      	nop
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	0a1b      	lsrs	r3, r3, #8
 8000e92:	f003 0307 	and.w	r3, r3, #7
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	db0b      	blt.n	8000ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	f003 021f 	and.w	r2, r3, #31
 8000ebc:	4906      	ldr	r1, [pc, #24]	@ (8000ed8 <__NVIC_EnableIRQ+0x34>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	095b      	lsrs	r3, r3, #5
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	@ (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	@ (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	@ 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	@ 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff4f 	bl	8000e40 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff64 	bl	8000e88 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ffb2 	bl	8000f30 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff81 	bl	8000edc <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff57 	bl	8000ea4 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e059      	b.n	80010c6 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b2d      	ldr	r3, [pc, #180]	@ (80010d0 <HAL_DMA_Init+0xd0>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d80f      	bhi.n	800103e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_DMA_Init+0xd4>)
 8001026:	4413      	add	r3, r2
 8001028:	4a2b      	ldr	r2, [pc, #172]	@ (80010d8 <HAL_DMA_Init+0xd8>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	091b      	lsrs	r3, r3, #4
 8001030:	009a      	lsls	r2, r3, #2
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a28      	ldr	r2, [pc, #160]	@ (80010dc <HAL_DMA_Init+0xdc>)
 800103a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800103c:	e00e      	b.n	800105c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <HAL_DMA_Init+0xe0>)
 8001046:	4413      	add	r3, r2
 8001048:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_DMA_Init+0xd8>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	091b      	lsrs	r3, r3, #4
 8001050:	009a      	lsls	r2, r3, #2
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <HAL_DMA_Init+0xe4>)
 800105a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2202      	movs	r2, #2
 8001060:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001076:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001098:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40026407 	.word	0x40026407
 80010d4:	bffd9ff8 	.word	0xbffd9ff8
 80010d8:	cccccccd 	.word	0xcccccccd
 80010dc:	40026000 	.word	0x40026000
 80010e0:	bffd9bf8 	.word	0xbffd9bf8
 80010e4:	40026400 	.word	0x40026400

080010e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Start_IT+0x20>
 8001104:	2302      	movs	r3, #2
 8001106:	e04b      	b.n	80011a0 <HAL_DMA_Start_IT+0xb8>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d13a      	bne.n	8001192 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2202      	movs	r2, #2
 8001120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	687a      	ldr	r2, [r7, #4]
 800113e:	68b9      	ldr	r1, [r7, #8]
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f000 f95e 	bl	8001402 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114a:	2b00      	cmp	r3, #0
 800114c:	d008      	beq.n	8001160 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 020e 	orr.w	r2, r2, #14
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e00f      	b.n	8001180 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0204 	bic.w	r2, r2, #4
 800116e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f042 020a 	orr.w	r2, r2, #10
 800117e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e005      	b.n	800119e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800119a:	2302      	movs	r3, #2
 800119c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800119e:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d008      	beq.n	80011d2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2204      	movs	r2, #4
 80011c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e022      	b.n	8001218 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 020e 	bic.w	r2, r2, #14
 80011e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 021c 	and.w	r2, r3, #28
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f202 	lsl.w	r2, r1, r2
 8001204:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr

08001222 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d005      	beq.n	8001246 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2204      	movs	r2, #4
 800123e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e029      	b.n	800129a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 020e 	bic.w	r2, r2, #14
 8001254:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 021c 	and.w	r2, r3, #28
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	4798      	blx	r3
    }
  }
  return status;
 800129a:	7bfb      	ldrb	r3, [r7, #15]
}
 800129c:	4618      	mov	r0, r3
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f003 031c 	and.w	r3, r3, #28
 80012c4:	2204      	movs	r2, #4
 80012c6:	409a      	lsls	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d026      	beq.n	800131e <HAL_DMA_IRQHandler+0x7a>
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d021      	beq.n	800131e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0320 	and.w	r3, r3, #32
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d107      	bne.n	80012f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0204 	bic.w	r2, r2, #4
 80012f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	f003 021c 	and.w	r2, r3, #28
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001304:	2104      	movs	r1, #4
 8001306:	fa01 f202 	lsl.w	r2, r1, r2
 800130a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d071      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800131c:	e06c      	b.n	80013f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	f003 031c 	and.w	r3, r3, #28
 8001326:	2202      	movs	r2, #2
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d02e      	beq.n	8001390 <HAL_DMA_IRQHandler+0xec>
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d029      	beq.n	8001390 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10b      	bne.n	8001362 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 020a 	bic.w	r2, r2, #10
 8001358:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001366:	f003 021c 	and.w	r2, r3, #28
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800136e:	2102      	movs	r1, #2
 8001370:	fa01 f202 	lsl.w	r2, r1, r2
 8001374:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001382:	2b00      	cmp	r3, #0
 8001384:	d038      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800138e:	e033      	b.n	80013f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f003 031c 	and.w	r3, r3, #28
 8001398:	2208      	movs	r2, #8
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d02a      	beq.n	80013fa <HAL_DMA_IRQHandler+0x156>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d025      	beq.n	80013fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	f003 021c 	and.w	r2, r3, #28
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ca:	2101      	movs	r1, #1
 80013cc:	fa01 f202 	lsl.w	r2, r1, r2
 80013d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2201      	movs	r2, #1
 80013dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d004      	beq.n	80013fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
}
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f003 021c 	and.w	r2, r3, #28
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800141c:	2101      	movs	r1, #1
 800141e:	fa01 f202 	lsl.w	r2, r1, r2
 8001422:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b10      	cmp	r3, #16
 8001432:	d108      	bne.n	8001446 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001444:	e007      	b.n	8001456 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	60da      	str	r2, [r3, #12]
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001476:	e160      	b.n	800173a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2101      	movs	r1, #1
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	fa01 f303 	lsl.w	r3, r1, r3
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8152 	beq.w	8001734 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d130      	bne.n	800150a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2203      	movs	r2, #3
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	68da      	ldr	r2, [r3, #12]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014de:	2201      	movs	r2, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	f003 0201 	and.w	r2, r3, #1
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b03      	cmp	r3, #3
 8001514:	d017      	beq.n	8001546 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d123      	bne.n	800159a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	220f      	movs	r2, #15
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	691a      	ldr	r2, [r3, #16]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	08da      	lsrs	r2, r3, #3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3208      	adds	r2, #8
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0203 	and.w	r2, r3, #3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 80ac 	beq.w	8001734 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015dc:	4b5e      	ldr	r3, [pc, #376]	@ (8001758 <HAL_GPIO_Init+0x2f8>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a5d      	ldr	r2, [pc, #372]	@ (8001758 <HAL_GPIO_Init+0x2f8>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b5b      	ldr	r3, [pc, #364]	@ (8001758 <HAL_GPIO_Init+0x2f8>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80015f4:	4a59      	ldr	r2, [pc, #356]	@ (800175c <HAL_GPIO_Init+0x2fc>)
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	089b      	lsrs	r3, r3, #2
 80015fa:	3302      	adds	r3, #2
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	220f      	movs	r2, #15
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a51      	ldr	r2, [pc, #324]	@ (8001760 <HAL_GPIO_Init+0x300>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d025      	beq.n	800166c <HAL_GPIO_Init+0x20c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a50      	ldr	r2, [pc, #320]	@ (8001764 <HAL_GPIO_Init+0x304>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d01f      	beq.n	8001668 <HAL_GPIO_Init+0x208>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a4f      	ldr	r2, [pc, #316]	@ (8001768 <HAL_GPIO_Init+0x308>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d019      	beq.n	8001664 <HAL_GPIO_Init+0x204>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a4e      	ldr	r2, [pc, #312]	@ (800176c <HAL_GPIO_Init+0x30c>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d013      	beq.n	8001660 <HAL_GPIO_Init+0x200>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a4d      	ldr	r2, [pc, #308]	@ (8001770 <HAL_GPIO_Init+0x310>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d00d      	beq.n	800165c <HAL_GPIO_Init+0x1fc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a4c      	ldr	r2, [pc, #304]	@ (8001774 <HAL_GPIO_Init+0x314>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d007      	beq.n	8001658 <HAL_GPIO_Init+0x1f8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a4b      	ldr	r2, [pc, #300]	@ (8001778 <HAL_GPIO_Init+0x318>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d101      	bne.n	8001654 <HAL_GPIO_Init+0x1f4>
 8001650:	2306      	movs	r3, #6
 8001652:	e00c      	b.n	800166e <HAL_GPIO_Init+0x20e>
 8001654:	2307      	movs	r3, #7
 8001656:	e00a      	b.n	800166e <HAL_GPIO_Init+0x20e>
 8001658:	2305      	movs	r3, #5
 800165a:	e008      	b.n	800166e <HAL_GPIO_Init+0x20e>
 800165c:	2304      	movs	r3, #4
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x20e>
 8001660:	2303      	movs	r3, #3
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x20e>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x20e>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x20e>
 800166c:	2300      	movs	r3, #0
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800167e:	4937      	ldr	r1, [pc, #220]	@ (800175c <HAL_GPIO_Init+0x2fc>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168c:	4b3b      	ldr	r3, [pc, #236]	@ (800177c <HAL_GPIO_Init+0x31c>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016b0:	4a32      	ldr	r2, [pc, #200]	@ (800177c <HAL_GPIO_Init+0x31c>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016b6:	4b31      	ldr	r3, [pc, #196]	@ (800177c <HAL_GPIO_Init+0x31c>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016da:	4a28      	ldr	r2, [pc, #160]	@ (800177c <HAL_GPIO_Init+0x31c>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <HAL_GPIO_Init+0x31c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001704:	4a1d      	ldr	r2, [pc, #116]	@ (800177c <HAL_GPIO_Init+0x31c>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <HAL_GPIO_Init+0x31c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800172e:	4a13      	ldr	r2, [pc, #76]	@ (800177c <HAL_GPIO_Init+0x31c>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f ae97 	bne.w	8001478 <HAL_GPIO_Init+0x18>
  }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40010000 	.word	0x40010000
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40021400 	.word	0x40021400
 8001778:	40021800 	.word	0x40021800
 800177c:	40010400 	.word	0x40010400

08001780 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	460b      	mov	r3, r1
 800178a:	807b      	strh	r3, [r7, #2]
 800178c:	4613      	mov	r3, r2
 800178e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001790:	787b      	ldrb	r3, [r7, #1]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001796:	887a      	ldrh	r2, [r7, #2]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800179c:	e003      	b.n	80017a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800179e:	887b      	ldrh	r3, [r7, #2]
 80017a0:	041a      	lsls	r2, r3, #16
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	619a      	str	r2, [r3, #24]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b088      	sub	sp, #32
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e31d      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b94      	ldr	r3, [pc, #592]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017cc:	4b91      	ldr	r3, [pc, #580]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d07b      	beq.n	80018da <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d006      	beq.n	80017f6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b0c      	cmp	r3, #12
 80017ec:	d10f      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f4:	d10b      	bne.n	800180e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f6:	4b87      	ldr	r3, [pc, #540]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d06a      	beq.n	80018d8 <HAL_RCC_OscConfig+0x128>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d166      	bne.n	80018d8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e2f7      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d106      	bne.n	8001824 <HAL_RCC_OscConfig+0x74>
 8001816:	4b7f      	ldr	r3, [pc, #508]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e02d      	b.n	8001880 <HAL_RCC_OscConfig+0xd0>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x96>
 800182c:	4b79      	ldr	r3, [pc, #484]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a78      	ldr	r2, [pc, #480]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b76      	ldr	r3, [pc, #472]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a75      	ldr	r2, [pc, #468]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800183e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	e01c      	b.n	8001880 <HAL_RCC_OscConfig+0xd0>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b05      	cmp	r3, #5
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0xb8>
 800184e:	4b71      	ldr	r3, [pc, #452]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a70      	ldr	r2, [pc, #448]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	4b6e      	ldr	r3, [pc, #440]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a6d      	ldr	r2, [pc, #436]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e00b      	b.n	8001880 <HAL_RCC_OscConfig+0xd0>
 8001868:	4b6a      	ldr	r3, [pc, #424]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a69      	ldr	r2, [pc, #420]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800186e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b67      	ldr	r3, [pc, #412]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a66      	ldr	r2, [pc, #408]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800187a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001888:	f7ff fad0 	bl	8000e2c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001890:	f7ff facc 	bl	8000e2c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b64      	cmp	r3, #100	@ 0x64
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e2ad      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0xe0>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fabc 	bl	8000e2c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fab8 	bl	8000e2c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e299      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ca:	4b52      	ldr	r3, [pc, #328]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x108>
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d05a      	beq.n	800199c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_OscConfig+0x176>
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d116      	bne.n	8001926 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f8:	4b46      	ldr	r3, [pc, #280]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x160>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d001      	beq.n	8001910 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e276      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b40      	ldr	r3, [pc, #256]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	493d      	ldr	r1, [pc, #244]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001924:	e03a      	b.n	800199c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d020      	beq.n	8001970 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800192e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001934:	f7ff fa7a 	bl	8000e2c <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193c:	f7ff fa76 	bl	8000e2c <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e257      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	492a      	ldr	r1, [pc, #168]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e015      	b.n	800199c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001970:	4b29      	ldr	r3, [pc, #164]	@ (8001a18 <HAL_RCC_OscConfig+0x268>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fa59 	bl	8000e2c <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fa55 	bl	8000e2c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e236      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1f0      	bne.n	800197e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80b8 	beq.w	8001b1a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d170      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019b0:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_OscConfig+0x218>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e21a      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1a      	ldr	r2, [r3, #32]
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d921      	bls.n	8001a1c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fcad 	bl	800233c <RCC_SetFlashLatencyFromMSIRange>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e208      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4906      	ldr	r1, [pc, #24]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	4901      	ldr	r1, [pc, #4]	@ (8001a14 <HAL_RCC_OscConfig+0x264>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
 8001a12:	e020      	b.n	8001a56 <HAL_RCC_OscConfig+0x2a6>
 8001a14:	40023800 	.word	0x40023800
 8001a18:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a1c:	4b99      	ldr	r3, [pc, #612]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4996      	ldr	r1, [pc, #600]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a2e:	4b95      	ldr	r3, [pc, #596]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	061b      	lsls	r3, r3, #24
 8001a3c:	4991      	ldr	r1, [pc, #580]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fc78 	bl	800233c <RCC_SetFlashLatencyFromMSIRange>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e1d3      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	0b5b      	lsrs	r3, r3, #13
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a66:	4a87      	ldr	r2, [pc, #540]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001a68:	6892      	ldr	r2, [r2, #8]
 8001a6a:	0912      	lsrs	r2, r2, #4
 8001a6c:	f002 020f 	and.w	r2, r2, #15
 8001a70:	4985      	ldr	r1, [pc, #532]	@ (8001c88 <HAL_RCC_OscConfig+0x4d8>)
 8001a72:	5c8a      	ldrb	r2, [r1, r2]
 8001a74:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a76:	4a85      	ldr	r2, [pc, #532]	@ (8001c8c <HAL_RCC_OscConfig+0x4dc>)
 8001a78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a7a:	4b85      	ldr	r3, [pc, #532]	@ (8001c90 <HAL_RCC_OscConfig+0x4e0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe ffdc 	bl	8000a3c <HAL_InitTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d045      	beq.n	8001b1a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	e1b5      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d029      	beq.n	8001aee <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a9a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff f9c4 	bl	8000e2c <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f9c0 	bl	8000e2c <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1a1      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aba:	4b72      	ldr	r3, [pc, #456]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac6:	4b6f      	ldr	r3, [pc, #444]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	496c      	ldr	r1, [pc, #432]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4967      	ldr	r1, [pc, #412]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aee:	4b69      	ldr	r3, [pc, #420]	@ (8001c94 <HAL_RCC_OscConfig+0x4e4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff f99a 	bl	8000e2c <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afc:	f7ff f996 	bl	8000e2c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e177      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b0e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d030      	beq.n	8001b88 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d016      	beq.n	8001b5c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff f97a 	bl	8000e2c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f976 	bl	8000e2c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e157      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x38c>
 8001b5a:	e015      	b.n	8001b88 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c98 <HAL_RCC_OscConfig+0x4e8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f963 	bl	8000e2c <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff f95f 	bl	8000e2c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e140      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b7c:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80b5 	beq.w	8001d00 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	4a36      	ldr	r2, [pc, #216]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bb2:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b36      	ldr	r3, [pc, #216]	@ (8001c9c <HAL_RCC_OscConfig+0x4ec>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d118      	bne.n	8001c00 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b33      	ldr	r3, [pc, #204]	@ (8001c9c <HAL_RCC_OscConfig+0x4ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a32      	ldr	r2, [pc, #200]	@ (8001c9c <HAL_RCC_OscConfig+0x4ec>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff f927 	bl	8000e2c <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be2:	f7ff f923 	bl	8000e2c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b64      	cmp	r3, #100	@ 0x64
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e104      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf4:	4b29      	ldr	r3, [pc, #164]	@ (8001c9c <HAL_RCC_OscConfig+0x4ec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x466>
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c12:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_OscConfig+0x4c2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x488>
 8001c1e:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c22:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c28:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2e:	4a15      	ldr	r2, [pc, #84]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c34:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c36:	e01c      	b.n	8001c72 <HAL_RCC_OscConfig+0x4c2>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	d10c      	bne.n	8001c5a <HAL_RCC_OscConfig+0x4aa>
 8001c40:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c44:	4a0f      	ldr	r2, [pc, #60]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	4a0c      	ldr	r2, [pc, #48]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c58:	e00b      	b.n	8001c72 <HAL_RCC_OscConfig+0x4c2>
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5e:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c64:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c66:	4b07      	ldr	r3, [pc, #28]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c6a:	4a06      	ldr	r2, [pc, #24]	@ (8001c84 <HAL_RCC_OscConfig+0x4d4>)
 8001c6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c70:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d024      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f8d7 	bl	8000e2c <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c80:	e019      	b.n	8001cb6 <HAL_RCC_OscConfig+0x506>
 8001c82:	bf00      	nop
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08016994 	.word	0x08016994
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004
 8001c94:	42470020 	.word	0x42470020
 8001c98:	42470680 	.word	0x42470680
 8001c9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca0:	f7ff f8c4 	bl	8000e2c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e0a3      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cb6:	4b54      	ldr	r3, [pc, #336]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ee      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4f0>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc4:	f7ff f8b2 	bl	8000e2c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cca:	e00a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ccc:	f7ff f8ae 	bl	8000e2c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e08d      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ce2:	4b49      	ldr	r3, [pc, #292]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001ce4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ee      	bne.n	8001ccc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf4:	4b44      	ldr	r3, [pc, #272]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf8:	4a43      	ldr	r2, [pc, #268]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001cfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d079      	beq.n	8001dfc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d056      	beq.n	8001dbc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d13b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b3d      	ldr	r3, [pc, #244]	@ (8001e0c <HAL_RCC_OscConfig+0x65c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f886 	bl	8000e2c <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f882 	bl	8000e2c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e063      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d36:	4b34      	ldr	r3, [pc, #208]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d42:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d52:	4319      	orrs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	492b      	ldr	r1, [pc, #172]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d60:	4b2a      	ldr	r3, [pc, #168]	@ (8001e0c <HAL_RCC_OscConfig+0x65c>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d66:	f7ff f861 	bl	8000e2c <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6e:	f7ff f85d 	bl	8000e2c <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e03e      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x5be>
 8001d8c:	e036      	b.n	8001dfc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e0c <HAL_RCC_OscConfig+0x65c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff f84a 	bl	8000e2c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9c:	f7ff f846 	bl	8000e2c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e027      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5ec>
 8001dba:	e01f      	b.n	8001dfc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e01a      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <HAL_RCC_OscConfig+0x658>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d106      	bne.n	8001df8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e000      	b.n	8001dfe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3720      	adds	r7, #32
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	42470060 	.word	0x42470060

08001e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e11a      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b8f      	ldr	r3, [pc, #572]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d919      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x34>
 8001e38:	4b8a      	ldr	r3, [pc, #552]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a89      	ldr	r2, [pc, #548]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b87      	ldr	r3, [pc, #540]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0201 	bic.w	r2, r3, #1
 8001e4c:	4985      	ldr	r1, [pc, #532]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e54:	4b83      	ldr	r3, [pc, #524]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d001      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0f9      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	4b7d      	ldr	r3, [pc, #500]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	497a      	ldr	r1, [pc, #488]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 808e 	beq.w	8001fae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e9a:	4b73      	ldr	r3, [pc, #460]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d121      	bne.n	8001eea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0d7      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d107      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d115      	bne.n	8001eea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0cb      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eca:	4b67      	ldr	r3, [pc, #412]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0bf      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eda:	4b63      	ldr	r3, [pc, #396]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e0b7      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eea:	4b5f      	ldr	r3, [pc, #380]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f023 0203 	bic.w	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	495c      	ldr	r1, [pc, #368]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001efc:	f7fe ff96 	bl	8000e2c <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d112      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe ff8e 	bl	8000e2c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e09b      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f22:	4b51      	ldr	r3, [pc, #324]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_RCC_ClockConfig+0xfc>
 8001f2e:	e03e      	b.n	8001fae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	d112      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe ff77 	bl	8000e2c <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e084      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f50:	4b45      	ldr	r3, [pc, #276]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	2b0c      	cmp	r3, #12
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x12a>
 8001f5c:	e027      	b.n	8001fae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d11d      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f66:	e00a      	b.n	8001f7e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f68:	f7fe ff60 	bl	8000e2c <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e06d      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d1ee      	bne.n	8001f68 <HAL_RCC_ClockConfig+0x158>
 8001f8a:	e010      	b.n	8001fae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f7fe ff4e 	bl	8000e2c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e05b      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fa2:	4b31      	ldr	r3, [pc, #196]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ee      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fae:	4b2d      	ldr	r3, [pc, #180]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d219      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_ClockConfig+0x1be>
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a27      	ldr	r2, [pc, #156]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0201 	bic.w	r2, r3, #1
 8001fd6:	4923      	ldr	r1, [pc, #140]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b21      	ldr	r3, [pc, #132]	@ (8002064 <HAL_RCC_ClockConfig+0x254>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e034      	b.n	800205a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4917      	ldr	r1, [pc, #92]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490f      	ldr	r1, [pc, #60]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f823 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <HAL_RCC_ClockConfig+0x258>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	490b      	ldr	r1, [pc, #44]	@ (800206c <HAL_RCC_ClockConfig+0x25c>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_RCC_ClockConfig+0x260>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_RCC_ClockConfig+0x264>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe fcf4 	bl	8000a3c <HAL_InitTick>
 8002054:	4603      	mov	r3, r0
 8002056:	72fb      	strb	r3, [r7, #11]

  return status;
 8002058:	7afb      	ldrb	r3, [r7, #11]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023c00 	.word	0x40023c00
 8002068:	40023800 	.word	0x40023800
 800206c:	08016994 	.word	0x08016994
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800207c:	b092      	sub	sp, #72	@ 0x48
 800207e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002080:	4b79      	ldr	r3, [pc, #484]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d00d      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x34>
 8002090:	2b0c      	cmp	r3, #12
 8002092:	f200 80d5 	bhi.w	8002240 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002096:	2b04      	cmp	r3, #4
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x28>
 800209a:	2b08      	cmp	r3, #8
 800209c:	d003      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x2e>
 800209e:	e0cf      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020a0:	4b72      	ldr	r3, [pc, #456]	@ (800226c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80020a2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80020a4:	e0da      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b72      	ldr	r3, [pc, #456]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80020a8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80020aa:	e0d7      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ae:	0c9b      	lsrs	r3, r3, #18
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002274 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020bc:	0d9b      	lsrs	r3, r3, #22
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	3301      	adds	r3, #1
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b68      	ldr	r3, [pc, #416]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d05d      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020d4:	2200      	movs	r2, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	4611      	mov	r1, r2
 80020da:	4604      	mov	r4, r0
 80020dc:	460d      	mov	r5, r1
 80020de:	4622      	mov	r2, r4
 80020e0:	462b      	mov	r3, r5
 80020e2:	f04f 0000 	mov.w	r0, #0
 80020e6:	f04f 0100 	mov.w	r1, #0
 80020ea:	0159      	lsls	r1, r3, #5
 80020ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020f0:	0150      	lsls	r0, r2, #5
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4621      	mov	r1, r4
 80020f8:	1a51      	subs	r1, r2, r1
 80020fa:	6139      	str	r1, [r7, #16]
 80020fc:	4629      	mov	r1, r5
 80020fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002110:	4659      	mov	r1, fp
 8002112:	018b      	lsls	r3, r1, #6
 8002114:	4651      	mov	r1, sl
 8002116:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800211a:	4651      	mov	r1, sl
 800211c:	018a      	lsls	r2, r1, #6
 800211e:	46d4      	mov	ip, sl
 8002120:	ebb2 080c 	subs.w	r8, r2, ip
 8002124:	4659      	mov	r1, fp
 8002126:	eb63 0901 	sbc.w	r9, r3, r1
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800213a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	4623      	mov	r3, r4
 8002144:	eb18 0303 	adds.w	r3, r8, r3
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	462b      	mov	r3, r5
 800214c:	eb49 0303 	adc.w	r3, r9, r3
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	f04f 0300 	mov.w	r3, #0
 800215a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800215e:	4629      	mov	r1, r5
 8002160:	024b      	lsls	r3, r1, #9
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	4604      	mov	r4, r0
 8002168:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800216c:	4601      	mov	r1, r0
 800216e:	024a      	lsls	r2, r1, #9
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002176:	2200      	movs	r2, #0
 8002178:	62bb      	str	r3, [r7, #40]	@ 0x28
 800217a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800217c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002180:	f7fe f810 	bl	80001a4 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	647b      	str	r3, [r7, #68]	@ 0x44
 800218c:	e055      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800218e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002190:	2200      	movs	r2, #0
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	627a      	str	r2, [r7, #36]	@ 0x24
 8002196:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800219a:	4642      	mov	r2, r8
 800219c:	464b      	mov	r3, r9
 800219e:	f04f 0000 	mov.w	r0, #0
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	0159      	lsls	r1, r3, #5
 80021a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ac:	0150      	lsls	r0, r2, #5
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	46c4      	mov	ip, r8
 80021b4:	ebb2 0a0c 	subs.w	sl, r2, ip
 80021b8:	4640      	mov	r0, r8
 80021ba:	4649      	mov	r1, r9
 80021bc:	468c      	mov	ip, r1
 80021be:	eb63 0b0c 	sbc.w	fp, r3, ip
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021ce:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021d2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d6:	ebb2 040a 	subs.w	r4, r2, sl
 80021da:	eb63 050b 	sbc.w	r5, r3, fp
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	00eb      	lsls	r3, r5, #3
 80021e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ec:	00e2      	lsls	r2, r4, #3
 80021ee:	4614      	mov	r4, r2
 80021f0:	461d      	mov	r5, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	18e3      	adds	r3, r4, r3
 80021f6:	603b      	str	r3, [r7, #0]
 80021f8:	460b      	mov	r3, r1
 80021fa:	eb45 0303 	adc.w	r3, r5, r3
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220c:	4629      	mov	r1, r5
 800220e:	028b      	lsls	r3, r1, #10
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	4604      	mov	r4, r0
 8002216:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800221a:	4601      	mov	r1, r0
 800221c:	028a      	lsls	r2, r1, #10
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002224:	2200      	movs	r2, #0
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	61fa      	str	r2, [r7, #28]
 800222a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800222e:	f7fd ffb9 	bl	80001a4 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4613      	mov	r3, r2
 8002238:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800223a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800223e:	e00d      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002240:	4b09      	ldr	r3, [pc, #36]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0b5b      	lsrs	r3, r3, #13
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800224c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800224e:	3301      	adds	r3, #1
 8002250:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800225a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800225e:	4618      	mov	r0, r3
 8002260:	3748      	adds	r7, #72	@ 0x48
 8002262:	46bd      	mov	sp, r7
 8002264:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	00f42400 	.word	0x00f42400
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08016988 	.word	0x08016988

08002278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800227c:	4b02      	ldr	r3, [pc, #8]	@ (8002288 <HAL_RCC_GetHCLKFreq+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000000 	.word	0x20000000

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002290:	f7ff fff2 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	4903      	ldr	r1, [pc, #12]	@ (80022b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800
 80022b0:	080169a4 	.word	0x080169a4

080022b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b8:	f7ff ffde 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0adb      	lsrs	r3, r3, #11
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4903      	ldr	r1, [pc, #12]	@ (80022d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	080169a4 	.word	0x080169a4

080022dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	220f      	movs	r2, #15
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022ec:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <HAL_RCC_GetClockConfig+0x58>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_RCC_GetClockConfig+0x58>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_GetClockConfig+0x58>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <HAL_RCC_GetClockConfig+0x58>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <HAL_RCC_GetClockConfig+0x5c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	601a      	str	r2, [r3, #0]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40023800 	.word	0x40023800
 8002338:	40023c00 	.word	0x40023c00

0800233c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002348:	4b29      	ldr	r3, [pc, #164]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d12c      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002354:	4b26      	ldr	r3, [pc, #152]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002360:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e016      	b.n	800239a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	4a1f      	ldr	r2, [pc, #124]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002376:	6253      	str	r3, [r2, #36]	@ 0x24
 8002378:	4b1d      	ldr	r3, [pc, #116]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002384:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800238c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002392:	4a17      	ldr	r2, [pc, #92]	@ (80023f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002394:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80023a0:	d105      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80023a8:	d101      	bne.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80023aa:	2301      	movs	r3, #1
 80023ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80023b4:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ba:	f043 0304 	orr.w	r3, r3, #4
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 0201 	bic.w	r2, r3, #1
 80023c8:	490b      	ldr	r1, [pc, #44]	@ (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40007000 	.word	0x40007000
 80023f8:	40023c00 	.word	0x40023c00

080023fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e031      	b.n	8002472 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d106      	bne.n	8002428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f829 	bl	800247a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4610      	mov	r0, r2
 800243c:	f000 f968 	bl	8002710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d001      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e03a      	b.n	800251a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c4:	d00e      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a16      	ldr	r2, [pc, #88]	@ (8002524 <HAL_TIM_Base_Start_IT+0x98>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d009      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a14      	ldr	r2, [pc, #80]	@ (8002528 <HAL_TIM_Base_Start_IT+0x9c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a13      	ldr	r2, [pc, #76]	@ (800252c <HAL_TIM_Base_Start_IT+0xa0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d111      	bne.n	8002508 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d010      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002506:	e007      	b.n	8002518 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800
 800252c:	40010800 	.word	0x40010800

08002530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d020      	beq.n	8002594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01b      	beq.n	8002594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8ad 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8a0 	bl	80026c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f8af 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0304 	and.w	r3, r3, #4
 800259a:	2b00      	cmp	r3, #0
 800259c:	d020      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01b      	beq.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0204 	mvn.w	r2, #4
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f887 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f87a 	bl	80026c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f889 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d020      	beq.n	800262c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0208 	mvn.w	r2, #8
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f861 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f854 	bl	80026c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f863 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	f003 0310 	and.w	r3, r3, #16
 8002632:	2b00      	cmp	r3, #0
 8002634:	d020      	beq.n	8002678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d01b      	beq.n	8002678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0210 	mvn.w	r2, #16
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2208      	movs	r2, #8
 800264e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f83b 	bl	80026da <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f82e 	bl	80026c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f83d 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00c      	beq.n	800269c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b00      	cmp	r3, #0
 800268a:	d007      	beq.n	800269c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f06f 0201 	mvn.w	r2, #1
 8002694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f90e 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f81f 	bl	80026fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002726:	d00f      	beq.n	8002748 <TIM_Base_SetConfig+0x38>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a2e      	ldr	r2, [pc, #184]	@ (80027e4 <TIM_Base_SetConfig+0xd4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d00b      	beq.n	8002748 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a2d      	ldr	r2, [pc, #180]	@ (80027e8 <TIM_Base_SetConfig+0xd8>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d007      	beq.n	8002748 <TIM_Base_SetConfig+0x38>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a2c      	ldr	r2, [pc, #176]	@ (80027ec <TIM_Base_SetConfig+0xdc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d003      	beq.n	8002748 <TIM_Base_SetConfig+0x38>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a2b      	ldr	r2, [pc, #172]	@ (80027f0 <TIM_Base_SetConfig+0xe0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d108      	bne.n	800275a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800274e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	4313      	orrs	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002760:	d017      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <TIM_Base_SetConfig+0xd4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a1e      	ldr	r2, [pc, #120]	@ (80027e8 <TIM_Base_SetConfig+0xd8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00f      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	@ (80027ec <TIM_Base_SetConfig+0xdc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00b      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1c      	ldr	r2, [pc, #112]	@ (80027f0 <TIM_Base_SetConfig+0xe0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <TIM_Base_SetConfig+0xe4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <TIM_Base_SetConfig+0x82>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1a      	ldr	r2, [pc, #104]	@ (80027f8 <TIM_Base_SetConfig+0xe8>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f043 0204 	orr.w	r2, r3, #4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40010800 	.word	0x40010800
 80027f4:	40010c00 	.word	0x40010c00
 80027f8:	40011000 	.word	0x40011000

080027fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e042      	b.n	8002894 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d106      	bne.n	8002828 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7fe f894 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2224      	movs	r2, #36	@ 0x24
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800283e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fe39 	bl	80034b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002854:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695a      	ldr	r2, [r3, #20]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002864:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002874:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b20      	cmp	r3, #32
 80028b4:	d112      	bne.n	80028dc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d002      	beq.n	80028c2 <HAL_UART_Receive_IT+0x26>
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00b      	b.n	80028de <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	461a      	mov	r2, r3
 80028d0:	68b9      	ldr	r1, [r7, #8]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fbf7 	bl	80030c6 <UART_Start_Receive_IT>
 80028d8:	4603      	mov	r3, r0
 80028da:	e000      	b.n	80028de <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028dc:	2302      	movs	r3, #2
  }
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	@ 0x30
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d162      	bne.n	80029c8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_Transmit_DMA+0x26>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e05b      	b.n	80029ca <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	88fa      	ldrh	r2, [r7, #6]
 800291c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2221      	movs	r2, #33	@ 0x21
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002936:	4a27      	ldr	r2, [pc, #156]	@ (80029d4 <HAL_UART_Transmit_DMA+0xec>)
 8002938:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	4a26      	ldr	r2, [pc, #152]	@ (80029d8 <HAL_UART_Transmit_DMA+0xf0>)
 8002940:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002946:	4a25      	ldr	r2, [pc, #148]	@ (80029dc <HAL_UART_Transmit_DMA+0xf4>)
 8002948:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294e:	2200      	movs	r2, #0
 8002950:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002952:	f107 0308 	add.w	r3, r7, #8
 8002956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800295c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3304      	adds	r3, #4
 8002966:	461a      	mov	r2, r3
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	f7fe fbbd 	bl	80010e8 <HAL_DMA_Start_IT>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2210      	movs	r2, #16
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2220      	movs	r2, #32
 800297e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e021      	b.n	80029ca <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800298e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	617b      	str	r3, [r7, #20]
   return(result);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80029b2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3730      	adds	r7, #48	@ 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	08002f7d 	.word	0x08002f7d
 80029d8:	08003017 	.word	0x08003017
 80029dc:	08003033 	.word	0x08003033

080029e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0ba      	sub	sp, #232	@ 0xe8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_UART_IRQHandler+0x66>
 8002a32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d003      	beq.n	8002a46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fc7b 	bl	800333a <UART_Receive_IT>
      return;
 8002a44:	e271      	b.n	8002f2a <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80de 	beq.w	8002c0c <HAL_UART_IRQHandler+0x22c>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a60:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 80d1 	beq.w	8002c0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xae>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f043 0201 	orr.w	r2, r3, #1
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00b      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xd2>
 8002a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f043 0202 	orr.w	r2, r3, #2
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xf6>
 8002abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f043 0204 	orr.w	r2, r3, #4
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_UART_IRQHandler+0x126>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f043 0208 	orr.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8208 	beq.w	8002f20 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_UART_IRQHandler+0x14e>
 8002b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fc06 	bl	800333a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b38:	2b40      	cmp	r3, #64	@ 0x40
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <HAL_UART_IRQHandler+0x17a>
 8002b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d04f      	beq.n	8002bfa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fb13 	bl	8003186 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b6a:	2b40      	cmp	r3, #64	@ 0x40
 8002b6c:	d141      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3314      	adds	r3, #20
 8002b74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1d9      	bne.n	8002b6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d013      	beq.n	8002bea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	4a89      	ldr	r2, [pc, #548]	@ (8002dec <HAL_UART_IRQHandler+0x40c>)
 8002bc8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe fb27 	bl	8001222 <HAL_DMA_Abort_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002be4:	4610      	mov	r0, r2
 8002be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be8:	e00e      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9b2 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	e00a      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9ae 	bl	8002f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e006      	b.n	8002c08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9aa 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c06:	e18b      	b.n	8002f20 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c08:	bf00      	nop
    return;
 8002c0a:	e189      	b.n	8002f20 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f040 8165 	bne.w	8002ee0 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 815e 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8157 	beq.w	8002ee0 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c52:	2b40      	cmp	r3, #64	@ 0x40
 8002c54:	f040 80cc 	bne.w	8002df0 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80a8 	beq.w	8002dbe <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f080 80a1 	bcs.w	8002dbe <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c82:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	f000 8088 	beq.w	8002da0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	330c      	adds	r3, #12
 8002c96:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002cbc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1d9      	bne.n	8002c90 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3314      	adds	r3, #20
 8002ce2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce6:	e853 3f00 	ldrex	r3, [r3]
 8002cea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cee:	f023 0301 	bic.w	r3, r3, #1
 8002cf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3314      	adds	r3, #20
 8002cfc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d06:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d08:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e1      	bne.n	8002cdc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d22:	e853 3f00 	ldrex	r3, [r3]
 8002d26:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3314      	adds	r3, #20
 8002d38:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d3c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d3e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d40:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d44:	e841 2300 	strex	r3, r2, [r1]
 8002d48:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e3      	bne.n	8002d18 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2220      	movs	r2, #32
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d70:	f023 0310 	bic.w	r3, r3, #16
 8002d74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	330c      	adds	r3, #12
 8002d7e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d82:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d84:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe fa04 	bl	80011a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2202      	movs	r2, #2
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4619      	mov	r1, r3
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f8d5 	bl	8002f66 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002dbc:	e0b2      	b.n	8002f24 <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	f040 80ac 	bne.w	8002f24 <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	f040 80a6 	bne.w	8002f24 <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002de2:	4619      	mov	r1, r3
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8be 	bl	8002f66 <HAL_UARTEx_RxEventCallback>
      return;
 8002dea:	e09b      	b.n	8002f24 <HAL_UART_IRQHandler+0x544>
 8002dec:	0800324b 	.word	0x0800324b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 808e 	beq.w	8002f28 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 8002e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8089 	beq.w	8002f28 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e42:	e841 2300 	strex	r3, r2, [r1]
 8002e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1e3      	bne.n	8002e16 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	e853 3f00 	ldrex	r3, [r3]
 8002e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3314      	adds	r3, #20
 8002e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e72:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7a:	e841 2300 	strex	r3, r2, [r1]
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1e3      	bne.n	8002e4e <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	330c      	adds	r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	e853 3f00 	ldrex	r3, [r3]
 8002ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f023 0310 	bic.w	r3, r3, #16
 8002eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	e841 2300 	strex	r3, r2, [r1]
 8002ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e3      	bne.n	8002e94 <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f844 	bl	8002f66 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ede:	e023      	b.n	8002f28 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_UART_IRQHandler+0x520>
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f9b7 	bl	800326c <UART_Transmit_IT>
    return;
 8002efe:	e014      	b.n	8002f2a <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_UART_IRQHandler+0x54a>
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9f6 	bl	800330a <UART_EndTransmit_IT>
    return;
 8002f1e:	e004      	b.n	8002f2a <HAL_UART_IRQHandler+0x54a>
    return;
 8002f20:	bf00      	nop
 8002f22:	e002      	b.n	8002f2a <HAL_UART_IRQHandler+0x54a>
      return;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_UART_IRQHandler+0x54a>
      return;
 8002f28:	bf00      	nop
  }
}
 8002f2a:	37e8      	adds	r7, #232	@ 0xe8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	460b      	mov	r3, r1
 8002f70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b090      	sub	sp, #64	@ 0x40
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d137      	bne.n	8003008 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	623b      	str	r3, [r7, #32]
   return(result);
 8002fae:	6a3b      	ldr	r3, [r7, #32]
 8002fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3314      	adds	r3, #20
 8002fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8002fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	330c      	adds	r3, #12
 8002fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	330c      	adds	r3, #12
 8002ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ff2:	61fa      	str	r2, [r7, #28]
 8002ff4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff6:	69b9      	ldr	r1, [r7, #24]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	e841 2300 	strex	r3, r2, [r1]
 8002ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1e5      	bne.n	8002fd2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003006:	e002      	b.n	800300e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003008:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800300a:	f7ff ff91 	bl	8002f30 <HAL_UART_TxCpltCallback>
}
 800300e:	bf00      	nop
 8003010:	3740      	adds	r7, #64	@ 0x40
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003022:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff ff8c 	bl	8002f42 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003042:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	bf0c      	ite	eq
 8003052:	2301      	moveq	r3, #1
 8003054:	2300      	movne	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b21      	cmp	r3, #33	@ 0x21
 8003064:	d108      	bne.n	8003078 <UART_DMAError+0x46>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	2200      	movs	r2, #0
 8003070:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003072:	68b8      	ldr	r0, [r7, #8]
 8003074:	f000 f860 	bl	8003138 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b40      	cmp	r3, #64	@ 0x40
 8003084:	bf0c      	ite	eq
 8003086:	2301      	moveq	r3, #1
 8003088:	2300      	movne	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b22      	cmp	r3, #34	@ 0x22
 8003098:	d108      	bne.n	80030ac <UART_DMAError+0x7a>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80030a6:	68b8      	ldr	r0, [r7, #8]
 80030a8:	f000 f86d 	bl	8003186 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f043 0210 	orr.w	r2, r3, #16
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030b8:	68b8      	ldr	r0, [r7, #8]
 80030ba:	f7ff ff4b 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2222      	movs	r2, #34	@ 0x22
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800310a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	69fa      	ldr	r2, [r7, #28]
 8003160:	61ba      	str	r2, [r7, #24]
 8003162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6979      	ldr	r1, [r7, #20]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	613b      	str	r3, [r7, #16]
   return(result);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800317c:	bf00      	nop
 800317e:	3724      	adds	r7, #36	@ 0x24
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003186:	b480      	push	{r7}
 8003188:	b095      	sub	sp, #84	@ 0x54
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	330c      	adds	r3, #12
 80031ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80031b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80031b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80031bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e5      	bne.n	800318e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3314      	adds	r3, #20
 80031e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d119      	bne.n	8003232 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	60bb      	str	r3, [r7, #8]
   return(result);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f023 0310 	bic.w	r3, r3, #16
 8003214:	647b      	str	r3, [r7, #68]	@ 0x44
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	330c      	adds	r3, #12
 800321c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800321e:	61ba      	str	r2, [r7, #24]
 8003220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	613b      	str	r3, [r7, #16]
   return(result);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e5      	bne.n	80031fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003240:	bf00      	nop
 8003242:	3754      	adds	r7, #84	@ 0x54
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f7ff fe78 	bl	8002f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b21      	cmp	r3, #33	@ 0x21
 800327e:	d13e      	bne.n	80032fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003288:	d114      	bne.n	80032b4 <UART_Transmit_IT+0x48>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d110      	bne.n	80032b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a1b      	ldr	r3, [r3, #32]
 8003296:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	461a      	mov	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	621a      	str	r2, [r3, #32]
 80032b2:	e008      	b.n	80032c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	1c59      	adds	r1, r3, #1
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6211      	str	r1, [r2, #32]
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	3b01      	subs	r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	4619      	mov	r1, r3
 80032d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10f      	bne.n	80032fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68da      	ldr	r2, [r3, #12]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032fa:	2300      	movs	r3, #0
 80032fc:	e000      	b.n	8003300 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032fe:	2302      	movs	r3, #2
  }
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff fe00 	bl	8002f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b08c      	sub	sp, #48	@ 0x30
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b22      	cmp	r3, #34	@ 0x22
 8003354:	f040 80aa 	bne.w	80034ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003360:	d115      	bne.n	800338e <UART_Receive_IT+0x54>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d111      	bne.n	800338e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	b29a      	uxth	r2, r3
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003386:	1c9a      	adds	r2, r3, #2
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28
 800338c:	e024      	b.n	80033d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d007      	beq.n	80033ae <UART_Receive_IT+0x74>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <UART_Receive_IT+0x82>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	e008      	b.n	80033ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4619      	mov	r1, r3
 80033e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d15d      	bne.n	80034a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0220 	bic.w	r2, r2, #32
 80033fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	2b01      	cmp	r3, #1
 8003430:	d135      	bne.n	800349e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	613b      	str	r3, [r7, #16]
   return(result);
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	330c      	adds	r3, #12
 8003456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003458:	623a      	str	r2, [r7, #32]
 800345a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345c:	69f9      	ldr	r1, [r7, #28]
 800345e:	6a3a      	ldr	r2, [r7, #32]
 8003460:	e841 2300 	strex	r3, r2, [r1]
 8003464:	61bb      	str	r3, [r7, #24]
   return(result);
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1e5      	bne.n	8003438 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b10      	cmp	r3, #16
 8003478:	d10a      	bne.n	8003490 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff fd65 	bl	8002f66 <HAL_UARTEx_RxEventCallback>
 800349c:	e002      	b.n	80034a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f00e ff5c 	bl	801235c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80034a4:	2300      	movs	r3, #0
 80034a6:	e002      	b.n	80034ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	e000      	b.n	80034ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80034ac:	2302      	movs	r3, #2
  }
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3730      	adds	r7, #48	@ 0x30
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80034f8:	f023 030c 	bic.w	r3, r3, #12
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	430b      	orrs	r3, r1
 8003504:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a55      	ldr	r2, [pc, #340]	@ (8003678 <UART_SetConfig+0x1c0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d103      	bne.n	800352e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003526:	f7fe fec5 	bl	80022b4 <HAL_RCC_GetPCLK2Freq>
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	e002      	b.n	8003534 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800352e:	f7fe fead 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8003532:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800353c:	d14c      	bne.n	80035d8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	4a49      	ldr	r2, [pc, #292]	@ (800367c <UART_SetConfig+0x1c4>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	0119      	lsls	r1, r3, #4
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	009a      	lsls	r2, r3, #2
 8003568:	441a      	add	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	005b      	lsls	r3, r3, #1
 8003570:	fbb2 f2f3 	udiv	r2, r2, r3
 8003574:	4b41      	ldr	r3, [pc, #260]	@ (800367c <UART_SetConfig+0x1c4>)
 8003576:	fba3 0302 	umull	r0, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2064      	movs	r0, #100	@ 0x64
 800357e:	fb00 f303 	mul.w	r3, r0, r3
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	3332      	adds	r3, #50	@ 0x32
 8003588:	4a3c      	ldr	r2, [pc, #240]	@ (800367c <UART_SetConfig+0x1c4>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	095b      	lsrs	r3, r3, #5
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003596:	4419      	add	r1, r3
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	009a      	lsls	r2, r3, #2
 80035a2:	441a      	add	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ae:	4b33      	ldr	r3, [pc, #204]	@ (800367c <UART_SetConfig+0x1c4>)
 80035b0:	fba3 0302 	umull	r0, r3, r3, r2
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	2064      	movs	r0, #100	@ 0x64
 80035b8:	fb00 f303 	mul.w	r3, r0, r3
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	3332      	adds	r3, #50	@ 0x32
 80035c2:	4a2e      	ldr	r2, [pc, #184]	@ (800367c <UART_SetConfig+0x1c4>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	f003 0207 	and.w	r2, r3, #7
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	440a      	add	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035d6:	e04a      	b.n	800366e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ee:	4a23      	ldr	r2, [pc, #140]	@ (800367c <UART_SetConfig+0x1c4>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	0119      	lsls	r1, r3, #4
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	009a      	lsls	r2, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	fbb2 f2f3 	udiv	r2, r2, r3
 800360e:	4b1b      	ldr	r3, [pc, #108]	@ (800367c <UART_SetConfig+0x1c4>)
 8003610:	fba3 0302 	umull	r0, r3, r3, r2
 8003614:	095b      	lsrs	r3, r3, #5
 8003616:	2064      	movs	r0, #100	@ 0x64
 8003618:	fb00 f303 	mul.w	r3, r0, r3
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	3332      	adds	r3, #50	@ 0x32
 8003622:	4a16      	ldr	r2, [pc, #88]	@ (800367c <UART_SetConfig+0x1c4>)
 8003624:	fba2 2303 	umull	r2, r3, r2, r3
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800362e:	4419      	add	r1, r3
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	441a      	add	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	fbb2 f2f3 	udiv	r2, r2, r3
 8003646:	4b0d      	ldr	r3, [pc, #52]	@ (800367c <UART_SetConfig+0x1c4>)
 8003648:	fba3 0302 	umull	r0, r3, r3, r2
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	2064      	movs	r0, #100	@ 0x64
 8003650:	fb00 f303 	mul.w	r3, r0, r3
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	3332      	adds	r3, #50	@ 0x32
 800365a:	4a08      	ldr	r2, [pc, #32]	@ (800367c <UART_SetConfig+0x1c4>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	095b      	lsrs	r3, r3, #5
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	440a      	add	r2, r1
 800366c:	609a      	str	r2, [r3, #8]
}
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40013800 	.word	0x40013800
 800367c:	51eb851f 	.word	0x51eb851f

08003680 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003686:	4b88      	ldr	r3, [pc, #544]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003688:	22c0      	movs	r2, #192	@ 0xc0
 800368a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800368c:	4b86      	ldr	r3, [pc, #536]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800368e:	22a8      	movs	r2, #168	@ 0xa8
 8003690:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003692:	4b85      	ldr	r3, [pc, #532]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003694:	2200      	movs	r2, #0
 8003696:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8003698:	4b83      	ldr	r3, [pc, #524]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800369a:	227b      	movs	r2, #123	@ 0x7b
 800369c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800369e:	4b83      	ldr	r3, [pc, #524]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80036a0:	22ff      	movs	r2, #255	@ 0xff
 80036a2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80036a4:	4b81      	ldr	r3, [pc, #516]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80036a6:	22ff      	movs	r2, #255	@ 0xff
 80036a8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80036aa:	4b80      	ldr	r3, [pc, #512]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80036ac:	22ff      	movs	r2, #255	@ 0xff
 80036ae:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80036b0:	4b7e      	ldr	r3, [pc, #504]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80036b6:	4b7e      	ldr	r3, [pc, #504]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80036b8:	22c0      	movs	r2, #192	@ 0xc0
 80036ba:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80036bc:	4b7c      	ldr	r3, [pc, #496]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80036be:	22a8      	movs	r2, #168	@ 0xa8
 80036c0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80036c2:	4b7b      	ldr	r3, [pc, #492]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80036c8:	4b79      	ldr	r3, [pc, #484]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80036ce:	2100      	movs	r1, #0
 80036d0:	2000      	movs	r0, #0
 80036d2:	f003 f8c3 	bl	800685c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80036d6:	4b74      	ldr	r3, [pc, #464]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	061a      	lsls	r2, r3, #24
 80036dc:	4b72      	ldr	r3, [pc, #456]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036de:	785b      	ldrb	r3, [r3, #1]
 80036e0:	041b      	lsls	r3, r3, #16
 80036e2:	431a      	orrs	r2, r3
 80036e4:	4b70      	ldr	r3, [pc, #448]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036e6:	789b      	ldrb	r3, [r3, #2]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	4313      	orrs	r3, r2
 80036ec:	4a6e      	ldr	r2, [pc, #440]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036ee:	78d2      	ldrb	r2, [r2, #3]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	061a      	lsls	r2, r3, #24
 80036f4:	4b6c      	ldr	r3, [pc, #432]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	0619      	lsls	r1, r3, #24
 80036fa:	4b6b      	ldr	r3, [pc, #428]	@ (80038a8 <MX_LWIP_Init+0x228>)
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	4319      	orrs	r1, r3
 8003702:	4b69      	ldr	r3, [pc, #420]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003704:	789b      	ldrb	r3, [r3, #2]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	430b      	orrs	r3, r1
 800370a:	4967      	ldr	r1, [pc, #412]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800370c:	78c9      	ldrb	r1, [r1, #3]
 800370e:	430b      	orrs	r3, r1
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003716:	431a      	orrs	r2, r3
 8003718:	4b63      	ldr	r3, [pc, #396]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	0619      	lsls	r1, r3, #24
 800371e:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003720:	785b      	ldrb	r3, [r3, #1]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	4319      	orrs	r1, r3
 8003726:	4b60      	ldr	r3, [pc, #384]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003728:	789b      	ldrb	r3, [r3, #2]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	430b      	orrs	r3, r1
 800372e:	495e      	ldr	r1, [pc, #376]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003730:	78c9      	ldrb	r1, [r1, #3]
 8003732:	430b      	orrs	r3, r1
 8003734:	0a1b      	lsrs	r3, r3, #8
 8003736:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800373a:	431a      	orrs	r2, r3
 800373c:	4b5a      	ldr	r3, [pc, #360]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	0619      	lsls	r1, r3, #24
 8003742:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	4319      	orrs	r1, r3
 800374a:	4b57      	ldr	r3, [pc, #348]	@ (80038a8 <MX_LWIP_Init+0x228>)
 800374c:	789b      	ldrb	r3, [r3, #2]
 800374e:	021b      	lsls	r3, r3, #8
 8003750:	430b      	orrs	r3, r1
 8003752:	4955      	ldr	r1, [pc, #340]	@ (80038a8 <MX_LWIP_Init+0x228>)
 8003754:	78c9      	ldrb	r1, [r1, #3]
 8003756:	430b      	orrs	r3, r1
 8003758:	0e1b      	lsrs	r3, r3, #24
 800375a:	4313      	orrs	r3, r2
 800375c:	4a55      	ldr	r2, [pc, #340]	@ (80038b4 <MX_LWIP_Init+0x234>)
 800375e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003760:	4b52      	ldr	r3, [pc, #328]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	061a      	lsls	r2, r3, #24
 8003766:	4b51      	ldr	r3, [pc, #324]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	041b      	lsls	r3, r3, #16
 800376c:	431a      	orrs	r2, r3
 800376e:	4b4f      	ldr	r3, [pc, #316]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003770:	789b      	ldrb	r3, [r3, #2]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	4313      	orrs	r3, r2
 8003776:	4a4d      	ldr	r2, [pc, #308]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003778:	78d2      	ldrb	r2, [r2, #3]
 800377a:	4313      	orrs	r3, r2
 800377c:	061a      	lsls	r2, r3, #24
 800377e:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	0619      	lsls	r1, r3, #24
 8003784:	4b49      	ldr	r3, [pc, #292]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003786:	785b      	ldrb	r3, [r3, #1]
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	4319      	orrs	r1, r3
 800378c:	4b47      	ldr	r3, [pc, #284]	@ (80038ac <MX_LWIP_Init+0x22c>)
 800378e:	789b      	ldrb	r3, [r3, #2]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	430b      	orrs	r3, r1
 8003794:	4945      	ldr	r1, [pc, #276]	@ (80038ac <MX_LWIP_Init+0x22c>)
 8003796:	78c9      	ldrb	r1, [r1, #3]
 8003798:	430b      	orrs	r3, r1
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037a0:	431a      	orrs	r2, r3
 80037a2:	4b42      	ldr	r3, [pc, #264]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	0619      	lsls	r1, r3, #24
 80037a8:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037aa:	785b      	ldrb	r3, [r3, #1]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	4319      	orrs	r1, r3
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037b2:	789b      	ldrb	r3, [r3, #2]
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	430b      	orrs	r3, r1
 80037b8:	493c      	ldr	r1, [pc, #240]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037ba:	78c9      	ldrb	r1, [r1, #3]
 80037bc:	430b      	orrs	r3, r1
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80037c4:	431a      	orrs	r2, r3
 80037c6:	4b39      	ldr	r3, [pc, #228]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	0619      	lsls	r1, r3, #24
 80037cc:	4b37      	ldr	r3, [pc, #220]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	041b      	lsls	r3, r3, #16
 80037d2:	4319      	orrs	r1, r3
 80037d4:	4b35      	ldr	r3, [pc, #212]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037d6:	789b      	ldrb	r3, [r3, #2]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	430b      	orrs	r3, r1
 80037dc:	4933      	ldr	r1, [pc, #204]	@ (80038ac <MX_LWIP_Init+0x22c>)
 80037de:	78c9      	ldrb	r1, [r1, #3]
 80037e0:	430b      	orrs	r3, r1
 80037e2:	0e1b      	lsrs	r3, r3, #24
 80037e4:	4313      	orrs	r3, r2
 80037e6:	4a34      	ldr	r2, [pc, #208]	@ (80038b8 <MX_LWIP_Init+0x238>)
 80037e8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037ea:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	061a      	lsls	r2, r3, #24
 80037f0:	4b2f      	ldr	r3, [pc, #188]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80037f2:	785b      	ldrb	r3, [r3, #1]
 80037f4:	041b      	lsls	r3, r3, #16
 80037f6:	431a      	orrs	r2, r3
 80037f8:	4b2d      	ldr	r3, [pc, #180]	@ (80038b0 <MX_LWIP_Init+0x230>)
 80037fa:	789b      	ldrb	r3, [r3, #2]
 80037fc:	021b      	lsls	r3, r3, #8
 80037fe:	4313      	orrs	r3, r2
 8003800:	4a2b      	ldr	r2, [pc, #172]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003802:	78d2      	ldrb	r2, [r2, #3]
 8003804:	4313      	orrs	r3, r2
 8003806:	061a      	lsls	r2, r3, #24
 8003808:	4b29      	ldr	r3, [pc, #164]	@ (80038b0 <MX_LWIP_Init+0x230>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	0619      	lsls	r1, r3, #24
 800380e:	4b28      	ldr	r3, [pc, #160]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	041b      	lsls	r3, r3, #16
 8003814:	4319      	orrs	r1, r3
 8003816:	4b26      	ldr	r3, [pc, #152]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003818:	789b      	ldrb	r3, [r3, #2]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	430b      	orrs	r3, r1
 800381e:	4924      	ldr	r1, [pc, #144]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003820:	78c9      	ldrb	r1, [r1, #3]
 8003822:	430b      	orrs	r3, r1
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800382a:	431a      	orrs	r2, r3
 800382c:	4b20      	ldr	r3, [pc, #128]	@ (80038b0 <MX_LWIP_Init+0x230>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	0619      	lsls	r1, r3, #24
 8003832:	4b1f      	ldr	r3, [pc, #124]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	041b      	lsls	r3, r3, #16
 8003838:	4319      	orrs	r1, r3
 800383a:	4b1d      	ldr	r3, [pc, #116]	@ (80038b0 <MX_LWIP_Init+0x230>)
 800383c:	789b      	ldrb	r3, [r3, #2]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	430b      	orrs	r3, r1
 8003842:	491b      	ldr	r1, [pc, #108]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003844:	78c9      	ldrb	r1, [r1, #3]
 8003846:	430b      	orrs	r3, r1
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800384e:	431a      	orrs	r2, r3
 8003850:	4b17      	ldr	r3, [pc, #92]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	0619      	lsls	r1, r3, #24
 8003856:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003858:	785b      	ldrb	r3, [r3, #1]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	4319      	orrs	r1, r3
 800385e:	4b14      	ldr	r3, [pc, #80]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003860:	789b      	ldrb	r3, [r3, #2]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	430b      	orrs	r3, r1
 8003866:	4912      	ldr	r1, [pc, #72]	@ (80038b0 <MX_LWIP_Init+0x230>)
 8003868:	78c9      	ldrb	r1, [r1, #3]
 800386a:	430b      	orrs	r3, r1
 800386c:	0e1b      	lsrs	r3, r3, #24
 800386e:	4313      	orrs	r3, r2
 8003870:	4a12      	ldr	r2, [pc, #72]	@ (80038bc <MX_LWIP_Init+0x23c>)
 8003872:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &slipif_init, &tcpip_input);
 8003874:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <MX_LWIP_Init+0x240>)
 8003876:	9302      	str	r3, [sp, #8]
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <MX_LWIP_Init+0x244>)
 800387a:	9301      	str	r3, [sp, #4]
 800387c:	2300      	movs	r3, #0
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4b0e      	ldr	r3, [pc, #56]	@ (80038bc <MX_LWIP_Init+0x23c>)
 8003882:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <MX_LWIP_Init+0x238>)
 8003884:	490b      	ldr	r1, [pc, #44]	@ (80038b4 <MX_LWIP_Init+0x234>)
 8003886:	4810      	ldr	r0, [pc, #64]	@ (80038c8 <MX_LWIP_Init+0x248>)
 8003888:	f004 fd10 	bl	80082ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800388c:	480e      	ldr	r0, [pc, #56]	@ (80038c8 <MX_LWIP_Init+0x248>)
 800388e:	f004 febd 	bl	800860c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003892:	480d      	ldr	r0, [pc, #52]	@ (80038c8 <MX_LWIP_Init+0x248>)
 8003894:	f004 fec8 	bl	8008628 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003898:	490c      	ldr	r1, [pc, #48]	@ (80038cc <MX_LWIP_Init+0x24c>)
 800389a:	480b      	ldr	r0, [pc, #44]	@ (80038c8 <MX_LWIP_Init+0x248>)
 800389c:	f004 ff64 	bl	8008768 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000044c 	.word	0x2000044c
 80038ac:	20000450 	.word	0x20000450
 80038b0:	20000454 	.word	0x20000454
 80038b4:	20000440 	.word	0x20000440
 80038b8:	20000444 	.word	0x20000444
 80038bc:	20000448 	.word	0x20000448
 80038c0:	08006799 	.word	0x08006799
 80038c4:	080127c9 	.word	0x080127c9
 80038c8:	2000040c 	.word	0x2000040c
 80038cc:	080038d1 	.word	0x080038d1

080038d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	bc80      	pop	{r7}
 80038e0:	4770      	bx	lr

080038e2 <sys_now>:

/* USER CODE END 0 */


u32_t sys_now(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038e6:	f7fd faa1 	bl	8000e2c <HAL_GetTick>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003902:	2b84      	cmp	r3, #132	@ 0x84
 8003904:	d005      	beq.n	8003912 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003906:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	3303      	adds	r3, #3
 8003910:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003912:	68fb      	ldr	r3, [r7, #12]
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	bc80      	pop	{r7}
 800391c:	4770      	bx	lr

0800391e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003924:	f3ef 8305 	mrs	r3, IPSR
 8003928:	607b      	str	r3, [r7, #4]
  return(result);
 800392a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	bc80      	pop	{r7}
 800393e:	4770      	bx	lr

08003940 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003944:	f001 fbd4 	bl	80050f0 <vTaskStartScheduler>
  
  return osOK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	bd80      	pop	{r7, pc}

0800394e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003952:	f7ff ffe4 	bl	800391e <inHandlerMode>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800395c:	f001 fcec 	bl	8005338 <xTaskGetTickCountFromISR>
 8003960:	4603      	mov	r3, r0
 8003962:	e002      	b.n	800396a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003964:	f001 fcda 	bl	800531c <xTaskGetTickCount>
 8003968:	4603      	mov	r3, r0
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	bd80      	pop	{r7, pc}

0800396e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800396e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003970:	b089      	sub	sp, #36	@ 0x24
 8003972:	af04      	add	r7, sp, #16
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <osThreadCreate+0x54>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01c      	beq.n	80039c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685c      	ldr	r4, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691e      	ldr	r6, [r3, #16]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ffa8 	bl	80038f0 <makeFreeRtosPriority>
 80039a0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039aa:	9202      	str	r2, [sp, #8]
 80039ac:	9301      	str	r3, [sp, #4]
 80039ae:	9100      	str	r1, [sp, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	4632      	mov	r2, r6
 80039b4:	4629      	mov	r1, r5
 80039b6:	4620      	mov	r0, r4
 80039b8:	f001 f9bd 	bl	8004d36 <xTaskCreateStatic>
 80039bc:	4603      	mov	r3, r0
 80039be:	60fb      	str	r3, [r7, #12]
 80039c0:	e01c      	b.n	80039fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685c      	ldr	r4, [r3, #4]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039ce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ff8a 	bl	80038f0 <makeFreeRtosPriority>
 80039dc:	4602      	mov	r2, r0
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	9200      	str	r2, [sp, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4632      	mov	r2, r6
 80039ea:	4629      	mov	r1, r5
 80039ec:	4620      	mov	r0, r4
 80039ee:	f001 fa01 	bl	8004df4 <xTaskCreate>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d001      	beq.n	80039fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <osDelay+0x16>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	e000      	b.n	8003a1e <osDelay+0x18>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f001 fb30 	bl	8005084 <vTaskDelay>
  
  return osOK;
 8003a24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	2001      	movs	r0, #1
 8003a46:	f000 fb91 	bl	800416c <xQueueCreateMutexStatic>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	e003      	b.n	8003a56 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f000 fb74 	bl	800413c <xQueueCreateMutex>
 8003a54:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <osMutexWait+0x18>
    return osErrorParameter;
 8003a74:	2380      	movs	r3, #128	@ 0x80
 8003a76:	e03a      	b.n	8003aee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a82:	d103      	bne.n	8003a8c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e009      	b.n	8003aa0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d006      	beq.n	8003aa0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <osMutexWait+0x40>
      ticks = 1;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003aa0:	f7ff ff3d 	bl	800391e <inHandlerMode>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d017      	beq.n	8003ada <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 ff96 	bl	80049e4 <xQueueReceiveFromISR>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d001      	beq.n	8003ac2 <osMutexWait+0x62>
      return osErrorOS;
 8003abe:	23ff      	movs	r3, #255	@ 0xff
 8003ac0:	e015      	b.n	8003aee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d011      	beq.n	8003aec <osMutexWait+0x8c>
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <osMutexWait+0x98>)
 8003aca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	f3bf 8f4f 	dsb	sy
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	e008      	b.n	8003aec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fe71 	bl	80047c4 <xQueueSemaphoreTake>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d001      	beq.n	8003aec <osMutexWait+0x8c>
    return osErrorOS;
 8003ae8:	23ff      	movs	r3, #255	@ 0xff
 8003aea:	e000      	b.n	8003aee <osMutexWait+0x8e>
  }
  
  return osOK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000ed04 	.word	0xe000ed04

08003afc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003b0c:	f7ff ff07 	bl	800391e <inHandlerMode>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003b16:	f107 0308 	add.w	r3, r7, #8
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fcde 	bl	80044de <xQueueGiveFromISR>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d001      	beq.n	8003b2c <osMutexRelease+0x30>
      return osErrorOS;
 8003b28:	23ff      	movs	r3, #255	@ 0xff
 8003b2a:	e017      	b.n	8003b5c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d013      	beq.n	8003b5a <osMutexRelease+0x5e>
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <osMutexRelease+0x68>)
 8003b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b38:	601a      	str	r2, [r3, #0]
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	e00a      	b.n	8003b5a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003b44:	2300      	movs	r3, #0
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb2a 	bl	80041a4 <xQueueGenericSend>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003b56:	23ff      	movs	r3, #255	@ 0xff
 8003b58:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	e000ed04 	.word	0xe000ed04

08003b68 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d011      	beq.n	8003b9e <osMessageCreate+0x36>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2400      	movs	r4, #0
 8003b94:	9400      	str	r4, [sp, #0]
 8003b96:	f000 f9dd 	bl	8003f54 <xQueueGenericCreateStatic>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	e008      	b.n	8003bb0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6818      	ldr	r0, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f000 fa4f 	bl	800404c <xQueueGenericCreate>
 8003bae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}

08003bb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <osMessagePut+0x1e>
    ticks = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003bd6:	f7ff fea2 	bl	800391e <inHandlerMode>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d018      	beq.n	8003c12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003be0:	f107 0210 	add.w	r2, r7, #16
 8003be4:	f107 0108 	add.w	r1, r7, #8
 8003be8:	2300      	movs	r3, #0
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fbdc 	bl	80043a8 <xQueueGenericSendFromISR>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osMessagePut+0x42>
      return osErrorOS;
 8003bf6:	23ff      	movs	r3, #255	@ 0xff
 8003bf8:	e018      	b.n	8003c2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d014      	beq.n	8003c2a <osMessagePut+0x72>
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <osMessagePut+0x7c>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	e00b      	b.n	8003c2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003c12:	f107 0108 	add.w	r1, r7, #8
 8003c16:	2300      	movs	r3, #0
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fac2 	bl	80041a4 <xQueueGenericSend>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <osMessagePut+0x72>
      return osErrorOS;
 8003c26:	23ff      	movs	r3, #255	@ 0xff
 8003c28:	e000      	b.n	8003c2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	e000ed04 	.word	0xe000ed04

08003c38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b08b      	sub	sp, #44	@ 0x2c
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003c52:	2380      	movs	r3, #128	@ 0x80
 8003c54:	617b      	str	r3, [r7, #20]
    return event;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	461c      	mov	r4, r3
 8003c5a:	f107 0314 	add.w	r3, r7, #20
 8003c5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c66:	e054      	b.n	8003d12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c76:	d103      	bne.n	8003c80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7e:	e009      	b.n	8003c94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <osMessageGet+0x5c>
      ticks = 1;
 8003c90:	2301      	movs	r3, #1
 8003c92:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003c94:	f7ff fe43 	bl	800391e <inHandlerMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01c      	beq.n	8003cd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003c9e:	f107 0220 	add.w	r2, r7, #32
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	68b8      	ldr	r0, [r7, #8]
 8003cac:	f000 fe9a 	bl	80049e4 <xQueueReceiveFromISR>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d102      	bne.n	8003cbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	e001      	b.n	8003cc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d01d      	beq.n	8003d02 <osMessageGet+0xca>
 8003cc6:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <osMessageGet+0xe4>)
 8003cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	e014      	b.n	8003d02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003cd8:	f107 0314 	add.w	r3, r7, #20
 8003cdc:	3304      	adds	r3, #4
 8003cde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	68b8      	ldr	r0, [r7, #8]
 8003ce4:	f000 fc8c 	bl	8004600 <xQueueReceive>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d102      	bne.n	8003cf4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003cee:	2310      	movs	r3, #16
 8003cf0:	617b      	str	r3, [r7, #20]
 8003cf2:	e006      	b.n	8003d02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <osMessageGet+0xc6>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	e000      	b.n	8003d00 <osMessageGet+0xc8>
 8003cfe:	2340      	movs	r3, #64	@ 0x40
 8003d00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	461c      	mov	r4, r3
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	372c      	adds	r7, #44	@ 0x2c
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd90      	pop	{r4, r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	e000ed04 	.word	0xe000ed04

08003d20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0208 	add.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f103 0208 	add.w	r2, r3, #8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f103 0208 	add.w	r2, r3, #8
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bc80      	pop	{r7}
 8003d74:	4770      	bx	lr

08003d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	601a      	str	r2, [r3, #0]
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dd2:	d103      	bne.n	8003ddc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	e00c      	b.n	8003df6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3308      	adds	r3, #8
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	e002      	b.n	8003dea <vListInsert+0x2e>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d2f6      	bcs.n	8003de4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6892      	ldr	r2, [r2, #8]
 8003e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6852      	ldr	r2, [r2, #4]
 8003e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d103      	bne.n	8003e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	1e5a      	subs	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3714      	adds	r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
	...

08003e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10b      	bne.n	8003eac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	e7fd      	b.n	8003ea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eac:	f002 f89e 	bl	8005fec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	68f9      	ldr	r1, [r7, #12]
 8003eba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ebc:	fb01 f303 	mul.w	r3, r1, r3
 8003ec0:	441a      	add	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	3b01      	subs	r3, #1
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ee2:	fb01 f303 	mul.w	r3, r1, r3
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	22ff      	movs	r2, #255	@ 0xff
 8003ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	22ff      	movs	r2, #255	@ 0xff
 8003ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d114      	bne.n	8003f2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01a      	beq.n	8003f40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 fb6a 	bl	80055e8 <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f50 <xQueueGenericReset+0xd0>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	e009      	b.n	8003f40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7ff fef5 	bl	8003d20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3324      	adds	r3, #36	@ 0x24
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7ff fef0 	bl	8003d20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f40:	f002 f884 	bl	800604c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f44:	2301      	movs	r3, #1
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000ed04 	.word	0xe000ed04

08003f54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08e      	sub	sp, #56	@ 0x38
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10b      	bne.n	8003f80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <xQueueGenericCreateStatic+0x56>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <xQueueGenericCreateStatic+0x5a>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <xQueueGenericCreateStatic+0x5c>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <xQueueGenericCreateStatic+0x84>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <xQueueGenericCreateStatic+0x88>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <xQueueGenericCreateStatic+0x8a>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	61fb      	str	r3, [r7, #28]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ffa:	2348      	movs	r3, #72	@ 0x48
 8003ffc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b48      	cmp	r3, #72	@ 0x48
 8004002:	d00b      	beq.n	800401c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	61bb      	str	r3, [r7, #24]
}
 8004016:	bf00      	nop
 8004018:	bf00      	nop
 800401a:	e7fd      	b.n	8004018 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800402e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	9300      	str	r3, [sp, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f000 f844 	bl	80040ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004044:	4618      	mov	r0, r3
 8004046:	3730      	adds	r7, #48	@ 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	@ 0x28
 8004050:	af02      	add	r7, sp, #8
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	4613      	mov	r3, r2
 8004058:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10b      	bne.n	8004078 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	613b      	str	r3, [r7, #16]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d102      	bne.n	8004084 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	e004      	b.n	800408e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	fb02 f303 	mul.w	r3, r2, r3
 800408c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	3348      	adds	r3, #72	@ 0x48
 8004092:	4618      	mov	r0, r3
 8004094:	f002 f8ac 	bl	80061f0 <pvPortMalloc>
 8004098:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00f      	beq.n	80040c0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	3348      	adds	r3, #72	@ 0x48
 80040a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ae:	79fa      	ldrb	r2, [r7, #7]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f000 f805 	bl	80040ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040c0:	69bb      	ldr	r3, [r7, #24]
	}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3720      	adds	r7, #32
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d103      	bne.n	80040e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	e002      	b.n	80040ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040f8:	2101      	movs	r1, #1
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f7ff fec0 	bl	8003e80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004100:	bf00      	nop
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004128:	2300      	movs	r3, #0
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f838 	bl	80041a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	4603      	mov	r3, r0
 8004144:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004146:	2301      	movs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	461a      	mov	r2, r3
 8004152:	6939      	ldr	r1, [r7, #16]
 8004154:	6978      	ldr	r0, [r7, #20]
 8004156:	f7ff ff79 	bl	800404c <xQueueGenericCreate>
 800415a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f7ff ffd3 	bl	8004108 <prvInitialiseMutex>

		return pxNewQueue;
 8004162:	68fb      	ldr	r3, [r7, #12]
	}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	4603      	mov	r3, r0
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	6939      	ldr	r1, [r7, #16]
 800418a:	6978      	ldr	r0, [r7, #20]
 800418c:	f7ff fee2 	bl	8003f54 <xQueueGenericCreateStatic>
 8004190:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff ffb8 	bl	8004108 <prvInitialiseMutex>

		return pxNewQueue;
 8004198:	68fb      	ldr	r3, [r7, #12]
	}
 800419a:	4618      	mov	r0, r3
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b08e      	sub	sp, #56	@ 0x38
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041b2:	2300      	movs	r3, #0
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericSend+0x34>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x42>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0x46>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0x48>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xQueueGenericSend+0x64>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d103      	bne.n	8004216 <xQueueGenericSend+0x72>
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <xQueueGenericSend+0x76>
 8004216:	2301      	movs	r3, #1
 8004218:	e000      	b.n	800421c <xQueueGenericSend+0x78>
 800421a:	2300      	movs	r3, #0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10b      	bne.n	8004238 <xQueueGenericSend+0x94>
	__asm volatile
 8004220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004224:	f383 8811 	msr	BASEPRI, r3
 8004228:	f3bf 8f6f 	isb	sy
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	623b      	str	r3, [r7, #32]
}
 8004232:	bf00      	nop
 8004234:	bf00      	nop
 8004236:	e7fd      	b.n	8004234 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004238:	f001 fba0 	bl	800597c <xTaskGetSchedulerState>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <xQueueGenericSend+0xa4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <xQueueGenericSend+0xa8>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <xQueueGenericSend+0xaa>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <xQueueGenericSend+0xc6>
	__asm volatile
 8004252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004256:	f383 8811 	msr	BASEPRI, r3
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	61fb      	str	r3, [r7, #28]
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	e7fd      	b.n	8004266 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800426a:	f001 febf 	bl	8005fec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <xQueueGenericSend+0xdc>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d129      	bne.n	80042d4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004286:	f000 fc46 	bl	8004b16 <prvCopyDataToQueue>
 800428a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800428c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2b00      	cmp	r3, #0
 8004292:	d010      	beq.n	80042b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	3324      	adds	r3, #36	@ 0x24
 8004298:	4618      	mov	r0, r3
 800429a:	f001 f9a5 	bl	80055e8 <xTaskRemoveFromEventList>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042a4:	4b3f      	ldr	r3, [pc, #252]	@ (80043a4 <xQueueGenericSend+0x200>)
 80042a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	e00a      	b.n	80042cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d007      	beq.n	80042cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042bc:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <xQueueGenericSend+0x200>)
 80042be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042cc:	f001 febe 	bl	800604c <vPortExitCritical>
				return pdPASS;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e063      	b.n	800439c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042da:	f001 feb7 	bl	800604c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042de:	2300      	movs	r3, #0
 80042e0:	e05c      	b.n	800439c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042e8:	f107 0314 	add.w	r3, r7, #20
 80042ec:	4618      	mov	r0, r3
 80042ee:	f001 f9df 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042f6:	f001 fea9 	bl	800604c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042fa:	f000 ff63 	bl	80051c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042fe:	f001 fe75 	bl	8005fec <vPortEnterCritical>
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004308:	b25b      	sxtb	r3, r3
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800430e:	d103      	bne.n	8004318 <xQueueGenericSend+0x174>
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800431e:	b25b      	sxtb	r3, r3
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004324:	d103      	bne.n	800432e <xQueueGenericSend+0x18a>
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800432e:	f001 fe8d 	bl	800604c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004332:	1d3a      	adds	r2, r7, #4
 8004334:	f107 0314 	add.w	r3, r7, #20
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f001 f9ce 	bl	80056dc <xTaskCheckForTimeOut>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d124      	bne.n	8004390 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004346:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004348:	f000 fcdd 	bl	8004d06 <prvIsQueueFull>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	3310      	adds	r3, #16
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f91e 	bl	800559c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004362:	f000 fc68 	bl	8004c36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004366:	f000 ff3b 	bl	80051e0 <xTaskResumeAll>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	f47f af7c 	bne.w	800426a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004372:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <xQueueGenericSend+0x200>)
 8004374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	e772      	b.n	800426a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004386:	f000 fc56 	bl	8004c36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800438a:	f000 ff29 	bl	80051e0 <xTaskResumeAll>
 800438e:	e76c      	b.n	800426a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004392:	f000 fc50 	bl	8004c36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004396:	f000 ff23 	bl	80051e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800439a:	2300      	movs	r3, #0
		}
	}
}
 800439c:	4618      	mov	r0, r3
 800439e:	3738      	adds	r7, #56	@ 0x38
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	e000ed04 	.word	0xe000ed04

080043a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08e      	sub	sp, #56	@ 0x38
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	607a      	str	r2, [r7, #4]
 80043b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <xQueueGenericSendFromISR+0x3e>
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <xQueueGenericSendFromISR+0x42>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericSendFromISR+0x44>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d103      	bne.n	8004416 <xQueueGenericSendFromISR+0x6e>
 800440e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004410:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <xQueueGenericSendFromISR+0x72>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueGenericSendFromISR+0x74>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	61fb      	str	r3, [r7, #28]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004438:	f001 fe9a 	bl	8006170 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800443c:	f3ef 8211 	mrs	r2, BASEPRI
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61ba      	str	r2, [r7, #24]
 8004452:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004454:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <xQueueGenericSendFromISR+0xc2>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d12c      	bne.n	80044c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800446a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800446c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004470:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800447a:	f000 fb4c 	bl	8004b16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800447e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004486:	d112      	bne.n	80044ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	2b00      	cmp	r3, #0
 800448e:	d016      	beq.n	80044be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004492:	3324      	adds	r3, #36	@ 0x24
 8004494:	4618      	mov	r0, r3
 8004496:	f001 f8a7 	bl	80055e8 <xTaskRemoveFromEventList>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00e      	beq.n	80044be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	e007      	b.n	80044be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044b2:	3301      	adds	r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	b25a      	sxtb	r2, r3
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044be:	2301      	movs	r3, #1
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80044c2:	e001      	b.n	80044c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80044c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b08e      	sub	sp, #56	@ 0x38
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80044ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <xQueueGiveFromISR+0x2c>
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	623b      	str	r3, [r7, #32]
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	e7fd      	b.n	8004506 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00b      	beq.n	800452a <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61fb      	str	r3, [r7, #28]
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	e7fd      	b.n	8004526 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <xQueueGiveFromISR+0x5c>
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <xQueueGiveFromISR+0x60>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <xQueueGiveFromISR+0x62>
 800453e:	2300      	movs	r3, #0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	61bb      	str	r3, [r7, #24]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800455c:	f001 fe08 	bl	8006170 <vPortValidateInterruptPriority>
	__asm volatile
 8004560:	f3ef 8211 	mrs	r2, BASEPRI
 8004564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	617a      	str	r2, [r7, #20]
 8004576:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004578:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800457a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004588:	429a      	cmp	r2, r3
 800458a:	d22b      	bcs.n	80045e4 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800458c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004592:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800459e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045a6:	d112      	bne.n	80045ce <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d016      	beq.n	80045de <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b2:	3324      	adds	r3, #36	@ 0x24
 80045b4:	4618      	mov	r0, r3
 80045b6:	f001 f817 	bl	80055e8 <xTaskRemoveFromEventList>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00e      	beq.n	80045de <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2201      	movs	r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e007      	b.n	80045de <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045d2:	3301      	adds	r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	b25a      	sxtb	r2, r3
 80045d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80045de:	2301      	movs	r3, #1
 80045e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e2:	e001      	b.n	80045e8 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ea:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f383 8811 	msr	BASEPRI, r3
}
 80045f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3738      	adds	r7, #56	@ 0x38
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08c      	sub	sp, #48	@ 0x30
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <xQueueReceive+0x32>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	623b      	str	r3, [r7, #32]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <xQueueReceive+0x40>
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <xQueueReceive+0x44>
 8004640:	2301      	movs	r3, #1
 8004642:	e000      	b.n	8004646 <xQueueReceive+0x46>
 8004644:	2300      	movs	r3, #0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <xQueueReceive+0x62>
	__asm volatile
 800464a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	61fb      	str	r3, [r7, #28]
}
 800465c:	bf00      	nop
 800465e:	bf00      	nop
 8004660:	e7fd      	b.n	800465e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004662:	f001 f98b 	bl	800597c <xTaskGetSchedulerState>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d102      	bne.n	8004672 <xQueueReceive+0x72>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <xQueueReceive+0x76>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <xQueueReceive+0x78>
 8004676:	2300      	movs	r3, #0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <xQueueReceive+0x94>
	__asm volatile
 800467c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004680:	f383 8811 	msr	BASEPRI, r3
 8004684:	f3bf 8f6f 	isb	sy
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	61bb      	str	r3, [r7, #24]
}
 800468e:	bf00      	nop
 8004690:	bf00      	nop
 8004692:	e7fd      	b.n	8004690 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004694:	f001 fcaa 	bl	8005fec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01f      	beq.n	80046e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80046a8:	f000 fa9f 	bl	8004bea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00f      	beq.n	80046dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	3310      	adds	r3, #16
 80046c0:	4618      	mov	r0, r3
 80046c2:	f000 ff91 	bl	80055e8 <xTaskRemoveFromEventList>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046cc:	4b3c      	ldr	r3, [pc, #240]	@ (80047c0 <xQueueReceive+0x1c0>)
 80046ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046dc:	f001 fcb6 	bl	800604c <vPortExitCritical>
				return pdPASS;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e069      	b.n	80047b8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ea:	f001 fcaf 	bl	800604c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e062      	b.n	80047b8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d106      	bne.n	8004706 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046f8:	f107 0310 	add.w	r3, r7, #16
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 ffd7 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004702:	2301      	movs	r3, #1
 8004704:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004706:	f001 fca1 	bl	800604c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800470a:	f000 fd5b 	bl	80051c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800470e:	f001 fc6d 	bl	8005fec <vPortEnterCritical>
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004718:	b25b      	sxtb	r3, r3
 800471a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800471e:	d103      	bne.n	8004728 <xQueueReceive+0x128>
 8004720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800472e:	b25b      	sxtb	r3, r3
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004734:	d103      	bne.n	800473e <xQueueReceive+0x13e>
 8004736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800473e:	f001 fc85 	bl	800604c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004742:	1d3a      	adds	r2, r7, #4
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f000 ffc6 	bl	80056dc <xTaskCheckForTimeOut>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d123      	bne.n	800479e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004756:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004758:	f000 fabf 	bl	8004cda <prvIsQueueEmpty>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d017      	beq.n	8004792 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004764:	3324      	adds	r3, #36	@ 0x24
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f000 ff16 	bl	800559c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004772:	f000 fa60 	bl	8004c36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004776:	f000 fd33 	bl	80051e0 <xTaskResumeAll>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d189      	bne.n	8004694 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004780:	4b0f      	ldr	r3, [pc, #60]	@ (80047c0 <xQueueReceive+0x1c0>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	e780      	b.n	8004694 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004794:	f000 fa4f 	bl	8004c36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004798:	f000 fd22 	bl	80051e0 <xTaskResumeAll>
 800479c:	e77a      	b.n	8004694 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800479e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047a0:	f000 fa49 	bl	8004c36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047a4:	f000 fd1c 	bl	80051e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047aa:	f000 fa96 	bl	8004cda <prvIsQueueEmpty>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f43f af6f 	beq.w	8004694 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047b6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3730      	adds	r7, #48	@ 0x30
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	e000ed04 	.word	0xe000ed04

080047c4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08e      	sub	sp, #56	@ 0x38
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	623b      	str	r3, [r7, #32]
}
 80047f2:	bf00      	nop
 80047f4:	bf00      	nop
 80047f6:	e7fd      	b.n	80047f4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	61fb      	str	r3, [r7, #28]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004818:	f001 f8b0 	bl	800597c <xTaskGetSchedulerState>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d102      	bne.n	8004828 <xQueueSemaphoreTake+0x64>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <xQueueSemaphoreTake+0x68>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <xQueueSemaphoreTake+0x6a>
 800482c:	2300      	movs	r3, #0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10b      	bne.n	800484a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004836:	f383 8811 	msr	BASEPRI, r3
 800483a:	f3bf 8f6f 	isb	sy
 800483e:	f3bf 8f4f 	dsb	sy
 8004842:	61bb      	str	r3, [r7, #24]
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	e7fd      	b.n	8004846 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800484a:	f001 fbcf 	bl	8005fec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800484e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	2b00      	cmp	r3, #0
 8004858:	d024      	beq.n	80048a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800485a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d104      	bne.n	8004874 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800486a:	f001 fa55 	bl	8005d18 <pvTaskIncrementMutexHeldCount>
 800486e:	4602      	mov	r2, r0
 8004870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004872:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00f      	beq.n	800489c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800487c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800487e:	3310      	adds	r3, #16
 8004880:	4618      	mov	r0, r3
 8004882:	f000 feb1 	bl	80055e8 <xTaskRemoveFromEventList>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800488c:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <xQueueSemaphoreTake+0x21c>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800489c:	f001 fbd6 	bl	800604c <vPortExitCritical>
				return pdPASS;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e098      	b.n	80049d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d112      	bne.n	80048d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	617b      	str	r3, [r7, #20]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048c8:	f001 fbc0 	bl	800604c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e082      	b.n	80049d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048d6:	f107 030c 	add.w	r3, r7, #12
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fee8 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048e4:	f001 fbb2 	bl	800604c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048e8:	f000 fc6c 	bl	80051c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ec:	f001 fb7e 	bl	8005fec <vPortEnterCritical>
 80048f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048f6:	b25b      	sxtb	r3, r3
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048fc:	d103      	bne.n	8004906 <xQueueSemaphoreTake+0x142>
 80048fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004900:	2200      	movs	r2, #0
 8004902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004912:	d103      	bne.n	800491c <xQueueSemaphoreTake+0x158>
 8004914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800491c:	f001 fb96 	bl	800604c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004920:	463a      	mov	r2, r7
 8004922:	f107 030c 	add.w	r3, r7, #12
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f000 fed7 	bl	80056dc <xTaskCheckForTimeOut>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d132      	bne.n	800499a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004936:	f000 f9d0 	bl	8004cda <prvIsQueueEmpty>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d026      	beq.n	800498e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004948:	f001 fb50 	bl	8005fec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4618      	mov	r0, r3
 8004952:	f001 f831 	bl	80059b8 <xTaskPriorityInherit>
 8004956:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004958:	f001 fb78 	bl	800604c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	3324      	adds	r3, #36	@ 0x24
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fe19 	bl	800559c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800496a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800496c:	f000 f963 	bl	8004c36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004970:	f000 fc36 	bl	80051e0 <xTaskResumeAll>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f af67 	bne.w	800484a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800497c:	4b18      	ldr	r3, [pc, #96]	@ (80049e0 <xQueueSemaphoreTake+0x21c>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e75d      	b.n	800484a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800498e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004990:	f000 f951 	bl	8004c36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004994:	f000 fc24 	bl	80051e0 <xTaskResumeAll>
 8004998:	e757      	b.n	800484a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800499a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800499c:	f000 f94b 	bl	8004c36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049a0:	f000 fc1e 	bl	80051e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049a6:	f000 f998 	bl	8004cda <prvIsQueueEmpty>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f43f af4c 	beq.w	800484a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00d      	beq.n	80049d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80049b8:	f001 fb18 	bl	8005fec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80049be:	f000 f893 	bl	8004ae8 <prvGetDisinheritPriorityAfterTimeout>
 80049c2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80049c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ca:	4618      	mov	r0, r3
 80049cc:	f001 f902 	bl	8005bd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049d0:	f001 fb3c 	bl	800604c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3738      	adds	r7, #56	@ 0x38
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	e000ed04 	.word	0xe000ed04

080049e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08e      	sub	sp, #56	@ 0x38
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	623b      	str	r3, [r7, #32]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d103      	bne.n	8004a20 <xQueueReceiveFromISR+0x3c>
 8004a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <xQueueReceiveFromISR+0x40>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e000      	b.n	8004a26 <xQueueReceiveFromISR+0x42>
 8004a24:	2300      	movs	r3, #0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61fb      	str	r3, [r7, #28]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a42:	f001 fb95 	bl	8006170 <vPortValidateInterruptPriority>
	__asm volatile
 8004a46:	f3ef 8211 	mrs	r2, BASEPRI
 8004a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	61ba      	str	r2, [r7, #24]
 8004a5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02f      	beq.n	8004ace <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a7c:	f000 f8b5 	bl	8004bea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	1e5a      	subs	r2, r3, #1
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a88:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a90:	d112      	bne.n	8004ab8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9c:	3310      	adds	r3, #16
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fda2 	bl	80055e8 <xTaskRemoveFromEventList>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00e      	beq.n	8004ac8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00b      	beq.n	8004ac8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e007      	b.n	8004ac8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004abc:	3301      	adds	r3, #1
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	b25a      	sxtb	r2, r3
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004acc:	e001      	b.n	8004ad2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f383 8811 	msr	BASEPRI, r3
}
 8004adc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3738      	adds	r7, #56	@ 0x38
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1c3 0307 	rsb	r3, r3, #7
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b086      	sub	sp, #24
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10d      	bne.n	8004b50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d14d      	bne.n	8004bd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 ffbf 	bl	8005ac4 <xTaskPriorityDisinherit>
 8004b46:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	605a      	str	r2, [r3, #4]
 8004b4e:	e043      	b.n	8004bd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d119      	bne.n	8004b8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6898      	ldr	r0, [r3, #8]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	461a      	mov	r2, r3
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	f00e fa04 	bl	8012f6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	441a      	add	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d32b      	bcc.n	8004bd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
 8004b88:	e026      	b.n	8004bd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68d8      	ldr	r0, [r3, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b92:	461a      	mov	r2, r3
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	f00e f9ea 	bl	8012f6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	441a      	add	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d207      	bcs.n	8004bc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	425b      	negs	r3, r3
 8004bc0:	441a      	add	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d105      	bne.n	8004bd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004be0:	697b      	ldr	r3, [r7, #20]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d018      	beq.n	8004c2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	441a      	add	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d303      	bcc.n	8004c1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68d9      	ldr	r1, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	461a      	mov	r2, r3
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	f00e f9a0 	bl	8012f6e <memcpy>
	}
}
 8004c2e:	bf00      	nop
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c3e:	f001 f9d5 	bl	8005fec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c4a:	e011      	b.n	8004c70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d012      	beq.n	8004c7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3324      	adds	r3, #36	@ 0x24
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fcc5 	bl	80055e8 <xTaskRemoveFromEventList>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c64:	f000 fd9e 	bl	80057a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dce9      	bgt.n	8004c4c <prvUnlockQueue+0x16>
 8004c78:	e000      	b.n	8004c7c <prvUnlockQueue+0x46>
					break;
 8004c7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	22ff      	movs	r2, #255	@ 0xff
 8004c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c84:	f001 f9e2 	bl	800604c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c88:	f001 f9b0 	bl	8005fec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c94:	e011      	b.n	8004cba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fca0 	bl	80055e8 <xTaskRemoveFromEventList>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cae:	f000 fd79 	bl	80057a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cb2:	7bbb      	ldrb	r3, [r7, #14]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dce9      	bgt.n	8004c96 <prvUnlockQueue+0x60>
 8004cc2:	e000      	b.n	8004cc6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cc4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	22ff      	movs	r2, #255	@ 0xff
 8004cca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004cce:	f001 f9bd 	bl	800604c <vPortExitCritical>
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ce2:	f001 f983 	bl	8005fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d102      	bne.n	8004cf4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e001      	b.n	8004cf8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 f9a8 	bl	800604c <vPortExitCritical>

	return xReturn;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d0e:	f001 f96d 	bl	8005fec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d102      	bne.n	8004d24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e001      	b.n	8004d28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d28:	f001 f990 	bl	800604c <vPortExitCritical>

	return xReturn;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b08e      	sub	sp, #56	@ 0x38
 8004d3a:	af04      	add	r7, sp, #16
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10b      	bne.n	8004d62 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	623b      	str	r3, [r7, #32]
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	e7fd      	b.n	8004d5e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10b      	bne.n	8004d80 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	61fb      	str	r3, [r7, #28]
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	e7fd      	b.n	8004d7c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d80:	23a0      	movs	r3, #160	@ 0xa0
 8004d82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d88:	d00b      	beq.n	8004da2 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	61bb      	str	r3, [r7, #24]
}
 8004d9c:	bf00      	nop
 8004d9e:	bf00      	nop
 8004da0:	e7fd      	b.n	8004d9e <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01e      	beq.n	8004de6 <xTaskCreateStatic+0xb0>
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d01b      	beq.n	8004de6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004db6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	9303      	str	r3, [sp, #12]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	9302      	str	r3, [sp, #8]
 8004dc8:	f107 0314 	add.w	r3, r7, #20
 8004dcc:	9301      	str	r3, [sp, #4]
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f851 	bl	8004e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004de0:	f000 f8e6 	bl	8004fb0 <prvAddNewTaskToReadyList>
 8004de4:	e001      	b.n	8004dea <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004de6:	2300      	movs	r3, #0
 8004de8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dea:	697b      	ldr	r3, [r7, #20]
	}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3728      	adds	r7, #40	@ 0x28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	@ 0x30
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 f9f1 	bl	80061f0 <pvPortMalloc>
 8004e0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004e16:	20a0      	movs	r0, #160	@ 0xa0
 8004e18:	f001 f9ea 	bl	80061f0 <pvPortMalloc>
 8004e1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e2a:	e005      	b.n	8004e38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f001 faa7 	bl	8006380 <vPortFree>
 8004e32:	e001      	b.n	8004e38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d017      	beq.n	8004e6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f80f 	bl	8004e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e62:	69f8      	ldr	r0, [r7, #28]
 8004e64:	f000 f8a4 	bl	8004fb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e002      	b.n	8004e74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e74:	69bb      	ldr	r3, [r7, #24]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	f023 0307 	bic.w	r3, r3, #7
 8004ea6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00b      	beq.n	8004eca <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	617b      	str	r3, [r7, #20]
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop
 8004ec8:	e7fd      	b.n	8004ec6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e012      	b.n	8004ef6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	7819      	ldrb	r1, [r3, #0]
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	3334      	adds	r3, #52	@ 0x34
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d9e9      	bls.n	8004ed0 <prvInitialiseNewTask+0x50>
 8004efc:	e000      	b.n	8004f00 <prvInitialiseNewTask+0x80>
		{
			break;
 8004efe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	2b06      	cmp	r3, #6
 8004f0c:	d901      	bls.n	8004f12 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f0e:	2306      	movs	r3, #6
 8004f10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f1c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fe ff18 	bl	8003d5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	3318      	adds	r3, #24
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe ff13 	bl	8003d5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	f1c3 0207 	rsb	r2, r3, #7
 8004f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	334c      	adds	r3, #76	@ 0x4c
 8004f62:	224c      	movs	r2, #76	@ 0x4c
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f00d ff17 	bl	8012d9a <memset>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004fa4 <prvInitialiseNewTask+0x124>)
 8004f70:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f74:	4a0c      	ldr	r2, [pc, #48]	@ (8004fa8 <prvInitialiseNewTask+0x128>)
 8004f76:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004fac <prvInitialiseNewTask+0x12c>)
 8004f7c:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	68f9      	ldr	r1, [r7, #12]
 8004f82:	69b8      	ldr	r0, [r7, #24]
 8004f84:	f000 ff42 	bl	8005e0c <pxPortInitialiseStack>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f9a:	bf00      	nop
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20008220 	.word	0x20008220
 8004fa8:	20008288 	.word	0x20008288
 8004fac:	200082f0 	.word	0x200082f0

08004fb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004fb8:	f001 f818 	bl	8005fec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8005068 <prvAddNewTaskToReadyList+0xb8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	4a29      	ldr	r2, [pc, #164]	@ (8005068 <prvAddNewTaskToReadyList+0xb8>)
 8004fc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fc6:	4b29      	ldr	r3, [pc, #164]	@ (800506c <prvAddNewTaskToReadyList+0xbc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004fce:	4a27      	ldr	r2, [pc, #156]	@ (800506c <prvAddNewTaskToReadyList+0xbc>)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fd4:	4b24      	ldr	r3, [pc, #144]	@ (8005068 <prvAddNewTaskToReadyList+0xb8>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d110      	bne.n	8004ffe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fdc:	f000 fc06 	bl	80057ec <prvInitialiseTaskLists>
 8004fe0:	e00d      	b.n	8004ffe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fe2:	4b23      	ldr	r3, [pc, #140]	@ (8005070 <prvAddNewTaskToReadyList+0xc0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fea:	4b20      	ldr	r3, [pc, #128]	@ (800506c <prvAddNewTaskToReadyList+0xbc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d802      	bhi.n	8004ffe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800506c <prvAddNewTaskToReadyList+0xbc>)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8005074 <prvAddNewTaskToReadyList+0xc4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3301      	adds	r3, #1
 8005004:	4a1b      	ldr	r2, [pc, #108]	@ (8005074 <prvAddNewTaskToReadyList+0xc4>)
 8005006:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500c:	2201      	movs	r2, #1
 800500e:	409a      	lsls	r2, r3
 8005010:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <prvAddNewTaskToReadyList+0xc8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4313      	orrs	r3, r2
 8005016:	4a18      	ldr	r2, [pc, #96]	@ (8005078 <prvAddNewTaskToReadyList+0xc8>)
 8005018:	6013      	str	r3, [r2, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4a15      	ldr	r2, [pc, #84]	@ (800507c <prvAddNewTaskToReadyList+0xcc>)
 8005028:	441a      	add	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe fea0 	bl	8003d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005036:	f001 f809 	bl	800604c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800503a:	4b0d      	ldr	r3, [pc, #52]	@ (8005070 <prvAddNewTaskToReadyList+0xc0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00e      	beq.n	8005060 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005042:	4b0a      	ldr	r3, [pc, #40]	@ (800506c <prvAddNewTaskToReadyList+0xbc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800504c:	429a      	cmp	r2, r3
 800504e:	d207      	bcs.n	8005060 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005050:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <prvAddNewTaskToReadyList+0xd0>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000558 	.word	0x20000558
 800506c:	20000458 	.word	0x20000458
 8005070:	20000564 	.word	0x20000564
 8005074:	20000574 	.word	0x20000574
 8005078:	20000560 	.word	0x20000560
 800507c:	2000045c 	.word	0x2000045c
 8005080:	e000ed04 	.word	0xe000ed04

08005084 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d018      	beq.n	80050c8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005096:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <vTaskDelay+0x64>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <vTaskDelay+0x32>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60bb      	str	r3, [r7, #8]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80050b6:	f000 f885 	bl	80051c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050ba:	2100      	movs	r1, #0
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fe3f 	bl	8005d40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050c2:	f000 f88d 	bl	80051e0 <xTaskResumeAll>
 80050c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d107      	bne.n	80050de <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80050ce:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <vTaskDelay+0x68>)
 80050d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050de:	bf00      	nop
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000580 	.word	0x20000580
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	@ 0x28
 80050f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050fe:	463a      	mov	r2, r7
 8005100:	1d39      	adds	r1, r7, #4
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f7fb f9c2 	bl	8000490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68ba      	ldr	r2, [r7, #8]
 8005112:	9202      	str	r2, [sp, #8]
 8005114:	9301      	str	r3, [sp, #4]
 8005116:	2300      	movs	r3, #0
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2300      	movs	r3, #0
 800511c:	460a      	mov	r2, r1
 800511e:	4921      	ldr	r1, [pc, #132]	@ (80051a4 <vTaskStartScheduler+0xb4>)
 8005120:	4821      	ldr	r0, [pc, #132]	@ (80051a8 <vTaskStartScheduler+0xb8>)
 8005122:	f7ff fe08 	bl	8004d36 <xTaskCreateStatic>
 8005126:	4603      	mov	r3, r0
 8005128:	4a20      	ldr	r2, [pc, #128]	@ (80051ac <vTaskStartScheduler+0xbc>)
 800512a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800512c:	4b1f      	ldr	r3, [pc, #124]	@ (80051ac <vTaskStartScheduler+0xbc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e001      	b.n	800513e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800513a:	2300      	movs	r3, #0
 800513c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d11b      	bne.n	800517c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	613b      	str	r3, [r7, #16]
}
 8005156:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005158:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <vTaskStartScheduler+0xc0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	334c      	adds	r3, #76	@ 0x4c
 800515e:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <vTaskStartScheduler+0xc4>)
 8005160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <vTaskStartScheduler+0xc8>)
 8005164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800516a:	4b14      	ldr	r3, [pc, #80]	@ (80051bc <vTaskStartScheduler+0xcc>)
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005170:	4b13      	ldr	r3, [pc, #76]	@ (80051c0 <vTaskStartScheduler+0xd0>)
 8005172:	2200      	movs	r2, #0
 8005174:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005176:	f000 fec7 	bl	8005f08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800517a:	e00f      	b.n	800519c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005182:	d10b      	bne.n	800519c <vTaskStartScheduler+0xac>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	60fb      	str	r3, [r7, #12]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <vTaskStartScheduler+0xa8>
}
 800519c:	bf00      	nop
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	08013c1c 	.word	0x08013c1c
 80051a8:	080057bd 	.word	0x080057bd
 80051ac:	2000057c 	.word	0x2000057c
 80051b0:	20000458 	.word	0x20000458
 80051b4:	20000028 	.word	0x20000028
 80051b8:	20000578 	.word	0x20000578
 80051bc:	20000564 	.word	0x20000564
 80051c0:	2000055c 	.word	0x2000055c

080051c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80051c8:	4b04      	ldr	r3, [pc, #16]	@ (80051dc <vTaskSuspendAll+0x18>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	4a03      	ldr	r2, [pc, #12]	@ (80051dc <vTaskSuspendAll+0x18>)
 80051d0:	6013      	str	r3, [r2, #0]
}
 80051d2:	bf00      	nop
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	20000580 	.word	0x20000580

080051e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051ee:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <xTaskResumeAll+0x118>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <xTaskResumeAll+0x2e>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	603b      	str	r3, [r7, #0]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800520e:	f000 feed 	bl	8005fec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005212:	4b39      	ldr	r3, [pc, #228]	@ (80052f8 <xTaskResumeAll+0x118>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3b01      	subs	r3, #1
 8005218:	4a37      	ldr	r2, [pc, #220]	@ (80052f8 <xTaskResumeAll+0x118>)
 800521a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800521c:	4b36      	ldr	r3, [pc, #216]	@ (80052f8 <xTaskResumeAll+0x118>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d161      	bne.n	80052e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005224:	4b35      	ldr	r3, [pc, #212]	@ (80052fc <xTaskResumeAll+0x11c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d05d      	beq.n	80052e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800522c:	e02e      	b.n	800528c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800522e:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <xTaskResumeAll+0x120>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	3318      	adds	r3, #24
 800523a:	4618      	mov	r0, r3
 800523c:	f7fe fdf6 	bl	8003e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3304      	adds	r3, #4
 8005244:	4618      	mov	r0, r3
 8005246:	f7fe fdf1 	bl	8003e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	2201      	movs	r2, #1
 8005250:	409a      	lsls	r2, r3
 8005252:	4b2c      	ldr	r3, [pc, #176]	@ (8005304 <xTaskResumeAll+0x124>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4313      	orrs	r3, r2
 8005258:	4a2a      	ldr	r2, [pc, #168]	@ (8005304 <xTaskResumeAll+0x124>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	4613      	mov	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4a27      	ldr	r2, [pc, #156]	@ (8005308 <xTaskResumeAll+0x128>)
 800526a:	441a      	add	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3304      	adds	r3, #4
 8005270:	4619      	mov	r1, r3
 8005272:	4610      	mov	r0, r2
 8005274:	f7fe fd7f 	bl	8003d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527c:	4b23      	ldr	r3, [pc, #140]	@ (800530c <xTaskResumeAll+0x12c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005286:	4b22      	ldr	r3, [pc, #136]	@ (8005310 <xTaskResumeAll+0x130>)
 8005288:	2201      	movs	r2, #1
 800528a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800528c:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <xTaskResumeAll+0x120>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1cc      	bne.n	800522e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800529a:	f000 fb4b 	bl	8005934 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800529e:	4b1d      	ldr	r3, [pc, #116]	@ (8005314 <xTaskResumeAll+0x134>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d010      	beq.n	80052cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052aa:	f000 f857 	bl	800535c <xTaskIncrementTick>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80052b4:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <xTaskResumeAll+0x130>)
 80052b6:	2201      	movs	r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	3b01      	subs	r3, #1
 80052be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1f1      	bne.n	80052aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <xTaskResumeAll+0x134>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052cc:	4b10      	ldr	r3, [pc, #64]	@ (8005310 <xTaskResumeAll+0x130>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052d4:	2301      	movs	r3, #1
 80052d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005318 <xTaskResumeAll+0x138>)
 80052da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052e8:	f000 feb0 	bl	800604c <vPortExitCritical>

	return xAlreadyYielded;
 80052ec:	68bb      	ldr	r3, [r7, #8]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000580 	.word	0x20000580
 80052fc:	20000558 	.word	0x20000558
 8005300:	20000518 	.word	0x20000518
 8005304:	20000560 	.word	0x20000560
 8005308:	2000045c 	.word	0x2000045c
 800530c:	20000458 	.word	0x20000458
 8005310:	2000056c 	.word	0x2000056c
 8005314:	20000568 	.word	0x20000568
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005322:	4b04      	ldr	r3, [pc, #16]	@ (8005334 <xTaskGetTickCount+0x18>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005328:	687b      	ldr	r3, [r7, #4]
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	2000055c 	.word	0x2000055c

08005338 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800533e:	f000 ff17 	bl	8006170 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005342:	2300      	movs	r3, #0
 8005344:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005346:	4b04      	ldr	r3, [pc, #16]	@ (8005358 <xTaskGetTickCountFromISR+0x20>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800534c:	683b      	ldr	r3, [r7, #0]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	2000055c 	.word	0x2000055c

0800535c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005362:	2300      	movs	r3, #0
 8005364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005366:	4b51      	ldr	r3, [pc, #324]	@ (80054ac <xTaskIncrementTick+0x150>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 808e 	bne.w	800548c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005370:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <xTaskIncrementTick+0x154>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005378:	4a4d      	ldr	r2, [pc, #308]	@ (80054b0 <xTaskIncrementTick+0x154>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d121      	bne.n	80053c8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005384:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <xTaskIncrementTick+0x158>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	603b      	str	r3, [r7, #0]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xTaskIncrementTick+0x46>
 80053a6:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <xTaskIncrementTick+0x15c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a40      	ldr	r2, [pc, #256]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4a40      	ldr	r2, [pc, #256]	@ (80054b8 <xTaskIncrementTick+0x15c>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b40      	ldr	r3, [pc, #256]	@ (80054bc <xTaskIncrementTick+0x160>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	4a3e      	ldr	r2, [pc, #248]	@ (80054bc <xTaskIncrementTick+0x160>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	f000 fab6 	bl	8005934 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c8:	4b3d      	ldr	r3, [pc, #244]	@ (80054c0 <xTaskIncrementTick+0x164>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d34d      	bcc.n	800546e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	4b38      	ldr	r3, [pc, #224]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xTaskIncrementTick+0x84>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <xTaskIncrementTick+0x86>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e6:	4b36      	ldr	r3, [pc, #216]	@ (80054c0 <xTaskIncrementTick+0x164>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053ec:	601a      	str	r2, [r3, #0]
					break;
 80053ee:	e03e      	b.n	800546e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f0:	4b30      	ldr	r3, [pc, #192]	@ (80054b4 <xTaskIncrementTick+0x158>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d203      	bcs.n	8005410 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005408:	4a2d      	ldr	r2, [pc, #180]	@ (80054c0 <xTaskIncrementTick+0x164>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6013      	str	r3, [r2, #0]
						break;
 800540e:	e02e      	b.n	800546e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3304      	adds	r3, #4
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe fd09 	bl	8003e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3318      	adds	r3, #24
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fd00 	bl	8003e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	4b23      	ldr	r3, [pc, #140]	@ (80054c4 <xTaskIncrementTick+0x168>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4313      	orrs	r3, r2
 800543a:	4a22      	ldr	r2, [pc, #136]	@ (80054c4 <xTaskIncrementTick+0x168>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <xTaskIncrementTick+0x16c>)
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe fc8e 	bl	8003d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800545e:	4b1b      	ldr	r3, [pc, #108]	@ (80054cc <xTaskIncrementTick+0x170>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d3b4      	bcc.n	80053d2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546c:	e7b1      	b.n	80053d2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800546e:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <xTaskIncrementTick+0x170>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005474:	4914      	ldr	r1, [pc, #80]	@ (80054c8 <xTaskIncrementTick+0x16c>)
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d907      	bls.n	8005496 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e004      	b.n	8005496 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <xTaskIncrementTick+0x174>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	4a0f      	ldr	r2, [pc, #60]	@ (80054d0 <xTaskIncrementTick+0x174>)
 8005494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005496:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <xTaskIncrementTick+0x178>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054a2:	697b      	ldr	r3, [r7, #20]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000580 	.word	0x20000580
 80054b0:	2000055c 	.word	0x2000055c
 80054b4:	20000510 	.word	0x20000510
 80054b8:	20000514 	.word	0x20000514
 80054bc:	20000570 	.word	0x20000570
 80054c0:	20000578 	.word	0x20000578
 80054c4:	20000560 	.word	0x20000560
 80054c8:	2000045c 	.word	0x2000045c
 80054cc:	20000458 	.word	0x20000458
 80054d0:	20000568 	.word	0x20000568
 80054d4:	2000056c 	.word	0x2000056c

080054d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054de:	4b29      	ldr	r3, [pc, #164]	@ (8005584 <vTaskSwitchContext+0xac>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054e6:	4b28      	ldr	r3, [pc, #160]	@ (8005588 <vTaskSwitchContext+0xb0>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ec:	e045      	b.n	800557a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <vTaskSwitchContext+0xb0>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054f4:	4b25      	ldr	r3, [pc, #148]	@ (800558c <vTaskSwitchContext+0xb4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f1c3 031f 	rsb	r3, r3, #31
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	4921      	ldr	r1, [pc, #132]	@ (8005590 <vTaskSwitchContext+0xb8>)
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <vTaskSwitchContext+0x5e>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	e7fd      	b.n	8005532 <vTaskSwitchContext+0x5a>
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a13      	ldr	r2, [pc, #76]	@ (8005590 <vTaskSwitchContext+0xb8>)
 8005542:	4413      	add	r3, r2
 8005544:	613b      	str	r3, [r7, #16]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	605a      	str	r2, [r3, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	3308      	adds	r3, #8
 8005558:	429a      	cmp	r2, r3
 800555a:	d104      	bne.n	8005566 <vTaskSwitchContext+0x8e>
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	605a      	str	r2, [r3, #4]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	4a09      	ldr	r2, [pc, #36]	@ (8005594 <vTaskSwitchContext+0xbc>)
 800556e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005570:	4b08      	ldr	r3, [pc, #32]	@ (8005594 <vTaskSwitchContext+0xbc>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	334c      	adds	r3, #76	@ 0x4c
 8005576:	4a08      	ldr	r2, [pc, #32]	@ (8005598 <vTaskSwitchContext+0xc0>)
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	bf00      	nop
 800557c:	371c      	adds	r7, #28
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	20000580 	.word	0x20000580
 8005588:	2000056c 	.word	0x2000056c
 800558c:	20000560 	.word	0x20000560
 8005590:	2000045c 	.word	0x2000045c
 8005594:	20000458 	.word	0x20000458
 8005598:	20000028 	.word	0x20000028

0800559c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	60fb      	str	r3, [r7, #12]
}
 80055be:	bf00      	nop
 80055c0:	bf00      	nop
 80055c2:	e7fd      	b.n	80055c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <vTaskPlaceOnEventList+0x48>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3318      	adds	r3, #24
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f7fe fbf5 	bl	8003dbc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055d2:	2101      	movs	r1, #1
 80055d4:	6838      	ldr	r0, [r7, #0]
 80055d6:	f000 fbb3 	bl	8005d40 <prvAddCurrentTaskToDelayedList>
}
 80055da:	bf00      	nop
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000458 	.word	0x20000458

080055e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3318      	adds	r3, #24
 800561a:	4618      	mov	r0, r3
 800561c:	f7fe fc06 	bl	8003e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <xTaskRemoveFromEventList+0xb0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11c      	bne.n	8005662 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3304      	adds	r3, #4
 800562c:	4618      	mov	r0, r3
 800562e:	f7fe fbfd 	bl	8003e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005636:	2201      	movs	r2, #1
 8005638:	409a      	lsls	r2, r3
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <xTaskRemoveFromEventList+0xb4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4313      	orrs	r3, r2
 8005640:	4a16      	ldr	r2, [pc, #88]	@ (800569c <xTaskRemoveFromEventList+0xb4>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a13      	ldr	r2, [pc, #76]	@ (80056a0 <xTaskRemoveFromEventList+0xb8>)
 8005652:	441a      	add	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fe fb8b 	bl	8003d76 <vListInsertEnd>
 8005660:	e005      	b.n	800566e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	480e      	ldr	r0, [pc, #56]	@ (80056a4 <xTaskRemoveFromEventList+0xbc>)
 800566a:	f7fe fb84 	bl	8003d76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005672:	4b0d      	ldr	r3, [pc, #52]	@ (80056a8 <xTaskRemoveFromEventList+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005678:	429a      	cmp	r2, r3
 800567a:	d905      	bls.n	8005688 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005680:	4b0a      	ldr	r3, [pc, #40]	@ (80056ac <xTaskRemoveFromEventList+0xc4>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e001      	b.n	800568c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000580 	.word	0x20000580
 800569c:	20000560 	.word	0x20000560
 80056a0:	2000045c 	.word	0x2000045c
 80056a4:	20000518 	.word	0x20000518
 80056a8:	20000458 	.word	0x20000458
 80056ac:	2000056c 	.word	0x2000056c

080056b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <vTaskInternalSetTimeOutState+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056c0:	4b05      	ldr	r3, [pc, #20]	@ (80056d8 <vTaskInternalSetTimeOutState+0x28>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000570 	.word	0x20000570
 80056d8:	2000055c 	.word	0x2000055c

080056dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10b      	bne.n	8005704 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10b      	bne.n	8005722 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800570a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570e:	f383 8811 	msr	BASEPRI, r3
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	f3bf 8f4f 	dsb	sy
 800571a:	60fb      	str	r3, [r7, #12]
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	e7fd      	b.n	800571e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005722:	f000 fc63 	bl	8005fec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005726:	4b1d      	ldr	r3, [pc, #116]	@ (800579c <xTaskCheckForTimeOut+0xc0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800573e:	d102      	bne.n	8005746 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
 8005744:	e023      	b.n	800578e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b15      	ldr	r3, [pc, #84]	@ (80057a0 <xTaskCheckForTimeOut+0xc4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d007      	beq.n	8005762 <xTaskCheckForTimeOut+0x86>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	69ba      	ldr	r2, [r7, #24]
 8005758:	429a      	cmp	r2, r3
 800575a:	d302      	bcc.n	8005762 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	e015      	b.n	800578e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	429a      	cmp	r2, r3
 800576a:	d20b      	bcs.n	8005784 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad2      	subs	r2, r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff ff99 	bl	80056b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
 8005782:	e004      	b.n	800578e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2200      	movs	r2, #0
 8005788:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800578e:	f000 fc5d 	bl	800604c <vPortExitCritical>

	return xReturn;
 8005792:	69fb      	ldr	r3, [r7, #28]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3720      	adds	r7, #32
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000055c 	.word	0x2000055c
 80057a0:	20000570 	.word	0x20000570

080057a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057a8:	4b03      	ldr	r3, [pc, #12]	@ (80057b8 <vTaskMissedYield+0x14>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000056c 	.word	0x2000056c

080057bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c4:	f000 f852 	bl	800586c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057c8:	4b06      	ldr	r3, [pc, #24]	@ (80057e4 <prvIdleTask+0x28>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d9f9      	bls.n	80057c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <prvIdleTask+0x2c>)
 80057d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057e0:	e7f0      	b.n	80057c4 <prvIdleTask+0x8>
 80057e2:	bf00      	nop
 80057e4:	2000045c 	.word	0x2000045c
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057f2:	2300      	movs	r3, #0
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e00c      	b.n	8005812 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	4a12      	ldr	r2, [pc, #72]	@ (800584c <prvInitialiseTaskLists+0x60>)
 8005804:	4413      	add	r3, r2
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fa8a 	bl	8003d20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3301      	adds	r3, #1
 8005810:	607b      	str	r3, [r7, #4]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b06      	cmp	r3, #6
 8005816:	d9ef      	bls.n	80057f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005818:	480d      	ldr	r0, [pc, #52]	@ (8005850 <prvInitialiseTaskLists+0x64>)
 800581a:	f7fe fa81 	bl	8003d20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800581e:	480d      	ldr	r0, [pc, #52]	@ (8005854 <prvInitialiseTaskLists+0x68>)
 8005820:	f7fe fa7e 	bl	8003d20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005824:	480c      	ldr	r0, [pc, #48]	@ (8005858 <prvInitialiseTaskLists+0x6c>)
 8005826:	f7fe fa7b 	bl	8003d20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800582a:	480c      	ldr	r0, [pc, #48]	@ (800585c <prvInitialiseTaskLists+0x70>)
 800582c:	f7fe fa78 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005830:	480b      	ldr	r0, [pc, #44]	@ (8005860 <prvInitialiseTaskLists+0x74>)
 8005832:	f7fe fa75 	bl	8003d20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005836:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <prvInitialiseTaskLists+0x78>)
 8005838:	4a05      	ldr	r2, [pc, #20]	@ (8005850 <prvInitialiseTaskLists+0x64>)
 800583a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800583c:	4b0a      	ldr	r3, [pc, #40]	@ (8005868 <prvInitialiseTaskLists+0x7c>)
 800583e:	4a05      	ldr	r2, [pc, #20]	@ (8005854 <prvInitialiseTaskLists+0x68>)
 8005840:	601a      	str	r2, [r3, #0]
}
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	2000045c 	.word	0x2000045c
 8005850:	200004e8 	.word	0x200004e8
 8005854:	200004fc 	.word	0x200004fc
 8005858:	20000518 	.word	0x20000518
 800585c:	2000052c 	.word	0x2000052c
 8005860:	20000544 	.word	0x20000544
 8005864:	20000510 	.word	0x20000510
 8005868:	20000514 	.word	0x20000514

0800586c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005872:	e019      	b.n	80058a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005874:	f000 fbba 	bl	8005fec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005878:	4b10      	ldr	r3, [pc, #64]	@ (80058bc <prvCheckTasksWaitingTermination+0x50>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3304      	adds	r3, #4
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fad1 	bl	8003e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800588a:	4b0d      	ldr	r3, [pc, #52]	@ (80058c0 <prvCheckTasksWaitingTermination+0x54>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3b01      	subs	r3, #1
 8005890:	4a0b      	ldr	r2, [pc, #44]	@ (80058c0 <prvCheckTasksWaitingTermination+0x54>)
 8005892:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <prvCheckTasksWaitingTermination+0x58>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3b01      	subs	r3, #1
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <prvCheckTasksWaitingTermination+0x58>)
 800589c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800589e:	f000 fbd5 	bl	800604c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f810 	bl	80058c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058a8:	4b06      	ldr	r3, [pc, #24]	@ (80058c4 <prvCheckTasksWaitingTermination+0x58>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e1      	bne.n	8005874 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	2000052c 	.word	0x2000052c
 80058c0:	20000558 	.word	0x20000558
 80058c4:	20000540 	.word	0x20000540

080058c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	334c      	adds	r3, #76	@ 0x4c
 80058d4:	4618      	mov	r0, r3
 80058d6:	f00d fa97 	bl	8012e08 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fd49 	bl	8006380 <vPortFree>
				vPortFree( pxTCB );
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fd46 	bl	8006380 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058f4:	e019      	b.n	800592a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d103      	bne.n	8005908 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fd3d 	bl	8006380 <vPortFree>
	}
 8005906:	e010      	b.n	800592a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800590e:	2b02      	cmp	r3, #2
 8005910:	d00b      	beq.n	800592a <prvDeleteTCB+0x62>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	60fb      	str	r3, [r7, #12]
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <prvDeleteTCB+0x5e>
	}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800593a:	4b0e      	ldr	r3, [pc, #56]	@ (8005974 <prvResetNextTaskUnblockTime+0x40>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <prvResetNextTaskUnblockTime+0x14>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <prvResetNextTaskUnblockTime+0x16>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d004      	beq.n	8005958 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800594e:	4b0a      	ldr	r3, [pc, #40]	@ (8005978 <prvResetNextTaskUnblockTime+0x44>)
 8005950:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005954:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005956:	e008      	b.n	800596a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <prvResetNextTaskUnblockTime+0x40>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4a04      	ldr	r2, [pc, #16]	@ (8005978 <prvResetNextTaskUnblockTime+0x44>)
 8005968:	6013      	str	r3, [r2, #0]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	20000510 	.word	0x20000510
 8005978:	20000578 	.word	0x20000578

0800597c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <xTaskGetSchedulerState+0x34>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800598a:	2301      	movs	r3, #1
 800598c:	607b      	str	r3, [r7, #4]
 800598e:	e008      	b.n	80059a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005990:	4b08      	ldr	r3, [pc, #32]	@ (80059b4 <xTaskGetSchedulerState+0x38>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d102      	bne.n	800599e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005998:	2302      	movs	r3, #2
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	e001      	b.n	80059a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800599e:	2300      	movs	r3, #0
 80059a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80059a2:	687b      	ldr	r3, [r7, #4]
	}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bc80      	pop	{r7}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000564 	.word	0x20000564
 80059b4:	20000580 	.word	0x20000580

080059b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d06e      	beq.n	8005aac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d2:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <xTaskPriorityInherit+0x100>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d8:	429a      	cmp	r2, r3
 80059da:	d25e      	bcs.n	8005a9a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db06      	blt.n	80059f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e4:	4b34      	ldr	r3, [pc, #208]	@ (8005ab8 <xTaskPriorityInherit+0x100>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ea:	f1c3 0207 	rsb	r2, r3, #7
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6959      	ldr	r1, [r3, #20]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4a2e      	ldr	r2, [pc, #184]	@ (8005abc <xTaskPriorityInherit+0x104>)
 8005a04:	4413      	add	r3, r2
 8005a06:	4299      	cmp	r1, r3
 8005a08:	d101      	bne.n	8005a0e <xTaskPriorityInherit+0x56>
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e000      	b.n	8005a10 <xTaskPriorityInherit+0x58>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d03a      	beq.n	8005a8a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe fa07 	bl	8003e2c <uxListRemove>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d115      	bne.n	8005a50 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a28:	4924      	ldr	r1, [pc, #144]	@ (8005abc <xTaskPriorityInherit+0x104>)
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <xTaskPriorityInherit+0x98>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a3e:	2201      	movs	r2, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	43da      	mvns	r2, r3
 8005a46:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac0 <xTaskPriorityInherit+0x108>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac0 <xTaskPriorityInherit+0x108>)
 8005a4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a50:	4b19      	ldr	r3, [pc, #100]	@ (8005ab8 <xTaskPriorityInherit+0x100>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5e:	2201      	movs	r2, #1
 8005a60:	409a      	lsls	r2, r3
 8005a62:	4b17      	ldr	r3, [pc, #92]	@ (8005ac0 <xTaskPriorityInherit+0x108>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <xTaskPriorityInherit+0x108>)
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4a10      	ldr	r2, [pc, #64]	@ (8005abc <xTaskPriorityInherit+0x104>)
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f7fe f977 	bl	8003d76 <vListInsertEnd>
 8005a88:	e004      	b.n	8005a94 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ab8 <xTaskPriorityInherit+0x100>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	e008      	b.n	8005aac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a9e:	4b06      	ldr	r3, [pc, #24]	@ (8005ab8 <xTaskPriorityInherit+0x100>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d201      	bcs.n	8005aac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005aac:	68fb      	ldr	r3, [r7, #12]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20000458 	.word	0x20000458
 8005abc:	2000045c 	.word	0x2000045c
 8005ac0:	20000560 	.word	0x20000560

08005ac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d070      	beq.n	8005bbc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005ada:	4b3b      	ldr	r3, [pc, #236]	@ (8005bc8 <xTaskPriorityDisinherit+0x104>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d00b      	beq.n	8005afc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae8:	f383 8811 	msr	BASEPRI, r3
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f3bf 8f4f 	dsb	sy
 8005af4:	60fb      	str	r3, [r7, #12]
}
 8005af6:	bf00      	nop
 8005af8:	bf00      	nop
 8005afa:	e7fd      	b.n	8005af8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60bb      	str	r3, [r7, #8]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d044      	beq.n	8005bbc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d140      	bne.n	8005bbc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7fe f974 	bl	8003e2c <uxListRemove>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d115      	bne.n	8005b76 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b4e:	491f      	ldr	r1, [pc, #124]	@ (8005bcc <xTaskPriorityDisinherit+0x108>)
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xTaskPriorityDisinherit+0xb2>
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	2201      	movs	r2, #1
 8005b66:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	4b18      	ldr	r3, [pc, #96]	@ (8005bd0 <xTaskPriorityDisinherit+0x10c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4013      	ands	r3, r2
 8005b72:	4a17      	ldr	r2, [pc, #92]	@ (8005bd0 <xTaskPriorityDisinherit+0x10c>)
 8005b74:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b82:	f1c3 0207 	rsb	r2, r3, #7
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b8e:	2201      	movs	r2, #1
 8005b90:	409a      	lsls	r2, r3
 8005b92:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd0 <xTaskPriorityDisinherit+0x10c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	4a0d      	ldr	r2, [pc, #52]	@ (8005bd0 <xTaskPriorityDisinherit+0x10c>)
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a08      	ldr	r2, [pc, #32]	@ (8005bcc <xTaskPriorityDisinherit+0x108>)
 8005baa:	441a      	add	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	3304      	adds	r3, #4
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	f7fe f8df 	bl	8003d76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bbc:	697b      	ldr	r3, [r7, #20]
	}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000458 	.word	0x20000458
 8005bcc:	2000045c 	.word	0x2000045c
 8005bd0:	20000560 	.word	0x20000560

08005bd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 808a 	beq.w	8005d02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10b      	bne.n	8005c0e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60fb      	str	r3, [r7, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	e7fd      	b.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d902      	bls.n	8005c1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	61fb      	str	r3, [r7, #28]
 8005c1c:	e002      	b.n	8005c24 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d069      	beq.n	8005d02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d164      	bne.n	8005d02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c38:	4b34      	ldr	r3, [pc, #208]	@ (8005d0c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d10b      	bne.n	8005c5a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	60bb      	str	r3, [r7, #8]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	db04      	blt.n	8005c78 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f1c3 0207 	rsb	r2, r3, #7
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	6959      	ldr	r1, [r3, #20]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4a22      	ldr	r2, [pc, #136]	@ (8005d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c88:	4413      	add	r3, r2
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	d101      	bne.n	8005c92 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d034      	beq.n	8005d02 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7fe f8c5 	bl	8003e2c <uxListRemove>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d115      	bne.n	8005cd4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cac:	4918      	ldr	r1, [pc, #96]	@ (8005d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43da      	mvns	r2, r3
 8005cca:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	4a10      	ldr	r2, [pc, #64]	@ (8005d14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cd2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	2201      	movs	r2, #1
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8005d14 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a07      	ldr	r2, [pc, #28]	@ (8005d10 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005cf4:	441a      	add	r2, r3
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fe f83a 	bl	8003d76 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d02:	bf00      	nop
 8005d04:	3720      	adds	r7, #32
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000458 	.word	0x20000458
 8005d10:	2000045c 	.word	0x2000045c
 8005d14:	20000560 	.word	0x20000560

08005d18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005d1c:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d24:	4b05      	ldr	r3, [pc, #20]	@ (8005d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d2a:	3201      	adds	r2, #1
 8005d2c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d30:	681b      	ldr	r3, [r3, #0]
	}
 8005d32:	4618      	mov	r0, r3
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000458 	.word	0x20000458

08005d40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d4a:	4b29      	ldr	r3, [pc, #164]	@ (8005df0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d50:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe f868 	bl	8003e2c <uxListRemove>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10b      	bne.n	8005d7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d62:	4b24      	ldr	r3, [pc, #144]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4013      	ands	r3, r2
 8005d76:	4a20      	ldr	r2, [pc, #128]	@ (8005df8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d80:	d10a      	bne.n	8005d98 <prvAddCurrentTaskToDelayedList+0x58>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d88:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3304      	adds	r3, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	481a      	ldr	r0, [pc, #104]	@ (8005dfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d92:	f7fd fff0 	bl	8003d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d96:	e026      	b.n	8005de6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005da0:	4b14      	ldr	r3, [pc, #80]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d209      	bcs.n	8005dc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005db0:	4b13      	ldr	r3, [pc, #76]	@ (8005e00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	4b0f      	ldr	r3, [pc, #60]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f7fd fffd 	bl	8003dbc <vListInsert>
}
 8005dc2:	e010      	b.n	8005de6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fd fff3 	bl	8003dbc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d202      	bcs.n	8005de6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005de0:	4a09      	ldr	r2, [pc, #36]	@ (8005e08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6013      	str	r3, [r2, #0]
}
 8005de6:	bf00      	nop
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2000055c 	.word	0x2000055c
 8005df4:	20000458 	.word	0x20000458
 8005df8:	20000560 	.word	0x20000560
 8005dfc:	20000544 	.word	0x20000544
 8005e00:	20000514 	.word	0x20000514
 8005e04:	20000510 	.word	0x20000510
 8005e08:	20000578 	.word	0x20000578

08005e0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b04      	subs	r3, #4
 8005e1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3b04      	subs	r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e3c:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <pxPortInitialiseStack+0x54>)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3b14      	subs	r3, #20
 8005e46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b20      	subs	r3, #32
 8005e52:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e54:	68fb      	ldr	r3, [r7, #12]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr
 8005e60:	08005e65 	.word	0x08005e65

08005e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e6e:	4b12      	ldr	r3, [pc, #72]	@ (8005eb8 <prvTaskExitError+0x54>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e76:	d00b      	beq.n	8005e90 <prvTaskExitError+0x2c>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	60fb      	str	r3, [r7, #12]
}
 8005e8a:	bf00      	nop
 8005e8c:	bf00      	nop
 8005e8e:	e7fd      	b.n	8005e8c <prvTaskExitError+0x28>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60bb      	str	r3, [r7, #8]
}
 8005ea2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ea4:	bf00      	nop
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d0fc      	beq.n	8005ea6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bc80      	pop	{r7}
 8005eb6:	4770      	bx	lr
 8005eb8:	2000000c 	.word	0x2000000c
 8005ebc:	00000000 	.word	0x00000000

08005ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ec0:	4b07      	ldr	r3, [pc, #28]	@ (8005ee0 <pxCurrentTCBConst2>)
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	6808      	ldr	r0, [r1, #0]
 8005ec6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005eca:	f380 8809 	msr	PSP, r0
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f380 8811 	msr	BASEPRI, r0
 8005eda:	f04e 0e0d 	orr.w	lr, lr, #13
 8005ede:	4770      	bx	lr

08005ee0 <pxCurrentTCBConst2>:
 8005ee0:	20000458 	.word	0x20000458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ee4:	bf00      	nop
 8005ee6:	bf00      	nop

08005ee8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005ee8:	4806      	ldr	r0, [pc, #24]	@ (8005f04 <prvPortStartFirstTask+0x1c>)
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	f380 8808 	msr	MSP, r0
 8005ef2:	b662      	cpsie	i
 8005ef4:	b661      	cpsie	f
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	df00      	svc	0
 8005f00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005f02:	bf00      	nop
 8005f04:	e000ed08 	.word	0xe000ed08

08005f08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f0e:	4b32      	ldr	r3, [pc, #200]	@ (8005fd8 <xPortStartScheduler+0xd0>)
 8005f10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	22ff      	movs	r2, #255	@ 0xff
 8005f1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	4b2a      	ldr	r3, [pc, #168]	@ (8005fdc <xPortStartScheduler+0xd4>)
 8005f34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f36:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f38:	2207      	movs	r2, #7
 8005f3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f3c:	e009      	b.n	8005f52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f3e:	4b28      	ldr	r3, [pc, #160]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	4a26      	ldr	r2, [pc, #152]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b80      	cmp	r3, #128	@ 0x80
 8005f5c:	d0ef      	beq.n	8005f3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f5e:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1c3 0307 	rsb	r3, r3, #7
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00b      	beq.n	8005f82 <xPortStartScheduler+0x7a>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	60bb      	str	r3, [r7, #8]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f82:	4b17      	ldr	r3, [pc, #92]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	4a15      	ldr	r2, [pc, #84]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f8c:	4b14      	ldr	r3, [pc, #80]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f94:	4a12      	ldr	r2, [pc, #72]	@ (8005fe0 <xPortStartScheduler+0xd8>)
 8005f96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fa0:	4b10      	ldr	r3, [pc, #64]	@ (8005fe4 <xPortStartScheduler+0xdc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8005fe4 <xPortStartScheduler+0xdc>)
 8005fa6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005faa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fac:	4b0d      	ldr	r3, [pc, #52]	@ (8005fe4 <xPortStartScheduler+0xdc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <xPortStartScheduler+0xdc>)
 8005fb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fb8:	f000 f8b8 	bl	800612c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005fe8 <xPortStartScheduler+0xe0>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fc2:	f7ff ff91 	bl	8005ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fc6:	f7ff fa87 	bl	80054d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005fca:	f7ff ff4b 	bl	8005e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000e400 	.word	0xe000e400
 8005fdc:	20000584 	.word	0x20000584
 8005fe0:	20000588 	.word	0x20000588
 8005fe4:	e000ed20 	.word	0xe000ed20
 8005fe8:	2000000c 	.word	0x2000000c

08005fec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	607b      	str	r3, [r7, #4]
}
 8006004:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006006:	4b0f      	ldr	r3, [pc, #60]	@ (8006044 <vPortEnterCritical+0x58>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a0d      	ldr	r2, [pc, #52]	@ (8006044 <vPortEnterCritical+0x58>)
 800600e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <vPortEnterCritical+0x58>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d110      	bne.n	800603a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006018:	4b0b      	ldr	r3, [pc, #44]	@ (8006048 <vPortEnterCritical+0x5c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <vPortEnterCritical+0x4e>
	__asm volatile
 8006022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006026:	f383 8811 	msr	BASEPRI, r3
 800602a:	f3bf 8f6f 	isb	sy
 800602e:	f3bf 8f4f 	dsb	sy
 8006032:	603b      	str	r3, [r7, #0]
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	e7fd      	b.n	8006036 <vPortEnterCritical+0x4a>
	}
}
 800603a:	bf00      	nop
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr
 8006044:	2000000c 	.word	0x2000000c
 8006048:	e000ed04 	.word	0xe000ed04

0800604c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006052:	4b12      	ldr	r3, [pc, #72]	@ (800609c <vPortExitCritical+0x50>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10b      	bne.n	8006072 <vPortExitCritical+0x26>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	607b      	str	r3, [r7, #4]
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006072:	4b0a      	ldr	r3, [pc, #40]	@ (800609c <vPortExitCritical+0x50>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	3b01      	subs	r3, #1
 8006078:	4a08      	ldr	r2, [pc, #32]	@ (800609c <vPortExitCritical+0x50>)
 800607a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800607c:	4b07      	ldr	r3, [pc, #28]	@ (800609c <vPortExitCritical+0x50>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d105      	bne.n	8006090 <vPortExitCritical+0x44>
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
}
 800608e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bc80      	pop	{r7}
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	2000000c 	.word	0x2000000c

080060a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060a0:	f3ef 8009 	mrs	r0, PSP
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <pxCurrentTCBConst>)
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060b0:	6010      	str	r0, [r2, #0]
 80060b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80060b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060ba:	f380 8811 	msr	BASEPRI, r0
 80060be:	f7ff fa0b 	bl	80054d8 <vTaskSwitchContext>
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f380 8811 	msr	BASEPRI, r0
 80060ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060ce:	6819      	ldr	r1, [r3, #0]
 80060d0:	6808      	ldr	r0, [r1, #0]
 80060d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060d6:	f380 8809 	msr	PSP, r0
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	4770      	bx	lr

080060e0 <pxCurrentTCBConst>:
 80060e0:	20000458 	.word	0x20000458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop

080060e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006102:	f7ff f92b 	bl	800535c <xTaskIncrementTick>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800610c:	4b06      	ldr	r3, [pc, #24]	@ (8006128 <SysTick_Handler+0x40>)
 800610e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	2300      	movs	r3, #0
 8006116:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f383 8811 	msr	BASEPRI, r3
}
 800611e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	e000ed04 	.word	0xe000ed04

0800612c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006130:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <vPortSetupTimerInterrupt+0x30>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006136:	4b0a      	ldr	r3, [pc, #40]	@ (8006160 <vPortSetupTimerInterrupt+0x34>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800613c:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <vPortSetupTimerInterrupt+0x38>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <vPortSetupTimerInterrupt+0x3c>)
 8006142:	fba2 2303 	umull	r2, r3, r2, r3
 8006146:	099b      	lsrs	r3, r3, #6
 8006148:	4a08      	ldr	r2, [pc, #32]	@ (800616c <vPortSetupTimerInterrupt+0x40>)
 800614a:	3b01      	subs	r3, #1
 800614c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800614e:	4b03      	ldr	r3, [pc, #12]	@ (800615c <vPortSetupTimerInterrupt+0x30>)
 8006150:	2207      	movs	r2, #7
 8006152:	601a      	str	r2, [r3, #0]
}
 8006154:	bf00      	nop
 8006156:	46bd      	mov	sp, r7
 8006158:	bc80      	pop	{r7}
 800615a:	4770      	bx	lr
 800615c:	e000e010 	.word	0xe000e010
 8006160:	e000e018 	.word	0xe000e018
 8006164:	20000000 	.word	0x20000000
 8006168:	10624dd3 	.word	0x10624dd3
 800616c:	e000e014 	.word	0xe000e014

08006170 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006176:	f3ef 8305 	mrs	r3, IPSR
 800617a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b0f      	cmp	r3, #15
 8006180:	d915      	bls.n	80061ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006182:	4a17      	ldr	r2, [pc, #92]	@ (80061e0 <vPortValidateInterruptPriority+0x70>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800618c:	4b15      	ldr	r3, [pc, #84]	@ (80061e4 <vPortValidateInterruptPriority+0x74>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	7afa      	ldrb	r2, [r7, #11]
 8006192:	429a      	cmp	r2, r3
 8006194:	d20b      	bcs.n	80061ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	607b      	str	r3, [r7, #4]
}
 80061a8:	bf00      	nop
 80061aa:	bf00      	nop
 80061ac:	e7fd      	b.n	80061aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80061ae:	4b0e      	ldr	r3, [pc, #56]	@ (80061e8 <vPortValidateInterruptPriority+0x78>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80061b6:	4b0d      	ldr	r3, [pc, #52]	@ (80061ec <vPortValidateInterruptPriority+0x7c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d90b      	bls.n	80061d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	603b      	str	r3, [r7, #0]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <vPortValidateInterruptPriority+0x62>
	}
 80061d6:	bf00      	nop
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	e000e3f0 	.word	0xe000e3f0
 80061e4:	20000584 	.word	0x20000584
 80061e8:	e000ed0c 	.word	0xe000ed0c
 80061ec:	20000588 	.word	0x20000588

080061f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08a      	sub	sp, #40	@ 0x28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061fc:	f7fe ffe2 	bl	80051c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006200:	4b5a      	ldr	r3, [pc, #360]	@ (800636c <pvPortMalloc+0x17c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006208:	f000 f916 	bl	8006438 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800620c:	4b58      	ldr	r3, [pc, #352]	@ (8006370 <pvPortMalloc+0x180>)
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 8090 	bne.w	800633a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01e      	beq.n	800625e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006220:	2208      	movs	r2, #8
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4413      	add	r3, r2
 8006226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f003 0307 	and.w	r3, r3, #7
 800622e:	2b00      	cmp	r3, #0
 8006230:	d015      	beq.n	800625e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f023 0307 	bic.w	r3, r3, #7
 8006238:	3308      	adds	r3, #8
 800623a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <pvPortMalloc+0x6e>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	617b      	str	r3, [r7, #20]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d06a      	beq.n	800633a <pvPortMalloc+0x14a>
 8006264:	4b43      	ldr	r3, [pc, #268]	@ (8006374 <pvPortMalloc+0x184>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	429a      	cmp	r2, r3
 800626c:	d865      	bhi.n	800633a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800626e:	4b42      	ldr	r3, [pc, #264]	@ (8006378 <pvPortMalloc+0x188>)
 8006270:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006272:	4b41      	ldr	r3, [pc, #260]	@ (8006378 <pvPortMalloc+0x188>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006278:	e004      	b.n	8006284 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800627e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	429a      	cmp	r2, r3
 800628c:	d903      	bls.n	8006296 <pvPortMalloc+0xa6>
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f1      	bne.n	800627a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006296:	4b35      	ldr	r3, [pc, #212]	@ (800636c <pvPortMalloc+0x17c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800629c:	429a      	cmp	r2, r3
 800629e:	d04c      	beq.n	800633a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	4413      	add	r3, r2
 80062a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	1ad2      	subs	r2, r2, r3
 80062ba:	2308      	movs	r3, #8
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	429a      	cmp	r2, r3
 80062c0:	d920      	bls.n	8006304 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80062c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00b      	beq.n	80062ec <pvPortMalloc+0xfc>
	__asm volatile
 80062d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
 80062e8:	bf00      	nop
 80062ea:	e7fd      	b.n	80062e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	1ad2      	subs	r2, r2, r3
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062fe:	69b8      	ldr	r0, [r7, #24]
 8006300:	f000 f8fc 	bl	80064fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006304:	4b1b      	ldr	r3, [pc, #108]	@ (8006374 <pvPortMalloc+0x184>)
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	4a19      	ldr	r2, [pc, #100]	@ (8006374 <pvPortMalloc+0x184>)
 8006310:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006312:	4b18      	ldr	r3, [pc, #96]	@ (8006374 <pvPortMalloc+0x184>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	4b19      	ldr	r3, [pc, #100]	@ (800637c <pvPortMalloc+0x18c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d203      	bcs.n	8006326 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800631e:	4b15      	ldr	r3, [pc, #84]	@ (8006374 <pvPortMalloc+0x184>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a16      	ldr	r2, [pc, #88]	@ (800637c <pvPortMalloc+0x18c>)
 8006324:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	4b11      	ldr	r3, [pc, #68]	@ (8006370 <pvPortMalloc+0x180>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	431a      	orrs	r2, r3
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	2200      	movs	r2, #0
 8006338:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800633a:	f7fe ff51 	bl	80051e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <pvPortMalloc+0x170>
	__asm volatile
 8006348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	60fb      	str	r3, [r7, #12]
}
 800635a:	bf00      	nop
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <pvPortMalloc+0x16c>
	return pvReturn;
 8006360:	69fb      	ldr	r3, [r7, #28]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3728      	adds	r7, #40	@ 0x28
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	20004194 	.word	0x20004194
 8006370:	200041a0 	.word	0x200041a0
 8006374:	20004198 	.word	0x20004198
 8006378:	2000418c 	.word	0x2000418c
 800637c:	2000419c 	.word	0x2000419c

08006380 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d04a      	beq.n	8006428 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006392:	2308      	movs	r3, #8
 8006394:	425b      	negs	r3, r3
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	4b22      	ldr	r3, [pc, #136]	@ (8006430 <vPortFree+0xb0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <vPortFree+0x46>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00b      	beq.n	80063e6 <vPortFree+0x66>
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	60bb      	str	r3, [r7, #8]
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	e7fd      	b.n	80063e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <vPortFree+0xb0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4013      	ands	r3, r2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d019      	beq.n	8006428 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d115      	bne.n	8006428 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <vPortFree+0xb0>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	43db      	mvns	r3, r3
 8006406:	401a      	ands	r2, r3
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800640c:	f7fe feda 	bl	80051c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	4b07      	ldr	r3, [pc, #28]	@ (8006434 <vPortFree+0xb4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4413      	add	r3, r2
 800641a:	4a06      	ldr	r2, [pc, #24]	@ (8006434 <vPortFree+0xb4>)
 800641c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800641e:	6938      	ldr	r0, [r7, #16]
 8006420:	f000 f86c 	bl	80064fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006424:	f7fe fedc 	bl	80051e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006428:	bf00      	nop
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200041a0 	.word	0x200041a0
 8006434:	20004198 	.word	0x20004198

08006438 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800643e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006442:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006444:	4b27      	ldr	r3, [pc, #156]	@ (80064e4 <prvHeapInit+0xac>)
 8006446:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3307      	adds	r3, #7
 8006456:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0307 	bic.w	r3, r3, #7
 800645e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	4a1f      	ldr	r2, [pc, #124]	@ (80064e4 <prvHeapInit+0xac>)
 8006468:	4413      	add	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006470:	4a1d      	ldr	r2, [pc, #116]	@ (80064e8 <prvHeapInit+0xb0>)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006476:	4b1c      	ldr	r3, [pc, #112]	@ (80064e8 <prvHeapInit+0xb0>)
 8006478:	2200      	movs	r2, #0
 800647a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	4413      	add	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006484:	2208      	movs	r2, #8
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0307 	bic.w	r3, r3, #7
 8006492:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a15      	ldr	r2, [pc, #84]	@ (80064ec <prvHeapInit+0xb4>)
 8006498:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800649a:	4b14      	ldr	r3, [pc, #80]	@ (80064ec <prvHeapInit+0xb4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2200      	movs	r2, #0
 80064a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064a2:	4b12      	ldr	r3, [pc, #72]	@ (80064ec <prvHeapInit+0xb4>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	1ad2      	subs	r2, r2, r3
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064b8:	4b0c      	ldr	r3, [pc, #48]	@ (80064ec <prvHeapInit+0xb4>)
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	4a0a      	ldr	r2, [pc, #40]	@ (80064f0 <prvHeapInit+0xb8>)
 80064c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <prvHeapInit+0xbc>)
 80064ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064d0:	4b09      	ldr	r3, [pc, #36]	@ (80064f8 <prvHeapInit+0xc0>)
 80064d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064d6:	601a      	str	r2, [r3, #0]
}
 80064d8:	bf00      	nop
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	2000058c 	.word	0x2000058c
 80064e8:	2000418c 	.word	0x2000418c
 80064ec:	20004194 	.word	0x20004194
 80064f0:	2000419c 	.word	0x2000419c
 80064f4:	20004198 	.word	0x20004198
 80064f8:	200041a0 	.word	0x200041a0

080064fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006504:	4b27      	ldr	r3, [pc, #156]	@ (80065a4 <prvInsertBlockIntoFreeList+0xa8>)
 8006506:	60fb      	str	r3, [r7, #12]
 8006508:	e002      	b.n	8006510 <prvInsertBlockIntoFreeList+0x14>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	60fb      	str	r3, [r7, #12]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d8f7      	bhi.n	800650a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	429a      	cmp	r2, r3
 800652a:	d108      	bne.n	800653e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	441a      	add	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	441a      	add	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d118      	bne.n	8006584 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <prvInsertBlockIntoFreeList+0xac>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d00d      	beq.n	800657a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	441a      	add	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	e008      	b.n	800658c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800657a:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <prvInsertBlockIntoFreeList+0xac>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e003      	b.n	800658c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d002      	beq.n	800659a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	bc80      	pop	{r7}
 80065a2:	4770      	bx	lr
 80065a4:	2000418c 	.word	0x2000418c
 80065a8:	20004194 	.word	0x20004194

080065ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80065b6:	f009 f8b3 	bl	800f720 <sys_timeouts_sleeptime>
 80065ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c2:	d10b      	bne.n	80065dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80065c4:	4813      	ldr	r0, [pc, #76]	@ (8006614 <tcpip_timeouts_mbox_fetch+0x68>)
 80065c6:	f00c fa32 	bl	8012a2e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80065ca:	2200      	movs	r2, #0
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f00c f9a4 	bl	801291c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80065d4:	480f      	ldr	r0, [pc, #60]	@ (8006614 <tcpip_timeouts_mbox_fetch+0x68>)
 80065d6:	f00c fa1b 	bl	8012a10 <sys_mutex_lock>
    return;
 80065da:	e018      	b.n	800660e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d102      	bne.n	80065e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80065e2:	f009 f863 	bl	800f6ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80065e6:	e7e6      	b.n	80065b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80065e8:	480a      	ldr	r0, [pc, #40]	@ (8006614 <tcpip_timeouts_mbox_fetch+0x68>)
 80065ea:	f00c fa20 	bl	8012a2e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f00c f992 	bl	801291c <sys_arch_mbox_fetch>
 80065f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80065fa:	4806      	ldr	r0, [pc, #24]	@ (8006614 <tcpip_timeouts_mbox_fetch+0x68>)
 80065fc:	f00c fa08 	bl	8012a10 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006606:	d102      	bne.n	800660e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8006608:	f009 f850 	bl	800f6ac <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800660c:	e7d3      	b.n	80065b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	200041b0 	.word	0x200041b0

08006618 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8006620:	4810      	ldr	r0, [pc, #64]	@ (8006664 <tcpip_thread+0x4c>)
 8006622:	f00c f9f5 	bl	8012a10 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8006626:	4b10      	ldr	r3, [pc, #64]	@ (8006668 <tcpip_thread+0x50>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d005      	beq.n	800663a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800662e:	4b0e      	ldr	r3, [pc, #56]	@ (8006668 <tcpip_thread+0x50>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a0e      	ldr	r2, [pc, #56]	@ (800666c <tcpip_thread+0x54>)
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	4610      	mov	r0, r2
 8006638:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800663a:	f107 030c 	add.w	r3, r7, #12
 800663e:	4619      	mov	r1, r3
 8006640:	480b      	ldr	r0, [pc, #44]	@ (8006670 <tcpip_thread+0x58>)
 8006642:	f7ff ffb3 	bl	80065ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800664c:	4b09      	ldr	r3, [pc, #36]	@ (8006674 <tcpip_thread+0x5c>)
 800664e:	2291      	movs	r2, #145	@ 0x91
 8006650:	4909      	ldr	r1, [pc, #36]	@ (8006678 <tcpip_thread+0x60>)
 8006652:	480a      	ldr	r0, [pc, #40]	@ (800667c <tcpip_thread+0x64>)
 8006654:	f00c fb3c 	bl	8012cd0 <iprintf>
      continue;
 8006658:	e003      	b.n	8006662 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 f80f 	bl	8006680 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006662:	e7ea      	b.n	800663a <tcpip_thread+0x22>
 8006664:	200041b0 	.word	0x200041b0
 8006668:	200041a4 	.word	0x200041a4
 800666c:	200041a8 	.word	0x200041a8
 8006670:	200041ac 	.word	0x200041ac
 8006674:	08013c24 	.word	0x08013c24
 8006678:	08013c54 	.word	0x08013c54
 800667c:	08013c74 	.word	0x08013c74

08006680 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d026      	beq.n	80066de <tcpip_thread_handle_msg+0x5e>
 8006690:	2b02      	cmp	r3, #2
 8006692:	dc2b      	bgt.n	80066ec <tcpip_thread_handle_msg+0x6c>
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <tcpip_thread_handle_msg+0x1e>
 8006698:	2b01      	cmp	r3, #1
 800669a:	d015      	beq.n	80066c8 <tcpip_thread_handle_msg+0x48>
 800669c:	e026      	b.n	80066ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6850      	ldr	r0, [r2, #4]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	6892      	ldr	r2, [r2, #8]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4798      	blx	r3
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f002 fbff 	bl	8008ebc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	2009      	movs	r0, #9
 80066c2:	f001 fdc3 	bl	800824c <memp_free>
      break;
 80066c6:	e018      	b.n	80066fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6892      	ldr	r2, [r2, #8]
 80066d0:	4610      	mov	r0, r2
 80066d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	2008      	movs	r0, #8
 80066d8:	f001 fdb8 	bl	800824c <memp_free>
      break;
 80066dc:	e00d      	b.n	80066fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6892      	ldr	r2, [r2, #8]
 80066e6:	4610      	mov	r0, r2
 80066e8:	4798      	blx	r3
      break;
 80066ea:	e006      	b.n	80066fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80066ec:	4b05      	ldr	r3, [pc, #20]	@ (8006704 <tcpip_thread_handle_msg+0x84>)
 80066ee:	22cf      	movs	r2, #207	@ 0xcf
 80066f0:	4905      	ldr	r1, [pc, #20]	@ (8006708 <tcpip_thread_handle_msg+0x88>)
 80066f2:	4806      	ldr	r0, [pc, #24]	@ (800670c <tcpip_thread_handle_msg+0x8c>)
 80066f4:	f00c faec 	bl	8012cd0 <iprintf>
      break;
 80066f8:	bf00      	nop
  }
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	08013c24 	.word	0x08013c24
 8006708:	08013c54 	.word	0x08013c54
 800670c:	08013c74 	.word	0x08013c74

08006710 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800671c:	481a      	ldr	r0, [pc, #104]	@ (8006788 <tcpip_inpkt+0x78>)
 800671e:	f00c f93c 	bl	801299a <sys_mbox_valid>
 8006722:	4603      	mov	r3, r0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <tcpip_inpkt+0x24>
 8006728:	4b18      	ldr	r3, [pc, #96]	@ (800678c <tcpip_inpkt+0x7c>)
 800672a:	22fc      	movs	r2, #252	@ 0xfc
 800672c:	4918      	ldr	r1, [pc, #96]	@ (8006790 <tcpip_inpkt+0x80>)
 800672e:	4819      	ldr	r0, [pc, #100]	@ (8006794 <tcpip_inpkt+0x84>)
 8006730:	f00c face 	bl	8012cd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006734:	2009      	movs	r0, #9
 8006736:	f001 fd37 	bl	80081a8 <memp_malloc>
 800673a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006742:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006746:	e01a      	b.n	800677e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2200      	movs	r2, #0
 800674c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006760:	6979      	ldr	r1, [r7, #20]
 8006762:	4809      	ldr	r0, [pc, #36]	@ (8006788 <tcpip_inpkt+0x78>)
 8006764:	f00c f8c0 	bl	80128e8 <sys_mbox_trypost>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d006      	beq.n	800677c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800676e:	6979      	ldr	r1, [r7, #20]
 8006770:	2009      	movs	r0, #9
 8006772:	f001 fd6b 	bl	800824c <memp_free>
    return ERR_MEM;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800677a:	e000      	b.n	800677e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800677c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	200041ac 	.word	0x200041ac
 800678c:	08013c24 	.word	0x08013c24
 8006790:	08013c9c 	.word	0x08013c9c
 8006794:	08013c74 	.word	0x08013c74

08006798 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80067a8:	f003 0318 	and.w	r3, r3, #24
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d006      	beq.n	80067be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80067b0:	4a08      	ldr	r2, [pc, #32]	@ (80067d4 <tcpip_input+0x3c>)
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff ffab 	bl	8006710 <tcpip_inpkt>
 80067ba:	4603      	mov	r3, r0
 80067bc:	e005      	b.n	80067ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80067be:	4a06      	ldr	r2, [pc, #24]	@ (80067d8 <tcpip_input+0x40>)
 80067c0:	6839      	ldr	r1, [r7, #0]
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff ffa4 	bl	8006710 <tcpip_inpkt>
 80067c8:	4603      	mov	r3, r0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	080120c9 	.word	0x080120c9
 80067d8:	08010ee9 	.word	0x08010ee9

080067dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80067e6:	4819      	ldr	r0, [pc, #100]	@ (800684c <tcpip_try_callback+0x70>)
 80067e8:	f00c f8d7 	bl	801299a <sys_mbox_valid>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <tcpip_try_callback+0x24>
 80067f2:	4b17      	ldr	r3, [pc, #92]	@ (8006850 <tcpip_try_callback+0x74>)
 80067f4:	f240 125d 	movw	r2, #349	@ 0x15d
 80067f8:	4916      	ldr	r1, [pc, #88]	@ (8006854 <tcpip_try_callback+0x78>)
 80067fa:	4817      	ldr	r0, [pc, #92]	@ (8006858 <tcpip_try_callback+0x7c>)
 80067fc:	f00c fa68 	bl	8012cd0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8006800:	2008      	movs	r0, #8
 8006802:	f001 fcd1 	bl	80081a8 <memp_malloc>
 8006806:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800680e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006812:	e017      	b.n	8006844 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006826:	68f9      	ldr	r1, [r7, #12]
 8006828:	4808      	ldr	r0, [pc, #32]	@ (800684c <tcpip_try_callback+0x70>)
 800682a:	f00c f85d 	bl	80128e8 <sys_mbox_trypost>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d006      	beq.n	8006842 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006834:	68f9      	ldr	r1, [r7, #12]
 8006836:	2008      	movs	r0, #8
 8006838:	f001 fd08 	bl	800824c <memp_free>
    return ERR_MEM;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006840:	e000      	b.n	8006844 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	200041ac 	.word	0x200041ac
 8006850:	08013c24 	.word	0x08013c24
 8006854:	08013c9c 	.word	0x08013c9c
 8006858:	08013c74 	.word	0x08013c74

0800685c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006866:	f001 f821 	bl	80078ac <lwip_init>

  tcpip_init_done = initfunc;
 800686a:	4a17      	ldr	r2, [pc, #92]	@ (80068c8 <tcpip_init+0x6c>)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8006870:	4a16      	ldr	r2, [pc, #88]	@ (80068cc <tcpip_init+0x70>)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006876:	2106      	movs	r1, #6
 8006878:	4815      	ldr	r0, [pc, #84]	@ (80068d0 <tcpip_init+0x74>)
 800687a:	f00c f813 	bl	80128a4 <sys_mbox_new>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006884:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <tcpip_init+0x78>)
 8006886:	f240 2261 	movw	r2, #609	@ 0x261
 800688a:	4913      	ldr	r1, [pc, #76]	@ (80068d8 <tcpip_init+0x7c>)
 800688c:	4813      	ldr	r0, [pc, #76]	@ (80068dc <tcpip_init+0x80>)
 800688e:	f00c fa1f 	bl	8012cd0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006892:	4813      	ldr	r0, [pc, #76]	@ (80068e0 <tcpip_init+0x84>)
 8006894:	f00c f8a0 	bl	80129d8 <sys_mutex_new>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d006      	beq.n	80068ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800689e:	4b0d      	ldr	r3, [pc, #52]	@ (80068d4 <tcpip_init+0x78>)
 80068a0:	f240 2265 	movw	r2, #613	@ 0x265
 80068a4:	490f      	ldr	r1, [pc, #60]	@ (80068e4 <tcpip_init+0x88>)
 80068a6:	480d      	ldr	r0, [pc, #52]	@ (80068dc <tcpip_init+0x80>)
 80068a8:	f00c fa12 	bl	8012cd0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80068ac:	2300      	movs	r3, #0
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80068b4:	2200      	movs	r2, #0
 80068b6:	490c      	ldr	r1, [pc, #48]	@ (80068e8 <tcpip_init+0x8c>)
 80068b8:	480c      	ldr	r0, [pc, #48]	@ (80068ec <tcpip_init+0x90>)
 80068ba:	f00c f8c5 	bl	8012a48 <sys_thread_new>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200041a4 	.word	0x200041a4
 80068cc:	200041a8 	.word	0x200041a8
 80068d0:	200041ac 	.word	0x200041ac
 80068d4:	08013c24 	.word	0x08013c24
 80068d8:	08013cac 	.word	0x08013cac
 80068dc:	08013c74 	.word	0x08013c74
 80068e0:	200041b0 	.word	0x200041b0
 80068e4:	08013cd0 	.word	0x08013cd0
 80068e8:	08006619 	.word	0x08006619
 80068ec:	08013cf4 	.word	0x08013cf4

080068f0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d002      	beq.n	8006906 <fs_open+0x16>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <fs_open+0x1c>
    return ERR_ARG;
 8006906:	f06f 030f 	mvn.w	r3, #15
 800690a:	e028      	b.n	800695e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800690c:	4b16      	ldr	r3, [pc, #88]	@ (8006968 <fs_open+0x78>)
 800690e:	60fb      	str	r3, [r7, #12]
 8006910:	e020      	b.n	8006954 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	6838      	ldr	r0, [r7, #0]
 800691a:	f7f9 fc31 	bl	8000180 <strcmp>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d114      	bne.n	800694e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	68da      	ldr	r2, [r3, #12]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	7c1a      	ldrb	r2, [r3, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e007      	b.n	800695e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1db      	bne.n	8006912 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800695a:	f06f 0305 	mvn.w	r3, #5
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	0801776c 	.word	0x0801776c

0800696c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800697e:	b480      	push	{r7}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	1ad3      	subs	r3, r2, r3
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80069a2:	222c      	movs	r2, #44	@ 0x2c
 80069a4:	2100      	movs	r1, #0
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f00c f9f7 	bl	8012d9a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80069ac:	bf00      	nop
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80069ba:	202c      	movs	r0, #44	@ 0x2c
 80069bc:	f001 fa72 	bl	8007ea4 <mem_malloc>
 80069c0:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <http_state_alloc+0x1a>
    http_state_init(ret);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7ff ffe6 	bl	800699a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80069ce:	687b      	ldr	r3, [r7, #4]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff ffbd 	bl	800696c <fs_close>
    hs->handle = NULL;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d007      	beq.n	8006a10 <http_state_eof+0x38>
    pbuf_free(hs->req);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 fa59 	bl	8008ebc <pbuf_free>
    hs->req = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <http_state_free+0x1a>
    http_state_eof(hs);
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f7ff ffd6 	bl	80069d8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f89f 	bl	8007b70 <mem_free>
  }
}
 8006a32:	bf00      	nop
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <http_write+0x22>
 8006a50:	4b2c      	ldr	r3, [pc, #176]	@ (8006b04 <http_write+0xc8>)
 8006a52:	f240 2219 	movw	r2, #537	@ 0x219
 8006a56:	492c      	ldr	r1, [pc, #176]	@ (8006b08 <http_write+0xcc>)
 8006a58:	482c      	ldr	r0, [pc, #176]	@ (8006b0c <http_write+0xd0>)
 8006a5a:	f00c f939 	bl	8012cd0 <iprintf>
  len = *length;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8006a64:	8afb      	ldrh	r3, [r7, #22]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <http_write+0x32>
    return ERR_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e045      	b.n	8006afa <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006a74:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8006a76:	8aba      	ldrh	r2, [r7, #20]
 8006a78:	8afb      	ldrh	r3, [r7, #22]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d201      	bcs.n	8006a82 <http_write+0x46>
    len = max_len;
 8006a7e:	8abb      	ldrh	r3, [r7, #20]
 8006a80:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8006a8a:	8afa      	ldrh	r2, [r7, #22]
 8006a8c:	8abb      	ldrh	r3, [r7, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d901      	bls.n	8006a96 <http_write+0x5a>
    len = max_len;
 8006a92:	8abb      	ldrh	r3, [r7, #20]
 8006a94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	8afa      	ldrh	r2, [r7, #22]
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f006 ff7b 	bl	800d998 <tcp_write>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8006aa6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aae:	d10f      	bne.n	8006ad0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d902      	bls.n	8006aca <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	82fb      	strh	r3, [r7, #22]
 8006ac8:	e002      	b.n	8006ad0 <http_write+0x94>
      } else {
        len /= 2;
 8006aca:	8afb      	ldrh	r3, [r7, #22]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8006ad0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ad8:	d102      	bne.n	8006ae0 <http_write+0xa4>
 8006ada:	8afb      	ldrh	r3, [r7, #22]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d8da      	bhi.n	8006a96 <http_write+0x5a>

  if (err == ERR_OK) {
 8006ae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8afa      	ldrh	r2, [r7, #22]
 8006aec:	801a      	strh	r2, [r3, #0]
 8006aee:	e002      	b.n	8006af6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8006af6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	08013d44 	.word	0x08013d44
 8006b08:	08013d7c 	.word	0x08013d7c
 8006b0c:	08013d8c 	.word	0x08013d8c

08006b10 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	60f8      	str	r0, [r7, #12]
 8006b18:	60b9      	str	r1, [r7, #8]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	71fb      	strb	r3, [r7, #7]
  //altcp_arg(pcb, NULL);
  //altcp_recv(pcb, NULL);
  //altcp_err(pcb, NULL);
  //altcp_poll(pcb, NULL, 0);
  //altcp_sent(pcb, NULL);
  if (hs != NULL) {
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d002      	beq.n	8006b2a <http_close_or_abort_conn+0x1a>
    http_state_free(hs);
 8006b24:	68b8      	ldr	r0, [r7, #8]
 8006b26:	f7ff ff77 	bl	8006a18 <http_state_free>
  }

  if (abort_conn) {
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <http_close_or_abort_conn+0x2a>
    altcp_abort(pcb);
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f002 ff33 	bl	800999c <tcp_abort>
    return ERR_OK;
 8006b36:	2300      	movs	r3, #0
 8006b38:	e00f      	b.n	8006b5a <http_close_or_abort_conn+0x4a>
  }
  err = altcp_close(pcb);
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f002 fe44 	bl	80097c8 <tcp_close>
 8006b40:	4603      	mov	r3, r0
 8006b42:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8006b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <http_close_or_abort_conn+0x46>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006b4c:	2204      	movs	r2, #4
 8006b4e:	4905      	ldr	r1, [pc, #20]	@ (8006b64 <http_close_or_abort_conn+0x54>)
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f004 f877 	bl	800ac44 <tcp_poll>
  }
  return err;
 8006b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	0800722b 	.word	0x0800722b

08006b68 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8006b72:	2200      	movs	r2, #0
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff ffca 	bl	8006b10 <http_close_or_abort_conn>
 8006b7c:	4603      	mov	r3, r0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ffe8 	bl	8006b68 <http_close_conn>
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff ffe6 	bl	8006b86 <http_eof>
    return 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e016      	b.n	8006bec <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fedb 	bl	800697e <fs_bytes_left>
 8006bc8:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	dc05      	bgt.n	8006bdc <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7ff ffd7 	bl	8006b86 <http_eof>
    return 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e007      	b.n	8006bec <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8006bdc:	4b05      	ldr	r3, [pc, #20]	@ (8006bf4 <http_check_eof+0x54>)
 8006bde:	f240 429d 	movw	r2, #1181	@ 0x49d
 8006be2:	4905      	ldr	r1, [pc, #20]	@ (8006bf8 <http_check_eof+0x58>)
 8006be4:	4805      	ldr	r0, [pc, #20]	@ (8006bfc <http_check_eof+0x5c>)
 8006be6:	f00c f873 	bl	8012cd0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8006bea:	2301      	movs	r3, #1
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	08013d44 	.word	0x08013d44
 8006bf8:	08013db4 	.word	0x08013db4
 8006bfc:	08013d8c 	.word	0x08013d8c

08006c00 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c12:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d803      	bhi.n	8006c22 <http_send_data_nonssi+0x22>
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	e001      	b.n	8006c26 <http_send_data_nonssi+0x26>
 8006c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c26:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6999      	ldr	r1, [r3, #24]
 8006c2c:	f107 020c 	add.w	r2, r7, #12
 8006c30:	2300      	movs	r3, #0
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff ff02 	bl	8006a3c <http_write>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8006c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10d      	bne.n	8006c60 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	89ba      	ldrh	r2, [r7, #12]
 8006c4e:	441a      	add	r2, r3
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c58:	89ba      	ldrh	r2, [r7, #12]
 8006c5a:	1a9a      	subs	r2, r3, r2
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <http_send+0x18>
    return 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	e025      	b.n	8006cce <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff87 	bl	8006ba0 <http_check_eof>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <http_send+0x32>
      return 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e018      	b.n	8006cce <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff ffae 	bl	8006c00 <http_send_data_nonssi>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10d      	bne.n	8006ccc <http_send+0x62>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fe62 	bl	800697e <fs_bytes_left>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dc05      	bgt.n	8006ccc <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff ff5f 	bl	8006b86 <http_eof>
    return 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	e000      	b.n	8006cce <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <http_get_404_file+0x80>)
 8006ce6:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f7ff fdfd 	bl	80068f0 <fs_open>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8006cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d024      	beq.n	8006d4c <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <http_get_404_file+0x84>)
 8006d06:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f7ff fded 	bl	80068f0 <fs_open>
 8006d16:	4603      	mov	r3, r0
 8006d18:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d014      	beq.n	8006d4c <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	4a0e      	ldr	r2, [pc, #56]	@ (8006d60 <http_get_404_file+0x88>)
 8006d26:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f7ff fddd 	bl	80068f0 <fs_open>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8006d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
        return NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006d4c:	687b      	ldr	r3, [r7, #4]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	08013dec 	.word	0x08013dec
 8006d5c:	08013df8 	.word	0x08013df8
 8006d60:	08013e04 	.word	0x08013e04

08006d64 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08e      	sub	sp, #56	@ 0x38
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d106      	bne.n	8006d88 <http_parse_request+0x24>
 8006d7a:	4b65      	ldr	r3, [pc, #404]	@ (8006f10 <http_parse_request+0x1ac>)
 8006d7c:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8006d80:	4964      	ldr	r1, [pc, #400]	@ (8006f14 <http_parse_request+0x1b0>)
 8006d82:	4865      	ldr	r0, [pc, #404]	@ (8006f18 <http_parse_request+0x1b4>)
 8006d84:	f00b ffa4 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d106      	bne.n	8006d9c <http_parse_request+0x38>
 8006d8e:	4b60      	ldr	r3, [pc, #384]	@ (8006f10 <http_parse_request+0x1ac>)
 8006d90:	f240 72af 	movw	r2, #1967	@ 0x7af
 8006d94:	4961      	ldr	r1, [pc, #388]	@ (8006f1c <http_parse_request+0x1b8>)
 8006d96:	4860      	ldr	r0, [pc, #384]	@ (8006f18 <http_parse_request+0x1b4>)
 8006d98:	f00b ff9a 	bl	8012cd0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <http_parse_request+0x48>
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006dac:	f06f 0307 	mvn.w	r3, #7
 8006db0:	e0a9      	b.n	8006f06 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d103      	bne.n	8006dc2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dbe:	621a      	str	r2, [r3, #32]
 8006dc0:	e005      	b.n	8006dce <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f002 f943 	bl	8009054 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dd0:	f002 f918 	bl	8009004 <pbuf_ref>

  if (hs->req->next != NULL) {
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d012      	beq.n	8006e04 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	891b      	ldrh	r3, [r3, #8]
 8006de4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006de8:	4293      	cmp	r3, r2
 8006dea:	bf28      	it	cs
 8006dec:	4613      	movcs	r3, r2
 8006dee:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	6a18      	ldr	r0, [r3, #32]
 8006df4:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006df6:	2300      	movs	r3, #0
 8006df8:	4949      	ldr	r1, [pc, #292]	@ (8006f20 <http_parse_request+0x1bc>)
 8006dfa:	f002 fa63 	bl	80092c4 <pbuf_copy_partial>
    data = httpd_req_buf;
 8006dfe:	4b48      	ldr	r3, [pc, #288]	@ (8006f20 <http_parse_request+0x1bc>)
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e02:	e005      	b.n	8006e10 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	895b      	ldrh	r3, [r3, #10]
 8006e0e:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006e10:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e12:	2b06      	cmp	r3, #6
 8006e14:	d962      	bls.n	8006edc <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006e16:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4942      	ldr	r1, [pc, #264]	@ (8006f24 <http_parse_request+0x1c0>)
 8006e1c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e1e:	f000 fb97 	bl	8007550 <lwip_strnstr>
 8006e22:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d058      	beq.n	8006edc <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006e2e:	2204      	movs	r2, #4
 8006e30:	493d      	ldr	r1, [pc, #244]	@ (8006f28 <http_parse_request+0x1c4>)
 8006e32:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e34:	f00b ffc6 	bl	8012dc4 <strncmp>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d116      	bne.n	8006e6c <http_parse_request+0x108>
        sp1 = data + 3;
 8006e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e40:	3303      	adds	r3, #3
 8006e42:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	1c5a      	adds	r2, r3, #1
 8006e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	3301      	adds	r3, #1
 8006e58:	8b7a      	ldrh	r2, [r7, #26]
 8006e5a:	4934      	ldr	r1, [pc, #208]	@ (8006f2c <http_parse_request+0x1c8>)
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f000 fb77 	bl	8007550 <lwip_strnstr>
 8006e62:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d111      	bne.n	8006e8e <http_parse_request+0x12a>
 8006e6a:	e006      	b.n	8006e7a <http_parse_request+0x116>
        data[4] = 0;
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6e:	3304      	adds	r3, #4
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006e74:	f06f 030f 	mvn.w	r3, #15
 8006e78:	e045      	b.n	8006f06 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	8b7a      	ldrh	r2, [r7, #26]
 8006e80:	4928      	ldr	r1, [pc, #160]	@ (8006f24 <http_parse_request+0x1c0>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fb64 	bl	8007550 <lwip_strnstr>
 8006e88:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	3301      	adds	r3, #1
 8006e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d01e      	beq.n	8006edc <http_parse_request+0x178>
 8006e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d91a      	bls.n	8006edc <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006ea6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4921      	ldr	r1, [pc, #132]	@ (8006f30 <http_parse_request+0x1cc>)
 8006eac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006eae:	f000 fb4f 	bl	8007550 <lwip_strnstr>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d011      	beq.n	8006edc <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006ec4:	8b3b      	ldrh	r3, [r7, #24]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4413      	add	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed0:	6979      	ldr	r1, [r7, #20]
 8006ed2:	68b8      	ldr	r0, [r7, #8]
 8006ed4:	f000 f82e 	bl	8006f34 <http_find_file>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	e014      	b.n	8006f06 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f002 f879 	bl	8008fd8 <pbuf_clen>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	891b      	ldrh	r3, [r3, #8]
 8006ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef4:	d205      	bcs.n	8006f02 <http_parse_request+0x19e>
 8006ef6:	8a7b      	ldrh	r3, [r7, #18]
 8006ef8:	2b05      	cmp	r3, #5
 8006efa:	d802      	bhi.n	8006f02 <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006efc:	f06f 0304 	mvn.w	r3, #4
 8006f00:	e001      	b.n	8006f06 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006f02:	f06f 030f 	mvn.w	r3, #15
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3738      	adds	r7, #56	@ 0x38
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	08013d44 	.word	0x08013d44
 8006f14:	08013e10 	.word	0x08013e10
 8006f18:	08013d8c 	.word	0x08013d8c
 8006f1c:	08013e1c 	.word	0x08013e1c
 8006f20:	200041b4 	.word	0x200041b4
 8006f24:	08013e28 	.word	0x08013e28
 8006f28:	08013e2c 	.word	0x08013e2c
 8006f2c:	08013e34 	.word	0x08013e34
 8006f30:	08013e38 	.word	0x08013e38

08006f34 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b092      	sub	sp, #72	@ 0x48
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006f40:	2300      	movs	r3, #0
 8006f42:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7f9 f91f 	bl	8000194 <strlen>
 8006f56:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d06b      	beq.n	8007036 <http_find_file+0x102>
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f62:	3b01      	subs	r3, #1
 8006f64:	4413      	add	r3, r2
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f6a:	d164      	bne.n	8007036 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006f6c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006f6e:	4a53      	ldr	r2, [pc, #332]	@ (80070bc <http_find_file+0x188>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d102      	bne.n	8006f7a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d15d      	bne.n	8007036 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f80:	bf28      	it	cs
 8006f82:	233f      	movcs	r3, #63	@ 0x3f
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f90:	4619      	mov	r1, r3
 8006f92:	484a      	ldr	r0, [pc, #296]	@ (80070bc <http_find_file+0x188>)
 8006f94:	f00b ffeb 	bl	8012f6e <memcpy>
      http_uri_buf[copy_len] = 0;
 8006f98:	4a48      	ldr	r2, [pc, #288]	@ (80070bc <http_find_file+0x188>)
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	4413      	add	r3, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fa6:	e043      	b.n	8007030 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d028      	beq.n	8007000 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006fb4:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d01e      	beq.n	8006ffa <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006fbc:	4a40      	ldr	r2, [pc, #256]	@ (80070c0 <http_find_file+0x18c>)
 8006fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7f9 f8e5 	bl	8000194 <strlen>
 8006fca:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	bf28      	it	cs
 8006fd4:	4613      	movcs	r3, r2
 8006fd6:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	4a38      	ldr	r2, [pc, #224]	@ (80070bc <http_find_file+0x188>)
 8006fdc:	1898      	adds	r0, r3, r2
 8006fde:	4a38      	ldr	r2, [pc, #224]	@ (80070c0 <http_find_file+0x18c>)
 8006fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fe2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fe6:	69ba      	ldr	r2, [r7, #24]
 8006fe8:	4619      	mov	r1, r3
 8006fea:	f00b ffc0 	bl	8012f6e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	4a31      	ldr	r2, [pc, #196]	@ (80070bc <http_find_file+0x188>)
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	@ (80070bc <http_find_file+0x188>)
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffe:	e004      	b.n	800700a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8007000:	4a2f      	ldr	r2, [pc, #188]	@ (80070c0 <http_find_file+0x18c>)
 8007002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007004:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007008:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fc6e 	bl	80068f0 <fs_open>
 8007014:	4603      	mov	r3, r0
 8007016:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8007018:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d104      	bne.n	800702a <http_find_file+0xf6>
        uri = file_name;
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8007028:	e005      	b.n	8007036 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800702a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702c:	3301      	adds	r3, #1
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	2b04      	cmp	r3, #4
 8007034:	d9b8      	bls.n	8006fa8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8007036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007038:	2b00      	cmp	r3, #0
 800703a:	d124      	bne.n	8007086 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	213f      	movs	r1, #63	@ 0x3f
 8007040:	4618      	mov	r0, r3
 8007042:	f00b feb2 	bl	8012daa <strchr>
 8007046:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8007048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704a:	2b00      	cmp	r3, #0
 800704c:	d005      	beq.n	800705a <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800704e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007050:	2200      	movs	r2, #0
 8007052:	701a      	strb	r2, [r3, #0]
      params++;
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	3301      	adds	r3, #1
 8007058:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	4611      	mov	r1, r2
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fc45 	bl	80068f0 <fs_open>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800706a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d102      	bne.n	8007078 <http_find_file+0x144>
      file = &hs->file_handle;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007076:	e006      	b.n	8007086 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8007078:	f107 0308 	add.w	r3, r7, #8
 800707c:	4619      	mov	r1, r3
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f7ff fe2a 	bl	8006cd8 <http_get_404_file>
 8007084:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d106      	bne.n	800709a <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800708c:	f107 0308 	add.w	r3, r7, #8
 8007090:	4619      	mov	r1, r3
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fe20 	bl	8006cd8 <http_get_404_file>
 8007098:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	4613      	mov	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f809 	bl	80070c4 <http_init_file>
 80070b2:	4603      	mov	r3, r0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3740      	adds	r7, #64	@ 0x40
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	200045b4 	.word	0x200045b4
 80070c0:	08017780 	.word	0x08017780

080070c4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d05c      	beq.n	8007192 <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <http_init_file+0x2a>
 80070e0:	4b35      	ldr	r3, [pc, #212]	@ (80071b8 <http_init_file+0xf4>)
 80070e2:	f640 120b 	movw	r2, #2315	@ 0x90b
 80070e6:	4935      	ldr	r1, [pc, #212]	@ (80071bc <http_init_file+0xf8>)
 80070e8:	4835      	ldr	r0, [pc, #212]	@ (80071c0 <http_init_file+0xfc>)
 80070ea:	f00b fdf1 	bl	8012cd0 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b00      	cmp	r3, #0
 8007102:	da06      	bge.n	8007112 <http_init_file+0x4e>
 8007104:	4b2c      	ldr	r3, [pc, #176]	@ (80071b8 <http_init_file+0xf4>)
 8007106:	f640 1234 	movw	r2, #2356	@ 0x934
 800710a:	492e      	ldr	r1, [pc, #184]	@ (80071c4 <http_init_file+0x100>)
 800710c:	482c      	ldr	r0, [pc, #176]	@ (80071c0 <http_init_file+0xfc>)
 800710e:	f00b fddf 	bl	8012cd0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	461a      	mov	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	695b      	ldr	r3, [r3, #20]
 8007128:	7c1b      	ldrb	r3, [r3, #16]
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d106      	bne.n	8007140 <http_init_file+0x7c>
 8007132:	4b21      	ldr	r3, [pc, #132]	@ (80071b8 <http_init_file+0xf4>)
 8007134:	f640 1243 	movw	r2, #2371	@ 0x943
 8007138:	4923      	ldr	r1, [pc, #140]	@ (80071c8 <http_init_file+0x104>)
 800713a:	4821      	ldr	r0, [pc, #132]	@ (80071c0 <http_init_file+0xfc>)
 800713c:	f00b fdc8 	bl	8012cd0 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d032      	beq.n	80071ac <http_init_file+0xe8>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	695b      	ldr	r3, [r3, #20]
 800714a:	7c1b      	ldrb	r3, [r3, #16]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d02b      	beq.n	80071ac <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6998      	ldr	r0, [r3, #24]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	461a      	mov	r2, r3
 800715e:	491b      	ldr	r1, [pc, #108]	@ (80071cc <http_init_file+0x108>)
 8007160:	f000 f9f6 	bl	8007550 <lwip_strnstr>
 8007164:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d01f      	beq.n	80071ac <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	1d1a      	adds	r2, r3, #4
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	699a      	ldr	r2, [r3, #24]
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1ad2      	subs	r2, r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007190:	e00c      	b.n	80071ac <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2200      	movs	r2, #0
 800719c:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	08013d44 	.word	0x08013d44
 80071bc:	08013e40 	.word	0x08013e40
 80071c0:	08013d8c 	.word	0x08013d8c
 80071c4:	08013e54 	.word	0x08013e54
 80071c8:	08013e74 	.word	0x08013e74
 80071cc:	08013e38 	.word	0x08013e38

080071d0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <http_err+0x1c>
    http_state_free(hs);
 80071e6:	68f8      	ldr	r0, [r7, #12]
 80071e8:	f7ff fc16 	bl	8006a18 <http_state_free>
  }
}
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <http_sent+0x1c>
    return ERR_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	e008      	b.n	8007222 <http_sent+0x2e>
  }

  hs->retries = 0;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8007218:	6979      	ldr	r1, [r7, #20]
 800721a:	68b8      	ldr	r0, [r7, #8]
 800721c:	f7ff fd25 	bl	8006c6a <http_send>

  return ERR_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d107      	bne.n	800724e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800723e:	2100      	movs	r1, #0
 8007240:	6838      	ldr	r0, [r7, #0]
 8007242:	f7ff fc91 	bl	8006b68 <http_close_conn>
 8007246:	4603      	mov	r3, r0
 8007248:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e021      	b.n	8007292 <http_poll+0x68>
  } else {
    hs->retries++;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007254:	3301      	adds	r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007264:	2b04      	cmp	r3, #4
 8007266:	d105      	bne.n	8007274 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8007268:	68f9      	ldr	r1, [r7, #12]
 800726a:	6838      	ldr	r0, [r7, #0]
 800726c:	f7ff fc7c 	bl	8006b68 <http_close_conn>
      return ERR_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	e00e      	b.n	8007292 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800727c:	68f9      	ldr	r1, [r7, #12]
 800727e:	6838      	ldr	r0, [r7, #0]
 8007280:	f7ff fcf3 	bl	8006c6a <http_send>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800728a:	6838      	ldr	r0, [r7, #0]
 800728c:	f007 f96e 	bl	800e56c <tcp_output>
      }
    }
  }

  return ERR_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80072ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d105      	bne.n	80072c2 <http_recv+0x26>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <http_recv+0x26>
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d111      	bne.n	80072e6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d008      	beq.n	80072da <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	891b      	ldrh	r3, [r3, #8]
 80072cc:	4619      	mov	r1, r3
 80072ce:	68b8      	ldr	r0, [r7, #8]
 80072d0:	f002 fd3e 	bl	8009d50 <tcp_recved>
      pbuf_free(p);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f001 fdf1 	bl	8008ebc <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80072da:	6979      	ldr	r1, [r7, #20]
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f7ff fc43 	bl	8006b68 <http_close_conn>
    return ERR_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e055      	b.n	8007392 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	4619      	mov	r1, r3
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f002 fd2f 	bl	8009d50 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d147      	bne.n	800738a <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	6979      	ldr	r1, [r7, #20]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fd30 	bl	8006d64 <http_parse_request>
 8007304:	4603      	mov	r3, r0
 8007306:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8007308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d015      	beq.n	800733c <http_recv+0xa0>
 8007310:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007314:	f113 0f05 	cmn.w	r3, #5
 8007318:	d010      	beq.n	800733c <http_recv+0xa0>
 800731a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800731e:	f113 0f10 	cmn.w	r3, #16
 8007322:	d00b      	beq.n	800733c <http_recv+0xa0>
 8007324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007328:	f113 0f08 	cmn.w	r3, #8
 800732c:	d006      	beq.n	800733c <http_recv+0xa0>
 800732e:	4b1b      	ldr	r3, [pc, #108]	@ (800739c <http_recv+0x100>)
 8007330:	f640 2204 	movw	r2, #2564	@ 0xa04
 8007334:	491a      	ldr	r1, [pc, #104]	@ (80073a0 <http_recv+0x104>)
 8007336:	481b      	ldr	r0, [pc, #108]	@ (80073a4 <http_recv+0x108>)
 8007338:	f00b fcca 	bl	8012cd0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800733c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007340:	f113 0f05 	cmn.w	r3, #5
 8007344:	d00b      	beq.n	800735e <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d007      	beq.n	800735e <http_recv+0xc2>
          pbuf_free(hs->req);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fdb2 	bl	8008ebc <pbuf_free>
          hs->req = NULL;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2200      	movs	r2, #0
 800735c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 fdac 	bl	8008ebc <pbuf_free>
      if (parsed == ERR_OK) {
 8007364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d104      	bne.n	8007376 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800736c:	6979      	ldr	r1, [r7, #20]
 800736e:	68b8      	ldr	r0, [r7, #8]
 8007370:	f7ff fc7b 	bl	8006c6a <http_send>
 8007374:	e00c      	b.n	8007390 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 8007376:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800737a:	f113 0f10 	cmn.w	r3, #16
 800737e:	d107      	bne.n	8007390 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8007380:	6979      	ldr	r1, [r7, #20]
 8007382:	68b8      	ldr	r0, [r7, #8]
 8007384:	f7ff fbf0 	bl	8006b68 <http_close_conn>
 8007388:	e002      	b.n	8007390 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fd96 	bl	8008ebc <pbuf_free>
    }
  }
  return ERR_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	08013d44 	.word	0x08013d44
 80073a0:	08013ea0 	.word	0x08013ea0
 80073a4:	08013d8c 	.word	0x08013d8c

080073a8 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	4613      	mov	r3, r2
 80073b4:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80073b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d102      	bne.n	80073c4 <http_accept+0x1c>
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <http_accept+0x22>
    return ERR_VAL;
 80073c4:	f06f 0305 	mvn.w	r3, #5
 80073c8:	e025      	b.n	8007416 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80073ca:	2101      	movs	r1, #1
 80073cc:	68b8      	ldr	r0, [r7, #8]
 80073ce:	f003 f9a5 	bl	800a71c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80073d2:	f7ff faef 	bl	80069b4 <http_state_alloc>
 80073d6:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d102      	bne.n	80073e4 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80073de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073e2:	e018      	b.n	8007416 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80073ea:	6979      	ldr	r1, [r7, #20]
 80073ec:	68b8      	ldr	r0, [r7, #8]
 80073ee:	f003 fb9d 	bl	800ab2c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80073f2:	490b      	ldr	r1, [pc, #44]	@ (8007420 <http_accept+0x78>)
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f003 fba9 	bl	800ab4c <tcp_recv>
  altcp_err(pcb, http_err);
 80073fa:	490a      	ldr	r1, [pc, #40]	@ (8007424 <http_accept+0x7c>)
 80073fc:	68b8      	ldr	r0, [r7, #8]
 80073fe:	f003 fbe9 	bl	800abd4 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8007402:	2204      	movs	r2, #4
 8007404:	4908      	ldr	r1, [pc, #32]	@ (8007428 <http_accept+0x80>)
 8007406:	68b8      	ldr	r0, [r7, #8]
 8007408:	f003 fc1c 	bl	800ac44 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800740c:	4907      	ldr	r1, [pc, #28]	@ (800742c <http_accept+0x84>)
 800740e:	68b8      	ldr	r0, [r7, #8]
 8007410:	f003 fbbe 	bl	800ab90 <tcp_sent>

  return ERR_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	0800729d 	.word	0x0800729d
 8007424:	080071d1 	.word	0x080071d1
 8007428:	0800722b 	.word	0x0800722b
 800742c:	080071f5 	.word	0x080071f5

08007430 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d029      	beq.n	8007496 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8007442:	2101      	movs	r1, #1
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f003 f969 	bl	800a71c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	461a      	mov	r2, r3
 800744e:	4914      	ldr	r1, [pc, #80]	@ (80074a0 <httpd_init_pcb+0x70>)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f002 faaf 	bl	80099b4 <tcp_bind>
 8007456:	4603      	mov	r3, r0
 8007458:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d006      	beq.n	8007470 <httpd_init_pcb+0x40>
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <httpd_init_pcb+0x74>)
 8007464:	f640 2257 	movw	r2, #2647	@ 0xa57
 8007468:	490f      	ldr	r1, [pc, #60]	@ (80074a8 <httpd_init_pcb+0x78>)
 800746a:	4810      	ldr	r0, [pc, #64]	@ (80074ac <httpd_init_pcb+0x7c>)
 800746c:	f00b fc30 	bl	8012cd0 <iprintf>
    pcb = altcp_listen(pcb);
 8007470:	21ff      	movs	r1, #255	@ 0xff
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f002 fb56 	bl	8009b24 <tcp_listen_with_backlog>
 8007478:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <httpd_init_pcb+0x5e>
 8007480:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <httpd_init_pcb+0x74>)
 8007482:	f640 2259 	movw	r2, #2649	@ 0xa59
 8007486:	490a      	ldr	r1, [pc, #40]	@ (80074b0 <httpd_init_pcb+0x80>)
 8007488:	4808      	ldr	r0, [pc, #32]	@ (80074ac <httpd_init_pcb+0x7c>)
 800748a:	f00b fc21 	bl	8012cd0 <iprintf>
    altcp_accept(pcb, http_accept);
 800748e:	4909      	ldr	r1, [pc, #36]	@ (80074b4 <httpd_init_pcb+0x84>)
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f003 fbc1 	bl	800ac18 <tcp_accept>
  }
}
 8007496:	bf00      	nop
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	080178b8 	.word	0x080178b8
 80074a4:	08013d44 	.word	0x08013d44
 80074a8:	08013ecc 	.word	0x08013ecc
 80074ac:	08013d8c 	.word	0x08013d8c
 80074b0:	08013ee8 	.word	0x08013ee8
 80074b4:	080073a9 	.word	0x080073a9

080074b8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80074be:	202e      	movs	r0, #46	@ 0x2e
 80074c0:	f003 fb26 	bl	800ab10 <tcp_new_ip_type>
 80074c4:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d106      	bne.n	80074da <httpd_init+0x22>
 80074cc:	4b07      	ldr	r3, [pc, #28]	@ (80074ec <httpd_init+0x34>)
 80074ce:	f640 2272 	movw	r2, #2674	@ 0xa72
 80074d2:	4907      	ldr	r1, [pc, #28]	@ (80074f0 <httpd_init+0x38>)
 80074d4:	4807      	ldr	r0, [pc, #28]	@ (80074f4 <httpd_init+0x3c>)
 80074d6:	f00b fbfb 	bl	8012cd0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80074da:	2150      	movs	r1, #80	@ 0x50
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ffa7 	bl	8007430 <httpd_init_pcb>
}
 80074e2:	bf00      	nop
 80074e4:	3708      	adds	r7, #8
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	08013d44 	.word	0x08013d44
 80074f0:	08013f08 	.word	0x08013f08
 80074f4:	08013d8c 	.word	0x08013d8c

080074f8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007502:	88fb      	ldrh	r3, [r7, #6]
 8007504:	021b      	lsls	r3, r3, #8
 8007506:	b21a      	sxth	r2, r3
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	0a1b      	lsrs	r3, r3, #8
 800750c:	b29b      	uxth	r3, r3
 800750e:	b21b      	sxth	r3, r3
 8007510:	4313      	orrs	r3, r2
 8007512:	b21b      	sxth	r3, r3
 8007514:	b29b      	uxth	r3, r3
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	bc80      	pop	{r7}
 800751e:	4770      	bx	lr

08007520 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	061a      	lsls	r2, r3, #24
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0a1b      	lsrs	r3, r3, #8
 800753a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	0e1b      	lsrs	r3, r3, #24
 8007544:	4313      	orrs	r3, r2
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	bc80      	pop	{r7}
 800754e:	4770      	bx	lr

08007550 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800755c:	68b8      	ldr	r0, [r7, #8]
 800755e:	f7f8 fe19 	bl	8000194 <strlen>
 8007562:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	e022      	b.n	80075b4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e012      	b.n	800759a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d109      	bne.n	8007594 <lwip_strnstr+0x44>
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	6978      	ldr	r0, [r7, #20]
 8007586:	f00b fc1d 	bl	8012dc4 <strncmp>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d101      	bne.n	8007594 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	e00f      	b.n	80075b4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3301      	adds	r3, #1
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <lwip_strnstr+0x62>
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	441a      	add	r2, r3
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	440b      	add	r3, r1
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d9e0      	bls.n	8007574 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80075bc:	b480      	push	{r7}
 80075be:	b089      	sub	sp, #36	@ 0x24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <lwip_standard_chksum+0x40>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dd0a      	ble.n	80075fc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	1c53      	adds	r3, r2, #1
 80075ea:	61fb      	str	r3, [r7, #28]
 80075ec:	f107 030e 	add.w	r3, r7, #14
 80075f0:	3301      	adds	r3, #1
 80075f2:	7812      	ldrb	r2, [r2, #0]
 80075f4:	701a      	strb	r2, [r3, #0]
    len--;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8007600:	e00a      	b.n	8007618 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	61ba      	str	r2, [r7, #24]
 8007608:	881b      	ldrh	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
    len -= 2;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	3b02      	subs	r3, #2
 8007616:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b01      	cmp	r3, #1
 800761c:	dcf1      	bgt.n	8007602 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	dd04      	ble.n	800762e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8007624:	f107 030e 	add.w	r3, r7, #14
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	7812      	ldrb	r2, [r2, #0]
 800762c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800762e:	89fb      	ldrh	r3, [r7, #14]
 8007630:	461a      	mov	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	0c1a      	lsrs	r2, r3, #16
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	b29b      	uxth	r3, r3
 8007640:	4413      	add	r3, r2
 8007642:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	0c1a      	lsrs	r2, r3, #16
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	b29b      	uxth	r3, r3
 800764c:	4413      	add	r3, r2
 800764e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d007      	beq.n	8007666 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	021b      	lsls	r3, r3, #8
 800765a:	b29a      	uxth	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	b2db      	uxtb	r3, r3
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	b29b      	uxth	r3, r3
}
 800766a:	4618      	mov	r0, r3
 800766c:	3724      	adds	r7, #36	@ 0x24
 800766e:	46bd      	mov	sp, r7
 8007670:	bc80      	pop	{r7}
 8007672:	4770      	bx	lr

08007674 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	607b      	str	r3, [r7, #4]
 800767e:	460b      	mov	r3, r1
 8007680:	72fb      	strb	r3, [r7, #11]
 8007682:	4613      	mov	r3, r2
 8007684:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e02b      	b.n	80076e8 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	895b      	ldrh	r3, [r3, #10]
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f7ff ff8e 	bl	80075bc <lwip_standard_chksum>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	0c1a      	lsrs	r2, r3, #16
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4413      	add	r3, r2
 80076b4:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	895b      	ldrh	r3, [r3, #10]
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	b29b      	uxth	r3, r3
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00e      	beq.n	80076e2 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bf0c      	ite	eq
 80076ca:	2301      	moveq	r3, #1
 80076cc:	2300      	movne	r3, #0
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	021b      	lsls	r3, r3, #8
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	0a1b      	lsrs	r3, r3, #8
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	4313      	orrs	r3, r2
 80076e0:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1d0      	bne.n	8007690 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d007      	beq.n	8007704 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	4313      	orrs	r3, r2
 8007702:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8007704:	7afb      	ldrb	r3, [r7, #11]
 8007706:	b29b      	uxth	r3, r3
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff fef5 	bl	80074f8 <lwip_htons>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4413      	add	r3, r2
 8007716:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8007718:	893b      	ldrh	r3, [r7, #8]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff feec 	bl	80074f8 <lwip_htons>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0c1a      	lsrs	r2, r3, #16
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	b29b      	uxth	r3, r3
 8007732:	4413      	add	r3, r2
 8007734:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0c1a      	lsrs	r2, r3, #16
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	b29b      	uxth	r3, r3
 800773e:	4413      	add	r3, r2
 8007740:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	b29b      	uxth	r3, r3
 8007746:	43db      	mvns	r3, r3
 8007748:	b29b      	uxth	r3, r3
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	607b      	str	r3, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	72fb      	strb	r3, [r7, #11]
 8007760:	4613      	mov	r3, r2
 8007762:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	b29b      	uxth	r3, r3
 800776e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	4413      	add	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	b29b      	uxth	r3, r3
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4413      	add	r3, r2
 8007788:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	0c1b      	lsrs	r3, r3, #16
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	4413      	add	r3, r2
 8007792:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	0c1a      	lsrs	r2, r3, #16
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	b29b      	uxth	r3, r3
 800779c:	4413      	add	r3, r2
 800779e:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	0c1a      	lsrs	r2, r3, #16
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	4413      	add	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80077ac:	893a      	ldrh	r2, [r7, #8]
 80077ae:	7af9      	ldrb	r1, [r7, #11]
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f7ff ff5e 	bl	8007674 <inet_cksum_pseudo_base>
 80077b8:	4603      	mov	r3, r0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b086      	sub	sp, #24
 80077c6:	af02      	add	r7, sp, #8
 80077c8:	60f8      	str	r0, [r7, #12]
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	72fb      	strb	r3, [r7, #11]
 80077d0:	4613      	mov	r3, r2
 80077d2:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80077d4:	893a      	ldrh	r2, [r7, #8]
 80077d6:	7af9      	ldrb	r1, [r7, #11]
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	f7ff ffb7 	bl	8007752 <inet_chksum_pseudo>
 80077e4:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	460b      	mov	r3, r1
 80077f8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80077fa:	887b      	ldrh	r3, [r7, #2]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fedc 	bl	80075bc <lwip_standard_chksum>
 8007804:	4603      	mov	r3, r0
 8007806:	43db      	mvns	r3, r3
 8007808:	b29b      	uxth	r3, r3
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b086      	sub	sp, #24
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	e02b      	b.n	8007880 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	895b      	ldrh	r3, [r3, #10]
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7ff fec2 	bl	80075bc <lwip_standard_chksum>
 8007838:	4603      	mov	r3, r0
 800783a:	461a      	mov	r2, r3
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	4413      	add	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	0c1a      	lsrs	r2, r3, #16
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	b29b      	uxth	r3, r3
 800784a:	4413      	add	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	895b      	ldrh	r3, [r3, #10]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00e      	beq.n	800787a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	bf0c      	ite	eq
 8007862:	2301      	moveq	r3, #1
 8007864:	2300      	movne	r3, #0
 8007866:	b2db      	uxtb	r3, r3
 8007868:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	b29a      	uxth	r2, r3
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	0a1b      	lsrs	r3, r3, #8
 8007874:	b2db      	uxtb	r3, r3
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	613b      	str	r3, [r7, #16]
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1d0      	bne.n	8007828 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d007      	beq.n	800789c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	b29a      	uxth	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	0a1b      	lsrs	r3, r3, #8
 8007896:	b2db      	uxtb	r3, r3
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	43db      	mvns	r3, r3
 80078a2:	b29b      	uxth	r3, r3
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80078b6:	f00b f881 	bl	80129bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80078ba:	f000 f8d1 	bl	8007a60 <mem_init>
  memp_init();
 80078be:	f000 fc27 	bl	8008110 <memp_init>
  pbuf_init();
  netif_init();
 80078c2:	f000 fced 	bl	80082a0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80078c6:	f007 ff63 	bl	800f790 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80078ca:	f001 fd6d 	bl	80093a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80078ce:	f007 fea5 	bl	800f61c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80078dc:	b480      	push	{r7}
 80078de:	b083      	sub	sp, #12
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	4603      	mov	r3, r0
 80078e4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80078e6:	4b04      	ldr	r3, [pc, #16]	@ (80078f8 <ptr_to_mem+0x1c>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	88fb      	ldrh	r3, [r7, #6]
 80078ec:	4413      	add	r3, r2
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	370c      	adds	r7, #12
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bc80      	pop	{r7}
 80078f6:	4770      	bx	lr
 80078f8:	2000460c 	.word	0x2000460c

080078fc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007904:	4b04      	ldr	r3, [pc, #16]	@ (8007918 <mem_to_ptr+0x1c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	b29b      	uxth	r3, r3
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	bc80      	pop	{r7}
 8007916:	4770      	bx	lr
 8007918:	2000460c 	.word	0x2000460c

0800791c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007924:	4b45      	ldr	r3, [pc, #276]	@ (8007a3c <plug_holes+0x120>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	429a      	cmp	r2, r3
 800792c:	d206      	bcs.n	800793c <plug_holes+0x20>
 800792e:	4b44      	ldr	r3, [pc, #272]	@ (8007a40 <plug_holes+0x124>)
 8007930:	f240 12df 	movw	r2, #479	@ 0x1df
 8007934:	4943      	ldr	r1, [pc, #268]	@ (8007a44 <plug_holes+0x128>)
 8007936:	4844      	ldr	r0, [pc, #272]	@ (8007a48 <plug_holes+0x12c>)
 8007938:	f00b f9ca 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800793c:	4b43      	ldr	r3, [pc, #268]	@ (8007a4c <plug_holes+0x130>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	429a      	cmp	r2, r3
 8007944:	d306      	bcc.n	8007954 <plug_holes+0x38>
 8007946:	4b3e      	ldr	r3, [pc, #248]	@ (8007a40 <plug_holes+0x124>)
 8007948:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800794c:	4940      	ldr	r1, [pc, #256]	@ (8007a50 <plug_holes+0x134>)
 800794e:	483e      	ldr	r0, [pc, #248]	@ (8007a48 <plug_holes+0x12c>)
 8007950:	f00b f9be 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	791b      	ldrb	r3, [r3, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <plug_holes+0x4e>
 800795c:	4b38      	ldr	r3, [pc, #224]	@ (8007a40 <plug_holes+0x124>)
 800795e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8007962:	493c      	ldr	r1, [pc, #240]	@ (8007a54 <plug_holes+0x138>)
 8007964:	4838      	ldr	r0, [pc, #224]	@ (8007a48 <plug_holes+0x12c>)
 8007966:	f00b f9b3 	bl	8012cd0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007972:	d906      	bls.n	8007982 <plug_holes+0x66>
 8007974:	4b32      	ldr	r3, [pc, #200]	@ (8007a40 <plug_holes+0x124>)
 8007976:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800797a:	4937      	ldr	r1, [pc, #220]	@ (8007a58 <plug_holes+0x13c>)
 800797c:	4832      	ldr	r0, [pc, #200]	@ (8007a48 <plug_holes+0x12c>)
 800797e:	f00b f9a7 	bl	8012cd0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ffa8 	bl	80078dc <ptr_to_mem>
 800798c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	429a      	cmp	r2, r3
 8007994:	d024      	beq.n	80079e0 <plug_holes+0xc4>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	791b      	ldrb	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d120      	bne.n	80079e0 <plug_holes+0xc4>
 800799e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a4c <plug_holes+0x130>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d01b      	beq.n	80079e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80079a8:	4b2c      	ldr	r3, [pc, #176]	@ (8007a5c <plug_holes+0x140>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d102      	bne.n	80079b8 <plug_holes+0x9c>
      lfree = mem;
 80079b2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a5c <plug_holes+0x140>)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	881a      	ldrh	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	881b      	ldrh	r3, [r3, #0]
 80079c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079c8:	d00a      	beq.n	80079e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	881b      	ldrh	r3, [r3, #0]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7ff ff84 	bl	80078dc <ptr_to_mem>
 80079d4:	4604      	mov	r4, r0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7ff ff90 	bl	80078fc <mem_to_ptr>
 80079dc:	4603      	mov	r3, r0
 80079de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	4618      	mov	r0, r3
 80079e6:	f7ff ff79 	bl	80078dc <ptr_to_mem>
 80079ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d01f      	beq.n	8007a34 <plug_holes+0x118>
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	791b      	ldrb	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d11b      	bne.n	8007a34 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80079fc:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <plug_holes+0x140>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d102      	bne.n	8007a0c <plug_holes+0xf0>
      lfree = pmem;
 8007a06:	4a15      	ldr	r2, [pc, #84]	@ (8007a5c <plug_holes+0x140>)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a1c:	d00a      	beq.n	8007a34 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff ff5a 	bl	80078dc <ptr_to_mem>
 8007a28:	4604      	mov	r4, r0
 8007a2a:	68b8      	ldr	r0, [r7, #8]
 8007a2c:	f7ff ff66 	bl	80078fc <mem_to_ptr>
 8007a30:	4603      	mov	r3, r0
 8007a32:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd90      	pop	{r4, r7, pc}
 8007a3c:	2000460c 	.word	0x2000460c
 8007a40:	08013f24 	.word	0x08013f24
 8007a44:	08013f54 	.word	0x08013f54
 8007a48:	08013f6c 	.word	0x08013f6c
 8007a4c:	20004610 	.word	0x20004610
 8007a50:	08013f94 	.word	0x08013f94
 8007a54:	08013fb0 	.word	0x08013fb0
 8007a58:	08013fcc 	.word	0x08013fcc
 8007a5c:	20004618 	.word	0x20004618

08007a60 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007a66:	4b1d      	ldr	r3, [pc, #116]	@ (8007adc <mem_init+0x7c>)
 8007a68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007a6c:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8007adc <mem_init+0x7c>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007a7a:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007a88:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8007a8c:	f7ff ff26 	bl	80078dc <ptr_to_mem>
 8007a90:	4603      	mov	r3, r0
 8007a92:	4a13      	ldr	r2, [pc, #76]	@ (8007ae0 <mem_init+0x80>)
 8007a94:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007a96:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <mem_init+0x80>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007a9e:	4b10      	ldr	r3, [pc, #64]	@ (8007ae0 <mem_init+0x80>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007aa6:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae0 <mem_init+0x80>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007ab0:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <mem_init+0x7c>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a0b      	ldr	r2, [pc, #44]	@ (8007ae4 <mem_init+0x84>)
 8007ab8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007aba:	480b      	ldr	r0, [pc, #44]	@ (8007ae8 <mem_init+0x88>)
 8007abc:	f00a ff8c 	bl	80129d8 <sys_mutex_new>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d006      	beq.n	8007ad4 <mem_init+0x74>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007ac6:	4b09      	ldr	r3, [pc, #36]	@ (8007aec <mem_init+0x8c>)
 8007ac8:	f240 221f 	movw	r2, #543	@ 0x21f
 8007acc:	4908      	ldr	r1, [pc, #32]	@ (8007af0 <mem_init+0x90>)
 8007ace:	4809      	ldr	r0, [pc, #36]	@ (8007af4 <mem_init+0x94>)
 8007ad0:	f00b f8fe 	bl	8012cd0 <iprintf>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	2000460c 	.word	0x2000460c
 8007ae0:	20004610 	.word	0x20004610
 8007ae4:	20004618 	.word	0x20004618
 8007ae8:	20004614 	.word	0x20004614
 8007aec:	08013f24 	.word	0x08013f24
 8007af0:	08013ff8 	.word	0x08013ff8
 8007af4:	08013f6c 	.word	0x08013f6c

08007af8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fefb 	bl	80078fc <mem_to_ptr>
 8007b06:	4603      	mov	r3, r0
 8007b08:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fee4 	bl	80078dc <ptr_to_mem>
 8007b14:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7ff fede 	bl	80078dc <ptr_to_mem>
 8007b20:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b2a:	d818      	bhi.n	8007b5e <mem_link_valid+0x66>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	885b      	ldrh	r3, [r3, #2]
 8007b30:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b34:	d813      	bhi.n	8007b5e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b3a:	8afa      	ldrh	r2, [r7, #22]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d004      	beq.n	8007b4a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	881b      	ldrh	r3, [r3, #0]
 8007b44:	8afa      	ldrh	r2, [r7, #22]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d109      	bne.n	8007b5e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007b4a:	4b08      	ldr	r3, [pc, #32]	@ (8007b6c <mem_link_valid+0x74>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b4e:	693a      	ldr	r2, [r7, #16]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d006      	beq.n	8007b62 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	885b      	ldrh	r3, [r3, #2]
 8007b58:	8afa      	ldrh	r2, [r7, #22]
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d001      	beq.n	8007b62 <mem_link_valid+0x6a>
    return 0;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e000      	b.n	8007b64 <mem_link_valid+0x6c>
  }
  return 1;
 8007b62:	2301      	movs	r3, #1
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20004610 	.word	0x20004610

08007b70 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d070      	beq.n	8007c60 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f003 0303 	and.w	r3, r3, #3
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00d      	beq.n	8007ba4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007b88:	4b37      	ldr	r3, [pc, #220]	@ (8007c68 <mem_free+0xf8>)
 8007b8a:	f240 2273 	movw	r2, #627	@ 0x273
 8007b8e:	4937      	ldr	r1, [pc, #220]	@ (8007c6c <mem_free+0xfc>)
 8007b90:	4837      	ldr	r0, [pc, #220]	@ (8007c70 <mem_free+0x100>)
 8007b92:	f00b f89d 	bl	8012cd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007b96:	f00a ff7d 	bl	8012a94 <sys_arch_protect>
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f00a ff87 	bl	8012ab0 <sys_arch_unprotect>
    return;
 8007ba2:	e05e      	b.n	8007c62 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3b08      	subs	r3, #8
 8007ba8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007baa:	4b32      	ldr	r3, [pc, #200]	@ (8007c74 <mem_free+0x104>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69fa      	ldr	r2, [r7, #28]
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d306      	bcc.n	8007bc2 <mem_free+0x52>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f103 020c 	add.w	r2, r3, #12
 8007bba:	4b2f      	ldr	r3, [pc, #188]	@ (8007c78 <mem_free+0x108>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d90d      	bls.n	8007bde <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007bc2:	4b29      	ldr	r3, [pc, #164]	@ (8007c68 <mem_free+0xf8>)
 8007bc4:	f240 227f 	movw	r2, #639	@ 0x27f
 8007bc8:	492c      	ldr	r1, [pc, #176]	@ (8007c7c <mem_free+0x10c>)
 8007bca:	4829      	ldr	r0, [pc, #164]	@ (8007c70 <mem_free+0x100>)
 8007bcc:	f00b f880 	bl	8012cd0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007bd0:	f00a ff60 	bl	8012a94 <sys_arch_protect>
 8007bd4:	6138      	str	r0, [r7, #16]
 8007bd6:	6938      	ldr	r0, [r7, #16]
 8007bd8:	f00a ff6a 	bl	8012ab0 <sys_arch_unprotect>
    return;
 8007bdc:	e041      	b.n	8007c62 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007bde:	4828      	ldr	r0, [pc, #160]	@ (8007c80 <mem_free+0x110>)
 8007be0:	f00a ff16 	bl	8012a10 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	791b      	ldrb	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d110      	bne.n	8007c0e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007bec:	4b1e      	ldr	r3, [pc, #120]	@ (8007c68 <mem_free+0xf8>)
 8007bee:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007bf2:	4924      	ldr	r1, [pc, #144]	@ (8007c84 <mem_free+0x114>)
 8007bf4:	481e      	ldr	r0, [pc, #120]	@ (8007c70 <mem_free+0x100>)
 8007bf6:	f00b f86b 	bl	8012cd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007bfa:	4821      	ldr	r0, [pc, #132]	@ (8007c80 <mem_free+0x110>)
 8007bfc:	f00a ff17 	bl	8012a2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007c00:	f00a ff48 	bl	8012a94 <sys_arch_protect>
 8007c04:	6178      	str	r0, [r7, #20]
 8007c06:	6978      	ldr	r0, [r7, #20]
 8007c08:	f00a ff52 	bl	8012ab0 <sys_arch_unprotect>
    return;
 8007c0c:	e029      	b.n	8007c62 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007c0e:	69f8      	ldr	r0, [r7, #28]
 8007c10:	f7ff ff72 	bl	8007af8 <mem_link_valid>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d110      	bne.n	8007c3c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007c1a:	4b13      	ldr	r3, [pc, #76]	@ (8007c68 <mem_free+0xf8>)
 8007c1c:	f240 2295 	movw	r2, #661	@ 0x295
 8007c20:	4919      	ldr	r1, [pc, #100]	@ (8007c88 <mem_free+0x118>)
 8007c22:	4813      	ldr	r0, [pc, #76]	@ (8007c70 <mem_free+0x100>)
 8007c24:	f00b f854 	bl	8012cd0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007c28:	4815      	ldr	r0, [pc, #84]	@ (8007c80 <mem_free+0x110>)
 8007c2a:	f00a ff00 	bl	8012a2e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007c2e:	f00a ff31 	bl	8012a94 <sys_arch_protect>
 8007c32:	61b8      	str	r0, [r7, #24]
 8007c34:	69b8      	ldr	r0, [r7, #24]
 8007c36:	f00a ff3b 	bl	8012ab0 <sys_arch_unprotect>
    return;
 8007c3a:	e012      	b.n	8007c62 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007c42:	4b12      	ldr	r3, [pc, #72]	@ (8007c8c <mem_free+0x11c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69fa      	ldr	r2, [r7, #28]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d202      	bcs.n	8007c52 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007c4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007c8c <mem_free+0x11c>)
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007c52:	69f8      	ldr	r0, [r7, #28]
 8007c54:	f7ff fe62 	bl	800791c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007c58:	4809      	ldr	r0, [pc, #36]	@ (8007c80 <mem_free+0x110>)
 8007c5a:	f00a fee8 	bl	8012a2e <sys_mutex_unlock>
 8007c5e:	e000      	b.n	8007c62 <mem_free+0xf2>
    return;
 8007c60:	bf00      	nop
}
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	08013f24 	.word	0x08013f24
 8007c6c:	08014014 	.word	0x08014014
 8007c70:	08013f6c 	.word	0x08013f6c
 8007c74:	2000460c 	.word	0x2000460c
 8007c78:	20004610 	.word	0x20004610
 8007c7c:	08014038 	.word	0x08014038
 8007c80:	20004614 	.word	0x20004614
 8007c84:	08014054 	.word	0x08014054
 8007c88:	0801407c 	.word	0x0801407c
 8007c8c:	20004618 	.word	0x20004618

08007c90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	460b      	mov	r3, r1
 8007c9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007c9c:	887b      	ldrh	r3, [r7, #2]
 8007c9e:	3303      	adds	r3, #3
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	f023 0303 	bic.w	r3, r3, #3
 8007ca6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007ca8:	8bfb      	ldrh	r3, [r7, #30]
 8007caa:	2b0b      	cmp	r3, #11
 8007cac:	d801      	bhi.n	8007cb2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007cae:	230c      	movs	r3, #12
 8007cb0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007cb2:	8bfb      	ldrh	r3, [r7, #30]
 8007cb4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cb8:	d803      	bhi.n	8007cc2 <mem_trim+0x32>
 8007cba:	8bfa      	ldrh	r2, [r7, #30]
 8007cbc:	887b      	ldrh	r3, [r7, #2]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d201      	bcs.n	8007cc6 <mem_trim+0x36>
    return NULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e0d8      	b.n	8007e78 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007cc6:	4b6e      	ldr	r3, [pc, #440]	@ (8007e80 <mem_trim+0x1f0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d304      	bcc.n	8007cda <mem_trim+0x4a>
 8007cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8007e84 <mem_trim+0x1f4>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d306      	bcc.n	8007ce8 <mem_trim+0x58>
 8007cda:	4b6b      	ldr	r3, [pc, #428]	@ (8007e88 <mem_trim+0x1f8>)
 8007cdc:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007ce0:	496a      	ldr	r1, [pc, #424]	@ (8007e8c <mem_trim+0x1fc>)
 8007ce2:	486b      	ldr	r0, [pc, #428]	@ (8007e90 <mem_trim+0x200>)
 8007ce4:	f00a fff4 	bl	8012cd0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007ce8:	4b65      	ldr	r3, [pc, #404]	@ (8007e80 <mem_trim+0x1f0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d304      	bcc.n	8007cfc <mem_trim+0x6c>
 8007cf2:	4b64      	ldr	r3, [pc, #400]	@ (8007e84 <mem_trim+0x1f4>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d307      	bcc.n	8007d0c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007cfc:	f00a feca 	bl	8012a94 <sys_arch_protect>
 8007d00:	60b8      	str	r0, [r7, #8]
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f00a fed4 	bl	8012ab0 <sys_arch_unprotect>
    return rmem;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	e0b5      	b.n	8007e78 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	3b08      	subs	r3, #8
 8007d10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007d12:	69b8      	ldr	r0, [r7, #24]
 8007d14:	f7ff fdf2 	bl	80078fc <mem_to_ptr>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	881a      	ldrh	r2, [r3, #0]
 8007d20:	8afb      	ldrh	r3, [r7, #22]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b08      	subs	r3, #8
 8007d28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007d2a:	8bfa      	ldrh	r2, [r7, #30]
 8007d2c:	8abb      	ldrh	r3, [r7, #20]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d906      	bls.n	8007d40 <mem_trim+0xb0>
 8007d32:	4b55      	ldr	r3, [pc, #340]	@ (8007e88 <mem_trim+0x1f8>)
 8007d34:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007d38:	4956      	ldr	r1, [pc, #344]	@ (8007e94 <mem_trim+0x204>)
 8007d3a:	4855      	ldr	r0, [pc, #340]	@ (8007e90 <mem_trim+0x200>)
 8007d3c:	f00a ffc8 	bl	8012cd0 <iprintf>
  if (newsize > size) {
 8007d40:	8bfa      	ldrh	r2, [r7, #30]
 8007d42:	8abb      	ldrh	r3, [r7, #20]
 8007d44:	429a      	cmp	r2, r3
 8007d46:	d901      	bls.n	8007d4c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	e095      	b.n	8007e78 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007d4c:	8bfa      	ldrh	r2, [r7, #30]
 8007d4e:	8abb      	ldrh	r3, [r7, #20]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d101      	bne.n	8007d58 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	e08f      	b.n	8007e78 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007d58:	484f      	ldr	r0, [pc, #316]	@ (8007e98 <mem_trim+0x208>)
 8007d5a:	f00a fe59 	bl	8012a10 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	881b      	ldrh	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff fdba 	bl	80078dc <ptr_to_mem>
 8007d68:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	791b      	ldrb	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d13f      	bne.n	8007df2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007d72:	69bb      	ldr	r3, [r7, #24]
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d7a:	d106      	bne.n	8007d8a <mem_trim+0xfa>
 8007d7c:	4b42      	ldr	r3, [pc, #264]	@ (8007e88 <mem_trim+0x1f8>)
 8007d7e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007d82:	4946      	ldr	r1, [pc, #280]	@ (8007e9c <mem_trim+0x20c>)
 8007d84:	4842      	ldr	r0, [pc, #264]	@ (8007e90 <mem_trim+0x200>)
 8007d86:	f00a ffa3 	bl	8012cd0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	881b      	ldrh	r3, [r3, #0]
 8007d8e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007d90:	8afa      	ldrh	r2, [r7, #22]
 8007d92:	8bfb      	ldrh	r3, [r7, #30]
 8007d94:	4413      	add	r3, r2
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3308      	adds	r3, #8
 8007d9a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007d9c:	4b40      	ldr	r3, [pc, #256]	@ (8007ea0 <mem_trim+0x210>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d106      	bne.n	8007db4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007da6:	89fb      	ldrh	r3, [r7, #14]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fd97 	bl	80078dc <ptr_to_mem>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4a3b      	ldr	r2, [pc, #236]	@ (8007ea0 <mem_trim+0x210>)
 8007db2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007db4:	89fb      	ldrh	r3, [r7, #14]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff fd90 	bl	80078dc <ptr_to_mem>
 8007dbc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	89ba      	ldrh	r2, [r7, #12]
 8007dc8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	8afa      	ldrh	r2, [r7, #22]
 8007dce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	89fa      	ldrh	r2, [r7, #14]
 8007dd4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dde:	d047      	beq.n	8007e70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	881b      	ldrh	r3, [r3, #0]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fd79 	bl	80078dc <ptr_to_mem>
 8007dea:	4602      	mov	r2, r0
 8007dec:	89fb      	ldrh	r3, [r7, #14]
 8007dee:	8053      	strh	r3, [r2, #2]
 8007df0:	e03e      	b.n	8007e70 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007df2:	8bfb      	ldrh	r3, [r7, #30]
 8007df4:	f103 0214 	add.w	r2, r3, #20
 8007df8:	8abb      	ldrh	r3, [r7, #20]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d838      	bhi.n	8007e70 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007dfe:	8afa      	ldrh	r2, [r7, #22]
 8007e00:	8bfb      	ldrh	r3, [r7, #30]
 8007e02:	4413      	add	r3, r2
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3308      	adds	r3, #8
 8007e08:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e12:	d106      	bne.n	8007e22 <mem_trim+0x192>
 8007e14:	4b1c      	ldr	r3, [pc, #112]	@ (8007e88 <mem_trim+0x1f8>)
 8007e16:	f240 3216 	movw	r2, #790	@ 0x316
 8007e1a:	4920      	ldr	r1, [pc, #128]	@ (8007e9c <mem_trim+0x20c>)
 8007e1c:	481c      	ldr	r0, [pc, #112]	@ (8007e90 <mem_trim+0x200>)
 8007e1e:	f00a ff57 	bl	8012cd0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007e22:	89fb      	ldrh	r3, [r7, #14]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fd59 	bl	80078dc <ptr_to_mem>
 8007e2a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007e2c:	4b1c      	ldr	r3, [pc, #112]	@ (8007ea0 <mem_trim+0x210>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d202      	bcs.n	8007e3c <mem_trim+0x1ac>
      lfree = mem2;
 8007e36:	4a1a      	ldr	r2, [pc, #104]	@ (8007ea0 <mem_trim+0x210>)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	881a      	ldrh	r2, [r3, #0]
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	8afa      	ldrh	r2, [r7, #22]
 8007e4e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	89fa      	ldrh	r2, [r7, #14]
 8007e54:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e5e:	d007      	beq.n	8007e70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	4618      	mov	r0, r3
 8007e66:	f7ff fd39 	bl	80078dc <ptr_to_mem>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007e70:	4809      	ldr	r0, [pc, #36]	@ (8007e98 <mem_trim+0x208>)
 8007e72:	f00a fddc 	bl	8012a2e <sys_mutex_unlock>
  return rmem;
 8007e76:	687b      	ldr	r3, [r7, #4]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	2000460c 	.word	0x2000460c
 8007e84:	20004610 	.word	0x20004610
 8007e88:	08013f24 	.word	0x08013f24
 8007e8c:	080140b0 	.word	0x080140b0
 8007e90:	08013f6c 	.word	0x08013f6c
 8007e94:	080140c8 	.word	0x080140c8
 8007e98:	20004614 	.word	0x20004614
 8007e9c:	080140e8 	.word	0x080140e8
 8007ea0:	20004618 	.word	0x20004618

08007ea4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	4603      	mov	r3, r0
 8007eac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <mem_malloc+0x14>
    return NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	e0e2      	b.n	800807e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007eb8:	88fb      	ldrh	r3, [r7, #6]
 8007eba:	3303      	adds	r3, #3
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007ec4:	8bbb      	ldrh	r3, [r7, #28]
 8007ec6:	2b0b      	cmp	r3, #11
 8007ec8:	d801      	bhi.n	8007ece <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007eca:	230c      	movs	r3, #12
 8007ecc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ece:	8bbb      	ldrh	r3, [r7, #28]
 8007ed0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ed4:	d803      	bhi.n	8007ede <mem_malloc+0x3a>
 8007ed6:	8bba      	ldrh	r2, [r7, #28]
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d201      	bcs.n	8007ee2 <mem_malloc+0x3e>
    return NULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e0cd      	b.n	800807e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007ee2:	4869      	ldr	r0, [pc, #420]	@ (8008088 <mem_malloc+0x1e4>)
 8007ee4:	f00a fd94 	bl	8012a10 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ee8:	4b68      	ldr	r3, [pc, #416]	@ (800808c <mem_malloc+0x1e8>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7ff fd05 	bl	80078fc <mem_to_ptr>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	83fb      	strh	r3, [r7, #30]
 8007ef6:	e0b7      	b.n	8008068 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007ef8:	8bfb      	ldrh	r3, [r7, #30]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fcee 	bl	80078dc <ptr_to_mem>
 8007f00:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	791b      	ldrb	r3, [r3, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 80a7 	bne.w	800805a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	f1a3 0208 	sub.w	r2, r3, #8
 8007f1a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	f0c0 809c 	bcc.w	800805a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	881b      	ldrh	r3, [r3, #0]
 8007f26:	461a      	mov	r2, r3
 8007f28:	8bfb      	ldrh	r3, [r7, #30]
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	f1a3 0208 	sub.w	r2, r3, #8
 8007f30:	8bbb      	ldrh	r3, [r7, #28]
 8007f32:	3314      	adds	r3, #20
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d333      	bcc.n	8007fa0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007f38:	8bfa      	ldrh	r2, [r7, #30]
 8007f3a:	8bbb      	ldrh	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3308      	adds	r3, #8
 8007f42:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f44:	8a7b      	ldrh	r3, [r7, #18]
 8007f46:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f4a:	d106      	bne.n	8007f5a <mem_malloc+0xb6>
 8007f4c:	4b50      	ldr	r3, [pc, #320]	@ (8008090 <mem_malloc+0x1ec>)
 8007f4e:	f240 3287 	movw	r2, #903	@ 0x387
 8007f52:	4950      	ldr	r1, [pc, #320]	@ (8008094 <mem_malloc+0x1f0>)
 8007f54:	4850      	ldr	r0, [pc, #320]	@ (8008098 <mem_malloc+0x1f4>)
 8007f56:	f00a febb 	bl	8012cd0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007f5a:	8a7b      	ldrh	r3, [r7, #18]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7ff fcbd 	bl	80078dc <ptr_to_mem>
 8007f62:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	881a      	ldrh	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8bfa      	ldrh	r2, [r7, #30]
 8007f76:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	8a7a      	ldrh	r2, [r7, #18]
 8007f7c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2201      	movs	r2, #1
 8007f82:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f8c:	d00b      	beq.n	8007fa6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fca2 	bl	80078dc <ptr_to_mem>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	8a7b      	ldrh	r3, [r7, #18]
 8007f9c:	8053      	strh	r3, [r2, #2]
 8007f9e:	e002      	b.n	8007fa6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007fa6:	4b39      	ldr	r3, [pc, #228]	@ (800808c <mem_malloc+0x1e8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d127      	bne.n	8008000 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007fb0:	4b36      	ldr	r3, [pc, #216]	@ (800808c <mem_malloc+0x1e8>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007fb6:	e005      	b.n	8007fc4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f7ff fc8d 	bl	80078dc <ptr_to_mem>
 8007fc2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007fc4:	69bb      	ldr	r3, [r7, #24]
 8007fc6:	791b      	ldrb	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d004      	beq.n	8007fd6 <mem_malloc+0x132>
 8007fcc:	4b33      	ldr	r3, [pc, #204]	@ (800809c <mem_malloc+0x1f8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d1f0      	bne.n	8007fb8 <mem_malloc+0x114>
          }
          lfree = cur;
 8007fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800808c <mem_malloc+0x1e8>)
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800808c <mem_malloc+0x1e8>)
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800809c <mem_malloc+0x1f8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d00b      	beq.n	8008000 <mem_malloc+0x15c>
 8007fe8:	4b28      	ldr	r3, [pc, #160]	@ (800808c <mem_malloc+0x1e8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	791b      	ldrb	r3, [r3, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d006      	beq.n	8008000 <mem_malloc+0x15c>
 8007ff2:	4b27      	ldr	r3, [pc, #156]	@ (8008090 <mem_malloc+0x1ec>)
 8007ff4:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007ff8:	4929      	ldr	r1, [pc, #164]	@ (80080a0 <mem_malloc+0x1fc>)
 8007ffa:	4827      	ldr	r0, [pc, #156]	@ (8008098 <mem_malloc+0x1f4>)
 8007ffc:	f00a fe68 	bl	8012cd0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008000:	4821      	ldr	r0, [pc, #132]	@ (8008088 <mem_malloc+0x1e4>)
 8008002:	f00a fd14 	bl	8012a2e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008006:	8bba      	ldrh	r2, [r7, #28]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	4413      	add	r3, r2
 800800c:	3308      	adds	r3, #8
 800800e:	4a23      	ldr	r2, [pc, #140]	@ (800809c <mem_malloc+0x1f8>)
 8008010:	6812      	ldr	r2, [r2, #0]
 8008012:	4293      	cmp	r3, r2
 8008014:	d906      	bls.n	8008024 <mem_malloc+0x180>
 8008016:	4b1e      	ldr	r3, [pc, #120]	@ (8008090 <mem_malloc+0x1ec>)
 8008018:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800801c:	4921      	ldr	r1, [pc, #132]	@ (80080a4 <mem_malloc+0x200>)
 800801e:	481e      	ldr	r0, [pc, #120]	@ (8008098 <mem_malloc+0x1f4>)
 8008020:	f00a fe56 	bl	8012cd0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f003 0303 	and.w	r3, r3, #3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d006      	beq.n	800803c <mem_malloc+0x198>
 800802e:	4b18      	ldr	r3, [pc, #96]	@ (8008090 <mem_malloc+0x1ec>)
 8008030:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8008034:	491c      	ldr	r1, [pc, #112]	@ (80080a8 <mem_malloc+0x204>)
 8008036:	4818      	ldr	r0, [pc, #96]	@ (8008098 <mem_malloc+0x1f4>)
 8008038:	f00a fe4a 	bl	8012cd0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d006      	beq.n	8008054 <mem_malloc+0x1b0>
 8008046:	4b12      	ldr	r3, [pc, #72]	@ (8008090 <mem_malloc+0x1ec>)
 8008048:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800804c:	4917      	ldr	r1, [pc, #92]	@ (80080ac <mem_malloc+0x208>)
 800804e:	4812      	ldr	r0, [pc, #72]	@ (8008098 <mem_malloc+0x1f4>)
 8008050:	f00a fe3e 	bl	8012cd0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	3308      	adds	r3, #8
 8008058:	e011      	b.n	800807e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800805a:	8bfb      	ldrh	r3, [r7, #30]
 800805c:	4618      	mov	r0, r3
 800805e:	f7ff fc3d 	bl	80078dc <ptr_to_mem>
 8008062:	4603      	mov	r3, r0
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008068:	8bfa      	ldrh	r2, [r7, #30]
 800806a:	8bbb      	ldrh	r3, [r7, #28]
 800806c:	f5c3 53a0 	rsb	r3, r3, #5120	@ 0x1400
 8008070:	429a      	cmp	r2, r3
 8008072:	f4ff af41 	bcc.w	8007ef8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008076:	4804      	ldr	r0, [pc, #16]	@ (8008088 <mem_malloc+0x1e4>)
 8008078:	f00a fcd9 	bl	8012a2e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3720      	adds	r7, #32
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20004614 	.word	0x20004614
 800808c:	20004618 	.word	0x20004618
 8008090:	08013f24 	.word	0x08013f24
 8008094:	080140e8 	.word	0x080140e8
 8008098:	08013f6c 	.word	0x08013f6c
 800809c:	20004610 	.word	0x20004610
 80080a0:	080140fc 	.word	0x080140fc
 80080a4:	08014118 	.word	0x08014118
 80080a8:	08014148 	.word	0x08014148
 80080ac:	08014178 	.word	0x08014178

080080b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2200      	movs	r2, #0
 80080be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	3303      	adds	r3, #3
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e011      	b.n	80080f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	4413      	add	r3, r2
 80080ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3301      	adds	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	885b      	ldrh	r3, [r3, #2]
 80080fa:	461a      	mov	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4293      	cmp	r3, r2
 8008100:	dbe7      	blt.n	80080d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	bc80      	pop	{r7}
 800810c:	4770      	bx	lr
	...

08008110 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008116:	2300      	movs	r3, #0
 8008118:	80fb      	strh	r3, [r7, #6]
 800811a:	e009      	b.n	8008130 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	4a08      	ldr	r2, [pc, #32]	@ (8008140 <memp_init+0x30>)
 8008120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff ffc3 	bl	80080b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800812a:	88fb      	ldrh	r3, [r7, #6]
 800812c:	3301      	adds	r3, #1
 800812e:	80fb      	strh	r3, [r7, #6]
 8008130:	88fb      	ldrh	r3, [r7, #6]
 8008132:	2b0c      	cmp	r3, #12
 8008134:	d9f2      	bls.n	800811c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008136:	bf00      	nop
 8008138:	bf00      	nop
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08017844 	.word	0x08017844

08008144 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800814c:	f00a fca2 	bl	8012a94 <sys_arch_protect>
 8008150:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d015      	beq.n	800818c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	6812      	ldr	r2, [r2, #0]
 8008168:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	2b00      	cmp	r3, #0
 8008172:	d006      	beq.n	8008182 <do_memp_malloc_pool+0x3e>
 8008174:	4b09      	ldr	r3, [pc, #36]	@ (800819c <do_memp_malloc_pool+0x58>)
 8008176:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800817a:	4909      	ldr	r1, [pc, #36]	@ (80081a0 <do_memp_malloc_pool+0x5c>)
 800817c:	4809      	ldr	r0, [pc, #36]	@ (80081a4 <do_memp_malloc_pool+0x60>)
 800817e:	f00a fda7 	bl	8012cd0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f00a fc94 	bl	8012ab0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	e003      	b.n	8008194 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f00a fc8f 	bl	8012ab0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	0801419c 	.word	0x0801419c
 80081a0:	080141cc 	.word	0x080141cc
 80081a4:	080141f0 	.word	0x080141f0

080081a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80081b2:	79fb      	ldrb	r3, [r7, #7]
 80081b4:	2b0c      	cmp	r3, #12
 80081b6:	d908      	bls.n	80081ca <memp_malloc+0x22>
 80081b8:	4b0a      	ldr	r3, [pc, #40]	@ (80081e4 <memp_malloc+0x3c>)
 80081ba:	f240 1257 	movw	r2, #343	@ 0x157
 80081be:	490a      	ldr	r1, [pc, #40]	@ (80081e8 <memp_malloc+0x40>)
 80081c0:	480a      	ldr	r0, [pc, #40]	@ (80081ec <memp_malloc+0x44>)
 80081c2:	f00a fd85 	bl	8012cd0 <iprintf>
 80081c6:	2300      	movs	r3, #0
 80081c8:	e008      	b.n	80081dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	4a08      	ldr	r2, [pc, #32]	@ (80081f0 <memp_malloc+0x48>)
 80081ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff ffb6 	bl	8008144 <do_memp_malloc_pool>
 80081d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80081da:	68fb      	ldr	r3, [r7, #12]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3710      	adds	r7, #16
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	0801419c 	.word	0x0801419c
 80081e8:	0801422c 	.word	0x0801422c
 80081ec:	080141f0 	.word	0x080141f0
 80081f0:	08017844 	.word	0x08017844

080081f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <do_memp_free_pool+0x22>
 8008208:	4b0d      	ldr	r3, [pc, #52]	@ (8008240 <do_memp_free_pool+0x4c>)
 800820a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800820e:	490d      	ldr	r1, [pc, #52]	@ (8008244 <do_memp_free_pool+0x50>)
 8008210:	480d      	ldr	r0, [pc, #52]	@ (8008248 <do_memp_free_pool+0x54>)
 8008212:	f00a fd5d 	bl	8012cd0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800821a:	f00a fc3b 	bl	8012a94 <sys_arch_protect>
 800821e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008232:	68b8      	ldr	r0, [r7, #8]
 8008234:	f00a fc3c 	bl	8012ab0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	0801419c 	.word	0x0801419c
 8008244:	0801424c 	.word	0x0801424c
 8008248:	080141f0 	.word	0x080141f0

0800824c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	6039      	str	r1, [r7, #0]
 8008256:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	2b0c      	cmp	r3, #12
 800825c:	d907      	bls.n	800826e <memp_free+0x22>
 800825e:	4b0c      	ldr	r3, [pc, #48]	@ (8008290 <memp_free+0x44>)
 8008260:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8008264:	490b      	ldr	r1, [pc, #44]	@ (8008294 <memp_free+0x48>)
 8008266:	480c      	ldr	r0, [pc, #48]	@ (8008298 <memp_free+0x4c>)
 8008268:	f00a fd32 	bl	8012cd0 <iprintf>
 800826c:	e00c      	b.n	8008288 <memp_free+0x3c>

  if (mem == NULL) {
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	4a09      	ldr	r2, [pc, #36]	@ (800829c <memp_free+0x50>)
 8008278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7ff ffb8 	bl	80081f4 <do_memp_free_pool>
 8008284:	e000      	b.n	8008288 <memp_free+0x3c>
    return;
 8008286:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	0801419c 	.word	0x0801419c
 8008294:	0801426c 	.word	0x0801426c
 8008298:	080141f0 	.word	0x080141f0
 800829c:	08017844 	.word	0x08017844

080082a0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80082a4:	bf00      	nop
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b086      	sub	sp, #24
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d108      	bne.n	80082d2 <netif_add+0x26>
 80082c0:	4b57      	ldr	r3, [pc, #348]	@ (8008420 <netif_add+0x174>)
 80082c2:	f240 1227 	movw	r2, #295	@ 0x127
 80082c6:	4957      	ldr	r1, [pc, #348]	@ (8008424 <netif_add+0x178>)
 80082c8:	4857      	ldr	r0, [pc, #348]	@ (8008428 <netif_add+0x17c>)
 80082ca:	f00a fd01 	bl	8012cd0 <iprintf>
 80082ce:	2300      	movs	r3, #0
 80082d0:	e0a2      	b.n	8008418 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80082d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d108      	bne.n	80082ea <netif_add+0x3e>
 80082d8:	4b51      	ldr	r3, [pc, #324]	@ (8008420 <netif_add+0x174>)
 80082da:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80082de:	4953      	ldr	r1, [pc, #332]	@ (800842c <netif_add+0x180>)
 80082e0:	4851      	ldr	r0, [pc, #324]	@ (8008428 <netif_add+0x17c>)
 80082e2:	f00a fcf5 	bl	8012cd0 <iprintf>
 80082e6:	2300      	movs	r3, #0
 80082e8:	e096      	b.n	8008418 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80082f0:	4b4f      	ldr	r3, [pc, #316]	@ (8008430 <netif_add+0x184>)
 80082f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80082fa:	4b4d      	ldr	r3, [pc, #308]	@ (8008430 <netif_add+0x184>)
 80082fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008304:	4b4a      	ldr	r3, [pc, #296]	@ (8008430 <netif_add+0x184>)
 8008306:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4a45      	ldr	r2, [pc, #276]	@ (8008434 <netif_add+0x188>)
 800831e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800833a:	4b3f      	ldr	r3, [pc, #252]	@ (8008438 <netif_add+0x18c>)
 800833c:	781a      	ldrb	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008348:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 f911 	bl	8008578 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	4798      	blx	r3
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <netif_add+0xba>
    return NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	e058      	b.n	8008418 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800836c:	2bff      	cmp	r3, #255	@ 0xff
 800836e:	d103      	bne.n	8008378 <netif_add+0xcc>
        netif->num = 0;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8008378:	2300      	movs	r3, #0
 800837a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800837c:	4b2f      	ldr	r3, [pc, #188]	@ (800843c <netif_add+0x190>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	617b      	str	r3, [r7, #20]
 8008382:	e02b      	b.n	80083dc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	429a      	cmp	r2, r3
 800838a:	d106      	bne.n	800839a <netif_add+0xee>
 800838c:	4b24      	ldr	r3, [pc, #144]	@ (8008420 <netif_add+0x174>)
 800838e:	f240 128b 	movw	r2, #395	@ 0x18b
 8008392:	492b      	ldr	r1, [pc, #172]	@ (8008440 <netif_add+0x194>)
 8008394:	4824      	ldr	r0, [pc, #144]	@ (8008428 <netif_add+0x17c>)
 8008396:	f00a fc9b 	bl	8012cd0 <iprintf>
        num_netifs++;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	3301      	adds	r3, #1
 800839e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	2bff      	cmp	r3, #255	@ 0xff
 80083a4:	dd06      	ble.n	80083b4 <netif_add+0x108>
 80083a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008420 <netif_add+0x174>)
 80083a8:	f240 128d 	movw	r2, #397	@ 0x18d
 80083ac:	4925      	ldr	r1, [pc, #148]	@ (8008444 <netif_add+0x198>)
 80083ae:	481e      	ldr	r0, [pc, #120]	@ (8008428 <netif_add+0x17c>)
 80083b0:	f00a fc8e 	bl	8012cd0 <iprintf>
        if (netif2->num == netif->num) {
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d108      	bne.n	80083d6 <netif_add+0x12a>
          netif->num++;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083ca:	3301      	adds	r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80083d4:	e005      	b.n	80083e2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1d0      	bne.n	8008384 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1be      	bne.n	8008366 <netif_add+0xba>
  }
  if (netif->num == 254) {
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80083f0:	d103      	bne.n	80083fa <netif_add+0x14e>
    netif_num = 0;
 80083f2:	4b11      	ldr	r3, [pc, #68]	@ (8008438 <netif_add+0x18c>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	701a      	strb	r2, [r3, #0]
 80083f8:	e006      	b.n	8008408 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008400:	3301      	adds	r3, #1
 8008402:	b2da      	uxtb	r2, r3
 8008404:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <netif_add+0x18c>)
 8008406:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008408:	4b0c      	ldr	r3, [pc, #48]	@ (800843c <netif_add+0x190>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008410:	4a0a      	ldr	r2, [pc, #40]	@ (800843c <netif_add+0x190>)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008416:	68fb      	ldr	r3, [r7, #12]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	08014288 	.word	0x08014288
 8008424:	0801431c 	.word	0x0801431c
 8008428:	080142d8 	.word	0x080142d8
 800842c:	08014338 	.word	0x08014338
 8008430:	080178b8 	.word	0x080178b8
 8008434:	08008789 	.word	0x08008789
 8008438:	200076f0 	.word	0x200076f0
 800843c:	200076e8 	.word	0x200076e8
 8008440:	0801435c 	.word	0x0801435c
 8008444:	08014370 	.word	0x08014370

08008448 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f002 fd9b 	bl	800af90 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f007 fe7f 	bl	8010160 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008462:	bf00      	nop
 8008464:	3708      	adds	r7, #8
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
	...

0800846c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b086      	sub	sp, #24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <netif_do_set_ipaddr+0x20>
 800847e:	4b1d      	ldr	r3, [pc, #116]	@ (80084f4 <netif_do_set_ipaddr+0x88>)
 8008480:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8008484:	491c      	ldr	r1, [pc, #112]	@ (80084f8 <netif_do_set_ipaddr+0x8c>)
 8008486:	481d      	ldr	r0, [pc, #116]	@ (80084fc <netif_do_set_ipaddr+0x90>)
 8008488:	f00a fc22 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <netif_do_set_ipaddr+0x34>
 8008492:	4b18      	ldr	r3, [pc, #96]	@ (80084f4 <netif_do_set_ipaddr+0x88>)
 8008494:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8008498:	4917      	ldr	r1, [pc, #92]	@ (80084f8 <netif_do_set_ipaddr+0x8c>)
 800849a:	4818      	ldr	r0, [pc, #96]	@ (80084fc <netif_do_set_ipaddr+0x90>)
 800849c:	f00a fc18 	bl	8012cd0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	3304      	adds	r3, #4
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d01c      	beq.n	80084e8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3304      	adds	r3, #4
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80084be:	f107 0314 	add.w	r3, r7, #20
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7ff ffbf 	bl	8008448 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d002      	beq.n	80084d6 <netif_do_set_ipaddr+0x6a>
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	e000      	b.n	80084d8 <netif_do_set_ipaddr+0x6c>
 80084d6:	2300      	movs	r3, #0
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80084dc:	2101      	movs	r1, #1
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 f8ce 	bl	8008680 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	08014288 	.word	0x08014288
 80084f8:	080143a0 	.word	0x080143a0
 80084fc:	080142d8 	.word	0x080142d8

08008500 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3308      	adds	r3, #8
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	429a      	cmp	r2, r3
 8008518:	d00a      	beq.n	8008530 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d002      	beq.n	8008526 <netif_do_set_netmask+0x26>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	e000      	b.n	8008528 <netif_do_set_netmask+0x28>
 8008526:	2300      	movs	r3, #0
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	bc80      	pop	{r7}
 800853a:	4770      	bx	lr

0800853c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	60f8      	str	r0, [r7, #12]
 8008544:	60b9      	str	r1, [r7, #8]
 8008546:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	330c      	adds	r3, #12
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d00a      	beq.n	800856c <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d002      	beq.n	8008562 <netif_do_set_gw+0x26>
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	e000      	b.n	8008564 <netif_do_set_gw+0x28>
 8008562:	2300      	movs	r3, #0
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	bc80      	pop	{r7}
 8008576:	4770      	bx	lr

08008578 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b088      	sub	sp, #32
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008586:	2300      	movs	r3, #0
 8008588:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800858a:	2300      	movs	r3, #0
 800858c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008594:	4b1c      	ldr	r3, [pc, #112]	@ (8008608 <netif_set_addr+0x90>)
 8008596:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800859e:	4b1a      	ldr	r3, [pc, #104]	@ (8008608 <netif_set_addr+0x90>)
 80085a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80085a8:	4b17      	ldr	r3, [pc, #92]	@ (8008608 <netif_set_addr+0x90>)
 80085aa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <netif_set_addr+0x42>
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <netif_set_addr+0x46>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <netif_set_addr+0x48>
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d006      	beq.n	80085d6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80085c8:	f107 0310 	add.w	r3, r7, #16
 80085cc:	461a      	mov	r2, r3
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f7ff ff4b 	bl	800846c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80085d6:	69fa      	ldr	r2, [r7, #28]
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f7ff ff90 	bl	8008500 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	6839      	ldr	r1, [r7, #0]
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f7ff ffa9 	bl	800853c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d106      	bne.n	80085fe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80085f0:	f107 0310 	add.w	r3, r7, #16
 80085f4:	461a      	mov	r2, r3
 80085f6:	68b9      	ldr	r1, [r7, #8]
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7ff ff37 	bl	800846c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80085fe:	bf00      	nop
 8008600:	3720      	adds	r7, #32
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	080178b8 	.word	0x080178b8

0800860c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800860c:	b480      	push	{r7}
 800860e:	b083      	sub	sp, #12
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008614:	4a03      	ldr	r2, [pc, #12]	@ (8008624 <netif_set_default+0x18>)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr
 8008624:	200076ec 	.word	0x200076ec

08008628 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <netif_set_up+0x1e>
 8008636:	4b0f      	ldr	r3, [pc, #60]	@ (8008674 <netif_set_up+0x4c>)
 8008638:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800863c:	490e      	ldr	r1, [pc, #56]	@ (8008678 <netif_set_up+0x50>)
 800863e:	480f      	ldr	r0, [pc, #60]	@ (800867c <netif_set_up+0x54>)
 8008640:	f00a fb46 	bl	8012cd0 <iprintf>
 8008644:	e013      	b.n	800866e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10c      	bne.n	800866e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008666:	2103      	movs	r1, #3
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 f809 	bl	8008680 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	08014288 	.word	0x08014288
 8008678:	08014410 	.word	0x08014410
 800867c:	080142d8 	.word	0x080142d8

08008680 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	460b      	mov	r3, r1
 800868a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d106      	bne.n	80086a0 <netif_issue_reports+0x20>
 8008692:	4b18      	ldr	r3, [pc, #96]	@ (80086f4 <netif_issue_reports+0x74>)
 8008694:	f240 326d 	movw	r2, #877	@ 0x36d
 8008698:	4917      	ldr	r1, [pc, #92]	@ (80086f8 <netif_issue_reports+0x78>)
 800869a:	4818      	ldr	r0, [pc, #96]	@ (80086fc <netif_issue_reports+0x7c>)
 800869c:	f00a fb18 	bl	8012cd0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086a6:	f003 0304 	and.w	r3, r3, #4
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d01e      	beq.n	80086ec <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086b4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d017      	beq.n	80086ec <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80086bc:	78fb      	ldrb	r3, [r7, #3]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d013      	beq.n	80086ee <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3304      	adds	r3, #4
 80086ca:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00e      	beq.n	80086ee <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3304      	adds	r3, #4
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f008 f999 	bl	8010a1c <etharp_request>
 80086ea:	e000      	b.n	80086ee <netif_issue_reports+0x6e>
    return;
 80086ec:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	08014288 	.word	0x08014288
 80086f8:	0801442c 	.word	0x0801442c
 80086fc:	080142d8 	.word	0x080142d8

08008700 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b082      	sub	sp, #8
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d107      	bne.n	800871e <netif_set_link_up+0x1e>
 800870e:	4b13      	ldr	r3, [pc, #76]	@ (800875c <netif_set_link_up+0x5c>)
 8008710:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8008714:	4912      	ldr	r1, [pc, #72]	@ (8008760 <netif_set_link_up+0x60>)
 8008716:	4813      	ldr	r0, [pc, #76]	@ (8008764 <netif_set_link_up+0x64>)
 8008718:	f00a fada 	bl	8012cd0 <iprintf>
 800871c:	e01b      	b.n	8008756 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008724:	f003 0304 	and.w	r3, r3, #4
 8008728:	2b00      	cmp	r3, #0
 800872a:	d114      	bne.n	8008756 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008732:	f043 0304 	orr.w	r3, r3, #4
 8008736:	b2da      	uxtb	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800873e:	2103      	movs	r1, #3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f7ff ff9d 	bl	8008680 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <netif_set_link_up+0x56>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	08014288 	.word	0x08014288
 8008760:	08014470 	.word	0x08014470
 8008764:	080142d8 	.word	0x080142d8

08008768 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	61da      	str	r2, [r3, #28]
  }
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr

08008788 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8008794:	f06f 030b 	mvn.w	r3, #11
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	bc80      	pop	{r7}
 80087a0:	4770      	bx	lr
	...

080087a4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d013      	beq.n	80087dc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80087b4:	4b0c      	ldr	r3, [pc, #48]	@ (80087e8 <netif_get_by_index+0x44>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	60fb      	str	r3, [r7, #12]
 80087ba:	e00c      	b.n	80087d6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087c2:	3301      	adds	r3, #1
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	79fa      	ldrb	r2, [r7, #7]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d101      	bne.n	80087d0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	e006      	b.n	80087de <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	60fb      	str	r3, [r7, #12]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1ef      	bne.n	80087bc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bc80      	pop	{r7}
 80087e6:	4770      	bx	lr
 80087e8:	200076e8 	.word	0x200076e8

080087ec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80087f2:	f00a f94f 	bl	8012a94 <sys_arch_protect>
 80087f6:	6038      	str	r0, [r7, #0]
 80087f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008830 <pbuf_free_ooseq+0x44>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	6838      	ldr	r0, [r7, #0]
 8008800:	f00a f956 	bl	8012ab0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008804:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <pbuf_free_ooseq+0x48>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	607b      	str	r3, [r7, #4]
 800880a:	e00a      	b.n	8008822 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f002 fbf9 	bl	800b00c <tcp_free_ooseq>
      return;
 800881a:	e005      	b.n	8008828 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	607b      	str	r3, [r7, #4]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d1f1      	bne.n	800880c <pbuf_free_ooseq+0x20>
    }
  }
}
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200076f1 	.word	0x200076f1
 8008834:	20007700 	.word	0x20007700

08008838 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008840:	f7ff ffd4 	bl	80087ec <pbuf_free_ooseq>
}
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8008852:	f00a f91f 	bl	8012a94 <sys_arch_protect>
 8008856:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008858:	4b0f      	ldr	r3, [pc, #60]	@ (8008898 <pbuf_pool_is_empty+0x4c>)
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800885e:	4b0e      	ldr	r3, [pc, #56]	@ (8008898 <pbuf_pool_is_empty+0x4c>)
 8008860:	2201      	movs	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f00a f923 	bl	8012ab0 <sys_arch_unprotect>

  if (!queued) {
 800886a:	78fb      	ldrb	r3, [r7, #3]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10f      	bne.n	8008890 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008870:	2100      	movs	r1, #0
 8008872:	480a      	ldr	r0, [pc, #40]	@ (800889c <pbuf_pool_is_empty+0x50>)
 8008874:	f7fd ffb2 	bl	80067dc <tcpip_try_callback>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d008      	beq.n	8008890 <pbuf_pool_is_empty+0x44>
 800887e:	f00a f909 	bl	8012a94 <sys_arch_protect>
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	4b04      	ldr	r3, [pc, #16]	@ (8008898 <pbuf_pool_is_empty+0x4c>)
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f00a f910 	bl	8012ab0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	200076f1 	.word	0x200076f1
 800889c:	08008839 	.word	0x08008839

080088a0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4611      	mov	r1, r2
 80088ac:	461a      	mov	r2, r3
 80088ae:	460b      	mov	r3, r1
 80088b0:	80fb      	strh	r3, [r7, #6]
 80088b2:	4613      	mov	r3, r2
 80088b4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	88ba      	ldrh	r2, [r7, #4]
 80088cc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80088ce:	8b3b      	ldrh	r3, [r7, #24]
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	7f3a      	ldrb	r2, [r7, #28]
 80088da:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2200      	movs	r2, #0
 80088e6:	73da      	strb	r2, [r3, #15]
}
 80088e8:	bf00      	nop
 80088ea:	3714      	adds	r7, #20
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bc80      	pop	{r7}
 80088f0:	4770      	bx	lr
	...

080088f4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08c      	sub	sp, #48	@ 0x30
 80088f8:	af02      	add	r7, sp, #8
 80088fa:	4603      	mov	r3, r0
 80088fc:	71fb      	strb	r3, [r7, #7]
 80088fe:	460b      	mov	r3, r1
 8008900:	80bb      	strh	r3, [r7, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008910:	d07f      	beq.n	8008a12 <pbuf_alloc+0x11e>
 8008912:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008916:	f300 80c8 	bgt.w	8008aaa <pbuf_alloc+0x1b6>
 800891a:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800891e:	d010      	beq.n	8008942 <pbuf_alloc+0x4e>
 8008920:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008924:	f300 80c1 	bgt.w	8008aaa <pbuf_alloc+0x1b6>
 8008928:	2b01      	cmp	r3, #1
 800892a:	d002      	beq.n	8008932 <pbuf_alloc+0x3e>
 800892c:	2b41      	cmp	r3, #65	@ 0x41
 800892e:	f040 80bc 	bne.w	8008aaa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008932:	887a      	ldrh	r2, [r7, #2]
 8008934:	88bb      	ldrh	r3, [r7, #4]
 8008936:	4619      	mov	r1, r3
 8008938:	2000      	movs	r0, #0
 800893a:	f000 f8d1 	bl	8008ae0 <pbuf_alloc_reference>
 800893e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008940:	e0bd      	b.n	8008abe <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008942:	2300      	movs	r3, #0
 8008944:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8008946:	2300      	movs	r3, #0
 8008948:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800894a:	88bb      	ldrh	r3, [r7, #4]
 800894c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800894e:	200c      	movs	r0, #12
 8008950:	f7ff fc2a 	bl	80081a8 <memp_malloc>
 8008954:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800895c:	f7ff ff76 	bl	800884c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008962:	2b00      	cmp	r3, #0
 8008964:	d002      	beq.n	800896c <pbuf_alloc+0x78>
            pbuf_free(p);
 8008966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008968:	f000 faa8 	bl	8008ebc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800896c:	2300      	movs	r3, #0
 800896e:	e0a7      	b.n	8008ac0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008972:	3303      	adds	r3, #3
 8008974:	b29b      	uxth	r3, r3
 8008976:	f023 0303 	bic.w	r3, r3, #3
 800897a:	b29b      	uxth	r3, r3
 800897c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8008980:	b29b      	uxth	r3, r3
 8008982:	8b7a      	ldrh	r2, [r7, #26]
 8008984:	4293      	cmp	r3, r2
 8008986:	bf28      	it	cs
 8008988:	4613      	movcs	r3, r2
 800898a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800898c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800898e:	3310      	adds	r3, #16
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	4413      	add	r3, r2
 8008994:	3303      	adds	r3, #3
 8008996:	f023 0303 	bic.w	r3, r3, #3
 800899a:	4618      	mov	r0, r3
 800899c:	89f9      	ldrh	r1, [r7, #14]
 800899e:	8b7a      	ldrh	r2, [r7, #26]
 80089a0:	2300      	movs	r3, #0
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	887b      	ldrh	r3, [r7, #2]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	460b      	mov	r3, r1
 80089aa:	4601      	mov	r1, r0
 80089ac:	6938      	ldr	r0, [r7, #16]
 80089ae:	f7ff ff77 	bl	80088a0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d006      	beq.n	80089cc <pbuf_alloc+0xd8>
 80089be:	4b42      	ldr	r3, [pc, #264]	@ (8008ac8 <pbuf_alloc+0x1d4>)
 80089c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089c4:	4941      	ldr	r1, [pc, #260]	@ (8008acc <pbuf_alloc+0x1d8>)
 80089c6:	4842      	ldr	r0, [pc, #264]	@ (8008ad0 <pbuf_alloc+0x1dc>)
 80089c8:	f00a f982 	bl	8012cd0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80089cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089ce:	3303      	adds	r3, #3
 80089d0:	f023 0303 	bic.w	r3, r3, #3
 80089d4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80089d8:	d106      	bne.n	80089e8 <pbuf_alloc+0xf4>
 80089da:	4b3b      	ldr	r3, [pc, #236]	@ (8008ac8 <pbuf_alloc+0x1d4>)
 80089dc:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80089e0:	493c      	ldr	r1, [pc, #240]	@ (8008ad4 <pbuf_alloc+0x1e0>)
 80089e2:	483b      	ldr	r0, [pc, #236]	@ (8008ad0 <pbuf_alloc+0x1dc>)
 80089e4:	f00a f974 	bl	8012cd0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80089e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d102      	bne.n	80089f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089f2:	e002      	b.n	80089fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80089fe:	8b7a      	ldrh	r2, [r7, #26]
 8008a00:	89fb      	ldrh	r3, [r7, #14]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008a0a:	8b7b      	ldrh	r3, [r7, #26]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d19e      	bne.n	800894e <pbuf_alloc+0x5a>
      break;
 8008a10:	e055      	b.n	8008abe <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008a12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a14:	3303      	adds	r3, #3
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	88bb      	ldrh	r3, [r7, #4]
 8008a20:	3303      	adds	r3, #3
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	f023 0303 	bic.w	r3, r3, #3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4413      	add	r3, r2
 8008a2c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008a2e:	8b3b      	ldrh	r3, [r7, #24]
 8008a30:	3310      	adds	r3, #16
 8008a32:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a34:	8b3a      	ldrh	r2, [r7, #24]
 8008a36:	88bb      	ldrh	r3, [r7, #4]
 8008a38:	3303      	adds	r3, #3
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d306      	bcc.n	8008a50 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008a42:	8afa      	ldrh	r2, [r7, #22]
 8008a44:	88bb      	ldrh	r3, [r7, #4]
 8008a46:	3303      	adds	r3, #3
 8008a48:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d201      	bcs.n	8008a54 <pbuf_alloc+0x160>
        return NULL;
 8008a50:	2300      	movs	r3, #0
 8008a52:	e035      	b.n	8008ac0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008a54:	8afb      	ldrh	r3, [r7, #22]
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7ff fa24 	bl	8007ea4 <mem_malloc>
 8008a5c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <pbuf_alloc+0x174>
        return NULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	e02b      	b.n	8008ac0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008a68:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a6a:	3310      	adds	r3, #16
 8008a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a6e:	4413      	add	r3, r2
 8008a70:	3303      	adds	r3, #3
 8008a72:	f023 0303 	bic.w	r3, r3, #3
 8008a76:	4618      	mov	r0, r3
 8008a78:	88b9      	ldrh	r1, [r7, #4]
 8008a7a:	88ba      	ldrh	r2, [r7, #4]
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	887b      	ldrh	r3, [r7, #2]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	460b      	mov	r3, r1
 8008a86:	4601      	mov	r1, r0
 8008a88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a8a:	f7ff ff09 	bl	80088a0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d010      	beq.n	8008abc <pbuf_alloc+0x1c8>
 8008a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac8 <pbuf_alloc+0x1d4>)
 8008a9c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8008aa0:	490d      	ldr	r1, [pc, #52]	@ (8008ad8 <pbuf_alloc+0x1e4>)
 8008aa2:	480b      	ldr	r0, [pc, #44]	@ (8008ad0 <pbuf_alloc+0x1dc>)
 8008aa4:	f00a f914 	bl	8012cd0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008aa8:	e008      	b.n	8008abc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008aaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <pbuf_alloc+0x1d4>)
 8008aac:	f240 1227 	movw	r2, #295	@ 0x127
 8008ab0:	490a      	ldr	r1, [pc, #40]	@ (8008adc <pbuf_alloc+0x1e8>)
 8008ab2:	4807      	ldr	r0, [pc, #28]	@ (8008ad0 <pbuf_alloc+0x1dc>)
 8008ab4:	f00a f90c 	bl	8012cd0 <iprintf>
      return NULL;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	e001      	b.n	8008ac0 <pbuf_alloc+0x1cc>
      break;
 8008abc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3728      	adds	r7, #40	@ 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	080144b8 	.word	0x080144b8
 8008acc:	080144e8 	.word	0x080144e8
 8008ad0:	08014518 	.word	0x08014518
 8008ad4:	08014540 	.word	0x08014540
 8008ad8:	08014574 	.word	0x08014574
 8008adc:	080145a0 	.word	0x080145a0

08008ae0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	807b      	strh	r3, [r7, #2]
 8008aec:	4613      	mov	r3, r2
 8008aee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008af0:	883b      	ldrh	r3, [r7, #0]
 8008af2:	2b41      	cmp	r3, #65	@ 0x41
 8008af4:	d009      	beq.n	8008b0a <pbuf_alloc_reference+0x2a>
 8008af6:	883b      	ldrh	r3, [r7, #0]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d006      	beq.n	8008b0a <pbuf_alloc_reference+0x2a>
 8008afc:	4b0f      	ldr	r3, [pc, #60]	@ (8008b3c <pbuf_alloc_reference+0x5c>)
 8008afe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008b02:	490f      	ldr	r1, [pc, #60]	@ (8008b40 <pbuf_alloc_reference+0x60>)
 8008b04:	480f      	ldr	r0, [pc, #60]	@ (8008b44 <pbuf_alloc_reference+0x64>)
 8008b06:	f00a f8e3 	bl	8012cd0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008b0a:	200b      	movs	r0, #11
 8008b0c:	f7ff fb4c 	bl	80081a8 <memp_malloc>
 8008b10:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e00b      	b.n	8008b34 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008b1c:	8879      	ldrh	r1, [r7, #2]
 8008b1e:	887a      	ldrh	r2, [r7, #2]
 8008b20:	2300      	movs	r3, #0
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	883b      	ldrh	r3, [r7, #0]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f7ff feb7 	bl	80088a0 <pbuf_init_alloced_pbuf>
  return p;
 8008b32:	68fb      	ldr	r3, [r7, #12]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	080144b8 	.word	0x080144b8
 8008b40:	080145bc 	.word	0x080145bc
 8008b44:	08014518 	.word	0x08014518

08008b48 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af02      	add	r7, sp, #8
 8008b4e:	607b      	str	r3, [r7, #4]
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]
 8008b54:	460b      	mov	r3, r1
 8008b56:	81bb      	strh	r3, [r7, #12]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008b60:	8a7b      	ldrh	r3, [r7, #18]
 8008b62:	3303      	adds	r3, #3
 8008b64:	f023 0203 	bic.w	r2, r3, #3
 8008b68:	89bb      	ldrh	r3, [r7, #12]
 8008b6a:	441a      	add	r2, r3
 8008b6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d901      	bls.n	8008b76 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e018      	b.n	8008ba8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008b76:	6a3b      	ldr	r3, [r7, #32]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008b7c:	8a7b      	ldrh	r3, [r7, #18]
 8008b7e:	3303      	adds	r3, #3
 8008b80:	f023 0303 	bic.w	r3, r3, #3
 8008b84:	6a3a      	ldr	r2, [r7, #32]
 8008b86:	4413      	add	r3, r2
 8008b88:	617b      	str	r3, [r7, #20]
 8008b8a:	e001      	b.n	8008b90 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	89b9      	ldrh	r1, [r7, #12]
 8008b94:	89ba      	ldrh	r2, [r7, #12]
 8008b96:	2302      	movs	r3, #2
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	897b      	ldrh	r3, [r7, #10]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	6979      	ldr	r1, [r7, #20]
 8008ba2:	f7ff fe7d 	bl	80088a0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008ba6:	687b      	ldr	r3, [r7, #4]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d106      	bne.n	8008bd0 <pbuf_realloc+0x20>
 8008bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8008cac <pbuf_realloc+0xfc>)
 8008bc4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008bc8:	4939      	ldr	r1, [pc, #228]	@ (8008cb0 <pbuf_realloc+0x100>)
 8008bca:	483a      	ldr	r0, [pc, #232]	@ (8008cb4 <pbuf_realloc+0x104>)
 8008bcc:	f00a f880 	bl	8012cd0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	891b      	ldrh	r3, [r3, #8]
 8008bd4:	887a      	ldrh	r2, [r7, #2]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d263      	bcs.n	8008ca2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	891a      	ldrh	r2, [r3, #8]
 8008bde:	887b      	ldrh	r3, [r7, #2]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008be4:	887b      	ldrh	r3, [r7, #2]
 8008be6:	817b      	strh	r3, [r7, #10]
  q = p;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008bec:	e018      	b.n	8008c20 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	895b      	ldrh	r3, [r3, #10]
 8008bf2:	897a      	ldrh	r2, [r7, #10]
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	891a      	ldrh	r2, [r3, #8]
 8008bfc:	893b      	ldrh	r3, [r7, #8]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d106      	bne.n	8008c20 <pbuf_realloc+0x70>
 8008c12:	4b26      	ldr	r3, [pc, #152]	@ (8008cac <pbuf_realloc+0xfc>)
 8008c14:	f240 12af 	movw	r2, #431	@ 0x1af
 8008c18:	4927      	ldr	r1, [pc, #156]	@ (8008cb8 <pbuf_realloc+0x108>)
 8008c1a:	4826      	ldr	r0, [pc, #152]	@ (8008cb4 <pbuf_realloc+0x104>)
 8008c1c:	f00a f858 	bl	8012cd0 <iprintf>
  while (rem_len > q->len) {
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	895b      	ldrh	r3, [r3, #10]
 8008c24:	897a      	ldrh	r2, [r7, #10]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d8e1      	bhi.n	8008bee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	7b1b      	ldrb	r3, [r3, #12]
 8008c2e:	f003 030f 	and.w	r3, r3, #15
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d121      	bne.n	8008c7a <pbuf_realloc+0xca>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	895b      	ldrh	r3, [r3, #10]
 8008c3a:	897a      	ldrh	r2, [r7, #10]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d01c      	beq.n	8008c7a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	7b5b      	ldrb	r3, [r3, #13]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d116      	bne.n	8008c7a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	4413      	add	r3, r2
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff f816 	bl	8007c90 <mem_trim>
 8008c64:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <pbuf_realloc+0xca>
 8008c6c:	4b0f      	ldr	r3, [pc, #60]	@ (8008cac <pbuf_realloc+0xfc>)
 8008c6e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008c72:	4912      	ldr	r1, [pc, #72]	@ (8008cbc <pbuf_realloc+0x10c>)
 8008c74:	480f      	ldr	r0, [pc, #60]	@ (8008cb4 <pbuf_realloc+0x104>)
 8008c76:	f00a f82b 	bl	8012cd0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	897a      	ldrh	r2, [r7, #10]
 8008c7e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	895a      	ldrh	r2, [r3, #10]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f911 	bl	8008ebc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e000      	b.n	8008ca4 <pbuf_realloc+0xf4>
    return;
 8008ca2:	bf00      	nop

}
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	080144b8 	.word	0x080144b8
 8008cb0:	080145d0 	.word	0x080145d0
 8008cb4:	08014518 	.word	0x08014518
 8008cb8:	080145e8 	.word	0x080145e8
 8008cbc:	08014600 	.word	0x08014600

08008cc0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b086      	sub	sp, #24
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d106      	bne.n	8008ce2 <pbuf_add_header_impl+0x22>
 8008cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008d84 <pbuf_add_header_impl+0xc4>)
 8008cd6:	f240 12df 	movw	r2, #479	@ 0x1df
 8008cda:	492b      	ldr	r1, [pc, #172]	@ (8008d88 <pbuf_add_header_impl+0xc8>)
 8008cdc:	482b      	ldr	r0, [pc, #172]	@ (8008d8c <pbuf_add_header_impl+0xcc>)
 8008cde:	f009 fff7 	bl	8012cd0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <pbuf_add_header_impl+0x30>
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cee:	d301      	bcc.n	8008cf4 <pbuf_add_header_impl+0x34>
    return 1;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e043      	b.n	8008d7c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <pbuf_add_header_impl+0x3e>
    return 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e03e      	b.n	8008d7c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	891a      	ldrh	r2, [r3, #8]
 8008d06:	8a7b      	ldrh	r3, [r7, #18]
 8008d08:	4413      	add	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	8a7a      	ldrh	r2, [r7, #18]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d901      	bls.n	8008d16 <pbuf_add_header_impl+0x56>
    return 1;
 8008d12:	2301      	movs	r3, #1
 8008d14:	e032      	b.n	8008d7c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	7b1b      	ldrb	r3, [r3, #12]
 8008d1a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008d1c:	8a3b      	ldrh	r3, [r7, #16]
 8008d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00c      	beq.n	8008d40 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	685a      	ldr	r2, [r3, #4]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	425b      	negs	r3, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3310      	adds	r3, #16
 8008d36:	697a      	ldr	r2, [r7, #20]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d20d      	bcs.n	8008d58 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e01d      	b.n	8008d7c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d006      	beq.n	8008d54 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	425b      	negs	r3, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	e001      	b.n	8008d58 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e011      	b.n	8008d7c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	895a      	ldrh	r2, [r3, #10]
 8008d62:	8a7b      	ldrh	r3, [r7, #18]
 8008d64:	4413      	add	r3, r2
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	891a      	ldrh	r2, [r3, #8]
 8008d70:	8a7b      	ldrh	r3, [r7, #18]
 8008d72:	4413      	add	r3, r2
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	811a      	strh	r2, [r3, #8]


  return 0;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3718      	adds	r7, #24
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	080144b8 	.word	0x080144b8
 8008d88:	0801461c 	.word	0x0801461c
 8008d8c:	08014518 	.word	0x08014518

08008d90 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff ff8e 	bl	8008cc0 <pbuf_add_header_impl>
 8008da4:	4603      	mov	r3, r0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3708      	adds	r7, #8
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
	...

08008db0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d106      	bne.n	8008dce <pbuf_remove_header+0x1e>
 8008dc0:	4b20      	ldr	r3, [pc, #128]	@ (8008e44 <pbuf_remove_header+0x94>)
 8008dc2:	f240 224b 	movw	r2, #587	@ 0x24b
 8008dc6:	4920      	ldr	r1, [pc, #128]	@ (8008e48 <pbuf_remove_header+0x98>)
 8008dc8:	4820      	ldr	r0, [pc, #128]	@ (8008e4c <pbuf_remove_header+0x9c>)
 8008dca:	f009 ff81 	bl	8012cd0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <pbuf_remove_header+0x2c>
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dda:	d301      	bcc.n	8008de0 <pbuf_remove_header+0x30>
    return 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e02c      	b.n	8008e3a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <pbuf_remove_header+0x3a>
    return 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e027      	b.n	8008e3a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	895b      	ldrh	r3, [r3, #10]
 8008df2:	89fa      	ldrh	r2, [r7, #14]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d908      	bls.n	8008e0a <pbuf_remove_header+0x5a>
 8008df8:	4b12      	ldr	r3, [pc, #72]	@ (8008e44 <pbuf_remove_header+0x94>)
 8008dfa:	f240 2255 	movw	r2, #597	@ 0x255
 8008dfe:	4914      	ldr	r1, [pc, #80]	@ (8008e50 <pbuf_remove_header+0xa0>)
 8008e00:	4812      	ldr	r0, [pc, #72]	@ (8008e4c <pbuf_remove_header+0x9c>)
 8008e02:	f009 ff65 	bl	8012cd0 <iprintf>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e017      	b.n	8008e3a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	441a      	add	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	895a      	ldrh	r2, [r3, #10]
 8008e20:	89fb      	ldrh	r3, [r7, #14]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	891a      	ldrh	r2, [r3, #8]
 8008e2e:	89fb      	ldrh	r3, [r7, #14]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	080144b8 	.word	0x080144b8
 8008e48:	0801461c 	.word	0x0801461c
 8008e4c:	08014518 	.word	0x08014518
 8008e50:	08014628 	.word	0x08014628

08008e54 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	807b      	strh	r3, [r7, #2]
 8008e60:	4613      	mov	r3, r2
 8008e62:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da08      	bge.n	8008e7e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008e6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e70:	425b      	negs	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f7ff ff9b 	bl	8008db0 <pbuf_remove_header>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	e007      	b.n	8008e8e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008e7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e82:	787a      	ldrb	r2, [r7, #1]
 8008e84:	4619      	mov	r1, r3
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ff1a 	bl	8008cc0 <pbuf_add_header_impl>
 8008e8c:	4603      	mov	r3, r0
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b082      	sub	sp, #8
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff ffd2 	bl	8008e54 <pbuf_header_impl>
 8008eb0:	4603      	mov	r3, r0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
	...

08008ebc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b088      	sub	sp, #32
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10b      	bne.n	8008ee2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d106      	bne.n	8008ede <pbuf_free+0x22>
 8008ed0:	4b3b      	ldr	r3, [pc, #236]	@ (8008fc0 <pbuf_free+0x104>)
 8008ed2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008ed6:	493b      	ldr	r1, [pc, #236]	@ (8008fc4 <pbuf_free+0x108>)
 8008ed8:	483b      	ldr	r0, [pc, #236]	@ (8008fc8 <pbuf_free+0x10c>)
 8008eda:	f009 fef9 	bl	8012cd0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	e069      	b.n	8008fb6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008ee6:	e062      	b.n	8008fae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008ee8:	f009 fdd4 	bl	8012a94 <sys_arch_protect>
 8008eec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7b9b      	ldrb	r3, [r3, #14]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d106      	bne.n	8008f04 <pbuf_free+0x48>
 8008ef6:	4b32      	ldr	r3, [pc, #200]	@ (8008fc0 <pbuf_free+0x104>)
 8008ef8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008efc:	4933      	ldr	r1, [pc, #204]	@ (8008fcc <pbuf_free+0x110>)
 8008efe:	4832      	ldr	r0, [pc, #200]	@ (8008fc8 <pbuf_free+0x10c>)
 8008f00:	f009 fee6 	bl	8012cd0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	7b9b      	ldrb	r3, [r3, #14]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	739a      	strb	r2, [r3, #14]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	7b9b      	ldrb	r3, [r3, #14]
 8008f14:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008f16:	69b8      	ldr	r0, [r7, #24]
 8008f18:	f009 fdca 	bl	8012ab0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d143      	bne.n	8008faa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7b5b      	ldrb	r3, [r3, #13]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d011      	beq.n	8008f62 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <pbuf_free+0x9c>
 8008f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8008fc0 <pbuf_free+0x104>)
 8008f4c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008f50:	491f      	ldr	r1, [pc, #124]	@ (8008fd0 <pbuf_free+0x114>)
 8008f52:	481d      	ldr	r0, [pc, #116]	@ (8008fc8 <pbuf_free+0x10c>)
 8008f54:	f009 febc 	bl	8012cd0 <iprintf>
        pc->custom_free_function(p);
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
 8008f60:	e01d      	b.n	8008f9e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008f62:	7bfb      	ldrb	r3, [r7, #15]
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d104      	bne.n	8008f72 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008f68:	6879      	ldr	r1, [r7, #4]
 8008f6a:	200c      	movs	r0, #12
 8008f6c:	f7ff f96e 	bl	800824c <memp_free>
 8008f70:	e015      	b.n	8008f9e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d104      	bne.n	8008f82 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008f78:	6879      	ldr	r1, [r7, #4]
 8008f7a:	200b      	movs	r0, #11
 8008f7c:	f7ff f966 	bl	800824c <memp_free>
 8008f80:	e00d      	b.n	8008f9e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d103      	bne.n	8008f90 <pbuf_free+0xd4>
          mem_free(p);
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f7fe fdf1 	bl	8007b70 <mem_free>
 8008f8e:	e006      	b.n	8008f9e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008f90:	4b0b      	ldr	r3, [pc, #44]	@ (8008fc0 <pbuf_free+0x104>)
 8008f92:	f240 320f 	movw	r2, #783	@ 0x30f
 8008f96:	490f      	ldr	r1, [pc, #60]	@ (8008fd4 <pbuf_free+0x118>)
 8008f98:	480b      	ldr	r0, [pc, #44]	@ (8008fc8 <pbuf_free+0x10c>)
 8008f9a:	f009 fe99 	bl	8012cd0 <iprintf>
        }
      }
      count++;
 8008f9e:	7ffb      	ldrb	r3, [r7, #31]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	607b      	str	r3, [r7, #4]
 8008fa8:	e001      	b.n	8008fae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d199      	bne.n	8008ee8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3720      	adds	r7, #32
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	080144b8 	.word	0x080144b8
 8008fc4:	0801461c 	.word	0x0801461c
 8008fc8:	08014518 	.word	0x08014518
 8008fcc:	08014648 	.word	0x08014648
 8008fd0:	08014660 	.word	0x08014660
 8008fd4:	08014684 	.word	0x08014684

08008fd8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008fe4:	e005      	b.n	8008ff2 <pbuf_clen+0x1a>
    ++len;
 8008fe6:	89fb      	ldrh	r3, [r7, #14]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f6      	bne.n	8008fe6 <pbuf_clen+0xe>
  }
  return len;
 8008ff8:	89fb      	ldrh	r3, [r7, #14]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3714      	adds	r7, #20
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d016      	beq.n	8009040 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009012:	f009 fd3f 	bl	8012a94 <sys_arch_protect>
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	7b9b      	ldrb	r3, [r3, #14]
 800901c:	3301      	adds	r3, #1
 800901e:	b2da      	uxtb	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	739a      	strb	r2, [r3, #14]
 8009024:	68f8      	ldr	r0, [r7, #12]
 8009026:	f009 fd43 	bl	8012ab0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7b9b      	ldrb	r3, [r3, #14]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d106      	bne.n	8009040 <pbuf_ref+0x3c>
 8009032:	4b05      	ldr	r3, [pc, #20]	@ (8009048 <pbuf_ref+0x44>)
 8009034:	f240 3242 	movw	r2, #834	@ 0x342
 8009038:	4904      	ldr	r1, [pc, #16]	@ (800904c <pbuf_ref+0x48>)
 800903a:	4805      	ldr	r0, [pc, #20]	@ (8009050 <pbuf_ref+0x4c>)
 800903c:	f009 fe48 	bl	8012cd0 <iprintf>
  }
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}
 8009048:	080144b8 	.word	0x080144b8
 800904c:	08014698 	.word	0x08014698
 8009050:	08014518 	.word	0x08014518

08009054 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <pbuf_cat+0x16>
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d107      	bne.n	800907a <pbuf_cat+0x26>
 800906a:	4b20      	ldr	r3, [pc, #128]	@ (80090ec <pbuf_cat+0x98>)
 800906c:	f240 3259 	movw	r2, #857	@ 0x359
 8009070:	491f      	ldr	r1, [pc, #124]	@ (80090f0 <pbuf_cat+0x9c>)
 8009072:	4820      	ldr	r0, [pc, #128]	@ (80090f4 <pbuf_cat+0xa0>)
 8009074:	f009 fe2c 	bl	8012cd0 <iprintf>
 8009078:	e034      	b.n	80090e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	60fb      	str	r3, [r7, #12]
 800907e:	e00a      	b.n	8009096 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	891a      	ldrh	r2, [r3, #8]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	891b      	ldrh	r3, [r3, #8]
 8009088:	4413      	add	r3, r2
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1f0      	bne.n	8009080 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	891a      	ldrh	r2, [r3, #8]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	895b      	ldrh	r3, [r3, #10]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d006      	beq.n	80090b8 <pbuf_cat+0x64>
 80090aa:	4b10      	ldr	r3, [pc, #64]	@ (80090ec <pbuf_cat+0x98>)
 80090ac:	f240 3262 	movw	r2, #866	@ 0x362
 80090b0:	4911      	ldr	r1, [pc, #68]	@ (80090f8 <pbuf_cat+0xa4>)
 80090b2:	4810      	ldr	r0, [pc, #64]	@ (80090f4 <pbuf_cat+0xa0>)
 80090b4:	f009 fe0c 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d006      	beq.n	80090ce <pbuf_cat+0x7a>
 80090c0:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <pbuf_cat+0x98>)
 80090c2:	f240 3263 	movw	r2, #867	@ 0x363
 80090c6:	490d      	ldr	r1, [pc, #52]	@ (80090fc <pbuf_cat+0xa8>)
 80090c8:	480a      	ldr	r0, [pc, #40]	@ (80090f4 <pbuf_cat+0xa0>)
 80090ca:	f009 fe01 	bl	8012cd0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	891a      	ldrh	r2, [r3, #8]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	891b      	ldrh	r3, [r3, #8]
 80090d6:	4413      	add	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	080144b8 	.word	0x080144b8
 80090f0:	080146ac 	.word	0x080146ac
 80090f4:	08014518 	.word	0x08014518
 80090f8:	080146e4 	.word	0x080146e4
 80090fc:	08014714 	.word	0x08014714

08009100 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7ff ffa1 	bl	8009054 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009112:	6838      	ldr	r0, [r7, #0]
 8009114:	f7ff ff76 	bl	8009004 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009118:	bf00      	nop
 800911a:	3708      	adds	r7, #8
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800912a:	2300      	movs	r3, #0
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	2300      	movs	r3, #0
 8009130:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d008      	beq.n	800914a <pbuf_copy+0x2a>
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d005      	beq.n	800914a <pbuf_copy+0x2a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	891a      	ldrh	r2, [r3, #8]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	891b      	ldrh	r3, [r3, #8]
 8009146:	429a      	cmp	r2, r3
 8009148:	d209      	bcs.n	800915e <pbuf_copy+0x3e>
 800914a:	4b57      	ldr	r3, [pc, #348]	@ (80092a8 <pbuf_copy+0x188>)
 800914c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009150:	4956      	ldr	r1, [pc, #344]	@ (80092ac <pbuf_copy+0x18c>)
 8009152:	4857      	ldr	r0, [pc, #348]	@ (80092b0 <pbuf_copy+0x190>)
 8009154:	f009 fdbc 	bl	8012cd0 <iprintf>
 8009158:	f06f 030f 	mvn.w	r3, #15
 800915c:	e09f      	b.n	800929e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	895b      	ldrh	r3, [r3, #10]
 8009162:	461a      	mov	r2, r3
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	1ad2      	subs	r2, r2, r3
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	895b      	ldrh	r3, [r3, #10]
 800916c:	4619      	mov	r1, r3
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	1acb      	subs	r3, r1, r3
 8009172:	429a      	cmp	r2, r3
 8009174:	d306      	bcc.n	8009184 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	895b      	ldrh	r3, [r3, #10]
 800917a:	461a      	mov	r2, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	1ad3      	subs	r3, r2, r3
 8009180:	60fb      	str	r3, [r7, #12]
 8009182:	e005      	b.n	8009190 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	895b      	ldrh	r3, [r3, #10]
 8009188:	461a      	mov	r2, r3
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	18d0      	adds	r0, r2, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	4413      	add	r3, r2
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4619      	mov	r1, r3
 80091a4:	f009 fee3 	bl	8012f6e <memcpy>
    offset_to += len;
 80091a8:	697a      	ldr	r2, [r7, #20]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	895b      	ldrh	r3, [r3, #10]
 80091bc:	461a      	mov	r2, r3
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d906      	bls.n	80091d2 <pbuf_copy+0xb2>
 80091c4:	4b38      	ldr	r3, [pc, #224]	@ (80092a8 <pbuf_copy+0x188>)
 80091c6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80091ca:	493a      	ldr	r1, [pc, #232]	@ (80092b4 <pbuf_copy+0x194>)
 80091cc:	4838      	ldr	r0, [pc, #224]	@ (80092b0 <pbuf_copy+0x190>)
 80091ce:	f009 fd7f 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	895b      	ldrh	r3, [r3, #10]
 80091d6:	461a      	mov	r2, r3
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	4293      	cmp	r3, r2
 80091dc:	d906      	bls.n	80091ec <pbuf_copy+0xcc>
 80091de:	4b32      	ldr	r3, [pc, #200]	@ (80092a8 <pbuf_copy+0x188>)
 80091e0:	f240 32da 	movw	r2, #986	@ 0x3da
 80091e4:	4934      	ldr	r1, [pc, #208]	@ (80092b8 <pbuf_copy+0x198>)
 80091e6:	4832      	ldr	r0, [pc, #200]	@ (80092b0 <pbuf_copy+0x190>)
 80091e8:	f009 fd72 	bl	8012cd0 <iprintf>
    if (offset_from >= p_from->len) {
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	895b      	ldrh	r3, [r3, #10]
 80091f0:	461a      	mov	r2, r3
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d304      	bcc.n	8009202 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80091f8:	2300      	movs	r3, #0
 80091fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	895b      	ldrh	r3, [r3, #10]
 8009206:	461a      	mov	r2, r3
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	4293      	cmp	r3, r2
 800920c:	d114      	bne.n	8009238 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800920e:	2300      	movs	r3, #0
 8009210:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10c      	bne.n	8009238 <pbuf_copy+0x118>
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <pbuf_copy+0x118>
 8009224:	4b20      	ldr	r3, [pc, #128]	@ (80092a8 <pbuf_copy+0x188>)
 8009226:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800922a:	4924      	ldr	r1, [pc, #144]	@ (80092bc <pbuf_copy+0x19c>)
 800922c:	4820      	ldr	r0, [pc, #128]	@ (80092b0 <pbuf_copy+0x190>)
 800922e:	f009 fd4f 	bl	8012cd0 <iprintf>
 8009232:	f06f 030f 	mvn.w	r3, #15
 8009236:	e032      	b.n	800929e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d013      	beq.n	8009266 <pbuf_copy+0x146>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	895a      	ldrh	r2, [r3, #10]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	891b      	ldrh	r3, [r3, #8]
 8009246:	429a      	cmp	r2, r3
 8009248:	d10d      	bne.n	8009266 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <pbuf_copy+0x146>
 8009252:	4b15      	ldr	r3, [pc, #84]	@ (80092a8 <pbuf_copy+0x188>)
 8009254:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009258:	4919      	ldr	r1, [pc, #100]	@ (80092c0 <pbuf_copy+0x1a0>)
 800925a:	4815      	ldr	r0, [pc, #84]	@ (80092b0 <pbuf_copy+0x190>)
 800925c:	f009 fd38 	bl	8012cd0 <iprintf>
 8009260:	f06f 0305 	mvn.w	r3, #5
 8009264:	e01b      	b.n	800929e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d013      	beq.n	8009294 <pbuf_copy+0x174>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	895a      	ldrh	r2, [r3, #10]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	891b      	ldrh	r3, [r3, #8]
 8009274:	429a      	cmp	r2, r3
 8009276:	d10d      	bne.n	8009294 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <pbuf_copy+0x174>
 8009280:	4b09      	ldr	r3, [pc, #36]	@ (80092a8 <pbuf_copy+0x188>)
 8009282:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009286:	490e      	ldr	r1, [pc, #56]	@ (80092c0 <pbuf_copy+0x1a0>)
 8009288:	4809      	ldr	r0, [pc, #36]	@ (80092b0 <pbuf_copy+0x190>)
 800928a:	f009 fd21 	bl	8012cd0 <iprintf>
 800928e:	f06f 0305 	mvn.w	r3, #5
 8009292:	e004      	b.n	800929e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	f47f af61 	bne.w	800915e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	080144b8 	.word	0x080144b8
 80092ac:	08014760 	.word	0x08014760
 80092b0:	08014518 	.word	0x08014518
 80092b4:	08014790 	.word	0x08014790
 80092b8:	080147a8 	.word	0x080147a8
 80092bc:	080147c4 	.word	0x080147c4
 80092c0:	080147d4 	.word	0x080147d4

080092c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	4611      	mov	r1, r2
 80092d0:	461a      	mov	r2, r3
 80092d2:	460b      	mov	r3, r1
 80092d4:	80fb      	strh	r3, [r7, #6]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80092de:	2300      	movs	r3, #0
 80092e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d108      	bne.n	80092fa <pbuf_copy_partial+0x36>
 80092e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009398 <pbuf_copy_partial+0xd4>)
 80092ea:	f240 420a 	movw	r2, #1034	@ 0x40a
 80092ee:	492b      	ldr	r1, [pc, #172]	@ (800939c <pbuf_copy_partial+0xd8>)
 80092f0:	482b      	ldr	r0, [pc, #172]	@ (80093a0 <pbuf_copy_partial+0xdc>)
 80092f2:	f009 fced 	bl	8012cd0 <iprintf>
 80092f6:	2300      	movs	r3, #0
 80092f8:	e04a      	b.n	8009390 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d108      	bne.n	8009312 <pbuf_copy_partial+0x4e>
 8009300:	4b25      	ldr	r3, [pc, #148]	@ (8009398 <pbuf_copy_partial+0xd4>)
 8009302:	f240 420b 	movw	r2, #1035	@ 0x40b
 8009306:	4927      	ldr	r1, [pc, #156]	@ (80093a4 <pbuf_copy_partial+0xe0>)
 8009308:	4825      	ldr	r0, [pc, #148]	@ (80093a0 <pbuf_copy_partial+0xdc>)
 800930a:	f009 fce1 	bl	8012cd0 <iprintf>
 800930e:	2300      	movs	r3, #0
 8009310:	e03e      	b.n	8009390 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	61fb      	str	r3, [r7, #28]
 8009316:	e034      	b.n	8009382 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009318:	88bb      	ldrh	r3, [r7, #4]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00a      	beq.n	8009334 <pbuf_copy_partial+0x70>
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	895b      	ldrh	r3, [r3, #10]
 8009322:	88ba      	ldrh	r2, [r7, #4]
 8009324:	429a      	cmp	r2, r3
 8009326:	d305      	bcc.n	8009334 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	895b      	ldrh	r3, [r3, #10]
 800932c:	88ba      	ldrh	r2, [r7, #4]
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	80bb      	strh	r3, [r7, #4]
 8009332:	e023      	b.n	800937c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	895a      	ldrh	r2, [r3, #10]
 8009338:	88bb      	ldrh	r3, [r7, #4]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800933e:	8b3a      	ldrh	r2, [r7, #24]
 8009340:	88fb      	ldrh	r3, [r7, #6]
 8009342:	429a      	cmp	r2, r3
 8009344:	d901      	bls.n	800934a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800934a:	8b7b      	ldrh	r3, [r7, #26]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	18d0      	adds	r0, r2, r3
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	88bb      	ldrh	r3, [r7, #4]
 8009356:	4413      	add	r3, r2
 8009358:	8b3a      	ldrh	r2, [r7, #24]
 800935a:	4619      	mov	r1, r3
 800935c:	f009 fe07 	bl	8012f6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009360:	8afa      	ldrh	r2, [r7, #22]
 8009362:	8b3b      	ldrh	r3, [r7, #24]
 8009364:	4413      	add	r3, r2
 8009366:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009368:	8b7a      	ldrh	r2, [r7, #26]
 800936a:	8b3b      	ldrh	r3, [r7, #24]
 800936c:	4413      	add	r3, r2
 800936e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009370:	88fa      	ldrh	r2, [r7, #6]
 8009372:	8b3b      	ldrh	r3, [r7, #24]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <pbuf_copy_partial+0xca>
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d1c4      	bne.n	8009318 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800938e:	8afb      	ldrh	r3, [r7, #22]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3720      	adds	r7, #32
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	080144b8 	.word	0x080144b8
 800939c:	08014800 	.word	0x08014800
 80093a0:	08014518 	.word	0x08014518
 80093a4:	08014820 	.word	0x08014820

080093a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80093ac:	f009 fb90 	bl	8012ad0 <rand>
 80093b0:	4603      	mov	r3, r0
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80093be:	b29a      	uxth	r2, r3
 80093c0:	4b01      	ldr	r3, [pc, #4]	@ (80093c8 <tcp_init+0x20>)
 80093c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80093c4:	bf00      	nop
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	20000010 	.word	0x20000010

080093cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7d1b      	ldrb	r3, [r3, #20]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d105      	bne.n	80093e8 <tcp_free+0x1c>
 80093dc:	4b06      	ldr	r3, [pc, #24]	@ (80093f8 <tcp_free+0x2c>)
 80093de:	22d4      	movs	r2, #212	@ 0xd4
 80093e0:	4906      	ldr	r1, [pc, #24]	@ (80093fc <tcp_free+0x30>)
 80093e2:	4807      	ldr	r0, [pc, #28]	@ (8009400 <tcp_free+0x34>)
 80093e4:	f009 fc74 	bl	8012cd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	2001      	movs	r0, #1
 80093ec:	f7fe ff2e 	bl	800824c <memp_free>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	080149b8 	.word	0x080149b8
 80093fc:	080149e8 	.word	0x080149e8
 8009400:	080149fc 	.word	0x080149fc

08009404 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	7d1b      	ldrb	r3, [r3, #20]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d105      	bne.n	8009420 <tcp_free_listen+0x1c>
 8009414:	4b06      	ldr	r3, [pc, #24]	@ (8009430 <tcp_free_listen+0x2c>)
 8009416:	22df      	movs	r2, #223	@ 0xdf
 8009418:	4906      	ldr	r1, [pc, #24]	@ (8009434 <tcp_free_listen+0x30>)
 800941a:	4807      	ldr	r0, [pc, #28]	@ (8009438 <tcp_free_listen+0x34>)
 800941c:	f009 fc58 	bl	8012cd0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	2002      	movs	r0, #2
 8009424:	f7fe ff12 	bl	800824c <memp_free>
}
 8009428:	bf00      	nop
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	080149b8 	.word	0x080149b8
 8009434:	08014a24 	.word	0x08014a24
 8009438:	080149fc 	.word	0x080149fc

0800943c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009440:	f001 f85e 	bl	800a500 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009444:	4b07      	ldr	r3, [pc, #28]	@ (8009464 <tcp_tmr+0x28>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	b2da      	uxtb	r2, r3
 800944c:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <tcp_tmr+0x28>)
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	4b04      	ldr	r3, [pc, #16]	@ (8009464 <tcp_tmr+0x28>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d001      	beq.n	8009460 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800945c:	f000 fd0e 	bl	8009e7c <tcp_slowtmr>
  }
}
 8009460:	bf00      	nop
 8009462:	bd80      	pop	{r7, pc}
 8009464:	20007709 	.word	0x20007709

08009468 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d105      	bne.n	8009484 <tcp_remove_listener+0x1c>
 8009478:	4b0d      	ldr	r3, [pc, #52]	@ (80094b0 <tcp_remove_listener+0x48>)
 800947a:	22ff      	movs	r2, #255	@ 0xff
 800947c:	490d      	ldr	r1, [pc, #52]	@ (80094b4 <tcp_remove_listener+0x4c>)
 800947e:	480e      	ldr	r0, [pc, #56]	@ (80094b8 <tcp_remove_listener+0x50>)
 8009480:	f009 fc26 	bl	8012cd0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e00a      	b.n	80094a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800948e:	683a      	ldr	r2, [r7, #0]
 8009490:	429a      	cmp	r2, r3
 8009492:	d102      	bne.n	800949a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2200      	movs	r2, #0
 8009498:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f1      	bne.n	800948a <tcp_remove_listener+0x22>
    }
  }
}
 80094a6:	bf00      	nop
 80094a8:	bf00      	nop
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	080149b8 	.word	0x080149b8
 80094b4:	08014a40 	.word	0x08014a40
 80094b8:	080149fc 	.word	0x080149fc

080094bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d106      	bne.n	80094d8 <tcp_listen_closed+0x1c>
 80094ca:	4b14      	ldr	r3, [pc, #80]	@ (800951c <tcp_listen_closed+0x60>)
 80094cc:	f240 1211 	movw	r2, #273	@ 0x111
 80094d0:	4913      	ldr	r1, [pc, #76]	@ (8009520 <tcp_listen_closed+0x64>)
 80094d2:	4814      	ldr	r0, [pc, #80]	@ (8009524 <tcp_listen_closed+0x68>)
 80094d4:	f009 fbfc 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	7d1b      	ldrb	r3, [r3, #20]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d006      	beq.n	80094ee <tcp_listen_closed+0x32>
 80094e0:	4b0e      	ldr	r3, [pc, #56]	@ (800951c <tcp_listen_closed+0x60>)
 80094e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80094e6:	4910      	ldr	r1, [pc, #64]	@ (8009528 <tcp_listen_closed+0x6c>)
 80094e8:	480e      	ldr	r0, [pc, #56]	@ (8009524 <tcp_listen_closed+0x68>)
 80094ea:	f009 fbf1 	bl	8012cd0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80094ee:	2301      	movs	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
 80094f2:	e00b      	b.n	800950c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80094f4:	4a0d      	ldr	r2, [pc, #52]	@ (800952c <tcp_listen_closed+0x70>)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6879      	ldr	r1, [r7, #4]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ffb1 	bl	8009468 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3301      	adds	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b03      	cmp	r3, #3
 8009510:	d9f0      	bls.n	80094f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009512:	bf00      	nop
 8009514:	bf00      	nop
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	080149b8 	.word	0x080149b8
 8009520:	08014a68 	.word	0x08014a68
 8009524:	080149fc 	.word	0x080149fc
 8009528:	08014a74 	.word	0x08014a74
 800952c:	08017890 	.word	0x08017890

08009530 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009530:	b5b0      	push	{r4, r5, r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af04      	add	r7, sp, #16
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <tcp_close_shutdown+0x20>
 8009542:	4b63      	ldr	r3, [pc, #396]	@ (80096d0 <tcp_close_shutdown+0x1a0>)
 8009544:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8009548:	4962      	ldr	r1, [pc, #392]	@ (80096d4 <tcp_close_shutdown+0x1a4>)
 800954a:	4863      	ldr	r0, [pc, #396]	@ (80096d8 <tcp_close_shutdown+0x1a8>)
 800954c:	f009 fbc0 	bl	8012cd0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d066      	beq.n	8009624 <tcp_close_shutdown+0xf4>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7d1b      	ldrb	r3, [r3, #20]
 800955a:	2b04      	cmp	r3, #4
 800955c:	d003      	beq.n	8009566 <tcp_close_shutdown+0x36>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	7d1b      	ldrb	r3, [r3, #20]
 8009562:	2b07      	cmp	r3, #7
 8009564:	d15e      	bne.n	8009624 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <tcp_close_shutdown+0x48>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009572:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009576:	d055      	beq.n	8009624 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	8b5b      	ldrh	r3, [r3, #26]
 800957c:	f003 0310 	and.w	r3, r3, #16
 8009580:	2b00      	cmp	r3, #0
 8009582:	d106      	bne.n	8009592 <tcp_close_shutdown+0x62>
 8009584:	4b52      	ldr	r3, [pc, #328]	@ (80096d0 <tcp_close_shutdown+0x1a0>)
 8009586:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800958a:	4954      	ldr	r1, [pc, #336]	@ (80096dc <tcp_close_shutdown+0x1ac>)
 800958c:	4852      	ldr	r0, [pc, #328]	@ (80096d8 <tcp_close_shutdown+0x1a8>)
 800958e:	f009 fb9f 	bl	8012cd0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800959a:	687d      	ldr	r5, [r7, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	3304      	adds	r3, #4
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	8ad2      	ldrh	r2, [r2, #22]
 80095a4:	6879      	ldr	r1, [r7, #4]
 80095a6:	8b09      	ldrh	r1, [r1, #24]
 80095a8:	9102      	str	r1, [sp, #8]
 80095aa:	9201      	str	r2, [sp, #4]
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	462b      	mov	r3, r5
 80095b0:	4622      	mov	r2, r4
 80095b2:	4601      	mov	r1, r0
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f005 fdaf 	bl	800f118 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 fb72 	bl	800aca4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80095c0:	4b47      	ldr	r3, [pc, #284]	@ (80096e0 <tcp_close_shutdown+0x1b0>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d105      	bne.n	80095d6 <tcp_close_shutdown+0xa6>
 80095ca:	4b45      	ldr	r3, [pc, #276]	@ (80096e0 <tcp_close_shutdown+0x1b0>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4a43      	ldr	r2, [pc, #268]	@ (80096e0 <tcp_close_shutdown+0x1b0>)
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	e013      	b.n	80095fe <tcp_close_shutdown+0xce>
 80095d6:	4b42      	ldr	r3, [pc, #264]	@ (80096e0 <tcp_close_shutdown+0x1b0>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	e00c      	b.n	80095f8 <tcp_close_shutdown+0xc8>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d104      	bne.n	80095f2 <tcp_close_shutdown+0xc2>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	60da      	str	r2, [r3, #12]
 80095f0:	e005      	b.n	80095fe <tcp_close_shutdown+0xce>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1ef      	bne.n	80095de <tcp_close_shutdown+0xae>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	60da      	str	r2, [r3, #12]
 8009604:	4b37      	ldr	r3, [pc, #220]	@ (80096e4 <tcp_close_shutdown+0x1b4>)
 8009606:	2201      	movs	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800960a:	4b37      	ldr	r3, [pc, #220]	@ (80096e8 <tcp_close_shutdown+0x1b8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	429a      	cmp	r2, r3
 8009612:	d102      	bne.n	800961a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009614:	f004 f804 	bl	800d620 <tcp_trigger_input_pcb_close>
 8009618:	e002      	b.n	8009620 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff fed6 	bl	80093cc <tcp_free>
      }
      return ERR_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	e050      	b.n	80096c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7d1b      	ldrb	r3, [r3, #20]
 8009628:	2b02      	cmp	r3, #2
 800962a:	d03b      	beq.n	80096a4 <tcp_close_shutdown+0x174>
 800962c:	2b02      	cmp	r3, #2
 800962e:	dc44      	bgt.n	80096ba <tcp_close_shutdown+0x18a>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <tcp_close_shutdown+0x10a>
 8009634:	2b01      	cmp	r3, #1
 8009636:	d02a      	beq.n	800968e <tcp_close_shutdown+0x15e>
 8009638:	e03f      	b.n	80096ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8adb      	ldrh	r3, [r3, #22]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d021      	beq.n	8009686 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009642:	4b2a      	ldr	r3, [pc, #168]	@ (80096ec <tcp_close_shutdown+0x1bc>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d105      	bne.n	8009658 <tcp_close_shutdown+0x128>
 800964c:	4b27      	ldr	r3, [pc, #156]	@ (80096ec <tcp_close_shutdown+0x1bc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	4a26      	ldr	r2, [pc, #152]	@ (80096ec <tcp_close_shutdown+0x1bc>)
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	e013      	b.n	8009680 <tcp_close_shutdown+0x150>
 8009658:	4b24      	ldr	r3, [pc, #144]	@ (80096ec <tcp_close_shutdown+0x1bc>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	60bb      	str	r3, [r7, #8]
 800965e:	e00c      	b.n	800967a <tcp_close_shutdown+0x14a>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d104      	bne.n	8009674 <tcp_close_shutdown+0x144>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	60da      	str	r2, [r3, #12]
 8009672:	e005      	b.n	8009680 <tcp_close_shutdown+0x150>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1ef      	bne.n	8009660 <tcp_close_shutdown+0x130>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff fea0 	bl	80093cc <tcp_free>
      break;
 800968c:	e01a      	b.n	80096c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff ff14 	bl	80094bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4816      	ldr	r0, [pc, #88]	@ (80096f0 <tcp_close_shutdown+0x1c0>)
 8009698:	f001 fb54 	bl	800ad44 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f7ff feb1 	bl	8009404 <tcp_free_listen>
      break;
 80096a2:	e00f      	b.n	80096c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	480e      	ldr	r0, [pc, #56]	@ (80096e0 <tcp_close_shutdown+0x1b0>)
 80096a8:	f001 fb4c 	bl	800ad44 <tcp_pcb_remove>
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <tcp_close_shutdown+0x1b4>)
 80096ae:	2201      	movs	r2, #1
 80096b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fe8a 	bl	80093cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80096b8:	e004      	b.n	80096c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f81a 	bl	80096f4 <tcp_close_shutdown_fin>
 80096c0:	4603      	mov	r3, r0
 80096c2:	e000      	b.n	80096c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bdb0      	pop	{r4, r5, r7, pc}
 80096ce:	bf00      	nop
 80096d0:	080149b8 	.word	0x080149b8
 80096d4:	08014a8c 	.word	0x08014a8c
 80096d8:	080149fc 	.word	0x080149fc
 80096dc:	08014aac 	.word	0x08014aac
 80096e0:	20007700 	.word	0x20007700
 80096e4:	20007708 	.word	0x20007708
 80096e8:	20007740 	.word	0x20007740
 80096ec:	200076f8 	.word	0x200076f8
 80096f0:	200076fc 	.word	0x200076fc

080096f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <tcp_close_shutdown_fin+0x1c>
 8009702:	4b2e      	ldr	r3, [pc, #184]	@ (80097bc <tcp_close_shutdown_fin+0xc8>)
 8009704:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009708:	492d      	ldr	r1, [pc, #180]	@ (80097c0 <tcp_close_shutdown_fin+0xcc>)
 800970a:	482e      	ldr	r0, [pc, #184]	@ (80097c4 <tcp_close_shutdown_fin+0xd0>)
 800970c:	f009 fae0 	bl	8012cd0 <iprintf>

  switch (pcb->state) {
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	7d1b      	ldrb	r3, [r3, #20]
 8009714:	2b07      	cmp	r3, #7
 8009716:	d020      	beq.n	800975a <tcp_close_shutdown_fin+0x66>
 8009718:	2b07      	cmp	r3, #7
 800971a:	dc2b      	bgt.n	8009774 <tcp_close_shutdown_fin+0x80>
 800971c:	2b03      	cmp	r3, #3
 800971e:	d002      	beq.n	8009726 <tcp_close_shutdown_fin+0x32>
 8009720:	2b04      	cmp	r3, #4
 8009722:	d00d      	beq.n	8009740 <tcp_close_shutdown_fin+0x4c>
 8009724:	e026      	b.n	8009774 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f004 fde2 	bl	800e2f0 <tcp_send_fin>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d11f      	bne.n	8009778 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2205      	movs	r2, #5
 800973c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800973e:	e01b      	b.n	8009778 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f004 fdd5 	bl	800e2f0 <tcp_send_fin>
 8009746:	4603      	mov	r3, r0
 8009748:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800974a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d114      	bne.n	800977c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2205      	movs	r2, #5
 8009756:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009758:	e010      	b.n	800977c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f004 fdc8 	bl	800e2f0 <tcp_send_fin>
 8009760:	4603      	mov	r3, r0
 8009762:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2209      	movs	r2, #9
 8009770:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009772:	e005      	b.n	8009780 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009774:	2300      	movs	r3, #0
 8009776:	e01c      	b.n	80097b2 <tcp_close_shutdown_fin+0xbe>
      break;
 8009778:	bf00      	nop
 800977a:	e002      	b.n	8009782 <tcp_close_shutdown_fin+0x8e>
      break;
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <tcp_close_shutdown_fin+0x8e>
      break;
 8009780:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f004 feee 	bl	800e56c <tcp_output>
 8009790:	e00d      	b.n	80097ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8009792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800979a:	d108      	bne.n	80097ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	8b5b      	ldrh	r3, [r3, #26]
 80097a0:	f043 0308 	orr.w	r3, r3, #8
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e001      	b.n	80097b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	080149b8 	.word	0x080149b8
 80097c0:	08014a68 	.word	0x08014a68
 80097c4:	080149fc 	.word	0x080149fc

080097c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d109      	bne.n	80097ea <tcp_close+0x22>
 80097d6:	4b0f      	ldr	r3, [pc, #60]	@ (8009814 <tcp_close+0x4c>)
 80097d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80097dc:	490e      	ldr	r1, [pc, #56]	@ (8009818 <tcp_close+0x50>)
 80097de:	480f      	ldr	r0, [pc, #60]	@ (800981c <tcp_close+0x54>)
 80097e0:	f009 fa76 	bl	8012cd0 <iprintf>
 80097e4:	f06f 030f 	mvn.w	r3, #15
 80097e8:	e00f      	b.n	800980a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7d1b      	ldrb	r3, [r3, #20]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d006      	beq.n	8009800 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	8b5b      	ldrh	r3, [r3, #26]
 80097f6:	f043 0310 	orr.w	r3, r3, #16
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8009800:	2101      	movs	r1, #1
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff fe94 	bl	8009530 <tcp_close_shutdown>
 8009808:	4603      	mov	r3, r0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	080149b8 	.word	0x080149b8
 8009818:	08014ac8 	.word	0x08014ac8
 800981c:	080149fc 	.word	0x080149fc

08009820 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08e      	sub	sp, #56	@ 0x38
 8009824:	af04      	add	r7, sp, #16
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d107      	bne.n	8009840 <tcp_abandon+0x20>
 8009830:	4b52      	ldr	r3, [pc, #328]	@ (800997c <tcp_abandon+0x15c>)
 8009832:	f240 223d 	movw	r2, #573	@ 0x23d
 8009836:	4952      	ldr	r1, [pc, #328]	@ (8009980 <tcp_abandon+0x160>)
 8009838:	4852      	ldr	r0, [pc, #328]	@ (8009984 <tcp_abandon+0x164>)
 800983a:	f009 fa49 	bl	8012cd0 <iprintf>
 800983e:	e099      	b.n	8009974 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7d1b      	ldrb	r3, [r3, #20]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d106      	bne.n	8009856 <tcp_abandon+0x36>
 8009848:	4b4c      	ldr	r3, [pc, #304]	@ (800997c <tcp_abandon+0x15c>)
 800984a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800984e:	494e      	ldr	r1, [pc, #312]	@ (8009988 <tcp_abandon+0x168>)
 8009850:	484c      	ldr	r0, [pc, #304]	@ (8009984 <tcp_abandon+0x164>)
 8009852:	f009 fa3d 	bl	8012cd0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	7d1b      	ldrb	r3, [r3, #20]
 800985a:	2b0a      	cmp	r3, #10
 800985c:	d107      	bne.n	800986e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800985e:	6879      	ldr	r1, [r7, #4]
 8009860:	484a      	ldr	r0, [pc, #296]	@ (800998c <tcp_abandon+0x16c>)
 8009862:	f001 fa6f 	bl	800ad44 <tcp_pcb_remove>
    tcp_free(pcb);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff fdb0 	bl	80093cc <tcp_free>
 800986c:	e082      	b.n	8009974 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800986e:	2300      	movs	r3, #0
 8009870:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8009872:	2300      	movs	r3, #0
 8009874:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800987a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009880:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009888:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7d1b      	ldrb	r3, [r3, #20]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d126      	bne.n	80098e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	8adb      	ldrh	r3, [r3, #22]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d02e      	beq.n	80098fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80098a0:	4b3b      	ldr	r3, [pc, #236]	@ (8009990 <tcp_abandon+0x170>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d105      	bne.n	80098b6 <tcp_abandon+0x96>
 80098aa:	4b39      	ldr	r3, [pc, #228]	@ (8009990 <tcp_abandon+0x170>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68db      	ldr	r3, [r3, #12]
 80098b0:	4a37      	ldr	r2, [pc, #220]	@ (8009990 <tcp_abandon+0x170>)
 80098b2:	6013      	str	r3, [r2, #0]
 80098b4:	e013      	b.n	80098de <tcp_abandon+0xbe>
 80098b6:	4b36      	ldr	r3, [pc, #216]	@ (8009990 <tcp_abandon+0x170>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	61fb      	str	r3, [r7, #28]
 80098bc:	e00c      	b.n	80098d8 <tcp_abandon+0xb8>
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d104      	bne.n	80098d2 <tcp_abandon+0xb2>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	60da      	str	r2, [r3, #12]
 80098d0:	e005      	b.n	80098de <tcp_abandon+0xbe>
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	61fb      	str	r3, [r7, #28]
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1ef      	bne.n	80098be <tcp_abandon+0x9e>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	60da      	str	r2, [r3, #12]
 80098e4:	e00b      	b.n	80098fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	8adb      	ldrh	r3, [r3, #22]
 80098ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	4828      	ldr	r0, [pc, #160]	@ (8009994 <tcp_abandon+0x174>)
 80098f4:	f001 fa26 	bl	800ad44 <tcp_pcb_remove>
 80098f8:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <tcp_abandon+0x178>)
 80098fa:	2201      	movs	r2, #1
 80098fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009902:	2b00      	cmp	r3, #0
 8009904:	d004      	beq.n	8009910 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fed8 	bl	800a6c0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fecf 	bl	800a6c0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009926:	2b00      	cmp	r3, #0
 8009928:	d004      	beq.n	8009934 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800992e:	4618      	mov	r0, r3
 8009930:	f000 fec6 	bl	800a6c0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00e      	beq.n	8009958 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	8b12      	ldrh	r2, [r2, #24]
 8009944:	9202      	str	r2, [sp, #8]
 8009946:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009948:	9201      	str	r2, [sp, #4]
 800994a:	9300      	str	r3, [sp, #0]
 800994c:	460b      	mov	r3, r1
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	69b9      	ldr	r1, [r7, #24]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f005 fbe0 	bl	800f118 <tcp_rst>
    }
    last_state = pcb->state;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	7d1b      	ldrb	r3, [r3, #20]
 800995c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7ff fd34 	bl	80093cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <tcp_abandon+0x154>
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f06f 010c 	mvn.w	r1, #12
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	4798      	blx	r3
  }
}
 8009974:	3728      	adds	r7, #40	@ 0x28
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	080149b8 	.word	0x080149b8
 8009980:	08014afc 	.word	0x08014afc
 8009984:	080149fc 	.word	0x080149fc
 8009988:	08014b18 	.word	0x08014b18
 800998c:	20007704 	.word	0x20007704
 8009990:	200076f8 	.word	0x200076f8
 8009994:	20007700 	.word	0x20007700
 8009998:	20007708 	.word	0x20007708

0800999c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80099a4:	2101      	movs	r1, #1
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f7ff ff3a 	bl	8009820 <tcp_abandon>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b088      	sub	sp, #32
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	60b9      	str	r1, [r7, #8]
 80099be:	4613      	mov	r3, r2
 80099c0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80099c2:	2304      	movs	r3, #4
 80099c4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80099cc:	4b3e      	ldr	r3, [pc, #248]	@ (8009ac8 <tcp_bind+0x114>)
 80099ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d109      	bne.n	80099ea <tcp_bind+0x36>
 80099d6:	4b3d      	ldr	r3, [pc, #244]	@ (8009acc <tcp_bind+0x118>)
 80099d8:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80099dc:	493c      	ldr	r1, [pc, #240]	@ (8009ad0 <tcp_bind+0x11c>)
 80099de:	483d      	ldr	r0, [pc, #244]	@ (8009ad4 <tcp_bind+0x120>)
 80099e0:	f009 f976 	bl	8012cd0 <iprintf>
 80099e4:	f06f 030f 	mvn.w	r3, #15
 80099e8:	e06a      	b.n	8009ac0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d009      	beq.n	8009a06 <tcp_bind+0x52>
 80099f2:	4b36      	ldr	r3, [pc, #216]	@ (8009acc <tcp_bind+0x118>)
 80099f4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80099f8:	4937      	ldr	r1, [pc, #220]	@ (8009ad8 <tcp_bind+0x124>)
 80099fa:	4836      	ldr	r0, [pc, #216]	@ (8009ad4 <tcp_bind+0x120>)
 80099fc:	f009 f968 	bl	8012cd0 <iprintf>
 8009a00:	f06f 0305 	mvn.w	r3, #5
 8009a04:	e05c      	b.n	8009ac0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d109      	bne.n	8009a20 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009a0c:	f000 f9f0 	bl	8009df0 <tcp_new_port>
 8009a10:	4603      	mov	r3, r0
 8009a12:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009a14:	88fb      	ldrh	r3, [r7, #6]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d135      	bne.n	8009a86 <tcp_bind+0xd2>
      return ERR_BUF;
 8009a1a:	f06f 0301 	mvn.w	r3, #1
 8009a1e:	e04f      	b.n	8009ac0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009a20:	2300      	movs	r3, #0
 8009a22:	61fb      	str	r3, [r7, #28]
 8009a24:	e02b      	b.n	8009a7e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a26:	4a2d      	ldr	r2, [pc, #180]	@ (8009adc <tcp_bind+0x128>)
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	61bb      	str	r3, [r7, #24]
 8009a32:	e01e      	b.n	8009a72 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	8adb      	ldrh	r3, [r3, #22]
 8009a38:	88fa      	ldrh	r2, [r7, #6]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d116      	bne.n	8009a6c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a3e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d010      	beq.n	8009a66 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00c      	beq.n	8009a66 <tcp_bind+0xb2>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009a5a:	69bb      	ldr	r3, [r7, #24]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d102      	bne.n	8009a6c <tcp_bind+0xb8>
              return ERR_USE;
 8009a66:	f06f 0307 	mvn.w	r3, #7
 8009a6a:	e029      	b.n	8009ac0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a6c:	69bb      	ldr	r3, [r7, #24]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1dd      	bne.n	8009a34 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	dbcf      	blt.n	8009a26 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00c      	beq.n	8009aa6 <tcp_bind+0xf2>
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d008      	beq.n	8009aa6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <tcp_bind+0xec>
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	e000      	b.n	8009aa2 <tcp_bind+0xee>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	68fa      	ldr	r2, [r7, #12]
 8009aa4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	88fa      	ldrh	r2, [r7, #6]
 8009aaa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009aac:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae0 <tcp_bind+0x12c>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	60da      	str	r2, [r3, #12]
 8009ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae0 <tcp_bind+0x12c>)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	f005 fcef 	bl	800f49c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3720      	adds	r7, #32
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	080178b8 	.word	0x080178b8
 8009acc:	080149b8 	.word	0x080149b8
 8009ad0:	08014b4c 	.word	0x08014b4c
 8009ad4:	080149fc 	.word	0x080149fc
 8009ad8:	08014b64 	.word	0x08014b64
 8009adc:	08017890 	.word	0x08017890
 8009ae0:	200076f8 	.word	0x200076f8

08009ae4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <tcp_accept_null+0x22>
 8009af8:	4b07      	ldr	r3, [pc, #28]	@ (8009b18 <tcp_accept_null+0x34>)
 8009afa:	f240 320f 	movw	r2, #783	@ 0x30f
 8009afe:	4907      	ldr	r1, [pc, #28]	@ (8009b1c <tcp_accept_null+0x38>)
 8009b00:	4807      	ldr	r0, [pc, #28]	@ (8009b20 <tcp_accept_null+0x3c>)
 8009b02:	f009 f8e5 	bl	8012cd0 <iprintf>

  tcp_abort(pcb);
 8009b06:	68b8      	ldr	r0, [r7, #8]
 8009b08:	f7ff ff48 	bl	800999c <tcp_abort>

  return ERR_ABRT;
 8009b0c:	f06f 030c 	mvn.w	r3, #12
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	080149b8 	.word	0x080149b8
 8009b1c:	08014b8c 	.word	0x08014b8c
 8009b20:	080149fc 	.word	0x080149fc

08009b24 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009b30:	78fb      	ldrb	r3, [r7, #3]
 8009b32:	2200      	movs	r2, #0
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f806 	bl	8009b48 <tcp_listen_with_backlog_and_err>
 8009b3c:	4603      	mov	r3, r0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3708      	adds	r7, #8
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
	...

08009b48 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b088      	sub	sp, #32
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	460b      	mov	r3, r1
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d109      	bne.n	8009b74 <tcp_listen_with_backlog_and_err+0x2c>
 8009b60:	4b47      	ldr	r3, [pc, #284]	@ (8009c80 <tcp_listen_with_backlog_and_err+0x138>)
 8009b62:	f240 3259 	movw	r2, #857	@ 0x359
 8009b66:	4947      	ldr	r1, [pc, #284]	@ (8009c84 <tcp_listen_with_backlog_and_err+0x13c>)
 8009b68:	4847      	ldr	r0, [pc, #284]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x140>)
 8009b6a:	f009 f8b1 	bl	8012cd0 <iprintf>
 8009b6e:	23f0      	movs	r3, #240	@ 0xf0
 8009b70:	76fb      	strb	r3, [r7, #27]
 8009b72:	e079      	b.n	8009c68 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	7d1b      	ldrb	r3, [r3, #20]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d009      	beq.n	8009b90 <tcp_listen_with_backlog_and_err+0x48>
 8009b7c:	4b40      	ldr	r3, [pc, #256]	@ (8009c80 <tcp_listen_with_backlog_and_err+0x138>)
 8009b7e:	f240 325a 	movw	r2, #858	@ 0x35a
 8009b82:	4942      	ldr	r1, [pc, #264]	@ (8009c8c <tcp_listen_with_backlog_and_err+0x144>)
 8009b84:	4840      	ldr	r0, [pc, #256]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x140>)
 8009b86:	f009 f8a3 	bl	8012cd0 <iprintf>
 8009b8a:	23f1      	movs	r3, #241	@ 0xf1
 8009b8c:	76fb      	strb	r3, [r7, #27]
 8009b8e:	e06b      	b.n	8009c68 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	7d1b      	ldrb	r3, [r3, #20]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d104      	bne.n	8009ba2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009b9c:	23f7      	movs	r3, #247	@ 0xf7
 8009b9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009ba0:	e062      	b.n	8009c68 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009ba2:	2002      	movs	r0, #2
 8009ba4:	f7fe fb00 	bl	80081a8 <memp_malloc>
 8009ba8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d102      	bne.n	8009bb6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009bb0:	23ff      	movs	r3, #255	@ 0xff
 8009bb2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009bb4:	e058      	b.n	8009c68 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	691a      	ldr	r2, [r3, #16]
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8ada      	ldrh	r2, [r3, #22]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	7d5a      	ldrb	r2, [r3, #21]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	7a5a      	ldrb	r2, [r3, #9]
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	2200      	movs	r2, #0
 8009be0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	7ada      	ldrb	r2, [r3, #11]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	7a9a      	ldrb	r2, [r3, #10]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	8adb      	ldrh	r3, [r3, #22]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d021      	beq.n	8009c46 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009c02:	4b23      	ldr	r3, [pc, #140]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x148>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d105      	bne.n	8009c18 <tcp_listen_with_backlog_and_err+0xd0>
 8009c0c:	4b20      	ldr	r3, [pc, #128]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x148>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	4a1f      	ldr	r2, [pc, #124]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x148>)
 8009c14:	6013      	str	r3, [r2, #0]
 8009c16:	e013      	b.n	8009c40 <tcp_listen_with_backlog_and_err+0xf8>
 8009c18:	4b1d      	ldr	r3, [pc, #116]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x148>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	e00c      	b.n	8009c3a <tcp_listen_with_backlog_and_err+0xf2>
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	68db      	ldr	r3, [r3, #12]
 8009c24:	68fa      	ldr	r2, [r7, #12]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d104      	bne.n	8009c34 <tcp_listen_with_backlog_and_err+0xec>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	68da      	ldr	r2, [r3, #12]
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	e005      	b.n	8009c40 <tcp_listen_with_backlog_and_err+0xf8>
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	617b      	str	r3, [r7, #20]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1ef      	bne.n	8009c20 <tcp_listen_with_backlog_and_err+0xd8>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f7ff fbc0 	bl	80093cc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	4a11      	ldr	r2, [pc, #68]	@ (8009c94 <tcp_listen_with_backlog_and_err+0x14c>)
 8009c50:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009c52:	4b11      	ldr	r3, [pc, #68]	@ (8009c98 <tcp_listen_with_backlog_and_err+0x150>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	60da      	str	r2, [r3, #12]
 8009c5a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c98 <tcp_listen_with_backlog_and_err+0x150>)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	f005 fc1c 	bl	800f49c <tcp_timer_needed>
  res = ERR_OK;
 8009c64:	2300      	movs	r3, #0
 8009c66:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	7efa      	ldrb	r2, [r7, #27]
 8009c72:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009c74:	69fb      	ldr	r3, [r7, #28]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3720      	adds	r7, #32
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	080149b8 	.word	0x080149b8
 8009c84:	08014bac 	.word	0x08014bac
 8009c88:	080149fc 	.word	0x080149fc
 8009c8c:	08014bdc 	.word	0x08014bdc
 8009c90:	200076f8 	.word	0x200076f8
 8009c94:	08009ae5 	.word	0x08009ae5
 8009c98:	200076fc 	.word	0x200076fc

08009c9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d106      	bne.n	8009cb8 <tcp_update_rcv_ann_wnd+0x1c>
 8009caa:	4b25      	ldr	r3, [pc, #148]	@ (8009d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8009cac:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009cb0:	4924      	ldr	r1, [pc, #144]	@ (8009d44 <tcp_update_rcv_ann_wnd+0xa8>)
 8009cb2:	4825      	ldr	r0, [pc, #148]	@ (8009d48 <tcp_update_rcv_ann_wnd+0xac>)
 8009cb4:	f009 f80c 	bl	8012cd0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009cc0:	4413      	add	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009ccc:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009cd0:	bf28      	it	cs
 8009cd2:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009cd6:	b292      	uxth	r2, r2
 8009cd8:	4413      	add	r3, r2
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	db08      	blt.n	8009cf4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	e020      	b.n	8009d36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd03      	ble.n	8009d0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d08:	e014      	b.n	8009d34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d1c:	d306      	bcc.n	8009d2c <tcp_update_rcv_ann_wnd+0x90>
 8009d1e:	4b08      	ldr	r3, [pc, #32]	@ (8009d40 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d20:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009d24:	4909      	ldr	r1, [pc, #36]	@ (8009d4c <tcp_update_rcv_ann_wnd+0xb0>)
 8009d26:	4808      	ldr	r0, [pc, #32]	@ (8009d48 <tcp_update_rcv_ann_wnd+0xac>)
 8009d28:	f008 ffd2 	bl	8012cd0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	b29a      	uxth	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009d34:	2300      	movs	r3, #0
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	080149b8 	.word	0x080149b8
 8009d44:	08014c14 	.word	0x08014c14
 8009d48:	080149fc 	.word	0x080149fc
 8009d4c:	08014c38 	.word	0x08014c38

08009d50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d107      	bne.n	8009d72 <tcp_recved+0x22>
 8009d62:	4b1f      	ldr	r3, [pc, #124]	@ (8009de0 <tcp_recved+0x90>)
 8009d64:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009d68:	491e      	ldr	r1, [pc, #120]	@ (8009de4 <tcp_recved+0x94>)
 8009d6a:	481f      	ldr	r0, [pc, #124]	@ (8009de8 <tcp_recved+0x98>)
 8009d6c:	f008 ffb0 	bl	8012cd0 <iprintf>
 8009d70:	e032      	b.n	8009dd8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	7d1b      	ldrb	r3, [r3, #20]
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d106      	bne.n	8009d88 <tcp_recved+0x38>
 8009d7a:	4b19      	ldr	r3, [pc, #100]	@ (8009de0 <tcp_recved+0x90>)
 8009d7c:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009d80:	491a      	ldr	r1, [pc, #104]	@ (8009dec <tcp_recved+0x9c>)
 8009d82:	4819      	ldr	r0, [pc, #100]	@ (8009de8 <tcp_recved+0x98>)
 8009d84:	f008 ffa4 	bl	8012cd0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d8c:	887b      	ldrh	r3, [r7, #2]
 8009d8e:	4413      	add	r3, r2
 8009d90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009d92:	89fb      	ldrh	r3, [r7, #14]
 8009d94:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009d98:	d804      	bhi.n	8009da4 <tcp_recved+0x54>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d9e:	89fa      	ldrh	r2, [r7, #14]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d204      	bcs.n	8009dae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009daa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009dac:	e002      	b.n	8009db4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	89fa      	ldrh	r2, [r7, #14]
 8009db2:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff71 	bl	8009c9c <tcp_update_rcv_ann_wnd>
 8009dba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009dc2:	d309      	bcc.n	8009dd8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8b5b      	ldrh	r3, [r3, #26]
 8009dc8:	f043 0302 	orr.w	r3, r3, #2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f004 fbca 	bl	800e56c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	080149b8 	.word	0x080149b8
 8009de4:	08014c54 	.word	0x08014c54
 8009de8:	080149fc 	.word	0x080149fc
 8009dec:	08014c6c 	.word	0x08014c6c

08009df0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8009e74 <tcp_new_port+0x84>)
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	4b1c      	ldr	r3, [pc, #112]	@ (8009e74 <tcp_new_port+0x84>)
 8009e04:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009e06:	4b1b      	ldr	r3, [pc, #108]	@ (8009e74 <tcp_new_port+0x84>)
 8009e08:	881b      	ldrh	r3, [r3, #0]
 8009e0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d103      	bne.n	8009e1a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009e12:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <tcp_new_port+0x84>)
 8009e14:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8009e18:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	71fb      	strb	r3, [r7, #7]
 8009e1e:	e01e      	b.n	8009e5e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009e20:	79fb      	ldrb	r3, [r7, #7]
 8009e22:	4a15      	ldr	r2, [pc, #84]	@ (8009e78 <tcp_new_port+0x88>)
 8009e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	e011      	b.n	8009e52 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	8ada      	ldrh	r2, [r3, #22]
 8009e32:	4b10      	ldr	r3, [pc, #64]	@ (8009e74 <tcp_new_port+0x84>)
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d108      	bne.n	8009e4c <tcp_new_port+0x5c>
        n++;
 8009e3a:	88bb      	ldrh	r3, [r7, #4]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009e40:	88bb      	ldrh	r3, [r7, #4]
 8009e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e46:	d3d8      	bcc.n	8009dfa <tcp_new_port+0xa>
          return 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	e00d      	b.n	8009e68 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	603b      	str	r3, [r7, #0]
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1ea      	bne.n	8009e2e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009e58:	79fb      	ldrb	r3, [r7, #7]
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	71fb      	strb	r3, [r7, #7]
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	2b03      	cmp	r3, #3
 8009e62:	d9dd      	bls.n	8009e20 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009e64:	4b03      	ldr	r3, [pc, #12]	@ (8009e74 <tcp_new_port+0x84>)
 8009e66:	881b      	ldrh	r3, [r3, #0]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bc80      	pop	{r7}
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20000010 	.word	0x20000010
 8009e78:	08017890 	.word	0x08017890

08009e7c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009e7c:	b5b0      	push	{r4, r5, r7, lr}
 8009e7e:	b090      	sub	sp, #64	@ 0x40
 8009e80:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009e88:	4b95      	ldr	r3, [pc, #596]	@ (800a0e0 <tcp_slowtmr+0x264>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	4a94      	ldr	r2, [pc, #592]	@ (800a0e0 <tcp_slowtmr+0x264>)
 8009e90:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e92:	4b94      	ldr	r3, [pc, #592]	@ (800a0e4 <tcp_slowtmr+0x268>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	3301      	adds	r3, #1
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	4b92      	ldr	r3, [pc, #584]	@ (800a0e4 <tcp_slowtmr+0x268>)
 8009e9c:	701a      	strb	r2, [r3, #0]
 8009e9e:	e000      	b.n	8009ea2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009ea0:	bf00      	nop
  prev = NULL;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009ea6:	4b90      	ldr	r3, [pc, #576]	@ (800a0e8 <tcp_slowtmr+0x26c>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009eac:	e29f      	b.n	800a3ee <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eb0:	7d1b      	ldrb	r3, [r3, #20]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <tcp_slowtmr+0x48>
 8009eb6:	4b8d      	ldr	r3, [pc, #564]	@ (800a0ec <tcp_slowtmr+0x270>)
 8009eb8:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009ebc:	498c      	ldr	r1, [pc, #560]	@ (800a0f0 <tcp_slowtmr+0x274>)
 8009ebe:	488d      	ldr	r0, [pc, #564]	@ (800a0f4 <tcp_slowtmr+0x278>)
 8009ec0:	f008 ff06 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	7d1b      	ldrb	r3, [r3, #20]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d106      	bne.n	8009eda <tcp_slowtmr+0x5e>
 8009ecc:	4b87      	ldr	r3, [pc, #540]	@ (800a0ec <tcp_slowtmr+0x270>)
 8009ece:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009ed2:	4989      	ldr	r1, [pc, #548]	@ (800a0f8 <tcp_slowtmr+0x27c>)
 8009ed4:	4887      	ldr	r0, [pc, #540]	@ (800a0f4 <tcp_slowtmr+0x278>)
 8009ed6:	f008 fefb 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009edc:	7d1b      	ldrb	r3, [r3, #20]
 8009ede:	2b0a      	cmp	r3, #10
 8009ee0:	d106      	bne.n	8009ef0 <tcp_slowtmr+0x74>
 8009ee2:	4b82      	ldr	r3, [pc, #520]	@ (800a0ec <tcp_slowtmr+0x270>)
 8009ee4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009ee8:	4984      	ldr	r1, [pc, #528]	@ (800a0fc <tcp_slowtmr+0x280>)
 8009eea:	4882      	ldr	r0, [pc, #520]	@ (800a0f4 <tcp_slowtmr+0x278>)
 8009eec:	f008 fef0 	bl	8012cd0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef2:	7f9a      	ldrb	r2, [r3, #30]
 8009ef4:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e4 <tcp_slowtmr+0x268>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d105      	bne.n	8009f08 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efe:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009f06:	e272      	b.n	800a3ee <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8009f08:	4b76      	ldr	r3, [pc, #472]	@ (800a0e4 <tcp_slowtmr+0x268>)
 8009f0a:	781a      	ldrb	r2, [r3, #0]
 8009f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f0e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009f10:	2300      	movs	r3, #0
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009f16:	2300      	movs	r3, #0
 8009f18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	7d1b      	ldrb	r3, [r3, #20]
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d10a      	bne.n	8009f3a <tcp_slowtmr+0xbe>
 8009f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f2a:	2b05      	cmp	r3, #5
 8009f2c:	d905      	bls.n	8009f3a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f32:	3301      	adds	r3, #1
 8009f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f38:	e11e      	b.n	800a178 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f40:	2b0b      	cmp	r3, #11
 8009f42:	d905      	bls.n	8009f50 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f48:	3301      	adds	r3, #1
 8009f4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f4e:	e113      	b.n	800a178 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f52:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d075      	beq.n	800a046 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d006      	beq.n	8009f70 <tcp_slowtmr+0xf4>
 8009f62:	4b62      	ldr	r3, [pc, #392]	@ (800a0ec <tcp_slowtmr+0x270>)
 8009f64:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009f68:	4965      	ldr	r1, [pc, #404]	@ (800a100 <tcp_slowtmr+0x284>)
 8009f6a:	4862      	ldr	r0, [pc, #392]	@ (800a0f4 <tcp_slowtmr+0x278>)
 8009f6c:	f008 feb0 	bl	8012cd0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d106      	bne.n	8009f86 <tcp_slowtmr+0x10a>
 8009f78:	4b5c      	ldr	r3, [pc, #368]	@ (800a0ec <tcp_slowtmr+0x270>)
 8009f7a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009f7e:	4961      	ldr	r1, [pc, #388]	@ (800a104 <tcp_slowtmr+0x288>)
 8009f80:	485c      	ldr	r0, [pc, #368]	@ (800a0f4 <tcp_slowtmr+0x278>)
 8009f82:	f008 fea5 	bl	8012cd0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f88:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009f8c:	2b0b      	cmp	r3, #11
 8009f8e:	d905      	bls.n	8009f9c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f94:	3301      	adds	r3, #1
 8009f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f9a:	e0ed      	b.n	800a178 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009fa2:	3b01      	subs	r3, #1
 8009fa4:	4a58      	ldr	r2, [pc, #352]	@ (800a108 <tcp_slowtmr+0x28c>)
 8009fa6:	5cd3      	ldrb	r3, [r2, r3]
 8009fa8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fb0:	7c7a      	ldrb	r2, [r7, #17]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d907      	bls.n	8009fc6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fcc:	7c7a      	ldrb	r2, [r7, #17]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	f200 80d2 	bhi.w	800a178 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d108      	bne.n	8009ff4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009fe2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fe4:	f005 f98c 	bl	800f300 <tcp_zero_window_probe>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d014      	beq.n	800a018 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009fee:	2300      	movs	r3, #0
 8009ff0:	623b      	str	r3, [r7, #32]
 8009ff2:	e011      	b.n	800a018 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ffe:	f004 f82f 	bl	800e060 <tcp_split_unsent_seg>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800a008:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a00a:	f004 faaf 	bl	800e56c <tcp_output>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f000 80ac 	beq.w	800a178 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a022:	2200      	movs	r2, #0
 800a024:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a02e:	2b06      	cmp	r3, #6
 800a030:	f200 80a2 	bhi.w	800a178 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a036:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a03a:	3301      	adds	r3, #1
 800a03c:	b2da      	uxtb	r2, r3
 800a03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a040:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a044:	e098      	b.n	800a178 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a048:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	db0f      	blt.n	800a070 <tcp_slowtmr+0x1f4>
 800a050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a052:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a056:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d008      	beq.n	800a070 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a060:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a064:	b29b      	uxth	r3, r3
 800a066:	3301      	adds	r3, #1
 800a068:	b29b      	uxth	r3, r3
 800a06a:	b21a      	sxth	r2, r3
 800a06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a072:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800a076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a078:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a07c:	429a      	cmp	r2, r3
 800a07e:	db7b      	blt.n	800a178 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a082:	f004 fd79 	bl	800eb78 <tcp_rexmit_rto_prepare>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d007      	beq.n	800a09c <tcp_slowtmr+0x220>
 800a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a090:	2b00      	cmp	r3, #0
 800a092:	d171      	bne.n	800a178 <tcp_slowtmr+0x2fc>
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d06d      	beq.n	800a178 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	7d1b      	ldrb	r3, [r3, #20]
 800a0a0:	2b02      	cmp	r3, #2
 800a0a2:	d03a      	beq.n	800a11a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0aa:	2b0c      	cmp	r3, #12
 800a0ac:	bf28      	it	cs
 800a0ae:	230c      	movcs	r3, #12
 800a0b0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a0b8:	10db      	asrs	r3, r3, #3
 800a0ba:	b21b      	sxth	r3, r3
 800a0bc:	461a      	mov	r2, r3
 800a0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a0c4:	4413      	add	r3, r2
 800a0c6:	7efa      	ldrb	r2, [r7, #27]
 800a0c8:	4910      	ldr	r1, [pc, #64]	@ (800a10c <tcp_slowtmr+0x290>)
 800a0ca:	5c8a      	ldrb	r2, [r1, r2]
 800a0cc:	4093      	lsls	r3, r2
 800a0ce:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	dc1a      	bgt.n	800a110 <tcp_slowtmr+0x294>
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	b21a      	sxth	r2, r3
 800a0de:	e019      	b.n	800a114 <tcp_slowtmr+0x298>
 800a0e0:	200076f4 	.word	0x200076f4
 800a0e4:	2000770a 	.word	0x2000770a
 800a0e8:	20007700 	.word	0x20007700
 800a0ec:	080149b8 	.word	0x080149b8
 800a0f0:	08014cfc 	.word	0x08014cfc
 800a0f4:	080149fc 	.word	0x080149fc
 800a0f8:	08014d28 	.word	0x08014d28
 800a0fc:	08014d54 	.word	0x08014d54
 800a100:	08014d84 	.word	0x08014d84
 800a104:	08014db8 	.word	0x08014db8
 800a108:	08017888 	.word	0x08017888
 800a10c:	08017878 	.word	0x08017878
 800a110:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a116:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800a11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11c:	2200      	movs	r2, #0
 800a11e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a128:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a12c:	4293      	cmp	r3, r2
 800a12e:	bf28      	it	cs
 800a130:	4613      	movcs	r3, r2
 800a132:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a134:	8a7b      	ldrh	r3, [r7, #18]
 800a136:	085b      	lsrs	r3, r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a142:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	429a      	cmp	r2, r3
 800a150:	d206      	bcs.n	800a160 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a156:	005b      	lsls	r3, r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800a160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a162:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a166:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	2200      	movs	r2, #0
 800a16e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a172:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a174:	f004 fd70 	bl	800ec58 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	7d1b      	ldrb	r3, [r3, #20]
 800a17c:	2b06      	cmp	r3, #6
 800a17e:	d111      	bne.n	800a1a4 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800a180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a182:	8b5b      	ldrh	r3, [r3, #26]
 800a184:	f003 0310 	and.w	r3, r3, #16
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00b      	beq.n	800a1a4 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a18c:	4b9d      	ldr	r3, [pc, #628]	@ (800a404 <tcp_slowtmr+0x588>)
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	2b28      	cmp	r3, #40	@ 0x28
 800a198:	d904      	bls.n	800a1a4 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800a19a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a19e:	3301      	adds	r3, #1
 800a1a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	7a5b      	ldrb	r3, [r3, #9]
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d04c      	beq.n	800a24a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d003      	beq.n	800a1c0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800a1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ba:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a1bc:	2b07      	cmp	r3, #7
 800a1be:	d144      	bne.n	800a24a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1c0:	4b90      	ldr	r3, [pc, #576]	@ (800a404 <tcp_slowtmr+0x588>)
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1d0:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800a1d4:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800a1d8:	498b      	ldr	r1, [pc, #556]	@ (800a408 <tcp_slowtmr+0x58c>)
 800a1da:	fba1 1303 	umull	r1, r3, r1, r3
 800a1de:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d90a      	bls.n	800a1fa <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800a1e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800a1ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1f8:	e027      	b.n	800a24a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1fa:	4b82      	ldr	r3, [pc, #520]	@ (800a404 <tcp_slowtmr+0x588>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	6a1b      	ldr	r3, [r3, #32]
 800a202:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a206:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800a20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a20c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a210:	4618      	mov	r0, r3
 800a212:	4b7e      	ldr	r3, [pc, #504]	@ (800a40c <tcp_slowtmr+0x590>)
 800a214:	fb00 f303 	mul.w	r3, r0, r3
 800a218:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a21a:	497b      	ldr	r1, [pc, #492]	@ (800a408 <tcp_slowtmr+0x58c>)
 800a21c:	fba1 1303 	umull	r1, r3, r1, r3
 800a220:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a222:	429a      	cmp	r2, r3
 800a224:	d911      	bls.n	800a24a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800a226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a228:	f005 f82a 	bl	800f280 <tcp_keepalive>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800a232:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a236:	2b00      	cmp	r3, #0
 800a238:	d107      	bne.n	800a24a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800a23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a240:	3301      	adds	r3, #1
 800a242:	b2da      	uxtb	r2, r3
 800a244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a246:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800a24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d011      	beq.n	800a276 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a252:	4b6c      	ldr	r3, [pc, #432]	@ (800a404 <tcp_slowtmr+0x588>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	1ad2      	subs	r2, r2, r3
 800a25c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a25e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a262:	4619      	mov	r1, r3
 800a264:	460b      	mov	r3, r1
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	440b      	add	r3, r1
 800a26a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d302      	bcc.n	800a276 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800a270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a272:	f000 fecb 	bl	800b00c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800a276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a278:	7d1b      	ldrb	r3, [r3, #20]
 800a27a:	2b03      	cmp	r3, #3
 800a27c:	d10b      	bne.n	800a296 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a27e:	4b61      	ldr	r3, [pc, #388]	@ (800a404 <tcp_slowtmr+0x588>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	6a1b      	ldr	r3, [r3, #32]
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b28      	cmp	r3, #40	@ 0x28
 800a28a:	d904      	bls.n	800a296 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a290:	3301      	adds	r3, #1
 800a292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800a296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a298:	7d1b      	ldrb	r3, [r3, #20]
 800a29a:	2b09      	cmp	r3, #9
 800a29c:	d10b      	bne.n	800a2b6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a29e:	4b59      	ldr	r3, [pc, #356]	@ (800a404 <tcp_slowtmr+0x588>)
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	2bf0      	cmp	r3, #240	@ 0xf0
 800a2aa:	d904      	bls.n	800a2b6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800a2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800a2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d060      	beq.n	800a380 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800a2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800a2c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2c8:	f000 fcec 	bl	800aca4 <tcp_pcb_purge>
      if (prev != NULL) {
 800a2cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d010      	beq.n	800a2f4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a2d2:	4b4f      	ldr	r3, [pc, #316]	@ (800a410 <tcp_slowtmr+0x594>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d106      	bne.n	800a2ea <tcp_slowtmr+0x46e>
 800a2dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a414 <tcp_slowtmr+0x598>)
 800a2de:	f240 526d 	movw	r2, #1389	@ 0x56d
 800a2e2:	494d      	ldr	r1, [pc, #308]	@ (800a418 <tcp_slowtmr+0x59c>)
 800a2e4:	484d      	ldr	r0, [pc, #308]	@ (800a41c <tcp_slowtmr+0x5a0>)
 800a2e6:	f008 fcf3 	bl	8012cd0 <iprintf>
        prev->next = pcb->next;
 800a2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ec:	68da      	ldr	r2, [r3, #12]
 800a2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f0:	60da      	str	r2, [r3, #12]
 800a2f2:	e00f      	b.n	800a314 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a2f4:	4b46      	ldr	r3, [pc, #280]	@ (800a410 <tcp_slowtmr+0x594>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d006      	beq.n	800a30c <tcp_slowtmr+0x490>
 800a2fe:	4b45      	ldr	r3, [pc, #276]	@ (800a414 <tcp_slowtmr+0x598>)
 800a300:	f240 5271 	movw	r2, #1393	@ 0x571
 800a304:	4946      	ldr	r1, [pc, #280]	@ (800a420 <tcp_slowtmr+0x5a4>)
 800a306:	4845      	ldr	r0, [pc, #276]	@ (800a41c <tcp_slowtmr+0x5a0>)
 800a308:	f008 fce2 	bl	8012cd0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	4a3f      	ldr	r2, [pc, #252]	@ (800a410 <tcp_slowtmr+0x594>)
 800a312:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800a314:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d013      	beq.n	800a344 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a324:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800a326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a328:	3304      	adds	r3, #4
 800a32a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a32c:	8ad2      	ldrh	r2, [r2, #22]
 800a32e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a330:	8b09      	ldrh	r1, [r1, #24]
 800a332:	9102      	str	r1, [sp, #8]
 800a334:	9201      	str	r2, [sp, #4]
 800a336:	9300      	str	r3, [sp, #0]
 800a338:	462b      	mov	r3, r5
 800a33a:	4622      	mov	r2, r4
 800a33c:	4601      	mov	r1, r0
 800a33e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a340:	f004 feea 	bl	800f118 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	7d1b      	ldrb	r3, [r3, #20]
 800a34e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a356:	68db      	ldr	r3, [r3, #12]
 800a358:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a35a:	6838      	ldr	r0, [r7, #0]
 800a35c:	f7ff f836 	bl	80093cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a360:	4b30      	ldr	r3, [pc, #192]	@ (800a424 <tcp_slowtmr+0x5a8>)
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d004      	beq.n	800a376 <tcp_slowtmr+0x4fa>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f06f 010c 	mvn.w	r1, #12
 800a372:	68b8      	ldr	r0, [r7, #8]
 800a374:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a376:	4b2b      	ldr	r3, [pc, #172]	@ (800a424 <tcp_slowtmr+0x5a8>)
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d037      	beq.n	800a3ee <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800a37e:	e590      	b.n	8009ea2 <tcp_slowtmr+0x26>
      prev = pcb;
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	7f1b      	ldrb	r3, [r3, #28]
 800a38e:	3301      	adds	r3, #1
 800a390:	b2da      	uxtb	r2, r3
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a398:	7f1a      	ldrb	r2, [r3, #28]
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	7f5b      	ldrb	r3, [r3, #29]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d325      	bcc.n	800a3ee <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800a3a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a424 <tcp_slowtmr+0x5a8>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <tcp_slowtmr+0x554>
 800a3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3c0:	6912      	ldr	r2, [r2, #16]
 800a3c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4798      	blx	r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a3ce:	e002      	b.n	800a3d6 <tcp_slowtmr+0x55a>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800a3d6:	4b13      	ldr	r3, [pc, #76]	@ (800a424 <tcp_slowtmr+0x5a8>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f47f ad60 	bne.w	8009ea0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a3e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d102      	bne.n	800a3ee <tcp_slowtmr+0x572>
          tcp_output(prev);
 800a3e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3ea:	f004 f8bf 	bl	800e56c <tcp_output>
  while (pcb != NULL) {
 800a3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	f47f ad5c 	bne.w	8009eae <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <tcp_slowtmr+0x5ac>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a400:	e067      	b.n	800a4d2 <tcp_slowtmr+0x656>
 800a402:	bf00      	nop
 800a404:	200076f4 	.word	0x200076f4
 800a408:	10624dd3 	.word	0x10624dd3
 800a40c:	000124f8 	.word	0x000124f8
 800a410:	20007700 	.word	0x20007700
 800a414:	080149b8 	.word	0x080149b8
 800a418:	08014df0 	.word	0x08014df0
 800a41c:	080149fc 	.word	0x080149fc
 800a420:	08014e1c 	.word	0x08014e1c
 800a424:	20007708 	.word	0x20007708
 800a428:	20007704 	.word	0x20007704
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42e:	7d1b      	ldrb	r3, [r3, #20]
 800a430:	2b0a      	cmp	r3, #10
 800a432:	d006      	beq.n	800a442 <tcp_slowtmr+0x5c6>
 800a434:	4b2b      	ldr	r3, [pc, #172]	@ (800a4e4 <tcp_slowtmr+0x668>)
 800a436:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800a43a:	492b      	ldr	r1, [pc, #172]	@ (800a4e8 <tcp_slowtmr+0x66c>)
 800a43c:	482b      	ldr	r0, [pc, #172]	@ (800a4ec <tcp_slowtmr+0x670>)
 800a43e:	f008 fc47 	bl	8012cd0 <iprintf>
    pcb_remove = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a448:	4b29      	ldr	r3, [pc, #164]	@ (800a4f0 <tcp_slowtmr+0x674>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a44e:	6a1b      	ldr	r3, [r3, #32]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2bf0      	cmp	r3, #240	@ 0xf0
 800a454:	d904      	bls.n	800a460 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800a456:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a45a:	3301      	adds	r3, #1
 800a45c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a464:	2b00      	cmp	r3, #0
 800a466:	d02f      	beq.n	800a4c8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a468:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a46a:	f000 fc1b 	bl	800aca4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a470:	2b00      	cmp	r3, #0
 800a472:	d010      	beq.n	800a496 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a474:	4b1f      	ldr	r3, [pc, #124]	@ (800a4f4 <tcp_slowtmr+0x678>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d106      	bne.n	800a48c <tcp_slowtmr+0x610>
 800a47e:	4b19      	ldr	r3, [pc, #100]	@ (800a4e4 <tcp_slowtmr+0x668>)
 800a480:	f240 52af 	movw	r2, #1455	@ 0x5af
 800a484:	491c      	ldr	r1, [pc, #112]	@ (800a4f8 <tcp_slowtmr+0x67c>)
 800a486:	4819      	ldr	r0, [pc, #100]	@ (800a4ec <tcp_slowtmr+0x670>)
 800a488:	f008 fc22 	bl	8012cd0 <iprintf>
        prev->next = pcb->next;
 800a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48e:	68da      	ldr	r2, [r3, #12]
 800a490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a492:	60da      	str	r2, [r3, #12]
 800a494:	e00f      	b.n	800a4b6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a496:	4b17      	ldr	r3, [pc, #92]	@ (800a4f4 <tcp_slowtmr+0x678>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d006      	beq.n	800a4ae <tcp_slowtmr+0x632>
 800a4a0:	4b10      	ldr	r3, [pc, #64]	@ (800a4e4 <tcp_slowtmr+0x668>)
 800a4a2:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a4a6:	4915      	ldr	r1, [pc, #84]	@ (800a4fc <tcp_slowtmr+0x680>)
 800a4a8:	4810      	ldr	r0, [pc, #64]	@ (800a4ec <tcp_slowtmr+0x670>)
 800a4aa:	f008 fc11 	bl	8012cd0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b0:	68db      	ldr	r3, [r3, #12]
 800a4b2:	4a10      	ldr	r2, [pc, #64]	@ (800a4f4 <tcp_slowtmr+0x678>)
 800a4b4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a4c0:	69f8      	ldr	r0, [r7, #28]
 800a4c2:	f7fe ff83 	bl	80093cc <tcp_free>
 800a4c6:	e004      	b.n	800a4d2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800a4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a4cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a4d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1a9      	bne.n	800a42c <tcp_slowtmr+0x5b0>
    }
  }
}
 800a4d8:	bf00      	nop
 800a4da:	bf00      	nop
 800a4dc:	3730      	adds	r7, #48	@ 0x30
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	080149b8 	.word	0x080149b8
 800a4e8:	08014e48 	.word	0x08014e48
 800a4ec:	080149fc 	.word	0x080149fc
 800a4f0:	200076f4 	.word	0x200076f4
 800a4f4:	20007704 	.word	0x20007704
 800a4f8:	08014e78 	.word	0x08014e78
 800a4fc:	08014ea0 	.word	0x08014ea0

0800a500 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a506:	4b2d      	ldr	r3, [pc, #180]	@ (800a5bc <tcp_fasttmr+0xbc>)
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	3301      	adds	r3, #1
 800a50c:	b2da      	uxtb	r2, r3
 800a50e:	4b2b      	ldr	r3, [pc, #172]	@ (800a5bc <tcp_fasttmr+0xbc>)
 800a510:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a512:	4b2b      	ldr	r3, [pc, #172]	@ (800a5c0 <tcp_fasttmr+0xc0>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a518:	e048      	b.n	800a5ac <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7f9a      	ldrb	r2, [r3, #30]
 800a51e:	4b27      	ldr	r3, [pc, #156]	@ (800a5bc <tcp_fasttmr+0xbc>)
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	429a      	cmp	r2, r3
 800a524:	d03f      	beq.n	800a5a6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a526:	4b25      	ldr	r3, [pc, #148]	@ (800a5bc <tcp_fasttmr+0xbc>)
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	8b5b      	ldrh	r3, [r3, #26]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d010      	beq.n	800a55c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	8b5b      	ldrh	r3, [r3, #26]
 800a53e:	f043 0302 	orr.w	r3, r3, #2
 800a542:	b29a      	uxth	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f004 f80f 	bl	800e56c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	8b5b      	ldrh	r3, [r3, #26]
 800a552:	f023 0303 	bic.w	r3, r3, #3
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	8b5b      	ldrh	r3, [r3, #26]
 800a560:	f003 0308 	and.w	r3, r3, #8
 800a564:	2b00      	cmp	r3, #0
 800a566:	d009      	beq.n	800a57c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	8b5b      	ldrh	r3, [r3, #26]
 800a56c:	f023 0308 	bic.w	r3, r3, #8
 800a570:	b29a      	uxth	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff f8bc 	bl	80096f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a58a:	4b0e      	ldr	r3, [pc, #56]	@ (800a5c4 <tcp_fasttmr+0xc4>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 f819 	bl	800a5c8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a596:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c4 <tcp_fasttmr+0xc4>)
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d000      	beq.n	800a5a0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a59e:	e7b8      	b.n	800a512 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	607b      	str	r3, [r7, #4]
 800a5a4:	e002      	b.n	800a5ac <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1b3      	bne.n	800a51a <tcp_fasttmr+0x1a>
    }
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	2000770a 	.word	0x2000770a
 800a5c0:	20007700 	.word	0x20007700
 800a5c4:	20007708 	.word	0x20007708

0800a5c8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a5c8:	b590      	push	{r4, r7, lr}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d109      	bne.n	800a5ea <tcp_process_refused_data+0x22>
 800a5d6:	4b37      	ldr	r3, [pc, #220]	@ (800a6b4 <tcp_process_refused_data+0xec>)
 800a5d8:	f240 6209 	movw	r2, #1545	@ 0x609
 800a5dc:	4936      	ldr	r1, [pc, #216]	@ (800a6b8 <tcp_process_refused_data+0xf0>)
 800a5de:	4837      	ldr	r0, [pc, #220]	@ (800a6bc <tcp_process_refused_data+0xf4>)
 800a5e0:	f008 fb76 	bl	8012cd0 <iprintf>
 800a5e4:	f06f 030f 	mvn.w	r3, #15
 800a5e8:	e060      	b.n	800a6ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ee:	7b5b      	ldrb	r3, [r3, #13]
 800a5f0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5f6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00b      	beq.n	800a620 <tcp_process_refused_data+0x58>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6918      	ldr	r0, [r3, #16]
 800a612:	2300      	movs	r3, #0
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	6879      	ldr	r1, [r7, #4]
 800a618:	47a0      	blx	r4
 800a61a:	4603      	mov	r3, r0
 800a61c:	73fb      	strb	r3, [r7, #15]
 800a61e:	e007      	b.n	800a630 <tcp_process_refused_data+0x68>
 800a620:	2300      	movs	r3, #0
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	2000      	movs	r0, #0
 800a628:	f000 f8c2 	bl	800a7b0 <tcp_recv_null>
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d12a      	bne.n	800a68e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	f003 0320 	and.w	r3, r3, #32
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d033      	beq.n	800a6aa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a646:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a64a:	d005      	beq.n	800a658 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a650:	3301      	adds	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00b      	beq.n	800a67a <tcp_process_refused_data+0xb2>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6918      	ldr	r0, [r3, #16]
 800a66c:	2300      	movs	r3, #0
 800a66e:	2200      	movs	r2, #0
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	47a0      	blx	r4
 800a674:	4603      	mov	r3, r0
 800a676:	73fb      	strb	r3, [r7, #15]
 800a678:	e001      	b.n	800a67e <tcp_process_refused_data+0xb6>
 800a67a:	2300      	movs	r3, #0
 800a67c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a682:	f113 0f0d 	cmn.w	r3, #13
 800a686:	d110      	bne.n	800a6aa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a688:	f06f 030c 	mvn.w	r3, #12
 800a68c:	e00e      	b.n	800a6ac <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a68e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a692:	f113 0f0d 	cmn.w	r3, #13
 800a696:	d102      	bne.n	800a69e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a698:	f06f 030c 	mvn.w	r3, #12
 800a69c:	e006      	b.n	800a6ac <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a6a4:	f06f 0304 	mvn.w	r3, #4
 800a6a8:	e000      	b.n	800a6ac <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3714      	adds	r7, #20
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd90      	pop	{r4, r7, pc}
 800a6b4:	080149b8 	.word	0x080149b8
 800a6b8:	08014ec8 	.word	0x08014ec8
 800a6bc:	080149fc 	.word	0x080149fc

0800a6c0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a6c8:	e007      	b.n	800a6da <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 f80a 	bl	800a6ea <tcp_seg_free>
    seg = next;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1f4      	bne.n	800a6ca <tcp_segs_free+0xa>
  }
}
 800a6e0:	bf00      	nop
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00c      	beq.n	800a712 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d004      	beq.n	800a70a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fbd9 	bl	8008ebc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a70a:	6879      	ldr	r1, [r7, #4]
 800a70c:	2003      	movs	r0, #3
 800a70e:	f7fd fd9d 	bl	800824c <memp_free>
  }
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
	...

0800a71c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d107      	bne.n	800a73e <tcp_setprio+0x22>
 800a72e:	4b07      	ldr	r3, [pc, #28]	@ (800a74c <tcp_setprio+0x30>)
 800a730:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800a734:	4906      	ldr	r1, [pc, #24]	@ (800a750 <tcp_setprio+0x34>)
 800a736:	4807      	ldr	r0, [pc, #28]	@ (800a754 <tcp_setprio+0x38>)
 800a738:	f008 faca 	bl	8012cd0 <iprintf>
 800a73c:	e002      	b.n	800a744 <tcp_setprio+0x28>

  pcb->prio = prio;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	78fa      	ldrb	r2, [r7, #3]
 800a742:	755a      	strb	r2, [r3, #21]
}
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	080149b8 	.word	0x080149b8
 800a750:	08014ef0 	.word	0x08014ef0
 800a754:	080149fc 	.word	0x080149fc

0800a758 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <tcp_seg_copy+0x1c>
 800a766:	4b0f      	ldr	r3, [pc, #60]	@ (800a7a4 <tcp_seg_copy+0x4c>)
 800a768:	f240 6282 	movw	r2, #1666	@ 0x682
 800a76c:	490e      	ldr	r1, [pc, #56]	@ (800a7a8 <tcp_seg_copy+0x50>)
 800a76e:	480f      	ldr	r0, [pc, #60]	@ (800a7ac <tcp_seg_copy+0x54>)
 800a770:	f008 faae 	bl	8012cd0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a774:	2003      	movs	r0, #3
 800a776:	f7fd fd17 	bl	80081a8 <memp_malloc>
 800a77a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <tcp_seg_copy+0x2e>
    return NULL;
 800a782:	2300      	movs	r3, #0
 800a784:	e00a      	b.n	800a79c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a786:	2210      	movs	r2, #16
 800a788:	6879      	ldr	r1, [r7, #4]
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f008 fbef 	bl	8012f6e <memcpy>
  pbuf_ref(cseg->p);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	4618      	mov	r0, r3
 800a796:	f7fe fc35 	bl	8009004 <pbuf_ref>
  return cseg;
 800a79a:	68fb      	ldr	r3, [r7, #12]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	080149b8 	.word	0x080149b8
 800a7a8:	08014f0c 	.word	0x08014f0c
 800a7ac:	080149fc 	.word	0x080149fc

0800a7b0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d109      	bne.n	800a7d8 <tcp_recv_null+0x28>
 800a7c4:	4b12      	ldr	r3, [pc, #72]	@ (800a810 <tcp_recv_null+0x60>)
 800a7c6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a7ca:	4912      	ldr	r1, [pc, #72]	@ (800a814 <tcp_recv_null+0x64>)
 800a7cc:	4812      	ldr	r0, [pc, #72]	@ (800a818 <tcp_recv_null+0x68>)
 800a7ce:	f008 fa7f 	bl	8012cd0 <iprintf>
 800a7d2:	f06f 030f 	mvn.w	r3, #15
 800a7d6:	e016      	b.n	800a806 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d009      	beq.n	800a7f2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	891b      	ldrh	r3, [r3, #8]
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	68b8      	ldr	r0, [r7, #8]
 800a7e6:	f7ff fab3 	bl	8009d50 <tcp_recved>
    pbuf_free(p);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fe fb66 	bl	8008ebc <pbuf_free>
 800a7f0:	e008      	b.n	800a804 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a7f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d104      	bne.n	800a804 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a7fa:	68b8      	ldr	r0, [r7, #8]
 800a7fc:	f7fe ffe4 	bl	80097c8 <tcp_close>
 800a800:	4603      	mov	r3, r0
 800a802:	e000      	b.n	800a806 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	080149b8 	.word	0x080149b8
 800a814:	08014f28 	.word	0x08014f28
 800a818:	080149fc 	.word	0x080149fc

0800a81c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	db01      	blt.n	800a832 <tcp_kill_prio+0x16>
 800a82e:	79fb      	ldrb	r3, [r7, #7]
 800a830:	e000      	b.n	800a834 <tcp_kill_prio+0x18>
 800a832:	237f      	movs	r3, #127	@ 0x7f
 800a834:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a836:	7afb      	ldrb	r3, [r7, #11]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d034      	beq.n	800a8a6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a83c:	7afb      	ldrb	r3, [r7, #11]
 800a83e:	3b01      	subs	r3, #1
 800a840:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a846:	2300      	movs	r3, #0
 800a848:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a84a:	4b19      	ldr	r3, [pc, #100]	@ (800a8b0 <tcp_kill_prio+0x94>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e01f      	b.n	800a892 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	7d5b      	ldrb	r3, [r3, #21]
 800a856:	7afa      	ldrb	r2, [r7, #11]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d80c      	bhi.n	800a876 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a860:	7afa      	ldrb	r2, [r7, #11]
 800a862:	429a      	cmp	r2, r3
 800a864:	d112      	bne.n	800a88c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a866:	4b13      	ldr	r3, [pc, #76]	@ (800a8b4 <tcp_kill_prio+0x98>)
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	1ad3      	subs	r3, r2, r3
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	429a      	cmp	r2, r3
 800a874:	d80a      	bhi.n	800a88c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a876:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b4 <tcp_kill_prio+0x98>)
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	1ad3      	subs	r3, r2, r3
 800a880:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	7d5b      	ldrb	r3, [r3, #21]
 800a88a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	617b      	str	r3, [r7, #20]
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d1dc      	bne.n	800a852 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a89e:	6938      	ldr	r0, [r7, #16]
 800a8a0:	f7ff f87c 	bl	800999c <tcp_abort>
 800a8a4:	e000      	b.n	800a8a8 <tcp_kill_prio+0x8c>
    return;
 800a8a6:	bf00      	nop
  }
}
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20007700 	.word	0x20007700
 800a8b4:	200076f4 	.word	0x200076f4

0800a8b8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	2b08      	cmp	r3, #8
 800a8c6:	d009      	beq.n	800a8dc <tcp_kill_state+0x24>
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b09      	cmp	r3, #9
 800a8cc:	d006      	beq.n	800a8dc <tcp_kill_state+0x24>
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800a938 <tcp_kill_state+0x80>)
 800a8d0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a8d4:	4919      	ldr	r1, [pc, #100]	@ (800a93c <tcp_kill_state+0x84>)
 800a8d6:	481a      	ldr	r0, [pc, #104]	@ (800a940 <tcp_kill_state+0x88>)
 800a8d8:	f008 f9fa 	bl	8012cd0 <iprintf>

  inactivity = 0;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8e4:	4b17      	ldr	r3, [pc, #92]	@ (800a944 <tcp_kill_state+0x8c>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	617b      	str	r3, [r7, #20]
 800a8ea:	e017      	b.n	800a91c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	7d1b      	ldrb	r3, [r3, #20]
 800a8f0:	79fa      	ldrb	r2, [r7, #7]
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d10f      	bne.n	800a916 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8f6:	4b14      	ldr	r3, [pc, #80]	@ (800a948 <tcp_kill_state+0x90>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	429a      	cmp	r2, r3
 800a904:	d807      	bhi.n	800a916 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a906:	4b10      	ldr	r3, [pc, #64]	@ (800a948 <tcp_kill_state+0x90>)
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1e4      	bne.n	800a8ec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d003      	beq.n	800a930 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a928:	2100      	movs	r1, #0
 800a92a:	6938      	ldr	r0, [r7, #16]
 800a92c:	f7fe ff78 	bl	8009820 <tcp_abandon>
  }
}
 800a930:	bf00      	nop
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}
 800a938:	080149b8 	.word	0x080149b8
 800a93c:	08014f44 	.word	0x08014f44
 800a940:	080149fc 	.word	0x080149fc
 800a944:	20007700 	.word	0x20007700
 800a948:	200076f4 	.word	0x200076f4

0800a94c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a956:	2300      	movs	r3, #0
 800a958:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a95a:	4b12      	ldr	r3, [pc, #72]	@ (800a9a4 <tcp_kill_timewait+0x58>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	e012      	b.n	800a988 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a962:	4b11      	ldr	r3, [pc, #68]	@ (800a9a8 <tcp_kill_timewait+0x5c>)
 800a964:	681a      	ldr	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d807      	bhi.n	800a982 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a972:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a8 <tcp_kill_timewait+0x5c>)
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	60fb      	str	r3, [r7, #12]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d1e9      	bne.n	800a962 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a994:	68b8      	ldr	r0, [r7, #8]
 800a996:	f7ff f801 	bl	800999c <tcp_abort>
  }
}
 800a99a:	bf00      	nop
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	20007704 	.word	0x20007704
 800a9a8:	200076f4 	.word	0x200076f4

0800a9ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a9b2:	4b10      	ldr	r3, [pc, #64]	@ (800a9f4 <tcp_handle_closepend+0x48>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a9b8:	e014      	b.n	800a9e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	8b5b      	ldrh	r3, [r3, #26]
 800a9c4:	f003 0308 	and.w	r3, r3, #8
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	8b5b      	ldrh	r3, [r3, #26]
 800a9d0:	f023 0308 	bic.w	r3, r3, #8
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f7fe fe8a 	bl	80096f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d1e7      	bne.n	800a9ba <tcp_handle_closepend+0xe>
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20007700 	.word	0x20007700

0800a9f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa02:	2001      	movs	r0, #1
 800aa04:	f7fd fbd0 	bl	80081a8 <memp_malloc>
 800aa08:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d126      	bne.n	800aa5e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800aa10:	f7ff ffcc 	bl	800a9ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aa14:	f7ff ff9a 	bl	800a94c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa18:	2001      	movs	r0, #1
 800aa1a:	f7fd fbc5 	bl	80081a8 <memp_malloc>
 800aa1e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d11b      	bne.n	800aa5e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800aa26:	2009      	movs	r0, #9
 800aa28:	f7ff ff46 	bl	800a8b8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa2c:	2001      	movs	r0, #1
 800aa2e:	f7fd fbbb 	bl	80081a8 <memp_malloc>
 800aa32:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d111      	bne.n	800aa5e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aa3a:	2008      	movs	r0, #8
 800aa3c:	f7ff ff3c 	bl	800a8b8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa40:	2001      	movs	r0, #1
 800aa42:	f7fd fbb1 	bl	80081a8 <memp_malloc>
 800aa46:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d107      	bne.n	800aa5e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aa4e:	79fb      	ldrb	r3, [r7, #7]
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff fee3 	bl	800a81c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa56:	2001      	movs	r0, #1
 800aa58:	f7fd fba6 	bl	80081a8 <memp_malloc>
 800aa5c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d03f      	beq.n	800aae4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aa64:	229c      	movs	r2, #156	@ 0x9c
 800aa66:	2100      	movs	r1, #0
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f008 f996 	bl	8012d9a <memset>
    pcb->prio = prio;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	79fa      	ldrb	r2, [r7, #7]
 800aa72:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800aa7a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800aa84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	22ff      	movs	r2, #255	@ 0xff
 800aa92:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aa9a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2206      	movs	r2, #6
 800aaa0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2206      	movs	r2, #6
 800aaa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aab0:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800aaba:	4b0d      	ldr	r3, [pc, #52]	@ (800aaf0 <tcp_alloc+0xf8>)
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800aac2:	4b0c      	ldr	r3, [pc, #48]	@ (800aaf4 <tcp_alloc+0xfc>)
 800aac4:	781a      	ldrb	r2, [r3, #0]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800aad0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4a08      	ldr	r2, [pc, #32]	@ (800aaf8 <tcp_alloc+0x100>)
 800aad8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4a07      	ldr	r2, [pc, #28]	@ (800aafc <tcp_alloc+0x104>)
 800aae0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800aae4:	68fb      	ldr	r3, [r7, #12]
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	3710      	adds	r7, #16
 800aaea:	46bd      	mov	sp, r7
 800aaec:	bd80      	pop	{r7, pc}
 800aaee:	bf00      	nop
 800aaf0:	200076f4 	.word	0x200076f4
 800aaf4:	2000770a 	.word	0x2000770a
 800aaf8:	0800a7b1 	.word	0x0800a7b1
 800aafc:	006ddd00 	.word	0x006ddd00

0800ab00 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ab04:	2040      	movs	r0, #64	@ 0x40
 800ab06:	f7ff ff77 	bl	800a9f8 <tcp_alloc>
 800ab0a:	4603      	mov	r3, r0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b084      	sub	sp, #16
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	4603      	mov	r3, r0
 800ab18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ab1a:	2040      	movs	r0, #64	@ 0x40
 800ab1c:	f7ff ff6c 	bl	800a9f8 <tcp_alloc>
 800ab20:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3710      	adds	r7, #16
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	683a      	ldr	r2, [r7, #0]
 800ab40:	611a      	str	r2, [r3, #16]
  }
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d106      	bne.n	800ab72 <tcp_recv+0x26>
 800ab64:	4b07      	ldr	r3, [pc, #28]	@ (800ab84 <tcp_recv+0x38>)
 800ab66:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ab6a:	4907      	ldr	r1, [pc, #28]	@ (800ab88 <tcp_recv+0x3c>)
 800ab6c:	4807      	ldr	r0, [pc, #28]	@ (800ab8c <tcp_recv+0x40>)
 800ab6e:	f008 f8af 	bl	8012cd0 <iprintf>
    pcb->recv = recv;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	080149b8 	.word	0x080149b8
 800ab88:	08014f54 	.word	0x08014f54
 800ab8c:	080149fc 	.word	0x080149fc

0800ab90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00e      	beq.n	800abbe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	7d1b      	ldrb	r3, [r3, #20]
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d106      	bne.n	800abb6 <tcp_sent+0x26>
 800aba8:	4b07      	ldr	r3, [pc, #28]	@ (800abc8 <tcp_sent+0x38>)
 800abaa:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800abae:	4907      	ldr	r1, [pc, #28]	@ (800abcc <tcp_sent+0x3c>)
 800abb0:	4807      	ldr	r0, [pc, #28]	@ (800abd0 <tcp_sent+0x40>)
 800abb2:	f008 f88d 	bl	8012cd0 <iprintf>
    pcb->sent = sent;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	080149b8 	.word	0x080149b8
 800abcc:	08014f7c 	.word	0x08014f7c
 800abd0:	080149fc 	.word	0x080149fc

0800abd4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00e      	beq.n	800ac02 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	7d1b      	ldrb	r3, [r3, #20]
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d106      	bne.n	800abfa <tcp_err+0x26>
 800abec:	4b07      	ldr	r3, [pc, #28]	@ (800ac0c <tcp_err+0x38>)
 800abee:	f640 020d 	movw	r2, #2061	@ 0x80d
 800abf2:	4907      	ldr	r1, [pc, #28]	@ (800ac10 <tcp_err+0x3c>)
 800abf4:	4807      	ldr	r0, [pc, #28]	@ (800ac14 <tcp_err+0x40>)
 800abf6:	f008 f86b 	bl	8012cd0 <iprintf>
    pcb->errf = err;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	683a      	ldr	r2, [r7, #0]
 800abfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	080149b8 	.word	0x080149b8
 800ac10:	08014fa4 	.word	0x08014fa4
 800ac14:	080149fc 	.word	0x080149fc

0800ac18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d008      	beq.n	800ac3a <tcp_accept+0x22>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	7d1b      	ldrb	r3, [r3, #20]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d104      	bne.n	800ac3a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	619a      	str	r2, [r3, #24]
  }
}
 800ac3a:	bf00      	nop
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bc80      	pop	{r7}
 800ac42:	4770      	bx	lr

0800ac44 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d107      	bne.n	800ac68 <tcp_poll+0x24>
 800ac58:	4b0e      	ldr	r3, [pc, #56]	@ (800ac94 <tcp_poll+0x50>)
 800ac5a:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ac5e:	490e      	ldr	r1, [pc, #56]	@ (800ac98 <tcp_poll+0x54>)
 800ac60:	480e      	ldr	r0, [pc, #56]	@ (800ac9c <tcp_poll+0x58>)
 800ac62:	f008 f835 	bl	8012cd0 <iprintf>
 800ac66:	e011      	b.n	800ac8c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	7d1b      	ldrb	r3, [r3, #20]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d106      	bne.n	800ac7e <tcp_poll+0x3a>
 800ac70:	4b08      	ldr	r3, [pc, #32]	@ (800ac94 <tcp_poll+0x50>)
 800ac72:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ac76:	490a      	ldr	r1, [pc, #40]	@ (800aca0 <tcp_poll+0x5c>)
 800ac78:	4808      	ldr	r0, [pc, #32]	@ (800ac9c <tcp_poll+0x58>)
 800ac7a:	f008 f829 	bl	8012cd0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	79fa      	ldrb	r2, [r7, #7]
 800ac8a:	775a      	strb	r2, [r3, #29]
}
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	080149b8 	.word	0x080149b8
 800ac98:	08014fcc 	.word	0x08014fcc
 800ac9c:	080149fc 	.word	0x080149fc
 800aca0:	08014fe4 	.word	0x08014fe4

0800aca4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b082      	sub	sp, #8
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d107      	bne.n	800acc2 <tcp_pcb_purge+0x1e>
 800acb2:	4b21      	ldr	r3, [pc, #132]	@ (800ad38 <tcp_pcb_purge+0x94>)
 800acb4:	f640 0251 	movw	r2, #2129	@ 0x851
 800acb8:	4920      	ldr	r1, [pc, #128]	@ (800ad3c <tcp_pcb_purge+0x98>)
 800acba:	4821      	ldr	r0, [pc, #132]	@ (800ad40 <tcp_pcb_purge+0x9c>)
 800acbc:	f008 f808 	bl	8012cd0 <iprintf>
 800acc0:	e037      	b.n	800ad32 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d033      	beq.n	800ad32 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800acce:	2b0a      	cmp	r3, #10
 800acd0:	d02f      	beq.n	800ad32 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d02b      	beq.n	800ad32 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d007      	beq.n	800acf2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fe f8e8 	bl	8008ebc <pbuf_free>
      pcb->refused_data = NULL;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2200      	movs	r2, #0
 800acf0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f986 	bl	800b00c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad06:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f7ff fcd7 	bl	800a6c0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7ff fcd2 	bl	800a6c0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	080149b8 	.word	0x080149b8
 800ad3c:	08015004 	.word	0x08015004
 800ad40:	080149fc 	.word	0x080149fc

0800ad44 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d106      	bne.n	800ad62 <tcp_pcb_remove+0x1e>
 800ad54:	4b3e      	ldr	r3, [pc, #248]	@ (800ae50 <tcp_pcb_remove+0x10c>)
 800ad56:	f640 0283 	movw	r2, #2179	@ 0x883
 800ad5a:	493e      	ldr	r1, [pc, #248]	@ (800ae54 <tcp_pcb_remove+0x110>)
 800ad5c:	483e      	ldr	r0, [pc, #248]	@ (800ae58 <tcp_pcb_remove+0x114>)
 800ad5e:	f007 ffb7 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d106      	bne.n	800ad76 <tcp_pcb_remove+0x32>
 800ad68:	4b39      	ldr	r3, [pc, #228]	@ (800ae50 <tcp_pcb_remove+0x10c>)
 800ad6a:	f640 0284 	movw	r2, #2180	@ 0x884
 800ad6e:	493b      	ldr	r1, [pc, #236]	@ (800ae5c <tcp_pcb_remove+0x118>)
 800ad70:	4839      	ldr	r0, [pc, #228]	@ (800ae58 <tcp_pcb_remove+0x114>)
 800ad72:	f007 ffad 	bl	8012cd0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d105      	bne.n	800ad8c <tcp_pcb_remove+0x48>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68da      	ldr	r2, [r3, #12]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e013      	b.n	800adb4 <tcp_pcb_remove+0x70>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	60fb      	str	r3, [r7, #12]
 800ad92:	e00c      	b.n	800adae <tcp_pcb_remove+0x6a>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d104      	bne.n	800ada8 <tcp_pcb_remove+0x64>
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	68da      	ldr	r2, [r3, #12]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	60da      	str	r2, [r3, #12]
 800ada6:	e005      	b.n	800adb4 <tcp_pcb_remove+0x70>
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	60fb      	str	r3, [r7, #12]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1ef      	bne.n	800ad94 <tcp_pcb_remove+0x50>
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2200      	movs	r2, #0
 800adb8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800adba:	6838      	ldr	r0, [r7, #0]
 800adbc:	f7ff ff72 	bl	800aca4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	7d1b      	ldrb	r3, [r3, #20]
 800adc4:	2b0a      	cmp	r3, #10
 800adc6:	d013      	beq.n	800adf0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800adcc:	2b01      	cmp	r3, #1
 800adce:	d00f      	beq.n	800adf0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	8b5b      	ldrh	r3, [r3, #26]
 800add4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800add8:	2b00      	cmp	r3, #0
 800adda:	d009      	beq.n	800adf0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	8b5b      	ldrh	r3, [r3, #26]
 800ade0:	f043 0302 	orr.w	r3, r3, #2
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800adea:	6838      	ldr	r0, [r7, #0]
 800adec:	f003 fbbe 	bl	800e56c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	7d1b      	ldrb	r3, [r3, #20]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d020      	beq.n	800ae3a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d006      	beq.n	800ae0e <tcp_pcb_remove+0xca>
 800ae00:	4b13      	ldr	r3, [pc, #76]	@ (800ae50 <tcp_pcb_remove+0x10c>)
 800ae02:	f640 0293 	movw	r2, #2195	@ 0x893
 800ae06:	4916      	ldr	r1, [pc, #88]	@ (800ae60 <tcp_pcb_remove+0x11c>)
 800ae08:	4813      	ldr	r0, [pc, #76]	@ (800ae58 <tcp_pcb_remove+0x114>)
 800ae0a:	f007 ff61 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d006      	beq.n	800ae24 <tcp_pcb_remove+0xe0>
 800ae16:	4b0e      	ldr	r3, [pc, #56]	@ (800ae50 <tcp_pcb_remove+0x10c>)
 800ae18:	f640 0294 	movw	r2, #2196	@ 0x894
 800ae1c:	4911      	ldr	r1, [pc, #68]	@ (800ae64 <tcp_pcb_remove+0x120>)
 800ae1e:	480e      	ldr	r0, [pc, #56]	@ (800ae58 <tcp_pcb_remove+0x114>)
 800ae20:	f007 ff56 	bl	8012cd0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d006      	beq.n	800ae3a <tcp_pcb_remove+0xf6>
 800ae2c:	4b08      	ldr	r3, [pc, #32]	@ (800ae50 <tcp_pcb_remove+0x10c>)
 800ae2e:	f640 0296 	movw	r2, #2198	@ 0x896
 800ae32:	490d      	ldr	r1, [pc, #52]	@ (800ae68 <tcp_pcb_remove+0x124>)
 800ae34:	4808      	ldr	r0, [pc, #32]	@ (800ae58 <tcp_pcb_remove+0x114>)
 800ae36:	f007 ff4b 	bl	8012cd0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	2200      	movs	r2, #0
 800ae44:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae46:	bf00      	nop
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	080149b8 	.word	0x080149b8
 800ae54:	08015020 	.word	0x08015020
 800ae58:	080149fc 	.word	0x080149fc
 800ae5c:	0801503c 	.word	0x0801503c
 800ae60:	0801505c 	.word	0x0801505c
 800ae64:	08015074 	.word	0x08015074
 800ae68:	08015090 	.word	0x08015090

0800ae6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d106      	bne.n	800ae88 <tcp_next_iss+0x1c>
 800ae7a:	4b0a      	ldr	r3, [pc, #40]	@ (800aea4 <tcp_next_iss+0x38>)
 800ae7c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ae80:	4909      	ldr	r1, [pc, #36]	@ (800aea8 <tcp_next_iss+0x3c>)
 800ae82:	480a      	ldr	r0, [pc, #40]	@ (800aeac <tcp_next_iss+0x40>)
 800ae84:	f007 ff24 	bl	8012cd0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae88:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <tcp_next_iss+0x44>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	4b09      	ldr	r3, [pc, #36]	@ (800aeb4 <tcp_next_iss+0x48>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4413      	add	r3, r2
 800ae92:	4a07      	ldr	r2, [pc, #28]	@ (800aeb0 <tcp_next_iss+0x44>)
 800ae94:	6013      	str	r3, [r2, #0]
  return iss;
 800ae96:	4b06      	ldr	r3, [pc, #24]	@ (800aeb0 <tcp_next_iss+0x44>)
 800ae98:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}
 800aea2:	bf00      	nop
 800aea4:	080149b8 	.word	0x080149b8
 800aea8:	080150a8 	.word	0x080150a8
 800aeac:	080149fc 	.word	0x080149fc
 800aeb0:	20000014 	.word	0x20000014
 800aeb4:	200076f4 	.word	0x200076f4

0800aeb8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b086      	sub	sp, #24
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
 800aec4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d106      	bne.n	800aeda <tcp_eff_send_mss_netif+0x22>
 800aecc:	4b14      	ldr	r3, [pc, #80]	@ (800af20 <tcp_eff_send_mss_netif+0x68>)
 800aece:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800aed2:	4914      	ldr	r1, [pc, #80]	@ (800af24 <tcp_eff_send_mss_netif+0x6c>)
 800aed4:	4814      	ldr	r0, [pc, #80]	@ (800af28 <tcp_eff_send_mss_netif+0x70>)
 800aed6:	f007 fefb 	bl	8012cd0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d101      	bne.n	800aee4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aee0:	89fb      	ldrh	r3, [r7, #14]
 800aee2:	e019      	b.n	800af18 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aee8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aeea:	8afb      	ldrh	r3, [r7, #22]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d012      	beq.n	800af16 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aef0:	2328      	movs	r3, #40	@ 0x28
 800aef2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aef4:	8afa      	ldrh	r2, [r7, #22]
 800aef6:	8abb      	ldrh	r3, [r7, #20]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d904      	bls.n	800af06 <tcp_eff_send_mss_netif+0x4e>
 800aefc:	8afa      	ldrh	r2, [r7, #22]
 800aefe:	8abb      	ldrh	r3, [r7, #20]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	b29b      	uxth	r3, r3
 800af04:	e000      	b.n	800af08 <tcp_eff_send_mss_netif+0x50>
 800af06:	2300      	movs	r3, #0
 800af08:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800af0a:	8a7a      	ldrh	r2, [r7, #18]
 800af0c:	89fb      	ldrh	r3, [r7, #14]
 800af0e:	4293      	cmp	r3, r2
 800af10:	bf28      	it	cs
 800af12:	4613      	movcs	r3, r2
 800af14:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800af16:	89fb      	ldrh	r3, [r7, #14]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	080149b8 	.word	0x080149b8
 800af24:	080150c4 	.word	0x080150c4
 800af28:	080149fc 	.word	0x080149fc

0800af2c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d119      	bne.n	800af74 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800af40:	4b10      	ldr	r3, [pc, #64]	@ (800af84 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800af42:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800af46:	4910      	ldr	r1, [pc, #64]	@ (800af88 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800af48:	4810      	ldr	r0, [pc, #64]	@ (800af8c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800af4a:	f007 fec1 	bl	8012cd0 <iprintf>

  while (pcb != NULL) {
 800af4e:	e011      	b.n	800af74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d108      	bne.n	800af6e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7fe fd1a 	bl	800999c <tcp_abort>
      pcb = next;
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	e002      	b.n	800af74 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1ea      	bne.n	800af50 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800af7a:	bf00      	nop
 800af7c:	bf00      	nop
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	080149b8 	.word	0x080149b8
 800af88:	080150ec 	.word	0x080150ec
 800af8c:	080149fc 	.word	0x080149fc

0800af90 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d02a      	beq.n	800aff6 <tcp_netif_ip_addr_changed+0x66>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d026      	beq.n	800aff6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800afa8:	4b15      	ldr	r3, [pc, #84]	@ (800b000 <tcp_netif_ip_addr_changed+0x70>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff ffbc 	bl	800af2c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800afb4:	4b13      	ldr	r3, [pc, #76]	@ (800b004 <tcp_netif_ip_addr_changed+0x74>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4619      	mov	r1, r3
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ffb6 	bl	800af2c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d017      	beq.n	800aff6 <tcp_netif_ip_addr_changed+0x66>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d013      	beq.n	800aff6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afce:	4b0e      	ldr	r3, [pc, #56]	@ (800b008 <tcp_netif_ip_addr_changed+0x78>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e00c      	b.n	800aff0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	429a      	cmp	r2, r3
 800afe0:	d103      	bne.n	800afea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1ef      	bne.n	800afd6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800aff6:	bf00      	nop
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	20007700 	.word	0x20007700
 800b004:	200076f8 	.word	0x200076f8
 800b008:	200076fc 	.word	0x200076fc

0800b00c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d007      	beq.n	800b02c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fb4d 	bl	800a6c0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b034:	b590      	push	{r4, r7, lr}
 800b036:	b08d      	sub	sp, #52	@ 0x34
 800b038:	af04      	add	r7, sp, #16
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d105      	bne.n	800b050 <tcp_input+0x1c>
 800b044:	4b9b      	ldr	r3, [pc, #620]	@ (800b2b4 <tcp_input+0x280>)
 800b046:	2283      	movs	r2, #131	@ 0x83
 800b048:	499b      	ldr	r1, [pc, #620]	@ (800b2b8 <tcp_input+0x284>)
 800b04a:	489c      	ldr	r0, [pc, #624]	@ (800b2bc <tcp_input+0x288>)
 800b04c:	f007 fe40 	bl	8012cd0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	4a9a      	ldr	r2, [pc, #616]	@ (800b2c0 <tcp_input+0x28c>)
 800b056:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	895b      	ldrh	r3, [r3, #10]
 800b05c:	2b13      	cmp	r3, #19
 800b05e:	f240 83d1 	bls.w	800b804 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b062:	4b98      	ldr	r3, [pc, #608]	@ (800b2c4 <tcp_input+0x290>)
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	4a97      	ldr	r2, [pc, #604]	@ (800b2c4 <tcp_input+0x290>)
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	4611      	mov	r1, r2
 800b06c:	4618      	mov	r0, r3
 800b06e:	f006 f99d 	bl	80113ac <ip4_addr_isbroadcast_u32>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 83c7 	bne.w	800b808 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b07a:	4b92      	ldr	r3, [pc, #584]	@ (800b2c4 <tcp_input+0x290>)
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b082:	2be0      	cmp	r3, #224	@ 0xe0
 800b084:	f000 83c0 	beq.w	800b808 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b088:	4b8d      	ldr	r3, [pc, #564]	@ (800b2c0 <tcp_input+0x28c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	899b      	ldrh	r3, [r3, #12]
 800b08e:	b29b      	uxth	r3, r3
 800b090:	4618      	mov	r0, r3
 800b092:	f7fc fa31 	bl	80074f8 <lwip_htons>
 800b096:	4603      	mov	r3, r0
 800b098:	0b1b      	lsrs	r3, r3, #12
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b0a2:	7cbb      	ldrb	r3, [r7, #18]
 800b0a4:	2b13      	cmp	r3, #19
 800b0a6:	f240 83b1 	bls.w	800b80c <tcp_input+0x7d8>
 800b0aa:	7cbb      	ldrb	r3, [r7, #18]
 800b0ac:	b29a      	uxth	r2, r3
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	891b      	ldrh	r3, [r3, #8]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	f200 83aa 	bhi.w	800b80c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b0b8:	7cbb      	ldrb	r3, [r7, #18]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3b14      	subs	r3, #20
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	4b81      	ldr	r3, [pc, #516]	@ (800b2c8 <tcp_input+0x294>)
 800b0c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b0c4:	4b81      	ldr	r3, [pc, #516]	@ (800b2cc <tcp_input+0x298>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	895a      	ldrh	r2, [r3, #10]
 800b0ce:	7cbb      	ldrb	r3, [r7, #18]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d309      	bcc.n	800b0ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b0d6:	4b7c      	ldr	r3, [pc, #496]	@ (800b2c8 <tcp_input+0x294>)
 800b0d8:	881a      	ldrh	r2, [r3, #0]
 800b0da:	4b7d      	ldr	r3, [pc, #500]	@ (800b2d0 <tcp_input+0x29c>)
 800b0dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0de:	7cbb      	ldrb	r3, [r7, #18]
 800b0e0:	4619      	mov	r1, r3
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	f7fd fe64 	bl	8008db0 <pbuf_remove_header>
 800b0e8:	e04e      	b.n	800b188 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d105      	bne.n	800b0fe <tcp_input+0xca>
 800b0f2:	4b70      	ldr	r3, [pc, #448]	@ (800b2b4 <tcp_input+0x280>)
 800b0f4:	22c2      	movs	r2, #194	@ 0xc2
 800b0f6:	4977      	ldr	r1, [pc, #476]	@ (800b2d4 <tcp_input+0x2a0>)
 800b0f8:	4870      	ldr	r0, [pc, #448]	@ (800b2bc <tcp_input+0x288>)
 800b0fa:	f007 fde9 	bl	8012cd0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b0fe:	2114      	movs	r1, #20
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fd fe55 	bl	8008db0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	895a      	ldrh	r2, [r3, #10]
 800b10a:	4b71      	ldr	r3, [pc, #452]	@ (800b2d0 <tcp_input+0x29c>)
 800b10c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b10e:	4b6e      	ldr	r3, [pc, #440]	@ (800b2c8 <tcp_input+0x294>)
 800b110:	881a      	ldrh	r2, [r3, #0]
 800b112:	4b6f      	ldr	r3, [pc, #444]	@ (800b2d0 <tcp_input+0x29c>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b11a:	4b6d      	ldr	r3, [pc, #436]	@ (800b2d0 <tcp_input+0x29c>)
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7fd fe45 	bl	8008db0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	895b      	ldrh	r3, [r3, #10]
 800b12c:	8a3a      	ldrh	r2, [r7, #16]
 800b12e:	429a      	cmp	r2, r3
 800b130:	f200 836e 	bhi.w	800b810 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	4a64      	ldr	r2, [pc, #400]	@ (800b2cc <tcp_input+0x298>)
 800b13c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	8a3a      	ldrh	r2, [r7, #16]
 800b144:	4611      	mov	r1, r2
 800b146:	4618      	mov	r0, r3
 800b148:	f7fd fe32 	bl	8008db0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	891a      	ldrh	r2, [r3, #8]
 800b150:	8a3b      	ldrh	r3, [r7, #16]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	b29a      	uxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	895b      	ldrh	r3, [r3, #10]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d005      	beq.n	800b16e <tcp_input+0x13a>
 800b162:	4b54      	ldr	r3, [pc, #336]	@ (800b2b4 <tcp_input+0x280>)
 800b164:	22df      	movs	r2, #223	@ 0xdf
 800b166:	495c      	ldr	r1, [pc, #368]	@ (800b2d8 <tcp_input+0x2a4>)
 800b168:	4854      	ldr	r0, [pc, #336]	@ (800b2bc <tcp_input+0x288>)
 800b16a:	f007 fdb1 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	891a      	ldrh	r2, [r3, #8]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	891b      	ldrh	r3, [r3, #8]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d005      	beq.n	800b188 <tcp_input+0x154>
 800b17c:	4b4d      	ldr	r3, [pc, #308]	@ (800b2b4 <tcp_input+0x280>)
 800b17e:	22e0      	movs	r2, #224	@ 0xe0
 800b180:	4956      	ldr	r1, [pc, #344]	@ (800b2dc <tcp_input+0x2a8>)
 800b182:	484e      	ldr	r0, [pc, #312]	@ (800b2bc <tcp_input+0x288>)
 800b184:	f007 fda4 	bl	8012cd0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b188:	4b4d      	ldr	r3, [pc, #308]	@ (800b2c0 <tcp_input+0x28c>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	881b      	ldrh	r3, [r3, #0]
 800b18e:	b29b      	uxth	r3, r3
 800b190:	4a4b      	ldr	r2, [pc, #300]	@ (800b2c0 <tcp_input+0x28c>)
 800b192:	6814      	ldr	r4, [r2, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7fc f9af 	bl	80074f8 <lwip_htons>
 800b19a:	4603      	mov	r3, r0
 800b19c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b19e:	4b48      	ldr	r3, [pc, #288]	@ (800b2c0 <tcp_input+0x28c>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	885b      	ldrh	r3, [r3, #2]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	4a46      	ldr	r2, [pc, #280]	@ (800b2c0 <tcp_input+0x28c>)
 800b1a8:	6814      	ldr	r4, [r2, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fc f9a4 	bl	80074f8 <lwip_htons>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b1b4:	4b42      	ldr	r3, [pc, #264]	@ (800b2c0 <tcp_input+0x28c>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	4a41      	ldr	r2, [pc, #260]	@ (800b2c0 <tcp_input+0x28c>)
 800b1bc:	6814      	ldr	r4, [r2, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fc f9ae 	bl	8007520 <lwip_htonl>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	6063      	str	r3, [r4, #4]
 800b1c8:	6863      	ldr	r3, [r4, #4]
 800b1ca:	4a45      	ldr	r2, [pc, #276]	@ (800b2e0 <tcp_input+0x2ac>)
 800b1cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b1ce:	4b3c      	ldr	r3, [pc, #240]	@ (800b2c0 <tcp_input+0x28c>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	4a3a      	ldr	r2, [pc, #232]	@ (800b2c0 <tcp_input+0x28c>)
 800b1d6:	6814      	ldr	r4, [r2, #0]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fc f9a1 	bl	8007520 <lwip_htonl>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	60a3      	str	r3, [r4, #8]
 800b1e2:	68a3      	ldr	r3, [r4, #8]
 800b1e4:	4a3f      	ldr	r2, [pc, #252]	@ (800b2e4 <tcp_input+0x2b0>)
 800b1e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b1e8:	4b35      	ldr	r3, [pc, #212]	@ (800b2c0 <tcp_input+0x28c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	89db      	ldrh	r3, [r3, #14]
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4a33      	ldr	r2, [pc, #204]	@ (800b2c0 <tcp_input+0x28c>)
 800b1f2:	6814      	ldr	r4, [r2, #0]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7fc f97f 	bl	80074f8 <lwip_htons>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b1fe:	4b30      	ldr	r3, [pc, #192]	@ (800b2c0 <tcp_input+0x28c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	899b      	ldrh	r3, [r3, #12]
 800b204:	b29b      	uxth	r3, r3
 800b206:	4618      	mov	r0, r3
 800b208:	f7fc f976 	bl	80074f8 <lwip_htons>
 800b20c:	4603      	mov	r3, r0
 800b20e:	b2db      	uxtb	r3, r3
 800b210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b214:	b2da      	uxtb	r2, r3
 800b216:	4b34      	ldr	r3, [pc, #208]	@ (800b2e8 <tcp_input+0x2b4>)
 800b218:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	891a      	ldrh	r2, [r3, #8]
 800b21e:	4b33      	ldr	r3, [pc, #204]	@ (800b2ec <tcp_input+0x2b8>)
 800b220:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b222:	4b31      	ldr	r3, [pc, #196]	@ (800b2e8 <tcp_input+0x2b4>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	f003 0303 	and.w	r3, r3, #3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00c      	beq.n	800b248 <tcp_input+0x214>
    tcplen++;
 800b22e:	4b2f      	ldr	r3, [pc, #188]	@ (800b2ec <tcp_input+0x2b8>)
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	3301      	adds	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	4b2d      	ldr	r3, [pc, #180]	@ (800b2ec <tcp_input+0x2b8>)
 800b238:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	891a      	ldrh	r2, [r3, #8]
 800b23e:	4b2b      	ldr	r3, [pc, #172]	@ (800b2ec <tcp_input+0x2b8>)
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	f200 82e6 	bhi.w	800b814 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b248:	2300      	movs	r3, #0
 800b24a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b24c:	4b28      	ldr	r3, [pc, #160]	@ (800b2f0 <tcp_input+0x2bc>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	61fb      	str	r3, [r7, #28]
 800b252:	e09d      	b.n	800b390 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b254:	69fb      	ldr	r3, [r7, #28]
 800b256:	7d1b      	ldrb	r3, [r3, #20]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d105      	bne.n	800b268 <tcp_input+0x234>
 800b25c:	4b15      	ldr	r3, [pc, #84]	@ (800b2b4 <tcp_input+0x280>)
 800b25e:	22fb      	movs	r2, #251	@ 0xfb
 800b260:	4924      	ldr	r1, [pc, #144]	@ (800b2f4 <tcp_input+0x2c0>)
 800b262:	4816      	ldr	r0, [pc, #88]	@ (800b2bc <tcp_input+0x288>)
 800b264:	f007 fd34 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	7d1b      	ldrb	r3, [r3, #20]
 800b26c:	2b0a      	cmp	r3, #10
 800b26e:	d105      	bne.n	800b27c <tcp_input+0x248>
 800b270:	4b10      	ldr	r3, [pc, #64]	@ (800b2b4 <tcp_input+0x280>)
 800b272:	22fc      	movs	r2, #252	@ 0xfc
 800b274:	4920      	ldr	r1, [pc, #128]	@ (800b2f8 <tcp_input+0x2c4>)
 800b276:	4811      	ldr	r0, [pc, #68]	@ (800b2bc <tcp_input+0x288>)
 800b278:	f007 fd2a 	bl	8012cd0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	7d1b      	ldrb	r3, [r3, #20]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d105      	bne.n	800b290 <tcp_input+0x25c>
 800b284:	4b0b      	ldr	r3, [pc, #44]	@ (800b2b4 <tcp_input+0x280>)
 800b286:	22fd      	movs	r2, #253	@ 0xfd
 800b288:	491c      	ldr	r1, [pc, #112]	@ (800b2fc <tcp_input+0x2c8>)
 800b28a:	480c      	ldr	r0, [pc, #48]	@ (800b2bc <tcp_input+0x288>)
 800b28c:	f007 fd20 	bl	8012cd0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	7a1b      	ldrb	r3, [r3, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d033      	beq.n	800b300 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	7a1a      	ldrb	r2, [r3, #8]
 800b29c:	4b09      	ldr	r3, [pc, #36]	@ (800b2c4 <tcp_input+0x290>)
 800b29e:	685b      	ldr	r3, [r3, #4]
 800b2a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d029      	beq.n	800b300 <tcp_input+0x2cc>
      prev = pcb;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	61bb      	str	r3, [r7, #24]
      continue;
 800b2b0:	e06b      	b.n	800b38a <tcp_input+0x356>
 800b2b2:	bf00      	nop
 800b2b4:	08015120 	.word	0x08015120
 800b2b8:	08015154 	.word	0x08015154
 800b2bc:	0801516c 	.word	0x0801516c
 800b2c0:	2000771c 	.word	0x2000771c
 800b2c4:	200045f4 	.word	0x200045f4
 800b2c8:	20007720 	.word	0x20007720
 800b2cc:	20007724 	.word	0x20007724
 800b2d0:	20007722 	.word	0x20007722
 800b2d4:	08015194 	.word	0x08015194
 800b2d8:	080151a4 	.word	0x080151a4
 800b2dc:	080151b0 	.word	0x080151b0
 800b2e0:	2000772c 	.word	0x2000772c
 800b2e4:	20007730 	.word	0x20007730
 800b2e8:	20007738 	.word	0x20007738
 800b2ec:	20007736 	.word	0x20007736
 800b2f0:	20007700 	.word	0x20007700
 800b2f4:	080151d0 	.word	0x080151d0
 800b2f8:	080151f8 	.word	0x080151f8
 800b2fc:	08015224 	.word	0x08015224
    }

    if (pcb->remote_port == tcphdr->src &&
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	8b1a      	ldrh	r2, [r3, #24]
 800b304:	4b72      	ldr	r3, [pc, #456]	@ (800b4d0 <tcp_input+0x49c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d13a      	bne.n	800b386 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	8ada      	ldrh	r2, [r3, #22]
 800b314:	4b6e      	ldr	r3, [pc, #440]	@ (800b4d0 <tcp_input+0x49c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	885b      	ldrh	r3, [r3, #2]
 800b31a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d132      	bne.n	800b386 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	4b6b      	ldr	r3, [pc, #428]	@ (800b4d4 <tcp_input+0x4a0>)
 800b326:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b328:	429a      	cmp	r2, r3
 800b32a:	d12c      	bne.n	800b386 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	4b68      	ldr	r3, [pc, #416]	@ (800b4d4 <tcp_input+0x4a0>)
 800b332:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b334:	429a      	cmp	r2, r3
 800b336:	d126      	bne.n	800b386 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d106      	bne.n	800b350 <tcp_input+0x31c>
 800b342:	4b65      	ldr	r3, [pc, #404]	@ (800b4d8 <tcp_input+0x4a4>)
 800b344:	f240 120d 	movw	r2, #269	@ 0x10d
 800b348:	4964      	ldr	r1, [pc, #400]	@ (800b4dc <tcp_input+0x4a8>)
 800b34a:	4865      	ldr	r0, [pc, #404]	@ (800b4e0 <tcp_input+0x4ac>)
 800b34c:	f007 fcc0 	bl	8012cd0 <iprintf>
      if (prev != NULL) {
 800b350:	69bb      	ldr	r3, [r7, #24]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00a      	beq.n	800b36c <tcp_input+0x338>
        prev->next = pcb->next;
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	68da      	ldr	r2, [r3, #12]
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b35e:	4b61      	ldr	r3, [pc, #388]	@ (800b4e4 <tcp_input+0x4b0>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b366:	4a5f      	ldr	r2, [pc, #380]	@ (800b4e4 <tcp_input+0x4b0>)
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	429a      	cmp	r2, r3
 800b374:	d111      	bne.n	800b39a <tcp_input+0x366>
 800b376:	4b58      	ldr	r3, [pc, #352]	@ (800b4d8 <tcp_input+0x4a4>)
 800b378:	f240 1215 	movw	r2, #277	@ 0x115
 800b37c:	495a      	ldr	r1, [pc, #360]	@ (800b4e8 <tcp_input+0x4b4>)
 800b37e:	4858      	ldr	r0, [pc, #352]	@ (800b4e0 <tcp_input+0x4ac>)
 800b380:	f007 fca6 	bl	8012cd0 <iprintf>
      break;
 800b384:	e009      	b.n	800b39a <tcp_input+0x366>
    }
    prev = pcb;
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	61fb      	str	r3, [r7, #28]
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	2b00      	cmp	r3, #0
 800b394:	f47f af5e 	bne.w	800b254 <tcp_input+0x220>
 800b398:	e000      	b.n	800b39c <tcp_input+0x368>
      break;
 800b39a:	bf00      	nop
  }

  if (pcb == NULL) {
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	f040 80aa 	bne.w	800b4f8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b3a4:	4b51      	ldr	r3, [pc, #324]	@ (800b4ec <tcp_input+0x4b8>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	61fb      	str	r3, [r7, #28]
 800b3aa:	e03f      	b.n	800b42c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	7d1b      	ldrb	r3, [r3, #20]
 800b3b0:	2b0a      	cmp	r3, #10
 800b3b2:	d006      	beq.n	800b3c2 <tcp_input+0x38e>
 800b3b4:	4b48      	ldr	r3, [pc, #288]	@ (800b4d8 <tcp_input+0x4a4>)
 800b3b6:	f240 121f 	movw	r2, #287	@ 0x11f
 800b3ba:	494d      	ldr	r1, [pc, #308]	@ (800b4f0 <tcp_input+0x4bc>)
 800b3bc:	4848      	ldr	r0, [pc, #288]	@ (800b4e0 <tcp_input+0x4ac>)
 800b3be:	f007 fc87 	bl	8012cd0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	7a1b      	ldrb	r3, [r3, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d009      	beq.n	800b3de <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	7a1a      	ldrb	r2, [r3, #8]
 800b3ce:	4b41      	ldr	r3, [pc, #260]	@ (800b4d4 <tcp_input+0x4a0>)
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d122      	bne.n	800b424 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	8b1a      	ldrh	r2, [r3, #24]
 800b3e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b4d0 <tcp_input+0x49c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d11b      	bne.n	800b426 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	8ada      	ldrh	r2, [r3, #22]
 800b3f2:	4b37      	ldr	r3, [pc, #220]	@ (800b4d0 <tcp_input+0x49c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	885b      	ldrh	r3, [r3, #2]
 800b3f8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d113      	bne.n	800b426 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	4b34      	ldr	r3, [pc, #208]	@ (800b4d4 <tcp_input+0x4a0>)
 800b404:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b406:	429a      	cmp	r2, r3
 800b408:	d10d      	bne.n	800b426 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b31      	ldr	r3, [pc, #196]	@ (800b4d4 <tcp_input+0x4a0>)
 800b410:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b412:	429a      	cmp	r2, r3
 800b414:	d107      	bne.n	800b426 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b416:	69f8      	ldr	r0, [r7, #28]
 800b418:	f000 fb56 	bl	800bac8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f7fd fd4d 	bl	8008ebc <pbuf_free>
        return;
 800b422:	e1fd      	b.n	800b820 <tcp_input+0x7ec>
        continue;
 800b424:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	61fb      	str	r3, [r7, #28]
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1bc      	bne.n	800b3ac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b432:	2300      	movs	r3, #0
 800b434:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b436:	4b2f      	ldr	r3, [pc, #188]	@ (800b4f4 <tcp_input+0x4c0>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e02a      	b.n	800b494 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	7a1b      	ldrb	r3, [r3, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00c      	beq.n	800b460 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	7a1a      	ldrb	r2, [r3, #8]
 800b44a:	4b22      	ldr	r3, [pc, #136]	@ (800b4d4 <tcp_input+0x4a0>)
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b452:	3301      	adds	r3, #1
 800b454:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b456:	429a      	cmp	r2, r3
 800b458:	d002      	beq.n	800b460 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	61bb      	str	r3, [r7, #24]
        continue;
 800b45e:	e016      	b.n	800b48e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	8ada      	ldrh	r2, [r3, #22]
 800b464:	4b1a      	ldr	r3, [pc, #104]	@ (800b4d0 <tcp_input+0x49c>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	885b      	ldrh	r3, [r3, #2]
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d10c      	bne.n	800b48a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b470:	697b      	ldr	r3, [r7, #20]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4b17      	ldr	r3, [pc, #92]	@ (800b4d4 <tcp_input+0x4a0>)
 800b476:	695b      	ldr	r3, [r3, #20]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d00f      	beq.n	800b49c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00d      	beq.n	800b49e <tcp_input+0x46a>
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	68db      	ldr	r3, [r3, #12]
 800b492:	617b      	str	r3, [r7, #20]
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d1d1      	bne.n	800b43e <tcp_input+0x40a>
 800b49a:	e000      	b.n	800b49e <tcp_input+0x46a>
            break;
 800b49c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b49e:	697b      	ldr	r3, [r7, #20]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d029      	beq.n	800b4f8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d00a      	beq.n	800b4c0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	68da      	ldr	r2, [r3, #12]
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b4b2:	4b10      	ldr	r3, [pc, #64]	@ (800b4f4 <tcp_input+0x4c0>)
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b4ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b4f4 <tcp_input+0x4c0>)
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b4c0:	6978      	ldr	r0, [r7, #20]
 800b4c2:	f000 fa03 	bl	800b8cc <tcp_listen_input>
      }
      pbuf_free(p);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7fd fcf8 	bl	8008ebc <pbuf_free>
      return;
 800b4cc:	e1a8      	b.n	800b820 <tcp_input+0x7ec>
 800b4ce:	bf00      	nop
 800b4d0:	2000771c 	.word	0x2000771c
 800b4d4:	200045f4 	.word	0x200045f4
 800b4d8:	08015120 	.word	0x08015120
 800b4dc:	0801524c 	.word	0x0801524c
 800b4e0:	0801516c 	.word	0x0801516c
 800b4e4:	20007700 	.word	0x20007700
 800b4e8:	08015278 	.word	0x08015278
 800b4ec:	20007704 	.word	0x20007704
 800b4f0:	080152a4 	.word	0x080152a4
 800b4f4:	200076fc 	.word	0x200076fc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 8158 	beq.w	800b7b0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b500:	4b95      	ldr	r3, [pc, #596]	@ (800b758 <tcp_input+0x724>)
 800b502:	2200      	movs	r2, #0
 800b504:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	891a      	ldrh	r2, [r3, #8]
 800b50a:	4b93      	ldr	r3, [pc, #588]	@ (800b758 <tcp_input+0x724>)
 800b50c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b50e:	4a92      	ldr	r2, [pc, #584]	@ (800b758 <tcp_input+0x724>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b514:	4b91      	ldr	r3, [pc, #580]	@ (800b75c <tcp_input+0x728>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a8f      	ldr	r2, [pc, #572]	@ (800b758 <tcp_input+0x724>)
 800b51a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b51c:	4b90      	ldr	r3, [pc, #576]	@ (800b760 <tcp_input+0x72c>)
 800b51e:	2200      	movs	r2, #0
 800b520:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b522:	4b90      	ldr	r3, [pc, #576]	@ (800b764 <tcp_input+0x730>)
 800b524:	2200      	movs	r2, #0
 800b526:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b528:	4b8f      	ldr	r3, [pc, #572]	@ (800b768 <tcp_input+0x734>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b52e:	4b8f      	ldr	r3, [pc, #572]	@ (800b76c <tcp_input+0x738>)
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	2b00      	cmp	r3, #0
 800b538:	d006      	beq.n	800b548 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	7b5b      	ldrb	r3, [r3, #13]
 800b53e:	f043 0301 	orr.w	r3, r3, #1
 800b542:	b2da      	uxtb	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d017      	beq.n	800b580 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b550:	69f8      	ldr	r0, [r7, #28]
 800b552:	f7ff f839 	bl	800a5c8 <tcp_process_refused_data>
 800b556:	4603      	mov	r3, r0
 800b558:	f113 0f0d 	cmn.w	r3, #13
 800b55c:	d007      	beq.n	800b56e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00c      	beq.n	800b580 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b566:	4b82      	ldr	r3, [pc, #520]	@ (800b770 <tcp_input+0x73c>)
 800b568:	881b      	ldrh	r3, [r3, #0]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d008      	beq.n	800b580 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b572:	2b00      	cmp	r3, #0
 800b574:	f040 80e3 	bne.w	800b73e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b578:	69f8      	ldr	r0, [r7, #28]
 800b57a:	f003 fe1f 	bl	800f1bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b57e:	e0de      	b.n	800b73e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b580:	4a7c      	ldr	r2, [pc, #496]	@ (800b774 <tcp_input+0x740>)
 800b582:	69fb      	ldr	r3, [r7, #28]
 800b584:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b586:	69f8      	ldr	r0, [r7, #28]
 800b588:	f000 fb18 	bl	800bbbc <tcp_process>
 800b58c:	4603      	mov	r3, r0
 800b58e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b590:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b594:	f113 0f0d 	cmn.w	r3, #13
 800b598:	f000 80d3 	beq.w	800b742 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b59c:	4b71      	ldr	r3, [pc, #452]	@ (800b764 <tcp_input+0x730>)
 800b59e:	781b      	ldrb	r3, [r3, #0]
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d015      	beq.n	800b5d4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d008      	beq.n	800b5c4 <tcp_input+0x590>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b8:	69fa      	ldr	r2, [r7, #28]
 800b5ba:	6912      	ldr	r2, [r2, #16]
 800b5bc:	f06f 010d 	mvn.w	r1, #13
 800b5c0:	4610      	mov	r0, r2
 800b5c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b5c4:	69f9      	ldr	r1, [r7, #28]
 800b5c6:	486c      	ldr	r0, [pc, #432]	@ (800b778 <tcp_input+0x744>)
 800b5c8:	f7ff fbbc 	bl	800ad44 <tcp_pcb_remove>
        tcp_free(pcb);
 800b5cc:	69f8      	ldr	r0, [r7, #28]
 800b5ce:	f7fd fefd 	bl	80093cc <tcp_free>
 800b5d2:	e0da      	b.n	800b78a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b5d8:	4b63      	ldr	r3, [pc, #396]	@ (800b768 <tcp_input+0x734>)
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d01d      	beq.n	800b61c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b5e0:	4b61      	ldr	r3, [pc, #388]	@ (800b768 <tcp_input+0x734>)
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d00a      	beq.n	800b606 <tcp_input+0x5d2>
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5f6:	69fa      	ldr	r2, [r7, #28]
 800b5f8:	6910      	ldr	r0, [r2, #16]
 800b5fa:	89fa      	ldrh	r2, [r7, #14]
 800b5fc:	69f9      	ldr	r1, [r7, #28]
 800b5fe:	4798      	blx	r3
 800b600:	4603      	mov	r3, r0
 800b602:	74fb      	strb	r3, [r7, #19]
 800b604:	e001      	b.n	800b60a <tcp_input+0x5d6>
 800b606:	2300      	movs	r3, #0
 800b608:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b60a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b60e:	f113 0f0d 	cmn.w	r3, #13
 800b612:	f000 8098 	beq.w	800b746 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b616:	4b54      	ldr	r3, [pc, #336]	@ (800b768 <tcp_input+0x734>)
 800b618:	2200      	movs	r2, #0
 800b61a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b61c:	69f8      	ldr	r0, [r7, #28]
 800b61e:	f000 f915 	bl	800b84c <tcp_input_delayed_close>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8090 	bne.w	800b74a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b62a:	4b4d      	ldr	r3, [pc, #308]	@ (800b760 <tcp_input+0x72c>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d041      	beq.n	800b6b6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b636:	2b00      	cmp	r3, #0
 800b638:	d006      	beq.n	800b648 <tcp_input+0x614>
 800b63a:	4b50      	ldr	r3, [pc, #320]	@ (800b77c <tcp_input+0x748>)
 800b63c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b640:	494f      	ldr	r1, [pc, #316]	@ (800b780 <tcp_input+0x74c>)
 800b642:	4850      	ldr	r0, [pc, #320]	@ (800b784 <tcp_input+0x750>)
 800b644:	f007 fb44 	bl	8012cd0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	8b5b      	ldrh	r3, [r3, #26]
 800b64c:	f003 0310 	and.w	r3, r3, #16
 800b650:	2b00      	cmp	r3, #0
 800b652:	d008      	beq.n	800b666 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b654:	4b42      	ldr	r3, [pc, #264]	@ (800b760 <tcp_input+0x72c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4618      	mov	r0, r3
 800b65a:	f7fd fc2f 	bl	8008ebc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b65e:	69f8      	ldr	r0, [r7, #28]
 800b660:	f7fe f99c 	bl	800999c <tcp_abort>
            goto aborted;
 800b664:	e091      	b.n	800b78a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b666:	69fb      	ldr	r3, [r7, #28]
 800b668:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00c      	beq.n	800b68a <tcp_input+0x656>
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	4b39      	ldr	r3, [pc, #228]	@ (800b760 <tcp_input+0x72c>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	2300      	movs	r3, #0
 800b680:	69f9      	ldr	r1, [r7, #28]
 800b682:	47a0      	blx	r4
 800b684:	4603      	mov	r3, r0
 800b686:	74fb      	strb	r3, [r7, #19]
 800b688:	e008      	b.n	800b69c <tcp_input+0x668>
 800b68a:	4b35      	ldr	r3, [pc, #212]	@ (800b760 <tcp_input+0x72c>)
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	2300      	movs	r3, #0
 800b690:	69f9      	ldr	r1, [r7, #28]
 800b692:	2000      	movs	r0, #0
 800b694:	f7ff f88c 	bl	800a7b0 <tcp_recv_null>
 800b698:	4603      	mov	r3, r0
 800b69a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b69c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6a0:	f113 0f0d 	cmn.w	r3, #13
 800b6a4:	d053      	beq.n	800b74e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b6a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b6ae:	4b2c      	ldr	r3, [pc, #176]	@ (800b760 <tcp_input+0x72c>)
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b6b6:	4b2b      	ldr	r3, [pc, #172]	@ (800b764 <tcp_input+0x730>)
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d030      	beq.n	800b724 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d009      	beq.n	800b6de <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6ce:	7b5a      	ldrb	r2, [r3, #13]
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6d4:	f042 0220 	orr.w	r2, r2, #32
 800b6d8:	b2d2      	uxtb	r2, r2
 800b6da:	735a      	strb	r2, [r3, #13]
 800b6dc:	e022      	b.n	800b724 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6e2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b6e6:	d005      	beq.n	800b6f4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <tcp_input+0x6e2>
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	6918      	ldr	r0, [r3, #16]
 800b708:	2300      	movs	r3, #0
 800b70a:	2200      	movs	r2, #0
 800b70c:	69f9      	ldr	r1, [r7, #28]
 800b70e:	47a0      	blx	r4
 800b710:	4603      	mov	r3, r0
 800b712:	74fb      	strb	r3, [r7, #19]
 800b714:	e001      	b.n	800b71a <tcp_input+0x6e6>
 800b716:	2300      	movs	r3, #0
 800b718:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b71a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b71e:	f113 0f0d 	cmn.w	r3, #13
 800b722:	d016      	beq.n	800b752 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b724:	4b13      	ldr	r3, [pc, #76]	@ (800b774 <tcp_input+0x740>)
 800b726:	2200      	movs	r2, #0
 800b728:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b72a:	69f8      	ldr	r0, [r7, #28]
 800b72c:	f000 f88e 	bl	800b84c <tcp_input_delayed_close>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d128      	bne.n	800b788 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b736:	69f8      	ldr	r0, [r7, #28]
 800b738:	f002 ff18 	bl	800e56c <tcp_output>
 800b73c:	e025      	b.n	800b78a <tcp_input+0x756>
        goto aborted;
 800b73e:	bf00      	nop
 800b740:	e023      	b.n	800b78a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b742:	bf00      	nop
 800b744:	e021      	b.n	800b78a <tcp_input+0x756>
              goto aborted;
 800b746:	bf00      	nop
 800b748:	e01f      	b.n	800b78a <tcp_input+0x756>
          goto aborted;
 800b74a:	bf00      	nop
 800b74c:	e01d      	b.n	800b78a <tcp_input+0x756>
            goto aborted;
 800b74e:	bf00      	nop
 800b750:	e01b      	b.n	800b78a <tcp_input+0x756>
              goto aborted;
 800b752:	bf00      	nop
 800b754:	e019      	b.n	800b78a <tcp_input+0x756>
 800b756:	bf00      	nop
 800b758:	2000770c 	.word	0x2000770c
 800b75c:	2000771c 	.word	0x2000771c
 800b760:	2000773c 	.word	0x2000773c
 800b764:	20007739 	.word	0x20007739
 800b768:	20007734 	.word	0x20007734
 800b76c:	20007738 	.word	0x20007738
 800b770:	20007736 	.word	0x20007736
 800b774:	20007740 	.word	0x20007740
 800b778:	20007700 	.word	0x20007700
 800b77c:	08015120 	.word	0x08015120
 800b780:	080152d4 	.word	0x080152d4
 800b784:	0801516c 	.word	0x0801516c
          goto aborted;
 800b788:	bf00      	nop
    tcp_input_pcb = NULL;
 800b78a:	4b27      	ldr	r3, [pc, #156]	@ (800b828 <tcp_input+0x7f4>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b790:	4b26      	ldr	r3, [pc, #152]	@ (800b82c <tcp_input+0x7f8>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b796:	4b26      	ldr	r3, [pc, #152]	@ (800b830 <tcp_input+0x7fc>)
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d03f      	beq.n	800b81e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b79e:	4b24      	ldr	r3, [pc, #144]	@ (800b830 <tcp_input+0x7fc>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd fb8a 	bl	8008ebc <pbuf_free>
      inseg.p = NULL;
 800b7a8:	4b21      	ldr	r3, [pc, #132]	@ (800b830 <tcp_input+0x7fc>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b7ae:	e036      	b.n	800b81e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b7b0:	4b20      	ldr	r3, [pc, #128]	@ (800b834 <tcp_input+0x800>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	899b      	ldrh	r3, [r3, #12]
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fb fe9d 	bl	80074f8 <lwip_htons>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 0304 	and.w	r3, r3, #4
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d118      	bne.n	800b7fc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b838 <tcp_input+0x804>)
 800b7cc:	6819      	ldr	r1, [r3, #0]
 800b7ce:	4b1b      	ldr	r3, [pc, #108]	@ (800b83c <tcp_input+0x808>)
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b840 <tcp_input+0x80c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7da:	4b16      	ldr	r3, [pc, #88]	@ (800b834 <tcp_input+0x800>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7de:	885b      	ldrh	r3, [r3, #2]
 800b7e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7e2:	4a14      	ldr	r2, [pc, #80]	@ (800b834 <tcp_input+0x800>)
 800b7e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7e6:	8812      	ldrh	r2, [r2, #0]
 800b7e8:	b292      	uxth	r2, r2
 800b7ea:	9202      	str	r2, [sp, #8]
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	4b15      	ldr	r3, [pc, #84]	@ (800b844 <tcp_input+0x810>)
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	4b15      	ldr	r3, [pc, #84]	@ (800b848 <tcp_input+0x814>)
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	f003 fc8e 	bl	800f118 <tcp_rst>
    pbuf_free(p);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7fd fb5d 	bl	8008ebc <pbuf_free>
  return;
 800b802:	e00c      	b.n	800b81e <tcp_input+0x7ea>
    goto dropped;
 800b804:	bf00      	nop
 800b806:	e006      	b.n	800b816 <tcp_input+0x7e2>
    goto dropped;
 800b808:	bf00      	nop
 800b80a:	e004      	b.n	800b816 <tcp_input+0x7e2>
    goto dropped;
 800b80c:	bf00      	nop
 800b80e:	e002      	b.n	800b816 <tcp_input+0x7e2>
      goto dropped;
 800b810:	bf00      	nop
 800b812:	e000      	b.n	800b816 <tcp_input+0x7e2>
      goto dropped;
 800b814:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7fd fb50 	bl	8008ebc <pbuf_free>
 800b81c:	e000      	b.n	800b820 <tcp_input+0x7ec>
  return;
 800b81e:	bf00      	nop
}
 800b820:	3724      	adds	r7, #36	@ 0x24
 800b822:	46bd      	mov	sp, r7
 800b824:	bd90      	pop	{r4, r7, pc}
 800b826:	bf00      	nop
 800b828:	20007740 	.word	0x20007740
 800b82c:	2000773c 	.word	0x2000773c
 800b830:	2000770c 	.word	0x2000770c
 800b834:	2000771c 	.word	0x2000771c
 800b838:	20007730 	.word	0x20007730
 800b83c:	20007736 	.word	0x20007736
 800b840:	2000772c 	.word	0x2000772c
 800b844:	20004604 	.word	0x20004604
 800b848:	20004608 	.word	0x20004608

0800b84c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d106      	bne.n	800b868 <tcp_input_delayed_close+0x1c>
 800b85a:	4b17      	ldr	r3, [pc, #92]	@ (800b8b8 <tcp_input_delayed_close+0x6c>)
 800b85c:	f240 225a 	movw	r2, #602	@ 0x25a
 800b860:	4916      	ldr	r1, [pc, #88]	@ (800b8bc <tcp_input_delayed_close+0x70>)
 800b862:	4817      	ldr	r0, [pc, #92]	@ (800b8c0 <tcp_input_delayed_close+0x74>)
 800b864:	f007 fa34 	bl	8012cd0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b868:	4b16      	ldr	r3, [pc, #88]	@ (800b8c4 <tcp_input_delayed_close+0x78>)
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	f003 0310 	and.w	r3, r3, #16
 800b870:	2b00      	cmp	r3, #0
 800b872:	d01c      	beq.n	800b8ae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	8b5b      	ldrh	r3, [r3, #26]
 800b878:	f003 0310 	and.w	r3, r3, #16
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10d      	bne.n	800b89c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b886:	2b00      	cmp	r3, #0
 800b888:	d008      	beq.n	800b89c <tcp_input_delayed_close+0x50>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	6912      	ldr	r2, [r2, #16]
 800b894:	f06f 010e 	mvn.w	r1, #14
 800b898:	4610      	mov	r0, r2
 800b89a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b89c:	6879      	ldr	r1, [r7, #4]
 800b89e:	480a      	ldr	r0, [pc, #40]	@ (800b8c8 <tcp_input_delayed_close+0x7c>)
 800b8a0:	f7ff fa50 	bl	800ad44 <tcp_pcb_remove>
    tcp_free(pcb);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7fd fd91 	bl	80093cc <tcp_free>
    return 1;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e000      	b.n	800b8b0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}
 800b8b8:	08015120 	.word	0x08015120
 800b8bc:	080152f0 	.word	0x080152f0
 800b8c0:	0801516c 	.word	0x0801516c
 800b8c4:	20007739 	.word	0x20007739
 800b8c8:	20007700 	.word	0x20007700

0800b8cc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b08b      	sub	sp, #44	@ 0x2c
 800b8d0:	af04      	add	r7, sp, #16
 800b8d2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b8d4:	4b6f      	ldr	r3, [pc, #444]	@ (800ba94 <tcp_listen_input+0x1c8>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	f040 80d2 	bne.w	800ba86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <tcp_listen_input+0x2a>
 800b8e8:	4b6b      	ldr	r3, [pc, #428]	@ (800ba98 <tcp_listen_input+0x1cc>)
 800b8ea:	f240 2281 	movw	r2, #641	@ 0x281
 800b8ee:	496b      	ldr	r1, [pc, #428]	@ (800ba9c <tcp_listen_input+0x1d0>)
 800b8f0:	486b      	ldr	r0, [pc, #428]	@ (800baa0 <tcp_listen_input+0x1d4>)
 800b8f2:	f007 f9ed 	bl	8012cd0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b8f6:	4b67      	ldr	r3, [pc, #412]	@ (800ba94 <tcp_listen_input+0x1c8>)
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	f003 0310 	and.w	r3, r3, #16
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d019      	beq.n	800b936 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b902:	4b68      	ldr	r3, [pc, #416]	@ (800baa4 <tcp_listen_input+0x1d8>)
 800b904:	6819      	ldr	r1, [r3, #0]
 800b906:	4b68      	ldr	r3, [pc, #416]	@ (800baa8 <tcp_listen_input+0x1dc>)
 800b908:	881b      	ldrh	r3, [r3, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	4b67      	ldr	r3, [pc, #412]	@ (800baac <tcp_listen_input+0x1e0>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b912:	4b67      	ldr	r3, [pc, #412]	@ (800bab0 <tcp_listen_input+0x1e4>)
 800b914:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b916:	885b      	ldrh	r3, [r3, #2]
 800b918:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b91a:	4a65      	ldr	r2, [pc, #404]	@ (800bab0 <tcp_listen_input+0x1e4>)
 800b91c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b91e:	8812      	ldrh	r2, [r2, #0]
 800b920:	b292      	uxth	r2, r2
 800b922:	9202      	str	r2, [sp, #8]
 800b924:	9301      	str	r3, [sp, #4]
 800b926:	4b63      	ldr	r3, [pc, #396]	@ (800bab4 <tcp_listen_input+0x1e8>)
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	4b63      	ldr	r3, [pc, #396]	@ (800bab8 <tcp_listen_input+0x1ec>)
 800b92c:	4602      	mov	r2, r0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f003 fbf2 	bl	800f118 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b934:	e0a9      	b.n	800ba8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b936:	4b57      	ldr	r3, [pc, #348]	@ (800ba94 <tcp_listen_input+0x1c8>)
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	f003 0302 	and.w	r3, r3, #2
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 80a3 	beq.w	800ba8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	7d5b      	ldrb	r3, [r3, #21]
 800b948:	4618      	mov	r0, r3
 800b94a:	f7ff f855 	bl	800a9f8 <tcp_alloc>
 800b94e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d111      	bne.n	800b97a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00a      	beq.n	800b974 <tcp_listen_input+0xa8>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	6910      	ldr	r0, [r2, #16]
 800b966:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b96a:	2100      	movs	r1, #0
 800b96c:	4798      	blx	r3
 800b96e:	4603      	mov	r3, r0
 800b970:	73bb      	strb	r3, [r7, #14]
      return;
 800b972:	e08b      	b.n	800ba8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b974:	23f0      	movs	r3, #240	@ 0xf0
 800b976:	73bb      	strb	r3, [r7, #14]
      return;
 800b978:	e088      	b.n	800ba8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b97a:	4b50      	ldr	r3, [pc, #320]	@ (800babc <tcp_listen_input+0x1f0>)
 800b97c:	695a      	ldr	r2, [r3, #20]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b982:	4b4e      	ldr	r3, [pc, #312]	@ (800babc <tcp_listen_input+0x1f0>)
 800b984:	691a      	ldr	r2, [r3, #16]
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	8ada      	ldrh	r2, [r3, #22]
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b992:	4b47      	ldr	r3, [pc, #284]	@ (800bab0 <tcp_listen_input+0x1e4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	881b      	ldrh	r3, [r3, #0]
 800b998:	b29a      	uxth	r2, r3
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	2203      	movs	r2, #3
 800b9a2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b9a4:	4b41      	ldr	r3, [pc, #260]	@ (800baac <tcp_listen_input+0x1e0>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b9b6:	6978      	ldr	r0, [r7, #20]
 800b9b8:	f7ff fa58 	bl	800ae6c <tcp_next_iss>
 800b9bc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	693a      	ldr	r2, [r7, #16]
 800b9c2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	693a      	ldr	r2, [r7, #16]
 800b9ce:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	693a      	ldr	r2, [r7, #16]
 800b9d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b9d6:	4b35      	ldr	r3, [pc, #212]	@ (800baac <tcp_listen_input+0x1e0>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	1e5a      	subs	r2, r3, #1
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	691a      	ldr	r2, [r3, #16]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	7a5b      	ldrb	r3, [r3, #9]
 800b9f2:	f003 030c 	and.w	r3, r3, #12
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	7a1a      	ldrb	r2, [r3, #8]
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ba04:	4b2e      	ldr	r3, [pc, #184]	@ (800bac0 <tcp_listen_input+0x1f4>)
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	60da      	str	r2, [r3, #12]
 800ba0c:	4a2c      	ldr	r2, [pc, #176]	@ (800bac0 <tcp_listen_input+0x1f4>)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	f003 fd43 	bl	800f49c <tcp_timer_needed>
 800ba16:	4b2b      	ldr	r3, [pc, #172]	@ (800bac4 <tcp_listen_input+0x1f8>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ba1c:	6978      	ldr	r0, [r7, #20]
 800ba1e:	f001 fd89 	bl	800d534 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ba22:	4b23      	ldr	r3, [pc, #140]	@ (800bab0 <tcp_listen_input+0x1e4>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	89db      	ldrh	r3, [r3, #14]
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	3304      	adds	r3, #4
 800ba44:	4618      	mov	r0, r3
 800ba46:	f005 f9b7 	bl	8010db8 <ip4_route>
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	3304      	adds	r3, #4
 800ba50:	461a      	mov	r2, r3
 800ba52:	4620      	mov	r0, r4
 800ba54:	f7ff fa30 	bl	800aeb8 <tcp_eff_send_mss_netif>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba60:	2112      	movs	r1, #18
 800ba62:	6978      	ldr	r0, [r7, #20]
 800ba64:	f002 fc94 	bl	800e390 <tcp_enqueue_flags>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ba6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d004      	beq.n	800ba7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ba74:	2100      	movs	r1, #0
 800ba76:	6978      	ldr	r0, [r7, #20]
 800ba78:	f7fd fed2 	bl	8009820 <tcp_abandon>
      return;
 800ba7c:	e006      	b.n	800ba8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ba7e:	6978      	ldr	r0, [r7, #20]
 800ba80:	f002 fd74 	bl	800e56c <tcp_output>
  return;
 800ba84:	e001      	b.n	800ba8a <tcp_listen_input+0x1be>
    return;
 800ba86:	bf00      	nop
 800ba88:	e000      	b.n	800ba8c <tcp_listen_input+0x1c0>
  return;
 800ba8a:	bf00      	nop
}
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd90      	pop	{r4, r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20007738 	.word	0x20007738
 800ba98:	08015120 	.word	0x08015120
 800ba9c:	08015318 	.word	0x08015318
 800baa0:	0801516c 	.word	0x0801516c
 800baa4:	20007730 	.word	0x20007730
 800baa8:	20007736 	.word	0x20007736
 800baac:	2000772c 	.word	0x2000772c
 800bab0:	2000771c 	.word	0x2000771c
 800bab4:	20004604 	.word	0x20004604
 800bab8:	20004608 	.word	0x20004608
 800babc:	200045f4 	.word	0x200045f4
 800bac0:	20007700 	.word	0x20007700
 800bac4:	20007708 	.word	0x20007708

0800bac8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b086      	sub	sp, #24
 800bacc:	af04      	add	r7, sp, #16
 800bace:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bad0:	4b2f      	ldr	r3, [pc, #188]	@ (800bb90 <tcp_timewait_input+0xc8>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d153      	bne.n	800bb84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d106      	bne.n	800baf0 <tcp_timewait_input+0x28>
 800bae2:	4b2c      	ldr	r3, [pc, #176]	@ (800bb94 <tcp_timewait_input+0xcc>)
 800bae4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800bae8:	492b      	ldr	r1, [pc, #172]	@ (800bb98 <tcp_timewait_input+0xd0>)
 800baea:	482c      	ldr	r0, [pc, #176]	@ (800bb9c <tcp_timewait_input+0xd4>)
 800baec:	f007 f8f0 	bl	8012cd0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800baf0:	4b27      	ldr	r3, [pc, #156]	@ (800bb90 <tcp_timewait_input+0xc8>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d02a      	beq.n	800bb52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bafc:	4b28      	ldr	r3, [pc, #160]	@ (800bba0 <tcp_timewait_input+0xd8>)
 800bafe:	681a      	ldr	r2, [r3, #0]
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	db2d      	blt.n	800bb66 <tcp_timewait_input+0x9e>
 800bb0a:	4b25      	ldr	r3, [pc, #148]	@ (800bba0 <tcp_timewait_input+0xd8>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bb16:	440b      	add	r3, r1
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	dc23      	bgt.n	800bb66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb1e:	4b21      	ldr	r3, [pc, #132]	@ (800bba4 <tcp_timewait_input+0xdc>)
 800bb20:	6819      	ldr	r1, [r3, #0]
 800bb22:	4b21      	ldr	r3, [pc, #132]	@ (800bba8 <tcp_timewait_input+0xe0>)
 800bb24:	881b      	ldrh	r3, [r3, #0]
 800bb26:	461a      	mov	r2, r3
 800bb28:	4b1d      	ldr	r3, [pc, #116]	@ (800bba0 <tcp_timewait_input+0xd8>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb2e:	4b1f      	ldr	r3, [pc, #124]	@ (800bbac <tcp_timewait_input+0xe4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb32:	885b      	ldrh	r3, [r3, #2]
 800bb34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb36:	4a1d      	ldr	r2, [pc, #116]	@ (800bbac <tcp_timewait_input+0xe4>)
 800bb38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb3a:	8812      	ldrh	r2, [r2, #0]
 800bb3c:	b292      	uxth	r2, r2
 800bb3e:	9202      	str	r2, [sp, #8]
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	4b1b      	ldr	r3, [pc, #108]	@ (800bbb0 <tcp_timewait_input+0xe8>)
 800bb44:	9300      	str	r3, [sp, #0]
 800bb46:	4b1b      	ldr	r3, [pc, #108]	@ (800bbb4 <tcp_timewait_input+0xec>)
 800bb48:	4602      	mov	r2, r0
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f003 fae4 	bl	800f118 <tcp_rst>
      return;
 800bb50:	e01b      	b.n	800bb8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bb52:	4b0f      	ldr	r3, [pc, #60]	@ (800bb90 <tcp_timewait_input+0xc8>)
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d003      	beq.n	800bb66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bb5e:	4b16      	ldr	r3, [pc, #88]	@ (800bbb8 <tcp_timewait_input+0xf0>)
 800bb60:	681a      	ldr	r2, [r3, #0]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bb66:	4b10      	ldr	r3, [pc, #64]	@ (800bba8 <tcp_timewait_input+0xe0>)
 800bb68:	881b      	ldrh	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	8b5b      	ldrh	r3, [r3, #26]
 800bb72:	f043 0302 	orr.w	r3, r3, #2
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f002 fcf5 	bl	800e56c <tcp_output>
  }
  return;
 800bb82:	e001      	b.n	800bb88 <tcp_timewait_input+0xc0>
    return;
 800bb84:	bf00      	nop
 800bb86:	e000      	b.n	800bb8a <tcp_timewait_input+0xc2>
  return;
 800bb88:	bf00      	nop
}
 800bb8a:	3708      	adds	r7, #8
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	20007738 	.word	0x20007738
 800bb94:	08015120 	.word	0x08015120
 800bb98:	08015338 	.word	0x08015338
 800bb9c:	0801516c 	.word	0x0801516c
 800bba0:	2000772c 	.word	0x2000772c
 800bba4:	20007730 	.word	0x20007730
 800bba8:	20007736 	.word	0x20007736
 800bbac:	2000771c 	.word	0x2000771c
 800bbb0:	20004604 	.word	0x20004604
 800bbb4:	20004608 	.word	0x20004608
 800bbb8:	200076f4 	.word	0x200076f4

0800bbbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b08d      	sub	sp, #52	@ 0x34
 800bbc0:	af04      	add	r7, sp, #16
 800bbc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <tcp_process+0x24>
 800bbd2:	4b9c      	ldr	r3, [pc, #624]	@ (800be44 <tcp_process+0x288>)
 800bbd4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800bbd8:	499b      	ldr	r1, [pc, #620]	@ (800be48 <tcp_process+0x28c>)
 800bbda:	489c      	ldr	r0, [pc, #624]	@ (800be4c <tcp_process+0x290>)
 800bbdc:	f007 f878 	bl	8012cd0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bbe0:	4b9b      	ldr	r3, [pc, #620]	@ (800be50 <tcp_process+0x294>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d04e      	beq.n	800bc8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d1b      	ldrb	r3, [r3, #20]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	d108      	bne.n	800bc06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbf8:	4b96      	ldr	r3, [pc, #600]	@ (800be54 <tcp_process+0x298>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d123      	bne.n	800bc48 <tcp_process+0x8c>
        acceptable = 1;
 800bc00:	2301      	movs	r3, #1
 800bc02:	76fb      	strb	r3, [r7, #27]
 800bc04:	e020      	b.n	800bc48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc0a:	4b93      	ldr	r3, [pc, #588]	@ (800be58 <tcp_process+0x29c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d102      	bne.n	800bc18 <tcp_process+0x5c>
        acceptable = 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	76fb      	strb	r3, [r7, #27]
 800bc16:	e017      	b.n	800bc48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc18:	4b8f      	ldr	r3, [pc, #572]	@ (800be58 <tcp_process+0x29c>)
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	db10      	blt.n	800bc48 <tcp_process+0x8c>
 800bc26:	4b8c      	ldr	r3, [pc, #560]	@ (800be58 <tcp_process+0x29c>)
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc32:	440b      	add	r3, r1
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	dc06      	bgt.n	800bc48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	8b5b      	ldrh	r3, [r3, #26]
 800bc3e:	f043 0302 	orr.w	r3, r3, #2
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bc48:	7efb      	ldrb	r3, [r7, #27]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d01b      	beq.n	800bc86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	7d1b      	ldrb	r3, [r3, #20]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <tcp_process+0xa8>
 800bc56:	4b7b      	ldr	r3, [pc, #492]	@ (800be44 <tcp_process+0x288>)
 800bc58:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800bc5c:	497f      	ldr	r1, [pc, #508]	@ (800be5c <tcp_process+0x2a0>)
 800bc5e:	487b      	ldr	r0, [pc, #492]	@ (800be4c <tcp_process+0x290>)
 800bc60:	f007 f836 	bl	8012cd0 <iprintf>
      recv_flags |= TF_RESET;
 800bc64:	4b7e      	ldr	r3, [pc, #504]	@ (800be60 <tcp_process+0x2a4>)
 800bc66:	781b      	ldrb	r3, [r3, #0]
 800bc68:	f043 0308 	orr.w	r3, r3, #8
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	4b7c      	ldr	r3, [pc, #496]	@ (800be60 <tcp_process+0x2a4>)
 800bc70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	8b5b      	ldrh	r3, [r3, #26]
 800bc76:	f023 0301 	bic.w	r3, r3, #1
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bc80:	f06f 030d 	mvn.w	r3, #13
 800bc84:	e378      	b.n	800c378 <tcp_process+0x7bc>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	e376      	b.n	800c378 <tcp_process+0x7bc>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc8a:	4b71      	ldr	r3, [pc, #452]	@ (800be50 <tcp_process+0x294>)
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d010      	beq.n	800bcb8 <tcp_process+0xfc>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7d1b      	ldrb	r3, [r3, #20]
 800bc9a:	2b02      	cmp	r3, #2
 800bc9c:	d00c      	beq.n	800bcb8 <tcp_process+0xfc>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	7d1b      	ldrb	r3, [r3, #20]
 800bca2:	2b03      	cmp	r3, #3
 800bca4:	d008      	beq.n	800bcb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	8b5b      	ldrh	r3, [r3, #26]
 800bcaa:	f043 0302 	orr.w	r3, r3, #2
 800bcae:	b29a      	uxth	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	e35f      	b.n	800c378 <tcp_process+0x7bc>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	8b5b      	ldrh	r3, [r3, #26]
 800bcbc:	f003 0310 	and.w	r3, r3, #16
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bcc4:	4b67      	ldr	r3, [pc, #412]	@ (800be64 <tcp_process+0x2a8>)
 800bcc6:	681a      	ldr	r2, [r3, #0]
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f001 fc29 	bl	800d534 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	7d1b      	ldrb	r3, [r3, #20]
 800bce6:	3b02      	subs	r3, #2
 800bce8:	2b07      	cmp	r3, #7
 800bcea:	f200 8335 	bhi.w	800c358 <tcp_process+0x79c>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <tcp_process+0x138>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd15 	.word	0x0800bd15
 800bcf8:	0800bf41 	.word	0x0800bf41
 800bcfc:	0800c0b9 	.word	0x0800c0b9
 800bd00:	0800c0e3 	.word	0x0800c0e3
 800bd04:	0800c207 	.word	0x0800c207
 800bd08:	0800c0b9 	.word	0x0800c0b9
 800bd0c:	0800c293 	.word	0x0800c293
 800bd10:	0800c323 	.word	0x0800c323
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bd14:	4b4e      	ldr	r3, [pc, #312]	@ (800be50 <tcp_process+0x294>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 0310 	and.w	r3, r3, #16
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f000 80e2 	beq.w	800bee6 <tcp_process+0x32a>
 800bd22:	4b4b      	ldr	r3, [pc, #300]	@ (800be50 <tcp_process+0x294>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f003 0302 	and.w	r3, r3, #2
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f000 80db 	beq.w	800bee6 <tcp_process+0x32a>
          && (ackno == pcb->lastack + 1)) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	4b47      	ldr	r3, [pc, #284]	@ (800be54 <tcp_process+0x298>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	429a      	cmp	r2, r3
 800bd3c:	f040 80d3 	bne.w	800bee6 <tcp_process+0x32a>
        pcb->rcv_nxt = seqno + 1;
 800bd40:	4b45      	ldr	r3, [pc, #276]	@ (800be58 <tcp_process+0x29c>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	1c5a      	adds	r2, r3, #1
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800bd52:	4b40      	ldr	r3, [pc, #256]	@ (800be54 <tcp_process+0x298>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bd5a:	4b43      	ldr	r3, [pc, #268]	@ (800be68 <tcp_process+0x2ac>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	89db      	ldrh	r3, [r3, #14]
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = 2048; // burası değişti
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd72:	4b39      	ldr	r3, [pc, #228]	@ (800be58 <tcp_process+0x29c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	1e5a      	subs	r2, r3, #1
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f005 f814 	bl	8010db8 <ip4_route>
 800bd90:	4601      	mov	r1, r0
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	3304      	adds	r3, #4
 800bd96:	461a      	mov	r2, r3
 800bd98:	4620      	mov	r0, r4
 800bd9a:	f7ff f88d 	bl	800aeb8 <tcp_eff_send_mss_netif>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	461a      	mov	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdaa:	009a      	lsls	r2, r3, #2
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	f241 111c 	movw	r1, #4380	@ 0x111c
 800bdb6:	428b      	cmp	r3, r1
 800bdb8:	bf38      	it	cc
 800bdba:	460b      	movcc	r3, r1
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d204      	bcs.n	800bdca <tcp_process+0x20e>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	e00d      	b.n	800bde6 <tcp_process+0x22a>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	f241 121c 	movw	r2, #4380	@ 0x111c
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d904      	bls.n	800bde2 <tcp_process+0x226>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bddc:	005b      	lsls	r3, r3, #1
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	e001      	b.n	800bde6 <tcp_process+0x22a>
 800bde2:	f241 131c 	movw	r3, #4380	@ 0x111c
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d106      	bne.n	800be04 <tcp_process+0x248>
 800bdf6:	4b13      	ldr	r3, [pc, #76]	@ (800be44 <tcp_process+0x288>)
 800bdf8:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800bdfc:	491b      	ldr	r1, [pc, #108]	@ (800be6c <tcp_process+0x2b0>)
 800bdfe:	4813      	ldr	r0, [pc, #76]	@ (800be4c <tcp_process+0x290>)
 800be00:	f006 ff66 	bl	8012cd0 <iprintf>
        --pcb->snd_queuelen;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be0a:	3b01      	subs	r3, #1
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be18:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d129      	bne.n	800be74 <tcp_process+0x2b8>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be24:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d106      	bne.n	800be3a <tcp_process+0x27e>
 800be2c:	4b05      	ldr	r3, [pc, #20]	@ (800be44 <tcp_process+0x288>)
 800be2e:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800be32:	490f      	ldr	r1, [pc, #60]	@ (800be70 <tcp_process+0x2b4>)
 800be34:	4805      	ldr	r0, [pc, #20]	@ (800be4c <tcp_process+0x290>)
 800be36:	f006 ff4b 	bl	8012cd0 <iprintf>
          pcb->unsent = rseg->next;
 800be3a:	69fb      	ldr	r3, [r7, #28]
 800be3c:	681a      	ldr	r2, [r3, #0]
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	66da      	str	r2, [r3, #108]	@ 0x6c
 800be42:	e01b      	b.n	800be7c <tcp_process+0x2c0>
 800be44:	08015120 	.word	0x08015120
 800be48:	08015358 	.word	0x08015358
 800be4c:	0801516c 	.word	0x0801516c
 800be50:	20007738 	.word	0x20007738
 800be54:	20007730 	.word	0x20007730
 800be58:	2000772c 	.word	0x2000772c
 800be5c:	08015374 	.word	0x08015374
 800be60:	20007739 	.word	0x20007739
 800be64:	200076f4 	.word	0x200076f4
 800be68:	2000771c 	.word	0x2000771c
 800be6c:	08015394 	.word	0x08015394
 800be70:	080153ac 	.word	0x080153ac
        } else {
          pcb->unacked = rseg->next;
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800be7c:	69f8      	ldr	r0, [r7, #28]
 800be7e:	f7fe fc34 	bl	800a6ea <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be86:	2b00      	cmp	r3, #0
 800be88:	d104      	bne.n	800be94 <tcp_process+0x2d8>
          pcb->rtime = -1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be90:	861a      	strh	r2, [r3, #48]	@ 0x30
 800be92:	e006      	b.n	800bea2 <tcp_process+0x2e6>
        } else {
          pcb->rtime = 0;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2200      	movs	r2, #0
 800be98:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00a      	beq.n	800bec2 <tcp_process+0x306>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	6910      	ldr	r0, [r2, #16]
 800beb6:	2200      	movs	r2, #0
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4798      	blx	r3
 800bebc:	4603      	mov	r3, r0
 800bebe:	76bb      	strb	r3, [r7, #26]
 800bec0:	e001      	b.n	800bec6 <tcp_process+0x30a>
 800bec2:	2300      	movs	r3, #0
 800bec4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bec6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800beca:	f113 0f0d 	cmn.w	r3, #13
 800bece:	d102      	bne.n	800bed6 <tcp_process+0x31a>
          return ERR_ABRT;
 800bed0:	f06f 030c 	mvn.w	r3, #12
 800bed4:	e250      	b.n	800c378 <tcp_process+0x7bc>
        }
        tcp_ack_now(pcb);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	8b5b      	ldrh	r3, [r3, #26]
 800beda:	f043 0302 	orr.w	r3, r3, #2
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bee4:	e23a      	b.n	800c35c <tcp_process+0x7a0>
      else if (flags & TCP_ACK) {
 800bee6:	4b98      	ldr	r3, [pc, #608]	@ (800c148 <tcp_process+0x58c>)
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	f003 0310 	and.w	r3, r3, #16
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f000 8234 	beq.w	800c35c <tcp_process+0x7a0>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bef4:	4b95      	ldr	r3, [pc, #596]	@ (800c14c <tcp_process+0x590>)
 800bef6:	6819      	ldr	r1, [r3, #0]
 800bef8:	4b95      	ldr	r3, [pc, #596]	@ (800c150 <tcp_process+0x594>)
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	461a      	mov	r2, r3
 800befe:	4b95      	ldr	r3, [pc, #596]	@ (800c154 <tcp_process+0x598>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf04:	4b94      	ldr	r3, [pc, #592]	@ (800c158 <tcp_process+0x59c>)
 800bf06:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf08:	885b      	ldrh	r3, [r3, #2]
 800bf0a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf0c:	4a92      	ldr	r2, [pc, #584]	@ (800c158 <tcp_process+0x59c>)
 800bf0e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf10:	8812      	ldrh	r2, [r2, #0]
 800bf12:	b292      	uxth	r2, r2
 800bf14:	9202      	str	r2, [sp, #8]
 800bf16:	9301      	str	r3, [sp, #4]
 800bf18:	4b90      	ldr	r3, [pc, #576]	@ (800c15c <tcp_process+0x5a0>)
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	4b90      	ldr	r3, [pc, #576]	@ (800c160 <tcp_process+0x5a4>)
 800bf1e:	4602      	mov	r2, r0
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f003 f8f9 	bl	800f118 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf2c:	2b05      	cmp	r3, #5
 800bf2e:	f200 8215 	bhi.w	800c35c <tcp_process+0x7a0>
          pcb->rtime = 0;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f002 feb5 	bl	800eca8 <tcp_rexmit_rto>
      break;
 800bf3e:	e20d      	b.n	800c35c <tcp_process+0x7a0>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bf40:	4b81      	ldr	r3, [pc, #516]	@ (800c148 <tcp_process+0x58c>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 0310 	and.w	r3, r3, #16
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 80a1 	beq.w	800c090 <tcp_process+0x4d4>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf4e:	4b7f      	ldr	r3, [pc, #508]	@ (800c14c <tcp_process+0x590>)
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf56:	1ad3      	subs	r3, r2, r3
 800bf58:	3b01      	subs	r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	db7e      	blt.n	800c05c <tcp_process+0x4a0>
 800bf5e:	4b7b      	ldr	r3, [pc, #492]	@ (800c14c <tcp_process+0x590>)
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dc77      	bgt.n	800c05c <tcp_process+0x4a0>
          pcb->state = ESTABLISHED;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2204      	movs	r2, #4
 800bf70:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d102      	bne.n	800bf80 <tcp_process+0x3c4>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bf7a:	23fa      	movs	r3, #250	@ 0xfa
 800bf7c:	76bb      	strb	r3, [r7, #26]
 800bf7e:	e01d      	b.n	800bfbc <tcp_process+0x400>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d106      	bne.n	800bf98 <tcp_process+0x3dc>
 800bf8a:	4b76      	ldr	r3, [pc, #472]	@ (800c164 <tcp_process+0x5a8>)
 800bf8c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800bf90:	4975      	ldr	r1, [pc, #468]	@ (800c168 <tcp_process+0x5ac>)
 800bf92:	4876      	ldr	r0, [pc, #472]	@ (800c16c <tcp_process+0x5b0>)
 800bf94:	f006 fe9c 	bl	8012cd0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf9c:	699b      	ldr	r3, [r3, #24]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <tcp_process+0x3fc>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfa6:	699b      	ldr	r3, [r3, #24]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	6910      	ldr	r0, [r2, #16]
 800bfac:	2200      	movs	r2, #0
 800bfae:	6879      	ldr	r1, [r7, #4]
 800bfb0:	4798      	blx	r3
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	76bb      	strb	r3, [r7, #26]
 800bfb6:	e001      	b.n	800bfbc <tcp_process+0x400>
 800bfb8:	23f0      	movs	r3, #240	@ 0xf0
 800bfba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bfbc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00a      	beq.n	800bfda <tcp_process+0x41e>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bfc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfc8:	f113 0f0d 	cmn.w	r3, #13
 800bfcc:	d002      	beq.n	800bfd4 <tcp_process+0x418>
              tcp_abort(pcb);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f7fd fce4 	bl	800999c <tcp_abort>
            }
            return ERR_ABRT;
 800bfd4:	f06f 030c 	mvn.w	r3, #12
 800bfd8:	e1ce      	b.n	800c378 <tcp_process+0x7bc>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fae0 	bl	800c5a0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bfe0:	4b63      	ldr	r3, [pc, #396]	@ (800c170 <tcp_process+0x5b4>)
 800bfe2:	881b      	ldrh	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <tcp_process+0x438>
            recv_acked--;
 800bfe8:	4b61      	ldr	r3, [pc, #388]	@ (800c170 <tcp_process+0x5b4>)
 800bfea:	881b      	ldrh	r3, [r3, #0]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	4b5f      	ldr	r3, [pc, #380]	@ (800c170 <tcp_process+0x5b4>)
 800bff2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bff8:	009a      	lsls	r2, r3, #2
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bffe:	005b      	lsls	r3, r3, #1
 800c000:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c004:	428b      	cmp	r3, r1
 800c006:	bf38      	it	cc
 800c008:	460b      	movcc	r3, r1
 800c00a:	429a      	cmp	r2, r3
 800c00c:	d204      	bcs.n	800c018 <tcp_process+0x45c>
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	b29b      	uxth	r3, r3
 800c016:	e00d      	b.n	800c034 <tcp_process+0x478>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c01c:	005b      	lsls	r3, r3, #1
 800c01e:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c022:	4293      	cmp	r3, r2
 800c024:	d904      	bls.n	800c030 <tcp_process+0x474>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c02a:	005b      	lsls	r3, r3, #1
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	e001      	b.n	800c034 <tcp_process+0x478>
 800c030:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c03a:	4b4e      	ldr	r3, [pc, #312]	@ (800c174 <tcp_process+0x5b8>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	f003 0320 	and.w	r3, r3, #32
 800c042:	2b00      	cmp	r3, #0
 800c044:	d037      	beq.n	800c0b6 <tcp_process+0x4fa>
            tcp_ack_now(pcb);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	8b5b      	ldrh	r3, [r3, #26]
 800c04a:	f043 0302 	orr.w	r3, r3, #2
 800c04e:	b29a      	uxth	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2207      	movs	r2, #7
 800c058:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c05a:	e02c      	b.n	800c0b6 <tcp_process+0x4fa>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c05c:	4b3b      	ldr	r3, [pc, #236]	@ (800c14c <tcp_process+0x590>)
 800c05e:	6819      	ldr	r1, [r3, #0]
 800c060:	4b3b      	ldr	r3, [pc, #236]	@ (800c150 <tcp_process+0x594>)
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	461a      	mov	r2, r3
 800c066:	4b3b      	ldr	r3, [pc, #236]	@ (800c154 <tcp_process+0x598>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c06c:	4b3a      	ldr	r3, [pc, #232]	@ (800c158 <tcp_process+0x59c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c074:	4a38      	ldr	r2, [pc, #224]	@ (800c158 <tcp_process+0x59c>)
 800c076:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c078:	8812      	ldrh	r2, [r2, #0]
 800c07a:	b292      	uxth	r2, r2
 800c07c:	9202      	str	r2, [sp, #8]
 800c07e:	9301      	str	r3, [sp, #4]
 800c080:	4b36      	ldr	r3, [pc, #216]	@ (800c15c <tcp_process+0x5a0>)
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	4b36      	ldr	r3, [pc, #216]	@ (800c160 <tcp_process+0x5a4>)
 800c086:	4602      	mov	r2, r0
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f003 f845 	bl	800f118 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c08e:	e167      	b.n	800c360 <tcp_process+0x7a4>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c090:	4b2d      	ldr	r3, [pc, #180]	@ (800c148 <tcp_process+0x58c>)
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	f003 0302 	and.w	r3, r3, #2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8161 	beq.w	800c360 <tcp_process+0x7a4>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0a2:	1e5a      	subs	r2, r3, #1
 800c0a4:	4b2b      	ldr	r3, [pc, #172]	@ (800c154 <tcp_process+0x598>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	f040 8159 	bne.w	800c360 <tcp_process+0x7a4>
        tcp_rexmit(pcb);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f002 fe1c 	bl	800ecec <tcp_rexmit>
      break;
 800c0b4:	e154      	b.n	800c360 <tcp_process+0x7a4>
 800c0b6:	e153      	b.n	800c360 <tcp_process+0x7a4>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fa71 	bl	800c5a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c0be:	4b2d      	ldr	r3, [pc, #180]	@ (800c174 <tcp_process+0x5b8>)
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 0320 	and.w	r3, r3, #32
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 814c 	beq.w	800c364 <tcp_process+0x7a8>
        tcp_ack_now(pcb);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8b5b      	ldrh	r3, [r3, #26]
 800c0d0:	f043 0302 	orr.w	r3, r3, #2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2207      	movs	r2, #7
 800c0de:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0e0:	e140      	b.n	800c364 <tcp_process+0x7a8>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fa5c 	bl	800c5a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0e8:	4b22      	ldr	r3, [pc, #136]	@ (800c174 <tcp_process+0x5b8>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	f003 0320 	and.w	r3, r3, #32
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d071      	beq.n	800c1d8 <tcp_process+0x61c>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0f4:	4b14      	ldr	r3, [pc, #80]	@ (800c148 <tcp_process+0x58c>)
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	f003 0310 	and.w	r3, r3, #16
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d060      	beq.n	800c1c2 <tcp_process+0x606>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c104:	4b11      	ldr	r3, [pc, #68]	@ (800c14c <tcp_process+0x590>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d15a      	bne.n	800c1c2 <tcp_process+0x606>
            pcb->unsent == NULL) {
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c110:	2b00      	cmp	r3, #0
 800c112:	d156      	bne.n	800c1c2 <tcp_process+0x606>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8b5b      	ldrh	r3, [r3, #26]
 800c118:	f043 0302 	orr.w	r3, r3, #2
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7fe fdbe 	bl	800aca4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c128:	4b13      	ldr	r3, [pc, #76]	@ (800c178 <tcp_process+0x5bc>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	429a      	cmp	r2, r3
 800c130:	d105      	bne.n	800c13e <tcp_process+0x582>
 800c132:	4b11      	ldr	r3, [pc, #68]	@ (800c178 <tcp_process+0x5bc>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68db      	ldr	r3, [r3, #12]
 800c138:	4a0f      	ldr	r2, [pc, #60]	@ (800c178 <tcp_process+0x5bc>)
 800c13a:	6013      	str	r3, [r2, #0]
 800c13c:	e02e      	b.n	800c19c <tcp_process+0x5e0>
 800c13e:	4b0e      	ldr	r3, [pc, #56]	@ (800c178 <tcp_process+0x5bc>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	617b      	str	r3, [r7, #20]
 800c144:	e027      	b.n	800c196 <tcp_process+0x5da>
 800c146:	bf00      	nop
 800c148:	20007738 	.word	0x20007738
 800c14c:	20007730 	.word	0x20007730
 800c150:	20007736 	.word	0x20007736
 800c154:	2000772c 	.word	0x2000772c
 800c158:	2000771c 	.word	0x2000771c
 800c15c:	20004604 	.word	0x20004604
 800c160:	20004608 	.word	0x20004608
 800c164:	08015120 	.word	0x08015120
 800c168:	080153c0 	.word	0x080153c0
 800c16c:	0801516c 	.word	0x0801516c
 800c170:	20007734 	.word	0x20007734
 800c174:	20007739 	.word	0x20007739
 800c178:	20007700 	.word	0x20007700
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d104      	bne.n	800c190 <tcp_process+0x5d4>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	60da      	str	r2, [r3, #12]
 800c18e:	e005      	b.n	800c19c <tcp_process+0x5e0>
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	617b      	str	r3, [r7, #20]
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d1ef      	bne.n	800c17c <tcp_process+0x5c0>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	60da      	str	r2, [r3, #12]
 800c1a2:	4b77      	ldr	r3, [pc, #476]	@ (800c380 <tcp_process+0x7c4>)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	220a      	movs	r2, #10
 800c1ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c1ae:	4b75      	ldr	r3, [pc, #468]	@ (800c384 <tcp_process+0x7c8>)
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60da      	str	r2, [r3, #12]
 800c1b6:	4a73      	ldr	r2, [pc, #460]	@ (800c384 <tcp_process+0x7c8>)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6013      	str	r3, [r2, #0]
 800c1bc:	f003 f96e 	bl	800f49c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c1c0:	e0d2      	b.n	800c368 <tcp_process+0x7ac>
          tcp_ack_now(pcb);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	8b5b      	ldrh	r3, [r3, #26]
 800c1c6:	f043 0302 	orr.w	r3, r3, #2
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2208      	movs	r2, #8
 800c1d4:	751a      	strb	r2, [r3, #20]
      break;
 800c1d6:	e0c7      	b.n	800c368 <tcp_process+0x7ac>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1d8:	4b6b      	ldr	r3, [pc, #428]	@ (800c388 <tcp_process+0x7cc>)
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	f003 0310 	and.w	r3, r3, #16
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 80c1 	beq.w	800c368 <tcp_process+0x7ac>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1ea:	4b68      	ldr	r3, [pc, #416]	@ (800c38c <tcp_process+0x7d0>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	f040 80ba 	bne.w	800c368 <tcp_process+0x7ac>
                 pcb->unsent == NULL) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f040 80b5 	bne.w	800c368 <tcp_process+0x7ac>
        pcb->state = FIN_WAIT_2;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2206      	movs	r2, #6
 800c202:	751a      	strb	r2, [r3, #20]
      break;
 800c204:	e0b0      	b.n	800c368 <tcp_process+0x7ac>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 f9ca 	bl	800c5a0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c20c:	4b60      	ldr	r3, [pc, #384]	@ (800c390 <tcp_process+0x7d4>)
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 80a9 	beq.w	800c36c <tcp_process+0x7b0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	8b5b      	ldrh	r3, [r3, #26]
 800c21e:	f043 0302 	orr.w	r3, r3, #2
 800c222:	b29a      	uxth	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7fe fd3b 	bl	800aca4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c22e:	4b59      	ldr	r3, [pc, #356]	@ (800c394 <tcp_process+0x7d8>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	429a      	cmp	r2, r3
 800c236:	d105      	bne.n	800c244 <tcp_process+0x688>
 800c238:	4b56      	ldr	r3, [pc, #344]	@ (800c394 <tcp_process+0x7d8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	4a55      	ldr	r2, [pc, #340]	@ (800c394 <tcp_process+0x7d8>)
 800c240:	6013      	str	r3, [r2, #0]
 800c242:	e013      	b.n	800c26c <tcp_process+0x6b0>
 800c244:	4b53      	ldr	r3, [pc, #332]	@ (800c394 <tcp_process+0x7d8>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	613b      	str	r3, [r7, #16]
 800c24a:	e00c      	b.n	800c266 <tcp_process+0x6aa>
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	429a      	cmp	r2, r3
 800c254:	d104      	bne.n	800c260 <tcp_process+0x6a4>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	60da      	str	r2, [r3, #12]
 800c25e:	e005      	b.n	800c26c <tcp_process+0x6b0>
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	613b      	str	r3, [r7, #16]
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d1ef      	bne.n	800c24c <tcp_process+0x690>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	60da      	str	r2, [r3, #12]
 800c272:	4b43      	ldr	r3, [pc, #268]	@ (800c380 <tcp_process+0x7c4>)
 800c274:	2201      	movs	r2, #1
 800c276:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	220a      	movs	r2, #10
 800c27c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c27e:	4b41      	ldr	r3, [pc, #260]	@ (800c384 <tcp_process+0x7c8>)
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	60da      	str	r2, [r3, #12]
 800c286:	4a3f      	ldr	r2, [pc, #252]	@ (800c384 <tcp_process+0x7c8>)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	f003 f906 	bl	800f49c <tcp_timer_needed>
      }
      break;
 800c290:	e06c      	b.n	800c36c <tcp_process+0x7b0>
    case CLOSING:
      tcp_receive(pcb);
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f984 	bl	800c5a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c298:	4b3b      	ldr	r3, [pc, #236]	@ (800c388 <tcp_process+0x7cc>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 0310 	and.w	r3, r3, #16
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d065      	beq.n	800c370 <tcp_process+0x7b4>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2a8:	4b38      	ldr	r3, [pc, #224]	@ (800c38c <tcp_process+0x7d0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d15f      	bne.n	800c370 <tcp_process+0x7b4>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d15b      	bne.n	800c370 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7fe fcf3 	bl	800aca4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2be:	4b35      	ldr	r3, [pc, #212]	@ (800c394 <tcp_process+0x7d8>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d105      	bne.n	800c2d4 <tcp_process+0x718>
 800c2c8:	4b32      	ldr	r3, [pc, #200]	@ (800c394 <tcp_process+0x7d8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	4a31      	ldr	r2, [pc, #196]	@ (800c394 <tcp_process+0x7d8>)
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	e013      	b.n	800c2fc <tcp_process+0x740>
 800c2d4:	4b2f      	ldr	r3, [pc, #188]	@ (800c394 <tcp_process+0x7d8>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	60fb      	str	r3, [r7, #12]
 800c2da:	e00c      	b.n	800c2f6 <tcp_process+0x73a>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d104      	bne.n	800c2f0 <tcp_process+0x734>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68da      	ldr	r2, [r3, #12]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	60da      	str	r2, [r3, #12]
 800c2ee:	e005      	b.n	800c2fc <tcp_process+0x740>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	60fb      	str	r3, [r7, #12]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ef      	bne.n	800c2dc <tcp_process+0x720>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	60da      	str	r2, [r3, #12]
 800c302:	4b1f      	ldr	r3, [pc, #124]	@ (800c380 <tcp_process+0x7c4>)
 800c304:	2201      	movs	r2, #1
 800c306:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	220a      	movs	r2, #10
 800c30c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c30e:	4b1d      	ldr	r3, [pc, #116]	@ (800c384 <tcp_process+0x7c8>)
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	60da      	str	r2, [r3, #12]
 800c316:	4a1b      	ldr	r2, [pc, #108]	@ (800c384 <tcp_process+0x7c8>)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	f003 f8be 	bl	800f49c <tcp_timer_needed>
      }
      break;
 800c320:	e026      	b.n	800c370 <tcp_process+0x7b4>
    case LAST_ACK:
      tcp_receive(pcb);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f93c 	bl	800c5a0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c328:	4b17      	ldr	r3, [pc, #92]	@ (800c388 <tcp_process+0x7cc>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b00      	cmp	r3, #0
 800c332:	d01f      	beq.n	800c374 <tcp_process+0x7b8>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c338:	4b14      	ldr	r3, [pc, #80]	@ (800c38c <tcp_process+0x7d0>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	429a      	cmp	r2, r3
 800c33e:	d119      	bne.n	800c374 <tcp_process+0x7b8>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d115      	bne.n	800c374 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c348:	4b11      	ldr	r3, [pc, #68]	@ (800c390 <tcp_process+0x7d4>)
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	f043 0310 	orr.w	r3, r3, #16
 800c350:	b2da      	uxtb	r2, r3
 800c352:	4b0f      	ldr	r3, [pc, #60]	@ (800c390 <tcp_process+0x7d4>)
 800c354:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c356:	e00d      	b.n	800c374 <tcp_process+0x7b8>
    default:
      break;
 800c358:	bf00      	nop
 800c35a:	e00c      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c35c:	bf00      	nop
 800c35e:	e00a      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c360:	bf00      	nop
 800c362:	e008      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c364:	bf00      	nop
 800c366:	e006      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c368:	bf00      	nop
 800c36a:	e004      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c36c:	bf00      	nop
 800c36e:	e002      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c370:	bf00      	nop
 800c372:	e000      	b.n	800c376 <tcp_process+0x7ba>
      break;
 800c374:	bf00      	nop
  }
  return ERR_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3724      	adds	r7, #36	@ 0x24
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd90      	pop	{r4, r7, pc}
 800c380:	20007708 	.word	0x20007708
 800c384:	20007704 	.word	0x20007704
 800c388:	20007738 	.word	0x20007738
 800c38c:	20007730 	.word	0x20007730
 800c390:	20007739 	.word	0x20007739
 800c394:	20007700 	.word	0x20007700

0800c398 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c398:	b590      	push	{r4, r7, lr}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d106      	bne.n	800c3b6 <tcp_oos_insert_segment+0x1e>
 800c3a8:	4b3b      	ldr	r3, [pc, #236]	@ (800c498 <tcp_oos_insert_segment+0x100>)
 800c3aa:	f240 421f 	movw	r2, #1055	@ 0x41f
 800c3ae:	493b      	ldr	r1, [pc, #236]	@ (800c49c <tcp_oos_insert_segment+0x104>)
 800c3b0:	483b      	ldr	r0, [pc, #236]	@ (800c4a0 <tcp_oos_insert_segment+0x108>)
 800c3b2:	f006 fc8d 	bl	8012cd0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	899b      	ldrh	r3, [r3, #12]
 800c3bc:	b29b      	uxth	r3, r3
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fb f89a 	bl	80074f8 <lwip_htons>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	f003 0301 	and.w	r3, r3, #1
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d028      	beq.n	800c422 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c3d0:	6838      	ldr	r0, [r7, #0]
 800c3d2:	f7fe f975 	bl	800a6c0 <tcp_segs_free>
    next = NULL;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	603b      	str	r3, [r7, #0]
 800c3da:	e056      	b.n	800c48a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	899b      	ldrh	r3, [r3, #12]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fb f887 	bl	80074f8 <lwip_htons>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00d      	beq.n	800c412 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	899b      	ldrh	r3, [r3, #12]
 800c3fc:	b29c      	uxth	r4, r3
 800c3fe:	2001      	movs	r0, #1
 800c400:	f7fb f87a 	bl	80074f8 <lwip_htons>
 800c404:	4603      	mov	r3, r0
 800c406:	461a      	mov	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	4322      	orrs	r2, r4
 800c40e:	b292      	uxth	r2, r2
 800c410:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7fe f964 	bl	800a6ea <tcp_seg_free>
    while (next &&
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00e      	beq.n	800c446 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	891b      	ldrh	r3, [r3, #8]
 800c42c:	461a      	mov	r2, r3
 800c42e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a4 <tcp_oos_insert_segment+0x10c>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	441a      	add	r2, r3
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	8909      	ldrh	r1, [r1, #8]
 800c43e:	440b      	add	r3, r1
 800c440:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c442:	2b00      	cmp	r3, #0
 800c444:	daca      	bge.n	800c3dc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d01e      	beq.n	800c48a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	891b      	ldrh	r3, [r3, #8]
 800c450:	461a      	mov	r2, r3
 800c452:	4b14      	ldr	r3, [pc, #80]	@ (800c4a4 <tcp_oos_insert_segment+0x10c>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	441a      	add	r2, r3
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c460:	2b00      	cmp	r3, #0
 800c462:	dd12      	ble.n	800c48a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	b29a      	uxth	r2, r3
 800c46c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <tcp_oos_insert_segment+0x10c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	b29b      	uxth	r3, r3
 800c472:	1ad3      	subs	r3, r2, r3
 800c474:	b29a      	uxth	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	685a      	ldr	r2, [r3, #4]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	891b      	ldrh	r3, [r3, #8]
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f7fc fb93 	bl	8008bb0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	601a      	str	r2, [r3, #0]
}
 800c490:	bf00      	nop
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	bd90      	pop	{r4, r7, pc}
 800c498:	08015120 	.word	0x08015120
 800c49c:	080153e0 	.word	0x080153e0
 800c4a0:	0801516c 	.word	0x0801516c
 800c4a4:	2000772c 	.word	0x2000772c

0800c4a8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c4a8:	b5b0      	push	{r4, r5, r7, lr}
 800c4aa:	b086      	sub	sp, #24
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c4b6:	e03e      	b.n	800c536 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7fc fd86 	bl	8008fd8 <pbuf_clen>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c4d6:	8a7a      	ldrh	r2, [r7, #18]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d906      	bls.n	800c4ea <tcp_free_acked_segments+0x42>
 800c4dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c588 <tcp_free_acked_segments+0xe0>)
 800c4de:	f240 4257 	movw	r2, #1111	@ 0x457
 800c4e2:	492a      	ldr	r1, [pc, #168]	@ (800c58c <tcp_free_acked_segments+0xe4>)
 800c4e4:	482a      	ldr	r0, [pc, #168]	@ (800c590 <tcp_free_acked_segments+0xe8>)
 800c4e6:	f006 fbf3 	bl	8012cd0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800c4f0:	8a7b      	ldrh	r3, [r7, #18]
 800c4f2:	1ad3      	subs	r3, r2, r3
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	891a      	ldrh	r2, [r3, #8]
 800c500:	4b24      	ldr	r3, [pc, #144]	@ (800c594 <tcp_free_acked_segments+0xec>)
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	4413      	add	r3, r2
 800c506:	b29a      	uxth	r2, r3
 800c508:	4b22      	ldr	r3, [pc, #136]	@ (800c594 <tcp_free_acked_segments+0xec>)
 800c50a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c50c:	6978      	ldr	r0, [r7, #20]
 800c50e:	f7fe f8ec 	bl	800a6ea <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d00c      	beq.n	800c536 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d109      	bne.n	800c536 <tcp_free_acked_segments+0x8e>
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d106      	bne.n	800c536 <tcp_free_acked_segments+0x8e>
 800c528:	4b17      	ldr	r3, [pc, #92]	@ (800c588 <tcp_free_acked_segments+0xe0>)
 800c52a:	f240 4261 	movw	r2, #1121	@ 0x461
 800c52e:	491a      	ldr	r1, [pc, #104]	@ (800c598 <tcp_free_acked_segments+0xf0>)
 800c530:	4817      	ldr	r0, [pc, #92]	@ (800c590 <tcp_free_acked_segments+0xe8>)
 800c532:	f006 fbcd 	bl	8012cd0 <iprintf>
  while (seg_list != NULL &&
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d020      	beq.n	800c57e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	4618      	mov	r0, r3
 800c544:	f7fa ffec 	bl	8007520 <lwip_htonl>
 800c548:	4604      	mov	r4, r0
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	891b      	ldrh	r3, [r3, #8]
 800c54e:	461d      	mov	r5, r3
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	68db      	ldr	r3, [r3, #12]
 800c554:	899b      	ldrh	r3, [r3, #12]
 800c556:	b29b      	uxth	r3, r3
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fa ffcd 	bl	80074f8 <lwip_htons>
 800c55e:	4603      	mov	r3, r0
 800c560:	b2db      	uxtb	r3, r3
 800c562:	f003 0303 	and.w	r3, r3, #3
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <tcp_free_acked_segments+0xc6>
 800c56a:	2301      	movs	r3, #1
 800c56c:	e000      	b.n	800c570 <tcp_free_acked_segments+0xc8>
 800c56e:	2300      	movs	r3, #0
 800c570:	442b      	add	r3, r5
 800c572:	18e2      	adds	r2, r4, r3
 800c574:	4b09      	ldr	r3, [pc, #36]	@ (800c59c <tcp_free_acked_segments+0xf4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	dd9c      	ble.n	800c4b8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c57e:	68bb      	ldr	r3, [r7, #8]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bdb0      	pop	{r4, r5, r7, pc}
 800c588:	08015120 	.word	0x08015120
 800c58c:	08015408 	.word	0x08015408
 800c590:	0801516c 	.word	0x0801516c
 800c594:	20007734 	.word	0x20007734
 800c598:	08015430 	.word	0x08015430
 800c59c:	20007730 	.word	0x20007730

0800c5a0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c5a0:	b5b0      	push	{r4, r5, r7, lr}
 800c5a2:	b094      	sub	sp, #80	@ 0x50
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d106      	bne.n	800c5c0 <tcp_receive+0x20>
 800c5b2:	4b91      	ldr	r3, [pc, #580]	@ (800c7f8 <tcp_receive+0x258>)
 800c5b4:	f240 427b 	movw	r2, #1147	@ 0x47b
 800c5b8:	4990      	ldr	r1, [pc, #576]	@ (800c7fc <tcp_receive+0x25c>)
 800c5ba:	4891      	ldr	r0, [pc, #580]	@ (800c800 <tcp_receive+0x260>)
 800c5bc:	f006 fb88 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7d1b      	ldrb	r3, [r3, #20]
 800c5c4:	2b03      	cmp	r3, #3
 800c5c6:	d806      	bhi.n	800c5d6 <tcp_receive+0x36>
 800c5c8:	4b8b      	ldr	r3, [pc, #556]	@ (800c7f8 <tcp_receive+0x258>)
 800c5ca:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c5ce:	498d      	ldr	r1, [pc, #564]	@ (800c804 <tcp_receive+0x264>)
 800c5d0:	488b      	ldr	r0, [pc, #556]	@ (800c800 <tcp_receive+0x260>)
 800c5d2:	f006 fb7d 	bl	8012cd0 <iprintf>

  if (flags & TCP_ACK) {
 800c5d6:	4b8c      	ldr	r3, [pc, #560]	@ (800c808 <tcp_receive+0x268>)
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	f003 0310 	and.w	r3, r3, #16
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 8264 	beq.w	800caac <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5f0:	4413      	add	r3, r2
 800c5f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5f8:	4b84      	ldr	r3, [pc, #528]	@ (800c80c <tcp_receive+0x26c>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	1ad3      	subs	r3, r2, r3
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	db1b      	blt.n	800c63a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c606:	4b81      	ldr	r3, [pc, #516]	@ (800c80c <tcp_receive+0x26c>)
 800c608:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d106      	bne.n	800c61c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c612:	4b7f      	ldr	r3, [pc, #508]	@ (800c810 <tcp_receive+0x270>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b00      	cmp	r3, #0
 800c61a:	db0e      	blt.n	800c63a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c620:	4b7b      	ldr	r3, [pc, #492]	@ (800c810 <tcp_receive+0x270>)
 800c622:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c624:	429a      	cmp	r2, r3
 800c626:	d125      	bne.n	800c674 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c628:	4b7a      	ldr	r3, [pc, #488]	@ (800c814 <tcp_receive+0x274>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	89db      	ldrh	r3, [r3, #14]
 800c62e:	b29a      	uxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c636:	429a      	cmp	r2, r3
 800c638:	d91c      	bls.n	800c674 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c63a:	4b76      	ldr	r3, [pc, #472]	@ (800c814 <tcp_receive+0x274>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	89db      	ldrh	r3, [r3, #14]
 800c640:	b29a      	uxth	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c654:	429a      	cmp	r2, r3
 800c656:	d205      	bcs.n	800c664 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800c664:	4b69      	ldr	r3, [pc, #420]	@ (800c80c <tcp_receive+0x26c>)
 800c666:	681a      	ldr	r2, [r3, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800c66c:	4b68      	ldr	r3, [pc, #416]	@ (800c810 <tcp_receive+0x270>)
 800c66e:	681a      	ldr	r2, [r3, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c674:	4b66      	ldr	r3, [pc, #408]	@ (800c810 <tcp_receive+0x270>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b00      	cmp	r3, #0
 800c680:	dc58      	bgt.n	800c734 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c682:	4b65      	ldr	r3, [pc, #404]	@ (800c818 <tcp_receive+0x278>)
 800c684:	881b      	ldrh	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d14b      	bne.n	800c722 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800c694:	4413      	add	r3, r2
 800c696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c698:	429a      	cmp	r2, r3
 800c69a:	d142      	bne.n	800c722 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	db3d      	blt.n	800c722 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6aa:	4b59      	ldr	r3, [pc, #356]	@ (800c810 <tcp_receive+0x270>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d137      	bne.n	800c722 <tcp_receive+0x182>
              found_dupack = 1;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6bc:	2bff      	cmp	r3, #255	@ 0xff
 800c6be:	d007      	beq.n	800c6d0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6d6:	2b03      	cmp	r3, #3
 800c6d8:	d91b      	bls.n	800c712 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6e4:	4413      	add	r3, r2
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d30a      	bcc.n	800c708 <tcp_receive+0x168>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6fc:	4413      	add	r3, r2
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c706:	e004      	b.n	800c712 <tcp_receive+0x172>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c70e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d902      	bls.n	800c722 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f002 fb51 	bl	800edc4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c722:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c724:	2b00      	cmp	r3, #0
 800c726:	f040 8161 	bne.w	800c9ec <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c732:	e15b      	b.n	800c9ec <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c734:	4b36      	ldr	r3, [pc, #216]	@ (800c810 <tcp_receive+0x270>)
 800c736:	681a      	ldr	r2, [r3, #0]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	3b01      	subs	r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	f2c0 814e 	blt.w	800c9e2 <tcp_receive+0x442>
 800c746:	4b32      	ldr	r3, [pc, #200]	@ (800c810 <tcp_receive+0x270>)
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c74e:	1ad3      	subs	r3, r2, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	f300 8146 	bgt.w	800c9e2 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	8b5b      	ldrh	r3, [r3, #26]
 800c75a:	f003 0304 	and.w	r3, r3, #4
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d010      	beq.n	800c784 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	8b5b      	ldrh	r3, [r3, #26]
 800c766:	f023 0304 	bic.w	r3, r3, #4
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c792:	10db      	asrs	r3, r3, #3
 800c794:	b21b      	sxth	r3, r3
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	4413      	add	r3, r2
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	b21a      	sxth	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c7ac:	4b18      	ldr	r3, [pc, #96]	@ (800c810 <tcp_receive+0x270>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7b6:	b29b      	uxth	r3, r3
 800c7b8:	1ad3      	subs	r3, r2, r3
 800c7ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c7c4:	4b12      	ldr	r3, [pc, #72]	@ (800c810 <tcp_receive+0x270>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	7d1b      	ldrb	r3, [r3, #20]
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	f240 8097 	bls.w	800c904 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d245      	bcs.n	800c872 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	8b5b      	ldrh	r3, [r3, #26]
 800c7ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d014      	beq.n	800c81c <tcp_receive+0x27c>
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	e013      	b.n	800c81e <tcp_receive+0x27e>
 800c7f6:	bf00      	nop
 800c7f8:	08015120 	.word	0x08015120
 800c7fc:	08015450 	.word	0x08015450
 800c800:	0801516c 	.word	0x0801516c
 800c804:	0801546c 	.word	0x0801546c
 800c808:	20007738 	.word	0x20007738
 800c80c:	2000772c 	.word	0x2000772c
 800c810:	20007730 	.word	0x20007730
 800c814:	2000771c 	.word	0x2000771c
 800c818:	20007736 	.word	0x20007736
 800c81c:	2302      	movs	r3, #2
 800c81e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c822:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c826:	b29b      	uxth	r3, r3
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c82c:	fb02 f303 	mul.w	r3, r2, r3
 800c830:	b29b      	uxth	r3, r3
 800c832:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c834:	4293      	cmp	r3, r2
 800c836:	bf28      	it	cs
 800c838:	4613      	movcs	r3, r2
 800c83a:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c842:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c844:	4413      	add	r3, r2
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c84e:	429a      	cmp	r2, r3
 800c850:	d309      	bcc.n	800c866 <tcp_receive+0x2c6>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c858:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c85a:	4413      	add	r3, r2
 800c85c:	b29a      	uxth	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c864:	e04e      	b.n	800c904 <tcp_receive+0x364>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c86c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c870:	e048      	b.n	800c904 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c878:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c87a:	4413      	add	r3, r2
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c884:	429a      	cmp	r2, r3
 800c886:	d309      	bcc.n	800c89c <tcp_receive+0x2fc>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c88e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c890:	4413      	add	r3, r2
 800c892:	b29a      	uxth	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c89a:	e004      	b.n	800c8a6 <tcp_receive+0x306>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8b2:	429a      	cmp	r2, r3
 800c8b4:	d326      	bcc.n	800c904 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8d6:	4413      	add	r3, r2
 800c8d8:	b29a      	uxth	r2, r3
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d30a      	bcc.n	800c8fa <tcp_receive+0x35a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8ee:	4413      	add	r3, r2
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c8f8:	e004      	b.n	800c904 <tcp_receive+0x364>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c900:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c90c:	4a98      	ldr	r2, [pc, #608]	@ (800cb70 <tcp_receive+0x5d0>)
 800c90e:	6878      	ldr	r0, [r7, #4]
 800c910:	f7ff fdca 	bl	800c4a8 <tcp_free_acked_segments>
 800c914:	4602      	mov	r2, r0
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c922:	4a94      	ldr	r2, [pc, #592]	@ (800cb74 <tcp_receive+0x5d4>)
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7ff fdbf 	bl	800c4a8 <tcp_free_acked_segments>
 800c92a:	4602      	mov	r2, r0
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c934:	2b00      	cmp	r3, #0
 800c936:	d104      	bne.n	800c942 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c93e:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c940:	e002      	b.n	800c948 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2200      	movs	r2, #0
 800c946:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c952:	2b00      	cmp	r3, #0
 800c954:	d103      	bne.n	800c95e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c964:	4b84      	ldr	r3, [pc, #528]	@ (800cb78 <tcp_receive+0x5d8>)
 800c966:	881b      	ldrh	r3, [r3, #0]
 800c968:	4413      	add	r3, r2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	8b5b      	ldrh	r3, [r3, #26]
 800c976:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d035      	beq.n	800c9ea <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c982:	2b00      	cmp	r3, #0
 800c984:	d118      	bne.n	800c9b8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d00c      	beq.n	800c9a8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7fa fdc0 	bl	8007520 <lwip_htonl>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	dc20      	bgt.n	800c9ea <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	8b5b      	ldrh	r3, [r3, #26]
 800c9ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9b6:	e018      	b.n	800c9ea <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9c0:	68db      	ldr	r3, [r3, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fa fdab 	bl	8007520 <lwip_htonl>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	1ae3      	subs	r3, r4, r3
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	dc0b      	bgt.n	800c9ea <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	8b5b      	ldrh	r3, [r3, #26]
 800c9d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9da:	b29a      	uxth	r2, r3
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9e0:	e003      	b.n	800c9ea <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f002 fbea 	bl	800f1bc <tcp_send_empty_ack>
 800c9e8:	e000      	b.n	800c9ec <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9ea:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d05b      	beq.n	800caac <tcp_receive+0x50c>
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9f8:	4b60      	ldr	r3, [pc, #384]	@ (800cb7c <tcp_receive+0x5dc>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	da54      	bge.n	800caac <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ca02:	4b5f      	ldr	r3, [pc, #380]	@ (800cb80 <tcp_receive+0x5e0>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ca16:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca20:	10db      	asrs	r3, r3, #3
 800ca22:	b21b      	sxth	r3, r3
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca3a:	4413      	add	r3, r2
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	b21a      	sxth	r2, r3
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ca44:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	da05      	bge.n	800ca58 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ca4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca50:	425b      	negs	r3, r3
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ca58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca62:	109b      	asrs	r3, r3, #2
 800ca64:	b21b      	sxth	r3, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	b29b      	uxth	r3, r3
 800ca6c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca7c:	4413      	add	r3, r2
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	b21a      	sxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca8c:	10db      	asrs	r3, r3, #3
 800ca8e:	b21b      	sxth	r3, r3
 800ca90:	b29a      	uxth	r2, r3
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	4413      	add	r3, r2
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	b21a      	sxth	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2200      	movs	r2, #0
 800caaa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800caac:	4b35      	ldr	r3, [pc, #212]	@ (800cb84 <tcp_receive+0x5e4>)
 800caae:	881b      	ldrh	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	f000 84df 	beq.w	800d474 <tcp_receive+0xed4>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	7d1b      	ldrb	r3, [r3, #20]
 800caba:	2b06      	cmp	r3, #6
 800cabc:	f200 84da 	bhi.w	800d474 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cac4:	4b30      	ldr	r3, [pc, #192]	@ (800cb88 <tcp_receive+0x5e8>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	3b01      	subs	r3, #1
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f2c0 808f 	blt.w	800cbf0 <tcp_receive+0x650>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cad6:	4b2b      	ldr	r3, [pc, #172]	@ (800cb84 <tcp_receive+0x5e4>)
 800cad8:	881b      	ldrh	r3, [r3, #0]
 800cada:	4619      	mov	r1, r3
 800cadc:	4b2a      	ldr	r3, [pc, #168]	@ (800cb88 <tcp_receive+0x5e8>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	440b      	add	r3, r1
 800cae2:	1ad3      	subs	r3, r2, r3
 800cae4:	3301      	adds	r3, #1
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f300 8082 	bgt.w	800cbf0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800caec:	4b27      	ldr	r3, [pc, #156]	@ (800cb8c <tcp_receive+0x5ec>)
 800caee:	685b      	ldr	r3, [r3, #4]
 800caf0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800caf6:	4b24      	ldr	r3, [pc, #144]	@ (800cb88 <tcp_receive+0x5e8>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	1ad3      	subs	r3, r2, r3
 800cafc:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cafe:	4b23      	ldr	r3, [pc, #140]	@ (800cb8c <tcp_receive+0x5ec>)
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d106      	bne.n	800cb14 <tcp_receive+0x574>
 800cb06:	4b22      	ldr	r3, [pc, #136]	@ (800cb90 <tcp_receive+0x5f0>)
 800cb08:	f240 5294 	movw	r2, #1428	@ 0x594
 800cb0c:	4921      	ldr	r1, [pc, #132]	@ (800cb94 <tcp_receive+0x5f4>)
 800cb0e:	4822      	ldr	r0, [pc, #136]	@ (800cb98 <tcp_receive+0x5f8>)
 800cb10:	f006 f8de 	bl	8012cd0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cb14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb16:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d906      	bls.n	800cb2c <tcp_receive+0x58c>
 800cb1e:	4b1c      	ldr	r3, [pc, #112]	@ (800cb90 <tcp_receive+0x5f0>)
 800cb20:	f240 5295 	movw	r2, #1429	@ 0x595
 800cb24:	491d      	ldr	r1, [pc, #116]	@ (800cb9c <tcp_receive+0x5fc>)
 800cb26:	481c      	ldr	r0, [pc, #112]	@ (800cb98 <tcp_receive+0x5f8>)
 800cb28:	f006 f8d2 	bl	8012cd0 <iprintf>
      off = (u16_t)off32;
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cb32:	4b16      	ldr	r3, [pc, #88]	@ (800cb8c <tcp_receive+0x5ec>)
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	891b      	ldrh	r3, [r3, #8]
 800cb38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d906      	bls.n	800cb4e <tcp_receive+0x5ae>
 800cb40:	4b13      	ldr	r3, [pc, #76]	@ (800cb90 <tcp_receive+0x5f0>)
 800cb42:	f240 5297 	movw	r2, #1431	@ 0x597
 800cb46:	4916      	ldr	r1, [pc, #88]	@ (800cba0 <tcp_receive+0x600>)
 800cb48:	4813      	ldr	r0, [pc, #76]	@ (800cb98 <tcp_receive+0x5f8>)
 800cb4a:	f006 f8c1 	bl	8012cd0 <iprintf>
      inseg.len -= off;
 800cb4e:	4b0f      	ldr	r3, [pc, #60]	@ (800cb8c <tcp_receive+0x5ec>)
 800cb50:	891a      	ldrh	r2, [r3, #8]
 800cb52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb56:	1ad3      	subs	r3, r2, r3
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cb8c <tcp_receive+0x5ec>)
 800cb5c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb8c <tcp_receive+0x5ec>)
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	891a      	ldrh	r2, [r3, #8]
 800cb64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800cb6c:	e02a      	b.n	800cbc4 <tcp_receive+0x624>
 800cb6e:	bf00      	nop
 800cb70:	08015488 	.word	0x08015488
 800cb74:	08015490 	.word	0x08015490
 800cb78:	20007734 	.word	0x20007734
 800cb7c:	20007730 	.word	0x20007730
 800cb80:	200076f4 	.word	0x200076f4
 800cb84:	20007736 	.word	0x20007736
 800cb88:	2000772c 	.word	0x2000772c
 800cb8c:	2000770c 	.word	0x2000770c
 800cb90:	08015120 	.word	0x08015120
 800cb94:	08015498 	.word	0x08015498
 800cb98:	0801516c 	.word	0x0801516c
 800cb9c:	080154a8 	.word	0x080154a8
 800cba0:	080154b8 	.word	0x080154b8
        off -= p->len;
 800cba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba6:	895b      	ldrh	r3, [r3, #10]
 800cba8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cbb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cbb6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cbb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbba:	2200      	movs	r2, #0
 800cbbc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800cbc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc6:	895b      	ldrh	r3, [r3, #10]
 800cbc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d8e9      	bhi.n	800cba4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cbd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800cbd8:	f7fc f8ea 	bl	8008db0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe0:	4a90      	ldr	r2, [pc, #576]	@ (800ce24 <tcp_receive+0x884>)
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	4b90      	ldr	r3, [pc, #576]	@ (800ce28 <tcp_receive+0x888>)
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	4a8e      	ldr	r2, [pc, #568]	@ (800ce24 <tcp_receive+0x884>)
 800cbea:	6812      	ldr	r2, [r2, #0]
 800cbec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbee:	e00d      	b.n	800cc0c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cbf0:	4b8c      	ldr	r3, [pc, #560]	@ (800ce24 <tcp_receive+0x884>)
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf8:	1ad3      	subs	r3, r2, r3
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	da06      	bge.n	800cc0c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	8b5b      	ldrh	r3, [r3, #26]
 800cc02:	f043 0302 	orr.w	r3, r3, #2
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc0c:	4b85      	ldr	r3, [pc, #532]	@ (800ce24 <tcp_receive+0x884>)
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc14:	1ad3      	subs	r3, r2, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	f2c0 8427 	blt.w	800d46a <tcp_receive+0xeca>
 800cc1c:	4b81      	ldr	r3, [pc, #516]	@ (800ce24 <tcp_receive+0x884>)
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cc28:	440b      	add	r3, r1
 800cc2a:	1ad3      	subs	r3, r2, r3
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	f300 841b 	bgt.w	800d46a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc38:	4b7a      	ldr	r3, [pc, #488]	@ (800ce24 <tcp_receive+0x884>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	f040 8298 	bne.w	800d172 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cc42:	4b79      	ldr	r3, [pc, #484]	@ (800ce28 <tcp_receive+0x888>)
 800cc44:	891c      	ldrh	r4, [r3, #8]
 800cc46:	4b78      	ldr	r3, [pc, #480]	@ (800ce28 <tcp_receive+0x888>)
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	899b      	ldrh	r3, [r3, #12]
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fa fc52 	bl	80074f8 <lwip_htons>
 800cc54:	4603      	mov	r3, r0
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d001      	beq.n	800cc64 <tcp_receive+0x6c4>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e000      	b.n	800cc66 <tcp_receive+0x6c6>
 800cc64:	2300      	movs	r3, #0
 800cc66:	4423      	add	r3, r4
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	4b70      	ldr	r3, [pc, #448]	@ (800ce2c <tcp_receive+0x88c>)
 800cc6c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cc72:	4b6e      	ldr	r3, [pc, #440]	@ (800ce2c <tcp_receive+0x88c>)
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d274      	bcs.n	800cd64 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc7a:	4b6b      	ldr	r3, [pc, #428]	@ (800ce28 <tcp_receive+0x888>)
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	899b      	ldrh	r3, [r3, #12]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fa fc38 	bl	80074f8 <lwip_htons>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	f003 0301 	and.w	r3, r3, #1
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01e      	beq.n	800ccd2 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc94:	4b64      	ldr	r3, [pc, #400]	@ (800ce28 <tcp_receive+0x888>)
 800cc96:	68db      	ldr	r3, [r3, #12]
 800cc98:	899b      	ldrh	r3, [r3, #12]
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	b21b      	sxth	r3, r3
 800cc9e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cca2:	b21c      	sxth	r4, r3
 800cca4:	4b60      	ldr	r3, [pc, #384]	@ (800ce28 <tcp_receive+0x888>)
 800cca6:	68db      	ldr	r3, [r3, #12]
 800cca8:	899b      	ldrh	r3, [r3, #12]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7fa fc23 	bl	80074f8 <lwip_htons>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fa fc1b 	bl	80074f8 <lwip_htons>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	b21b      	sxth	r3, r3
 800ccc6:	4323      	orrs	r3, r4
 800ccc8:	b21a      	sxth	r2, r3
 800ccca:	4b57      	ldr	r3, [pc, #348]	@ (800ce28 <tcp_receive+0x888>)
 800cccc:	68db      	ldr	r3, [r3, #12]
 800ccce:	b292      	uxth	r2, r2
 800ccd0:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ccd6:	4b54      	ldr	r3, [pc, #336]	@ (800ce28 <tcp_receive+0x888>)
 800ccd8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccda:	4b53      	ldr	r3, [pc, #332]	@ (800ce28 <tcp_receive+0x888>)
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	899b      	ldrh	r3, [r3, #12]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fa fc08 	bl	80074f8 <lwip_htons>
 800cce8:	4603      	mov	r3, r0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0302 	and.w	r3, r3, #2
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <tcp_receive+0x760>
            inseg.len -= 1;
 800ccf4:	4b4c      	ldr	r3, [pc, #304]	@ (800ce28 <tcp_receive+0x888>)
 800ccf6:	891b      	ldrh	r3, [r3, #8]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	4b4a      	ldr	r3, [pc, #296]	@ (800ce28 <tcp_receive+0x888>)
 800ccfe:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800cd00:	4b49      	ldr	r3, [pc, #292]	@ (800ce28 <tcp_receive+0x888>)
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	4a48      	ldr	r2, [pc, #288]	@ (800ce28 <tcp_receive+0x888>)
 800cd06:	8912      	ldrh	r2, [r2, #8]
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7fb ff50 	bl	8008bb0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cd10:	4b45      	ldr	r3, [pc, #276]	@ (800ce28 <tcp_receive+0x888>)
 800cd12:	891c      	ldrh	r4, [r3, #8]
 800cd14:	4b44      	ldr	r3, [pc, #272]	@ (800ce28 <tcp_receive+0x888>)
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fa fbeb 	bl	80074f8 <lwip_htons>
 800cd22:	4603      	mov	r3, r0
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	f003 0303 	and.w	r3, r3, #3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d001      	beq.n	800cd32 <tcp_receive+0x792>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <tcp_receive+0x794>
 800cd32:	2300      	movs	r3, #0
 800cd34:	4423      	add	r3, r4
 800cd36:	b29a      	uxth	r2, r3
 800cd38:	4b3c      	ldr	r3, [pc, #240]	@ (800ce2c <tcp_receive+0x88c>)
 800cd3a:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd3c:	4b3b      	ldr	r3, [pc, #236]	@ (800ce2c <tcp_receive+0x88c>)
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	461a      	mov	r2, r3
 800cd42:	4b38      	ldr	r3, [pc, #224]	@ (800ce24 <tcp_receive+0x884>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	441a      	add	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd50:	440b      	add	r3, r1
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d006      	beq.n	800cd64 <tcp_receive+0x7c4>
 800cd56:	4b36      	ldr	r3, [pc, #216]	@ (800ce30 <tcp_receive+0x890>)
 800cd58:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800cd5c:	4935      	ldr	r1, [pc, #212]	@ (800ce34 <tcp_receive+0x894>)
 800cd5e:	4836      	ldr	r0, [pc, #216]	@ (800ce38 <tcp_receive+0x898>)
 800cd60:	f005 ffb6 	bl	8012cd0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 80e6 	beq.w	800cf3a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd6e:	4b2e      	ldr	r3, [pc, #184]	@ (800ce28 <tcp_receive+0x888>)
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	899b      	ldrh	r3, [r3, #12]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fa fbbe 	bl	80074f8 <lwip_htons>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d010      	beq.n	800cdaa <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd88:	e00a      	b.n	800cda0 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd8e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7fd fca5 	bl	800a6ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1f0      	bne.n	800cd8a <tcp_receive+0x7ea>
 800cda8:	e0c7      	b.n	800cf3a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cdb0:	e051      	b.n	800ce56 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	899b      	ldrh	r3, [r3, #12]
 800cdb8:	b29b      	uxth	r3, r3
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fa fb9c 	bl	80074f8 <lwip_htons>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d03c      	beq.n	800ce46 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cdcc:	4b16      	ldr	r3, [pc, #88]	@ (800ce28 <tcp_receive+0x888>)
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	899b      	ldrh	r3, [r3, #12]
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fa fb8f 	bl	80074f8 <lwip_htons>
 800cdda:	4603      	mov	r3, r0
 800cddc:	b2db      	uxtb	r3, r3
 800cdde:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d12f      	bne.n	800ce46 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cde6:	4b10      	ldr	r3, [pc, #64]	@ (800ce28 <tcp_receive+0x888>)
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	899b      	ldrh	r3, [r3, #12]
 800cdec:	b29c      	uxth	r4, r3
 800cdee:	2001      	movs	r0, #1
 800cdf0:	f7fa fb82 	bl	80074f8 <lwip_htons>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ce28 <tcp_receive+0x888>)
 800cdfa:	68db      	ldr	r3, [r3, #12]
 800cdfc:	4322      	orrs	r2, r4
 800cdfe:	b292      	uxth	r2, r2
 800ce00:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ce02:	4b09      	ldr	r3, [pc, #36]	@ (800ce28 <tcp_receive+0x888>)
 800ce04:	891c      	ldrh	r4, [r3, #8]
 800ce06:	4b08      	ldr	r3, [pc, #32]	@ (800ce28 <tcp_receive+0x888>)
 800ce08:	68db      	ldr	r3, [r3, #12]
 800ce0a:	899b      	ldrh	r3, [r3, #12]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fa fb72 	bl	80074f8 <lwip_htons>
 800ce14:	4603      	mov	r3, r0
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	f003 0303 	and.w	r3, r3, #3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00d      	beq.n	800ce3c <tcp_receive+0x89c>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e00c      	b.n	800ce3e <tcp_receive+0x89e>
 800ce24:	2000772c 	.word	0x2000772c
 800ce28:	2000770c 	.word	0x2000770c
 800ce2c:	20007736 	.word	0x20007736
 800ce30:	08015120 	.word	0x08015120
 800ce34:	080154c8 	.word	0x080154c8
 800ce38:	0801516c 	.word	0x0801516c
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4423      	add	r3, r4
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	4b98      	ldr	r3, [pc, #608]	@ (800d0a4 <tcp_receive+0xb04>)
 800ce44:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ce46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce48:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ce4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ce50:	6938      	ldr	r0, [r7, #16]
 800ce52:	f7fd fc4a 	bl	800a6ea <tcp_seg_free>
            while (next &&
 800ce56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00e      	beq.n	800ce7a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ce5c:	4b91      	ldr	r3, [pc, #580]	@ (800d0a4 <tcp_receive+0xb04>)
 800ce5e:	881b      	ldrh	r3, [r3, #0]
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b91      	ldr	r3, [pc, #580]	@ (800d0a8 <tcp_receive+0xb08>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	441a      	add	r2, r3
 800ce68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	685b      	ldr	r3, [r3, #4]
 800ce6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce70:	8909      	ldrh	r1, [r1, #8]
 800ce72:	440b      	add	r3, r1
 800ce74:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	da9b      	bge.n	800cdb2 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ce7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d059      	beq.n	800cf34 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ce80:	4b88      	ldr	r3, [pc, #544]	@ (800d0a4 <tcp_receive+0xb04>)
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	461a      	mov	r2, r3
 800ce86:	4b88      	ldr	r3, [pc, #544]	@ (800d0a8 <tcp_receive+0xb08>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	441a      	add	r2, r3
 800ce8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	dd4d      	ble.n	800cf34 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	4b81      	ldr	r3, [pc, #516]	@ (800d0a8 <tcp_receive+0xb08>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	4b80      	ldr	r3, [pc, #512]	@ (800d0ac <tcp_receive+0xb0c>)
 800ceac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ceae:	4b7f      	ldr	r3, [pc, #508]	@ (800d0ac <tcp_receive+0xb0c>)
 800ceb0:	68db      	ldr	r3, [r3, #12]
 800ceb2:	899b      	ldrh	r3, [r3, #12]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7fa fb1e 	bl	80074f8 <lwip_htons>
 800cebc:	4603      	mov	r3, r0
 800cebe:	b2db      	uxtb	r3, r3
 800cec0:	f003 0302 	and.w	r3, r3, #2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d005      	beq.n	800ced4 <tcp_receive+0x934>
                inseg.len -= 1;
 800cec8:	4b78      	ldr	r3, [pc, #480]	@ (800d0ac <tcp_receive+0xb0c>)
 800ceca:	891b      	ldrh	r3, [r3, #8]
 800cecc:	3b01      	subs	r3, #1
 800cece:	b29a      	uxth	r2, r3
 800ced0:	4b76      	ldr	r3, [pc, #472]	@ (800d0ac <tcp_receive+0xb0c>)
 800ced2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ced4:	4b75      	ldr	r3, [pc, #468]	@ (800d0ac <tcp_receive+0xb0c>)
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a74      	ldr	r2, [pc, #464]	@ (800d0ac <tcp_receive+0xb0c>)
 800ceda:	8912      	ldrh	r2, [r2, #8]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7fb fe66 	bl	8008bb0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cee4:	4b71      	ldr	r3, [pc, #452]	@ (800d0ac <tcp_receive+0xb0c>)
 800cee6:	891c      	ldrh	r4, [r3, #8]
 800cee8:	4b70      	ldr	r3, [pc, #448]	@ (800d0ac <tcp_receive+0xb0c>)
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	899b      	ldrh	r3, [r3, #12]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7fa fb01 	bl	80074f8 <lwip_htons>
 800cef6:	4603      	mov	r3, r0
 800cef8:	b2db      	uxtb	r3, r3
 800cefa:	f003 0303 	and.w	r3, r3, #3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <tcp_receive+0x966>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <tcp_receive+0x968>
 800cf06:	2300      	movs	r3, #0
 800cf08:	4423      	add	r3, r4
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	4b65      	ldr	r3, [pc, #404]	@ (800d0a4 <tcp_receive+0xb04>)
 800cf0e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cf10:	4b64      	ldr	r3, [pc, #400]	@ (800d0a4 <tcp_receive+0xb04>)
 800cf12:	881b      	ldrh	r3, [r3, #0]
 800cf14:	461a      	mov	r2, r3
 800cf16:	4b64      	ldr	r3, [pc, #400]	@ (800d0a8 <tcp_receive+0xb08>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	441a      	add	r2, r3
 800cf1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d006      	beq.n	800cf34 <tcp_receive+0x994>
 800cf26:	4b62      	ldr	r3, [pc, #392]	@ (800d0b0 <tcp_receive+0xb10>)
 800cf28:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800cf2c:	4961      	ldr	r1, [pc, #388]	@ (800d0b4 <tcp_receive+0xb14>)
 800cf2e:	4862      	ldr	r0, [pc, #392]	@ (800d0b8 <tcp_receive+0xb18>)
 800cf30:	f005 fece 	bl	8012cd0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf38:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cf3a:	4b5a      	ldr	r3, [pc, #360]	@ (800d0a4 <tcp_receive+0xb04>)
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	461a      	mov	r2, r3
 800cf40:	4b59      	ldr	r3, [pc, #356]	@ (800d0a8 <tcp_receive+0xb08>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	441a      	add	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf4e:	4b55      	ldr	r3, [pc, #340]	@ (800d0a4 <tcp_receive+0xb04>)
 800cf50:	881b      	ldrh	r3, [r3, #0]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d206      	bcs.n	800cf64 <tcp_receive+0x9c4>
 800cf56:	4b56      	ldr	r3, [pc, #344]	@ (800d0b0 <tcp_receive+0xb10>)
 800cf58:	f240 6207 	movw	r2, #1543	@ 0x607
 800cf5c:	4957      	ldr	r1, [pc, #348]	@ (800d0bc <tcp_receive+0xb1c>)
 800cf5e:	4856      	ldr	r0, [pc, #344]	@ (800d0b8 <tcp_receive+0xb18>)
 800cf60:	f005 feb6 	bl	8012cd0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf68:	4b4e      	ldr	r3, [pc, #312]	@ (800d0a4 <tcp_receive+0xb04>)
 800cf6a:	881b      	ldrh	r3, [r3, #0]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	b29a      	uxth	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7fc fe91 	bl	8009c9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cf7a:	4b4c      	ldr	r3, [pc, #304]	@ (800d0ac <tcp_receive+0xb0c>)
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	891b      	ldrh	r3, [r3, #8]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d006      	beq.n	800cf92 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cf84:	4b49      	ldr	r3, [pc, #292]	@ (800d0ac <tcp_receive+0xb0c>)
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	4a4d      	ldr	r2, [pc, #308]	@ (800d0c0 <tcp_receive+0xb20>)
 800cf8a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf8c:	4b47      	ldr	r3, [pc, #284]	@ (800d0ac <tcp_receive+0xb0c>)
 800cf8e:	2200      	movs	r2, #0
 800cf90:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf92:	4b46      	ldr	r3, [pc, #280]	@ (800d0ac <tcp_receive+0xb0c>)
 800cf94:	68db      	ldr	r3, [r3, #12]
 800cf96:	899b      	ldrh	r3, [r3, #12]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fa faac 	bl	80074f8 <lwip_htons>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 80b8 	beq.w	800d11e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cfae:	4b45      	ldr	r3, [pc, #276]	@ (800d0c4 <tcp_receive+0xb24>)
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	f043 0320 	orr.w	r3, r3, #32
 800cfb6:	b2da      	uxtb	r2, r3
 800cfb8:	4b42      	ldr	r3, [pc, #264]	@ (800d0c4 <tcp_receive+0xb24>)
 800cfba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cfbc:	e0af      	b.n	800d11e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfc2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	4a36      	ldr	r2, [pc, #216]	@ (800d0a8 <tcp_receive+0xb08>)
 800cfce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cfd0:	68bb      	ldr	r3, [r7, #8]
 800cfd2:	891b      	ldrh	r3, [r3, #8]
 800cfd4:	461c      	mov	r4, r3
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	899b      	ldrh	r3, [r3, #12]
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fa fa8a 	bl	80074f8 <lwip_htons>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	f003 0303 	and.w	r3, r3, #3
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <tcp_receive+0xa54>
 800cff0:	2301      	movs	r3, #1
 800cff2:	e000      	b.n	800cff6 <tcp_receive+0xa56>
 800cff4:	2300      	movs	r3, #0
 800cff6:	191a      	adds	r2, r3, r4
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffc:	441a      	add	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d006:	461c      	mov	r4, r3
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	891b      	ldrh	r3, [r3, #8]
 800d00c:	461d      	mov	r5, r3
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	899b      	ldrh	r3, [r3, #12]
 800d014:	b29b      	uxth	r3, r3
 800d016:	4618      	mov	r0, r3
 800d018:	f7fa fa6e 	bl	80074f8 <lwip_htons>
 800d01c:	4603      	mov	r3, r0
 800d01e:	b2db      	uxtb	r3, r3
 800d020:	f003 0303 	and.w	r3, r3, #3
 800d024:	2b00      	cmp	r3, #0
 800d026:	d001      	beq.n	800d02c <tcp_receive+0xa8c>
 800d028:	2301      	movs	r3, #1
 800d02a:	e000      	b.n	800d02e <tcp_receive+0xa8e>
 800d02c:	2300      	movs	r3, #0
 800d02e:	442b      	add	r3, r5
 800d030:	429c      	cmp	r4, r3
 800d032:	d206      	bcs.n	800d042 <tcp_receive+0xaa2>
 800d034:	4b1e      	ldr	r3, [pc, #120]	@ (800d0b0 <tcp_receive+0xb10>)
 800d036:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d03a:	4923      	ldr	r1, [pc, #140]	@ (800d0c8 <tcp_receive+0xb28>)
 800d03c:	481e      	ldr	r0, [pc, #120]	@ (800d0b8 <tcp_receive+0xb18>)
 800d03e:	f005 fe47 	bl	8012cd0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	891b      	ldrh	r3, [r3, #8]
 800d046:	461c      	mov	r4, r3
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	899b      	ldrh	r3, [r3, #12]
 800d04e:	b29b      	uxth	r3, r3
 800d050:	4618      	mov	r0, r3
 800d052:	f7fa fa51 	bl	80074f8 <lwip_htons>
 800d056:	4603      	mov	r3, r0
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d001      	beq.n	800d066 <tcp_receive+0xac6>
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <tcp_receive+0xac8>
 800d066:	2300      	movs	r3, #0
 800d068:	1919      	adds	r1, r3, r4
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d06e:	b28b      	uxth	r3, r1
 800d070:	1ad3      	subs	r3, r2, r3
 800d072:	b29a      	uxth	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f7fc fe0f 	bl	8009c9c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	891b      	ldrh	r3, [r3, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d028      	beq.n	800d0da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d088:	4b0d      	ldr	r3, [pc, #52]	@ (800d0c0 <tcp_receive+0xb20>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d01d      	beq.n	800d0cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d090:	4b0b      	ldr	r3, [pc, #44]	@ (800d0c0 <tcp_receive+0xb20>)
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	685b      	ldr	r3, [r3, #4]
 800d098:	4619      	mov	r1, r3
 800d09a:	4610      	mov	r0, r2
 800d09c:	f7fb ffda 	bl	8009054 <pbuf_cat>
 800d0a0:	e018      	b.n	800d0d4 <tcp_receive+0xb34>
 800d0a2:	bf00      	nop
 800d0a4:	20007736 	.word	0x20007736
 800d0a8:	2000772c 	.word	0x2000772c
 800d0ac:	2000770c 	.word	0x2000770c
 800d0b0:	08015120 	.word	0x08015120
 800d0b4:	08015500 	.word	0x08015500
 800d0b8:	0801516c 	.word	0x0801516c
 800d0bc:	0801553c 	.word	0x0801553c
 800d0c0:	2000773c 	.word	0x2000773c
 800d0c4:	20007739 	.word	0x20007739
 800d0c8:	0801555c 	.word	0x0801555c
            } else {
              recv_data = cseg->p;
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	4a70      	ldr	r2, [pc, #448]	@ (800d294 <tcp_receive+0xcf4>)
 800d0d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	899b      	ldrh	r3, [r3, #12]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fa fa08 	bl	80074f8 <lwip_htons>
 800d0e8:	4603      	mov	r3, r0
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d00d      	beq.n	800d110 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d0f4:	4b68      	ldr	r3, [pc, #416]	@ (800d298 <tcp_receive+0xcf8>)
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	f043 0320 	orr.w	r3, r3, #32
 800d0fc:	b2da      	uxtb	r2, r3
 800d0fe:	4b66      	ldr	r3, [pc, #408]	@ (800d298 <tcp_receive+0xcf8>)
 800d100:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	7d1b      	ldrb	r3, [r3, #20]
 800d106:	2b04      	cmp	r3, #4
 800d108:	d102      	bne.n	800d110 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2207      	movs	r2, #7
 800d10e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d118:	68b8      	ldr	r0, [r7, #8]
 800d11a:	f7fd fae6 	bl	800a6ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d122:	2b00      	cmp	r3, #0
 800d124:	d008      	beq.n	800d138 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	685a      	ldr	r2, [r3, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800d132:	429a      	cmp	r2, r3
 800d134:	f43f af43 	beq.w	800cfbe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	8b5b      	ldrh	r3, [r3, #26]
 800d13c:	f003 0301 	and.w	r3, r3, #1
 800d140:	2b00      	cmp	r3, #0
 800d142:	d00e      	beq.n	800d162 <tcp_receive+0xbc2>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8b5b      	ldrh	r3, [r3, #26]
 800d148:	f023 0301 	bic.w	r3, r3, #1
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	835a      	strh	r2, [r3, #26]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	8b5b      	ldrh	r3, [r3, #26]
 800d156:	f043 0302 	orr.w	r3, r3, #2
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d160:	e187      	b.n	800d472 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	8b5b      	ldrh	r3, [r3, #26]
 800d166:	f043 0301 	orr.w	r3, r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d170:	e17f      	b.n	800d472 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d17a:	4848      	ldr	r0, [pc, #288]	@ (800d29c <tcp_receive+0xcfc>)
 800d17c:	f7fd faec 	bl	800a758 <tcp_seg_copy>
 800d180:	4602      	mov	r2, r0
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	675a      	str	r2, [r3, #116]	@ 0x74
 800d186:	e16c      	b.n	800d462 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d188:	2300      	movs	r3, #0
 800d18a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d190:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d192:	e156      	b.n	800d442 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800d194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	685a      	ldr	r2, [r3, #4]
 800d19a:	4b41      	ldr	r3, [pc, #260]	@ (800d2a0 <tcp_receive+0xd00>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d11d      	bne.n	800d1de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d1a2:	4b3e      	ldr	r3, [pc, #248]	@ (800d29c <tcp_receive+0xcfc>)
 800d1a4:	891a      	ldrh	r2, [r3, #8]
 800d1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a8:	891b      	ldrh	r3, [r3, #8]
 800d1aa:	429a      	cmp	r2, r3
 800d1ac:	f240 814e 	bls.w	800d44c <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1b0:	483a      	ldr	r0, [pc, #232]	@ (800d29c <tcp_receive+0xcfc>)
 800d1b2:	f7fd fad1 	bl	800a758 <tcp_seg_copy>
 800d1b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f000 8148 	beq.w	800d450 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d003      	beq.n	800d1ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c8:	697a      	ldr	r2, [r7, #20]
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	e002      	b.n	800d1d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	697a      	ldr	r2, [r7, #20]
 800d1d2:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d1d4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d1d6:	6978      	ldr	r0, [r7, #20]
 800d1d8:	f7ff f8de 	bl	800c398 <tcp_oos_insert_segment>
                }
                break;
 800d1dc:	e138      	b.n	800d450 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d117      	bne.n	800d214 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d1e4:	4b2e      	ldr	r3, [pc, #184]	@ (800d2a0 <tcp_receive+0xd00>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	685b      	ldr	r3, [r3, #4]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	da57      	bge.n	800d2a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1f4:	4829      	ldr	r0, [pc, #164]	@ (800d29c <tcp_receive+0xcfc>)
 800d1f6:	f7fd faaf 	bl	800a758 <tcp_seg_copy>
 800d1fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d1fc:	69bb      	ldr	r3, [r7, #24]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	f000 8128 	beq.w	800d454 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d20a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d20c:	69b8      	ldr	r0, [r7, #24]
 800d20e:	f7ff f8c3 	bl	800c398 <tcp_oos_insert_segment>
                  }
                  break;
 800d212:	e11f      	b.n	800d454 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d214:	4b22      	ldr	r3, [pc, #136]	@ (800d2a0 <tcp_receive+0xd00>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	3b01      	subs	r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	db3e      	blt.n	800d2a4 <tcp_receive+0xd04>
 800d226:	4b1e      	ldr	r3, [pc, #120]	@ (800d2a0 <tcp_receive+0xd00>)
 800d228:	681a      	ldr	r2, [r3, #0]
 800d22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	3301      	adds	r3, #1
 800d234:	2b00      	cmp	r3, #0
 800d236:	dc35      	bgt.n	800d2a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d238:	4818      	ldr	r0, [pc, #96]	@ (800d29c <tcp_receive+0xcfc>)
 800d23a:	f7fd fa8d 	bl	800a758 <tcp_seg_copy>
 800d23e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	2b00      	cmp	r3, #0
 800d244:	f000 8108 	beq.w	800d458 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d250:	8912      	ldrh	r2, [r2, #8]
 800d252:	441a      	add	r2, r3
 800d254:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <tcp_receive+0xd00>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	dd12      	ble.n	800d284 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d25e:	4b10      	ldr	r3, [pc, #64]	@ (800d2a0 <tcp_receive+0xd00>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	b29a      	uxth	r2, r3
 800d264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	b29a      	uxth	r2, r3
 800d270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d272:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d276:	685a      	ldr	r2, [r3, #4]
 800d278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d27a:	891b      	ldrh	r3, [r3, #8]
 800d27c:	4619      	mov	r1, r3
 800d27e:	4610      	mov	r0, r2
 800d280:	f7fb fc96 	bl	8008bb0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d286:	69fa      	ldr	r2, [r7, #28]
 800d288:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d28a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d28c:	69f8      	ldr	r0, [r7, #28]
 800d28e:	f7ff f883 	bl	800c398 <tcp_oos_insert_segment>
                  }
                  break;
 800d292:	e0e1      	b.n	800d458 <tcp_receive+0xeb8>
 800d294:	2000773c 	.word	0x2000773c
 800d298:	20007739 	.word	0x20007739
 800d29c:	2000770c 	.word	0x2000770c
 800d2a0:	2000772c 	.word	0x2000772c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a6:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f040 80c5 	bne.w	800d43c <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d2b2:	4b7f      	ldr	r3, [pc, #508]	@ (800d4b0 <tcp_receive+0xf10>)
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f340 80bc 	ble.w	800d43c <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	899b      	ldrh	r3, [r3, #12]
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fa f913 	bl	80074f8 <lwip_htons>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f040 80be 	bne.w	800d45c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d2e0:	4874      	ldr	r0, [pc, #464]	@ (800d4b4 <tcp_receive+0xf14>)
 800d2e2:	f7fd fa39 	bl	800a758 <tcp_seg_copy>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 80b5 	beq.w	800d460 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	685b      	ldr	r3, [r3, #4]
 800d2fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2fe:	8912      	ldrh	r2, [r2, #8]
 800d300:	441a      	add	r2, r3
 800d302:	4b6b      	ldr	r3, [pc, #428]	@ (800d4b0 <tcp_receive+0xf10>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	1ad3      	subs	r3, r2, r3
 800d308:	2b00      	cmp	r3, #0
 800d30a:	dd12      	ble.n	800d332 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d30c:	4b68      	ldr	r3, [pc, #416]	@ (800d4b0 <tcp_receive+0xf10>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	b29a      	uxth	r2, r3
 800d312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	b29a      	uxth	r2, r3
 800d31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d320:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d328:	891b      	ldrh	r3, [r3, #8]
 800d32a:	4619      	mov	r1, r3
 800d32c:	4610      	mov	r0, r2
 800d32e:	f7fb fc3f 	bl	8008bb0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d332:	4b61      	ldr	r3, [pc, #388]	@ (800d4b8 <tcp_receive+0xf18>)
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	461a      	mov	r2, r3
 800d338:	4b5d      	ldr	r3, [pc, #372]	@ (800d4b0 <tcp_receive+0xf10>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	441a      	add	r2, r3
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d346:	440b      	add	r3, r1
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f340 8088 	ble.w	800d460 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	68db      	ldr	r3, [r3, #12]
 800d356:	899b      	ldrh	r3, [r3, #12]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fa f8cc 	bl	80074f8 <lwip_htons>
 800d360:	4603      	mov	r3, r0
 800d362:	b2db      	uxtb	r3, r3
 800d364:	f003 0301 	and.w	r3, r3, #1
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d021      	beq.n	800d3b0 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	899b      	ldrh	r3, [r3, #12]
 800d374:	b29b      	uxth	r3, r3
 800d376:	b21b      	sxth	r3, r3
 800d378:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d37c:	b21c      	sxth	r4, r3
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	899b      	ldrh	r3, [r3, #12]
 800d386:	b29b      	uxth	r3, r3
 800d388:	4618      	mov	r0, r3
 800d38a:	f7fa f8b5 	bl	80074f8 <lwip_htons>
 800d38e:	4603      	mov	r3, r0
 800d390:	b2db      	uxtb	r3, r3
 800d392:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d396:	b29b      	uxth	r3, r3
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fa f8ad 	bl	80074f8 <lwip_htons>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	b21b      	sxth	r3, r3
 800d3a2:	4323      	orrs	r3, r4
 800d3a4:	b21a      	sxth	r2, r3
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	b292      	uxth	r2, r2
 800d3ae:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b4:	b29a      	uxth	r2, r3
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b299      	uxth	r1, r3
 800d3be:	4b3c      	ldr	r3, [pc, #240]	@ (800d4b0 <tcp_receive+0xf10>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	1a8a      	subs	r2, r1, r2
 800d3ca:	b292      	uxth	r2, r2
 800d3cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	891b      	ldrh	r3, [r3, #8]
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7fb fbe7 	bl	8008bb0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	891c      	ldrh	r4, [r3, #8]
 800d3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	899b      	ldrh	r3, [r3, #12]
 800d3f0:	b29b      	uxth	r3, r3
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fa f880 	bl	80074f8 <lwip_htons>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0303 	and.w	r3, r3, #3
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <tcp_receive+0xe68>
 800d404:	2301      	movs	r3, #1
 800d406:	e000      	b.n	800d40a <tcp_receive+0xe6a>
 800d408:	2300      	movs	r3, #0
 800d40a:	4423      	add	r3, r4
 800d40c:	b29a      	uxth	r2, r3
 800d40e:	4b2a      	ldr	r3, [pc, #168]	@ (800d4b8 <tcp_receive+0xf18>)
 800d410:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d412:	4b29      	ldr	r3, [pc, #164]	@ (800d4b8 <tcp_receive+0xf18>)
 800d414:	881b      	ldrh	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	4b25      	ldr	r3, [pc, #148]	@ (800d4b0 <tcp_receive+0xf10>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	441a      	add	r2, r3
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d422:	6879      	ldr	r1, [r7, #4]
 800d424:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d426:	440b      	add	r3, r1
 800d428:	429a      	cmp	r2, r3
 800d42a:	d019      	beq.n	800d460 <tcp_receive+0xec0>
 800d42c:	4b23      	ldr	r3, [pc, #140]	@ (800d4bc <tcp_receive+0xf1c>)
 800d42e:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800d432:	4923      	ldr	r1, [pc, #140]	@ (800d4c0 <tcp_receive+0xf20>)
 800d434:	4823      	ldr	r0, [pc, #140]	@ (800d4c4 <tcp_receive+0xf24>)
 800d436:	f005 fc4b 	bl	8012cd0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d43a:	e011      	b.n	800d460 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d444:	2b00      	cmp	r3, #0
 800d446:	f47f aea5 	bne.w	800d194 <tcp_receive+0xbf4>
 800d44a:	e00a      	b.n	800d462 <tcp_receive+0xec2>
                break;
 800d44c:	bf00      	nop
 800d44e:	e008      	b.n	800d462 <tcp_receive+0xec2>
                break;
 800d450:	bf00      	nop
 800d452:	e006      	b.n	800d462 <tcp_receive+0xec2>
                  break;
 800d454:	bf00      	nop
 800d456:	e004      	b.n	800d462 <tcp_receive+0xec2>
                  break;
 800d458:	bf00      	nop
 800d45a:	e002      	b.n	800d462 <tcp_receive+0xec2>
                  break;
 800d45c:	bf00      	nop
 800d45e:	e000      	b.n	800d462 <tcp_receive+0xec2>
                break;
 800d460:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f001 feaa 	bl	800f1bc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d468:	e003      	b.n	800d472 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 fea6 	bl	800f1bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d470:	e01a      	b.n	800d4a8 <tcp_receive+0xf08>
 800d472:	e019      	b.n	800d4a8 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d474:	4b0e      	ldr	r3, [pc, #56]	@ (800d4b0 <tcp_receive+0xf10>)
 800d476:	681a      	ldr	r2, [r3, #0]
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d47c:	1ad3      	subs	r3, r2, r3
 800d47e:	2b00      	cmp	r3, #0
 800d480:	db0a      	blt.n	800d498 <tcp_receive+0xef8>
 800d482:	4b0b      	ldr	r3, [pc, #44]	@ (800d4b0 <tcp_receive+0xf10>)
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d48a:	6879      	ldr	r1, [r7, #4]
 800d48c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d48e:	440b      	add	r3, r1
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	3301      	adds	r3, #1
 800d494:	2b00      	cmp	r3, #0
 800d496:	dd07      	ble.n	800d4a8 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	8b5b      	ldrh	r3, [r3, #26]
 800d49c:	f043 0302 	orr.w	r3, r3, #2
 800d4a0:	b29a      	uxth	r2, r3
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d4a6:	e7ff      	b.n	800d4a8 <tcp_receive+0xf08>
 800d4a8:	bf00      	nop
 800d4aa:	3750      	adds	r7, #80	@ 0x50
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800d4b0:	2000772c 	.word	0x2000772c
 800d4b4:	2000770c 	.word	0x2000770c
 800d4b8:	20007736 	.word	0x20007736
 800d4bc:	08015120 	.word	0x08015120
 800d4c0:	080154c8 	.word	0x080154c8
 800d4c4:	0801516c 	.word	0x0801516c

0800d4c8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d4ce:	4b15      	ldr	r3, [pc, #84]	@ (800d524 <tcp_get_next_optbyte+0x5c>)
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	b291      	uxth	r1, r2
 800d4d6:	4a13      	ldr	r2, [pc, #76]	@ (800d524 <tcp_get_next_optbyte+0x5c>)
 800d4d8:	8011      	strh	r1, [r2, #0]
 800d4da:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d4dc:	4b12      	ldr	r3, [pc, #72]	@ (800d528 <tcp_get_next_optbyte+0x60>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d004      	beq.n	800d4ee <tcp_get_next_optbyte+0x26>
 800d4e4:	4b11      	ldr	r3, [pc, #68]	@ (800d52c <tcp_get_next_optbyte+0x64>)
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	88fa      	ldrh	r2, [r7, #6]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d208      	bcs.n	800d500 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d4ee:	4b10      	ldr	r3, [pc, #64]	@ (800d530 <tcp_get_next_optbyte+0x68>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	3314      	adds	r3, #20
 800d4f4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d4f6:	88fb      	ldrh	r3, [r7, #6]
 800d4f8:	683a      	ldr	r2, [r7, #0]
 800d4fa:	4413      	add	r3, r2
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	e00b      	b.n	800d518 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d500:	88fb      	ldrh	r3, [r7, #6]
 800d502:	b2da      	uxtb	r2, r3
 800d504:	4b09      	ldr	r3, [pc, #36]	@ (800d52c <tcp_get_next_optbyte+0x64>)
 800d506:	881b      	ldrh	r3, [r3, #0]
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d50e:	4b06      	ldr	r3, [pc, #24]	@ (800d528 <tcp_get_next_optbyte+0x60>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	797b      	ldrb	r3, [r7, #5]
 800d514:	4413      	add	r3, r2
 800d516:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d518:	4618      	mov	r0, r3
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bc80      	pop	{r7}
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20007728 	.word	0x20007728
 800d528:	20007724 	.word	0x20007724
 800d52c:	20007722 	.word	0x20007722
 800d530:	2000771c 	.word	0x2000771c

0800d534 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <tcp_parseopt+0x1c>
 800d542:	4b32      	ldr	r3, [pc, #200]	@ (800d60c <tcp_parseopt+0xd8>)
 800d544:	f240 727d 	movw	r2, #1917	@ 0x77d
 800d548:	4931      	ldr	r1, [pc, #196]	@ (800d610 <tcp_parseopt+0xdc>)
 800d54a:	4832      	ldr	r0, [pc, #200]	@ (800d614 <tcp_parseopt+0xe0>)
 800d54c:	f005 fbc0 	bl	8012cd0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d550:	4b31      	ldr	r3, [pc, #196]	@ (800d618 <tcp_parseopt+0xe4>)
 800d552:	881b      	ldrh	r3, [r3, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d056      	beq.n	800d606 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d558:	4b30      	ldr	r3, [pc, #192]	@ (800d61c <tcp_parseopt+0xe8>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	801a      	strh	r2, [r3, #0]
 800d55e:	e046      	b.n	800d5ee <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800d560:	f7ff ffb2 	bl	800d4c8 <tcp_get_next_optbyte>
 800d564:	4603      	mov	r3, r0
 800d566:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d568:	7bfb      	ldrb	r3, [r7, #15]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d006      	beq.n	800d57c <tcp_parseopt+0x48>
 800d56e:	2b02      	cmp	r3, #2
 800d570:	dc2a      	bgt.n	800d5c8 <tcp_parseopt+0x94>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d042      	beq.n	800d5fc <tcp_parseopt+0xc8>
 800d576:	2b01      	cmp	r3, #1
 800d578:	d038      	beq.n	800d5ec <tcp_parseopt+0xb8>
 800d57a:	e025      	b.n	800d5c8 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d57c:	f7ff ffa4 	bl	800d4c8 <tcp_get_next_optbyte>
 800d580:	4603      	mov	r3, r0
 800d582:	2b04      	cmp	r3, #4
 800d584:	d13c      	bne.n	800d600 <tcp_parseopt+0xcc>
 800d586:	4b25      	ldr	r3, [pc, #148]	@ (800d61c <tcp_parseopt+0xe8>)
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	3301      	adds	r3, #1
 800d58c:	4a22      	ldr	r2, [pc, #136]	@ (800d618 <tcp_parseopt+0xe4>)
 800d58e:	8812      	ldrh	r2, [r2, #0]
 800d590:	4293      	cmp	r3, r2
 800d592:	da35      	bge.n	800d600 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d594:	f7ff ff98 	bl	800d4c8 <tcp_get_next_optbyte>
 800d598:	4603      	mov	r3, r0
 800d59a:	021b      	lsls	r3, r3, #8
 800d59c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d59e:	f7ff ff93 	bl	800d4c8 <tcp_get_next_optbyte>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	89bb      	ldrh	r3, [r7, #12]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d5ac:	89bb      	ldrh	r3, [r7, #12]
 800d5ae:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d5b2:	d804      	bhi.n	800d5be <tcp_parseopt+0x8a>
 800d5b4:	89bb      	ldrh	r3, [r7, #12]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <tcp_parseopt+0x8a>
 800d5ba:	89ba      	ldrh	r2, [r7, #12]
 800d5bc:	e001      	b.n	800d5c2 <tcp_parseopt+0x8e>
 800d5be:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800d5c6:	e012      	b.n	800d5ee <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d5c8:	f7ff ff7e 	bl	800d4c8 <tcp_get_next_optbyte>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d5d0:	7afb      	ldrb	r3, [r7, #11]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d916      	bls.n	800d604 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d5d6:	7afb      	ldrb	r3, [r7, #11]
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	4b10      	ldr	r3, [pc, #64]	@ (800d61c <tcp_parseopt+0xe8>)
 800d5dc:	881b      	ldrh	r3, [r3, #0]
 800d5de:	4413      	add	r3, r2
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	3b02      	subs	r3, #2
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d61c <tcp_parseopt+0xe8>)
 800d5e8:	801a      	strh	r2, [r3, #0]
 800d5ea:	e000      	b.n	800d5ee <tcp_parseopt+0xba>
          break;
 800d5ec:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5ee:	4b0b      	ldr	r3, [pc, #44]	@ (800d61c <tcp_parseopt+0xe8>)
 800d5f0:	881a      	ldrh	r2, [r3, #0]
 800d5f2:	4b09      	ldr	r3, [pc, #36]	@ (800d618 <tcp_parseopt+0xe4>)
 800d5f4:	881b      	ldrh	r3, [r3, #0]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d3b2      	bcc.n	800d560 <tcp_parseopt+0x2c>
 800d5fa:	e004      	b.n	800d606 <tcp_parseopt+0xd2>
          return;
 800d5fc:	bf00      	nop
 800d5fe:	e002      	b.n	800d606 <tcp_parseopt+0xd2>
            return;
 800d600:	bf00      	nop
 800d602:	e000      	b.n	800d606 <tcp_parseopt+0xd2>
            return;
 800d604:	bf00      	nop
      }
    }
  }
}
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}
 800d60c:	08015120 	.word	0x08015120
 800d610:	08015584 	.word	0x08015584
 800d614:	0801516c 	.word	0x0801516c
 800d618:	20007720 	.word	0x20007720
 800d61c:	20007728 	.word	0x20007728

0800d620 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d620:	b480      	push	{r7}
 800d622:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d624:	4b05      	ldr	r3, [pc, #20]	@ (800d63c <tcp_trigger_input_pcb_close+0x1c>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	f043 0310 	orr.w	r3, r3, #16
 800d62c:	b2da      	uxtb	r2, r3
 800d62e:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <tcp_trigger_input_pcb_close+0x1c>)
 800d630:	701a      	strb	r2, [r3, #0]
}
 800d632:	bf00      	nop
 800d634:	46bd      	mov	sp, r7
 800d636:	bc80      	pop	{r7}
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20007739 	.word	0x20007739

0800d640 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <tcp_route+0x28>
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	7a1b      	ldrb	r3, [r3, #8]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d006      	beq.n	800d668 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	7a1b      	ldrb	r3, [r3, #8]
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fb f8a0 	bl	80087a4 <netif_get_by_index>
 800d664:	4603      	mov	r3, r0
 800d666:	e003      	b.n	800d670 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f003 fba5 	bl	8010db8 <ip4_route>
 800d66e:	4603      	mov	r3, r0
  }
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	60b9      	str	r1, [r7, #8]
 800d682:	603b      	str	r3, [r7, #0]
 800d684:	4613      	mov	r3, r2
 800d686:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d105      	bne.n	800d69a <tcp_create_segment+0x22>
 800d68e:	4b43      	ldr	r3, [pc, #268]	@ (800d79c <tcp_create_segment+0x124>)
 800d690:	22a3      	movs	r2, #163	@ 0xa3
 800d692:	4943      	ldr	r1, [pc, #268]	@ (800d7a0 <tcp_create_segment+0x128>)
 800d694:	4843      	ldr	r0, [pc, #268]	@ (800d7a4 <tcp_create_segment+0x12c>)
 800d696:	f005 fb1b 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d105      	bne.n	800d6ac <tcp_create_segment+0x34>
 800d6a0:	4b3e      	ldr	r3, [pc, #248]	@ (800d79c <tcp_create_segment+0x124>)
 800d6a2:	22a4      	movs	r2, #164	@ 0xa4
 800d6a4:	4940      	ldr	r1, [pc, #256]	@ (800d7a8 <tcp_create_segment+0x130>)
 800d6a6:	483f      	ldr	r0, [pc, #252]	@ (800d7a4 <tcp_create_segment+0x12c>)
 800d6a8:	f005 fb12 	bl	8012cd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d6ac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6b0:	009b      	lsls	r3, r3, #2
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	f003 0304 	and.w	r3, r3, #4
 800d6b8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d6ba:	2003      	movs	r0, #3
 800d6bc:	f7fa fd74 	bl	80081a8 <memp_malloc>
 800d6c0:	6138      	str	r0, [r7, #16]
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d104      	bne.n	800d6d2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d6c8:	68b8      	ldr	r0, [r7, #8]
 800d6ca:	f7fb fbf7 	bl	8008ebc <pbuf_free>
    return NULL;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e060      	b.n	800d794 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d6d8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d6e6:	68bb      	ldr	r3, [r7, #8]
 800d6e8:	891a      	ldrh	r2, [r3, #8]
 800d6ea:	7dfb      	ldrb	r3, [r7, #23]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d205      	bcs.n	800d6fe <tcp_create_segment+0x86>
 800d6f2:	4b2a      	ldr	r3, [pc, #168]	@ (800d79c <tcp_create_segment+0x124>)
 800d6f4:	22b0      	movs	r2, #176	@ 0xb0
 800d6f6:	492d      	ldr	r1, [pc, #180]	@ (800d7ac <tcp_create_segment+0x134>)
 800d6f8:	482a      	ldr	r0, [pc, #168]	@ (800d7a4 <tcp_create_segment+0x12c>)
 800d6fa:	f005 fae9 	bl	8012cd0 <iprintf>
  seg->len = p->tot_len - optlen;
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	891a      	ldrh	r2, [r3, #8]
 800d702:	7dfb      	ldrb	r3, [r7, #23]
 800d704:	b29b      	uxth	r3, r3
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	b29a      	uxth	r2, r3
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d70e:	2114      	movs	r1, #20
 800d710:	68b8      	ldr	r0, [r7, #8]
 800d712:	f7fb fb3d 	bl	8008d90 <pbuf_add_header>
 800d716:	4603      	mov	r3, r0
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d004      	beq.n	800d726 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d71c:	6938      	ldr	r0, [r7, #16]
 800d71e:	f7fc ffe4 	bl	800a6ea <tcp_seg_free>
    return NULL;
 800d722:	2300      	movs	r3, #0
 800d724:	e036      	b.n	800d794 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	685a      	ldr	r2, [r3, #4]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	8ada      	ldrh	r2, [r3, #22]
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	68dc      	ldr	r4, [r3, #12]
 800d738:	4610      	mov	r0, r2
 800d73a:	f7f9 fedd 	bl	80074f8 <lwip_htons>
 800d73e:	4603      	mov	r3, r0
 800d740:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	8b1a      	ldrh	r2, [r3, #24]
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	68dc      	ldr	r4, [r3, #12]
 800d74a:	4610      	mov	r0, r2
 800d74c:	f7f9 fed4 	bl	80074f8 <lwip_htons>
 800d750:	4603      	mov	r3, r0
 800d752:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	68dc      	ldr	r4, [r3, #12]
 800d758:	6838      	ldr	r0, [r7, #0]
 800d75a:	f7f9 fee1 	bl	8007520 <lwip_htonl>
 800d75e:	4603      	mov	r3, r0
 800d760:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	089b      	lsrs	r3, r3, #2
 800d766:	b2db      	uxtb	r3, r3
 800d768:	3305      	adds	r3, #5
 800d76a:	b29b      	uxth	r3, r3
 800d76c:	031b      	lsls	r3, r3, #12
 800d76e:	b29a      	uxth	r2, r3
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	b29b      	uxth	r3, r3
 800d774:	4313      	orrs	r3, r2
 800d776:	b29a      	uxth	r2, r3
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	68dc      	ldr	r4, [r3, #12]
 800d77c:	4610      	mov	r0, r2
 800d77e:	f7f9 febb 	bl	80074f8 <lwip_htons>
 800d782:	4603      	mov	r3, r0
 800d784:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	749a      	strb	r2, [r3, #18]
 800d78e:	2200      	movs	r2, #0
 800d790:	74da      	strb	r2, [r3, #19]
  return seg;
 800d792:	693b      	ldr	r3, [r7, #16]
}
 800d794:	4618      	mov	r0, r3
 800d796:	371c      	adds	r7, #28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd90      	pop	{r4, r7, pc}
 800d79c:	080155a0 	.word	0x080155a0
 800d7a0:	080155d4 	.word	0x080155d4
 800d7a4:	080155f4 	.word	0x080155f4
 800d7a8:	0801561c 	.word	0x0801561c
 800d7ac:	08015640 	.word	0x08015640

0800d7b0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b086      	sub	sp, #24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	607b      	str	r3, [r7, #4]
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	73fb      	strb	r3, [r7, #15]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	81bb      	strh	r3, [r7, #12]
 800d7c0:	4613      	mov	r3, r2
 800d7c2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d7c4:	89bb      	ldrh	r3, [r7, #12]
 800d7c6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d105      	bne.n	800d7da <tcp_pbuf_prealloc+0x2a>
 800d7ce:	4b30      	ldr	r3, [pc, #192]	@ (800d890 <tcp_pbuf_prealloc+0xe0>)
 800d7d0:	22e8      	movs	r2, #232	@ 0xe8
 800d7d2:	4930      	ldr	r1, [pc, #192]	@ (800d894 <tcp_pbuf_prealloc+0xe4>)
 800d7d4:	4830      	ldr	r0, [pc, #192]	@ (800d898 <tcp_pbuf_prealloc+0xe8>)
 800d7d6:	f005 fa7b 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d7da:	6a3b      	ldr	r3, [r7, #32]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d105      	bne.n	800d7ec <tcp_pbuf_prealloc+0x3c>
 800d7e0:	4b2b      	ldr	r3, [pc, #172]	@ (800d890 <tcp_pbuf_prealloc+0xe0>)
 800d7e2:	22e9      	movs	r2, #233	@ 0xe9
 800d7e4:	492d      	ldr	r1, [pc, #180]	@ (800d89c <tcp_pbuf_prealloc+0xec>)
 800d7e6:	482c      	ldr	r0, [pc, #176]	@ (800d898 <tcp_pbuf_prealloc+0xe8>)
 800d7e8:	f005 fa72 	bl	8012cd0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d7ec:	89ba      	ldrh	r2, [r7, #12]
 800d7ee:	897b      	ldrh	r3, [r7, #10]
 800d7f0:	429a      	cmp	r2, r3
 800d7f2:	d221      	bcs.n	800d838 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d7f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d7f8:	f003 0302 	and.w	r3, r3, #2
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d111      	bne.n	800d824 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d800:	6a3b      	ldr	r3, [r7, #32]
 800d802:	8b5b      	ldrh	r3, [r3, #26]
 800d804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d115      	bne.n	800d838 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d80c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d810:	2b00      	cmp	r3, #0
 800d812:	d007      	beq.n	800d824 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d814:	6a3b      	ldr	r3, [r7, #32]
 800d816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d103      	bne.n	800d824 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d81c:	6a3b      	ldr	r3, [r7, #32]
 800d81e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d820:	2b00      	cmp	r3, #0
 800d822:	d009      	beq.n	800d838 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d824:	89bb      	ldrh	r3, [r7, #12]
 800d826:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d82a:	f023 0203 	bic.w	r2, r3, #3
 800d82e:	897b      	ldrh	r3, [r7, #10]
 800d830:	4293      	cmp	r3, r2
 800d832:	bf28      	it	cs
 800d834:	4613      	movcs	r3, r2
 800d836:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d838:	8af9      	ldrh	r1, [r7, #22]
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d840:	4618      	mov	r0, r3
 800d842:	f7fb f857 	bl	80088f4 <pbuf_alloc>
 800d846:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d101      	bne.n	800d852 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d84e:	2300      	movs	r3, #0
 800d850:	e019      	b.n	800d886 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d006      	beq.n	800d868 <tcp_pbuf_prealloc+0xb8>
 800d85a:	4b0d      	ldr	r3, [pc, #52]	@ (800d890 <tcp_pbuf_prealloc+0xe0>)
 800d85c:	f240 120b 	movw	r2, #267	@ 0x10b
 800d860:	490f      	ldr	r1, [pc, #60]	@ (800d8a0 <tcp_pbuf_prealloc+0xf0>)
 800d862:	480d      	ldr	r0, [pc, #52]	@ (800d898 <tcp_pbuf_prealloc+0xe8>)
 800d864:	f005 fa34 	bl	8012cd0 <iprintf>
  *oversize = p->len - length;
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	895a      	ldrh	r2, [r3, #10]
 800d86c:	89bb      	ldrh	r3, [r7, #12]
 800d86e:	1ad3      	subs	r3, r2, r3
 800d870:	b29a      	uxth	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	89ba      	ldrh	r2, [r7, #12]
 800d87a:	811a      	strh	r2, [r3, #8]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	891a      	ldrh	r2, [r3, #8]
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	815a      	strh	r2, [r3, #10]
  return p;
 800d884:	693b      	ldr	r3, [r7, #16]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3718      	adds	r7, #24
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop
 800d890:	080155a0 	.word	0x080155a0
 800d894:	08015658 	.word	0x08015658
 800d898:	080155f4 	.word	0x080155f4
 800d89c:	0801567c 	.word	0x0801567c
 800d8a0:	0801569c 	.word	0x0801569c

0800d8a4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d106      	bne.n	800d8c4 <tcp_write_checks+0x20>
 800d8b6:	4b33      	ldr	r3, [pc, #204]	@ (800d984 <tcp_write_checks+0xe0>)
 800d8b8:	f240 1233 	movw	r2, #307	@ 0x133
 800d8bc:	4932      	ldr	r1, [pc, #200]	@ (800d988 <tcp_write_checks+0xe4>)
 800d8be:	4833      	ldr	r0, [pc, #204]	@ (800d98c <tcp_write_checks+0xe8>)
 800d8c0:	f005 fa06 	bl	8012cd0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	7d1b      	ldrb	r3, [r3, #20]
 800d8c8:	2b04      	cmp	r3, #4
 800d8ca:	d00e      	beq.n	800d8ea <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d8d0:	2b07      	cmp	r3, #7
 800d8d2:	d00a      	beq.n	800d8ea <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d8d8:	2b02      	cmp	r3, #2
 800d8da:	d006      	beq.n	800d8ea <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d8e0:	2b03      	cmp	r3, #3
 800d8e2:	d002      	beq.n	800d8ea <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d8e4:	f06f 030a 	mvn.w	r3, #10
 800d8e8:	e048      	b.n	800d97c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d8ea:	887b      	ldrh	r3, [r7, #2]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <tcp_write_checks+0x50>
    return ERR_OK;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	e043      	b.n	800d97c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d8fa:	887a      	ldrh	r2, [r7, #2]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d909      	bls.n	800d914 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	8b5b      	ldrh	r3, [r3, #26]
 800d904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d908:	b29a      	uxth	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d90e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d912:	e033      	b.n	800d97c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d91a:	2b08      	cmp	r3, #8
 800d91c:	d909      	bls.n	800d932 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	8b5b      	ldrh	r3, [r3, #26]
 800d922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d926:	b29a      	uxth	r2, r3
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d92c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d930:	e024      	b.n	800d97c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d00f      	beq.n	800d95c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d940:	2b00      	cmp	r3, #0
 800d942:	d11a      	bne.n	800d97a <tcp_write_checks+0xd6>
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d116      	bne.n	800d97a <tcp_write_checks+0xd6>
 800d94c:	4b0d      	ldr	r3, [pc, #52]	@ (800d984 <tcp_write_checks+0xe0>)
 800d94e:	f240 1255 	movw	r2, #341	@ 0x155
 800d952:	490f      	ldr	r1, [pc, #60]	@ (800d990 <tcp_write_checks+0xec>)
 800d954:	480d      	ldr	r0, [pc, #52]	@ (800d98c <tcp_write_checks+0xe8>)
 800d956:	f005 f9bb 	bl	8012cd0 <iprintf>
 800d95a:	e00e      	b.n	800d97a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d960:	2b00      	cmp	r3, #0
 800d962:	d103      	bne.n	800d96c <tcp_write_checks+0xc8>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d006      	beq.n	800d97a <tcp_write_checks+0xd6>
 800d96c:	4b05      	ldr	r3, [pc, #20]	@ (800d984 <tcp_write_checks+0xe0>)
 800d96e:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d972:	4908      	ldr	r1, [pc, #32]	@ (800d994 <tcp_write_checks+0xf0>)
 800d974:	4805      	ldr	r0, [pc, #20]	@ (800d98c <tcp_write_checks+0xe8>)
 800d976:	f005 f9ab 	bl	8012cd0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3708      	adds	r7, #8
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	080155a0 	.word	0x080155a0
 800d988:	080156b0 	.word	0x080156b0
 800d98c:	080155f4 	.word	0x080155f4
 800d990:	080156d0 	.word	0x080156d0
 800d994:	0801570c 	.word	0x0801570c

0800d998 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d998:	b590      	push	{r4, r7, lr}
 800d99a:	b09b      	sub	sp, #108	@ 0x6c
 800d99c:	af04      	add	r7, sp, #16
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	80fb      	strh	r3, [r7, #6]
 800d9aa:	4613      	mov	r3, r2
 800d9ac:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9be:	2300      	movs	r3, #0
 800d9c0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d109      	bne.n	800d9f4 <tcp_write+0x5c>
 800d9e0:	4ba4      	ldr	r3, [pc, #656]	@ (800dc74 <tcp_write+0x2dc>)
 800d9e2:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d9e6:	49a4      	ldr	r1, [pc, #656]	@ (800dc78 <tcp_write+0x2e0>)
 800d9e8:	48a4      	ldr	r0, [pc, #656]	@ (800dc7c <tcp_write+0x2e4>)
 800d9ea:	f005 f971 	bl	8012cd0 <iprintf>
 800d9ee:	f06f 030f 	mvn.w	r3, #15
 800d9f2:	e32a      	b.n	800e04a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d9fa:	085b      	lsrs	r3, r3, #1
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da02:	4293      	cmp	r3, r2
 800da04:	bf28      	it	cs
 800da06:	4613      	movcs	r3, r2
 800da08:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800da0a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <tcp_write+0x7e>
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da14:	e000      	b.n	800da18 <tcp_write+0x80>
 800da16:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da18:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d109      	bne.n	800da34 <tcp_write+0x9c>
 800da20:	4b94      	ldr	r3, [pc, #592]	@ (800dc74 <tcp_write+0x2dc>)
 800da22:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800da26:	4996      	ldr	r1, [pc, #600]	@ (800dc80 <tcp_write+0x2e8>)
 800da28:	4894      	ldr	r0, [pc, #592]	@ (800dc7c <tcp_write+0x2e4>)
 800da2a:	f005 f951 	bl	8012cd0 <iprintf>
 800da2e:	f06f 030f 	mvn.w	r3, #15
 800da32:	e30a      	b.n	800e04a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800da34:	88fb      	ldrh	r3, [r7, #6]
 800da36:	4619      	mov	r1, r3
 800da38:	68f8      	ldr	r0, [r7, #12]
 800da3a:	f7ff ff33 	bl	800d8a4 <tcp_write_checks>
 800da3e:	4603      	mov	r3, r0
 800da40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800da44:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <tcp_write+0xba>
    return err;
 800da4c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800da50:	e2fb      	b.n	800e04a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da58:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da5c:	2300      	movs	r3, #0
 800da5e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80f6 	beq.w	800dc58 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da70:	653b      	str	r3, [r7, #80]	@ 0x50
 800da72:	e002      	b.n	800da7a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800da74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d1f8      	bne.n	800da74 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800da82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da84:	7a9b      	ldrb	r3, [r3, #10]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f003 0304 	and.w	r3, r3, #4
 800da8e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da94:	891b      	ldrh	r3, [r3, #8]
 800da96:	4619      	mov	r1, r3
 800da98:	8c3b      	ldrh	r3, [r7, #32]
 800da9a:	440b      	add	r3, r1
 800da9c:	429a      	cmp	r2, r3
 800da9e:	da06      	bge.n	800daae <tcp_write+0x116>
 800daa0:	4b74      	ldr	r3, [pc, #464]	@ (800dc74 <tcp_write+0x2dc>)
 800daa2:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800daa6:	4977      	ldr	r1, [pc, #476]	@ (800dc84 <tcp_write+0x2ec>)
 800daa8:	4874      	ldr	r0, [pc, #464]	@ (800dc7c <tcp_write+0x2e4>)
 800daaa:	f005 f911 	bl	8012cd0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800daae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dab0:	891a      	ldrh	r2, [r3, #8]
 800dab2:	8c3b      	ldrh	r3, [r7, #32]
 800dab4:	4413      	add	r3, r2
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800daba:	1ad3      	subs	r3, r2, r3
 800dabc:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dac4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dac6:	8a7b      	ldrh	r3, [r7, #18]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d026      	beq.n	800db1a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dacc:	8a7b      	ldrh	r3, [r7, #18]
 800dace:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d206      	bcs.n	800dae2 <tcp_write+0x14a>
 800dad4:	4b67      	ldr	r3, [pc, #412]	@ (800dc74 <tcp_write+0x2dc>)
 800dad6:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800dada:	496b      	ldr	r1, [pc, #428]	@ (800dc88 <tcp_write+0x2f0>)
 800dadc:	4867      	ldr	r0, [pc, #412]	@ (800dc7c <tcp_write+0x2e4>)
 800dade:	f005 f8f7 	bl	8012cd0 <iprintf>
      seg = last_unsent;
 800dae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dae6:	8a7b      	ldrh	r3, [r7, #18]
 800dae8:	88fa      	ldrh	r2, [r7, #6]
 800daea:	4293      	cmp	r3, r2
 800daec:	bf28      	it	cs
 800daee:	4613      	movcs	r3, r2
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800daf4:	4293      	cmp	r3, r2
 800daf6:	bf28      	it	cs
 800daf8:	4613      	movcs	r3, r2
 800dafa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800dafc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db00:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800db02:	4413      	add	r3, r2
 800db04:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800db08:	8a7a      	ldrh	r2, [r7, #18]
 800db0a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	b29b      	uxth	r3, r3
 800db10:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800db12:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800db1a:	8a7b      	ldrh	r3, [r7, #18]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <tcp_write+0x1a0>
 800db20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db24:	88fb      	ldrh	r3, [r7, #6]
 800db26:	429a      	cmp	r2, r3
 800db28:	d006      	beq.n	800db38 <tcp_write+0x1a0>
 800db2a:	4b52      	ldr	r3, [pc, #328]	@ (800dc74 <tcp_write+0x2dc>)
 800db2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db30:	4956      	ldr	r1, [pc, #344]	@ (800dc8c <tcp_write+0x2f4>)
 800db32:	4852      	ldr	r0, [pc, #328]	@ (800dc7c <tcp_write+0x2e4>)
 800db34:	f005 f8cc 	bl	8012cd0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800db38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db3c:	88fb      	ldrh	r3, [r7, #6]
 800db3e:	429a      	cmp	r2, r3
 800db40:	f080 8167 	bcs.w	800de12 <tcp_write+0x47a>
 800db44:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db46:	2b00      	cmp	r3, #0
 800db48:	f000 8163 	beq.w	800de12 <tcp_write+0x47a>
 800db4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db4e:	891b      	ldrh	r3, [r3, #8]
 800db50:	2b00      	cmp	r3, #0
 800db52:	f000 815e 	beq.w	800de12 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800db56:	88fa      	ldrh	r2, [r7, #6]
 800db58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db5c:	1ad2      	subs	r2, r2, r3
 800db5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db60:	4293      	cmp	r3, r2
 800db62:	bfa8      	it	ge
 800db64:	4613      	movge	r3, r2
 800db66:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800db68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db6a:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db6c:	797b      	ldrb	r3, [r7, #5]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b00      	cmp	r3, #0
 800db74:	d027      	beq.n	800dbc6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800db76:	f107 0012 	add.w	r0, r7, #18
 800db7a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db7c:	8bf9      	ldrh	r1, [r7, #30]
 800db7e:	2301      	movs	r3, #1
 800db80:	9302      	str	r3, [sp, #8]
 800db82:	797b      	ldrb	r3, [r7, #5]
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	9300      	str	r3, [sp, #0]
 800db8a:	4603      	mov	r3, r0
 800db8c:	2000      	movs	r0, #0
 800db8e:	f7ff fe0f 	bl	800d7b0 <tcp_pbuf_prealloc>
 800db92:	6578      	str	r0, [r7, #84]	@ 0x54
 800db94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db96:	2b00      	cmp	r3, #0
 800db98:	f000 8225 	beq.w	800dfe6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800db9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db9e:	6858      	ldr	r0, [r3, #4]
 800dba0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	4413      	add	r3, r2
 800dba8:	8bfa      	ldrh	r2, [r7, #30]
 800dbaa:	4619      	mov	r1, r3
 800dbac:	f005 f9df 	bl	8012f6e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800dbb0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800dbb2:	f7fb fa11 	bl	8008fd8 <pbuf_clen>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800dbc4:	e041      	b.n	800dc4a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800dbc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbcc:	e002      	b.n	800dbd4 <tcp_write+0x23c>
 800dbce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1f8      	bne.n	800dbce <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbde:	7b1b      	ldrb	r3, [r3, #12]
 800dbe0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d115      	bne.n	800dc14 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dbe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbee:	8952      	ldrh	r2, [r2, #10]
 800dbf0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbf2:	68ba      	ldr	r2, [r7, #8]
 800dbf4:	429a      	cmp	r2, r3
 800dbf6:	d10d      	bne.n	800dc14 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dbf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d006      	beq.n	800dc0e <tcp_write+0x276>
 800dc00:	4b1c      	ldr	r3, [pc, #112]	@ (800dc74 <tcp_write+0x2dc>)
 800dc02:	f240 2231 	movw	r2, #561	@ 0x231
 800dc06:	4922      	ldr	r1, [pc, #136]	@ (800dc90 <tcp_write+0x2f8>)
 800dc08:	481c      	ldr	r0, [pc, #112]	@ (800dc7c <tcp_write+0x2e4>)
 800dc0a:	f005 f861 	bl	8012cd0 <iprintf>
          extendlen = seglen;
 800dc0e:	8bfb      	ldrh	r3, [r7, #30]
 800dc10:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800dc12:	e01a      	b.n	800dc4a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dc14:	8bfb      	ldrh	r3, [r7, #30]
 800dc16:	2201      	movs	r2, #1
 800dc18:	4619      	mov	r1, r3
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	f7fa fe6a 	bl	80088f4 <pbuf_alloc>
 800dc20:	6578      	str	r0, [r7, #84]	@ 0x54
 800dc22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	f000 81e0 	beq.w	800dfea <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800dc2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	441a      	add	r2, r3
 800dc32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc34:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800dc36:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800dc38:	f7fb f9ce 	bl	8008fd8 <pbuf_clen>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc44:	4413      	add	r3, r2
 800dc46:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dc4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc4e:	8bfb      	ldrh	r3, [r7, #30]
 800dc50:	4413      	add	r3, r2
 800dc52:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800dc56:	e0dc      	b.n	800de12 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	f000 80d7 	beq.w	800de12 <tcp_write+0x47a>
 800dc64:	4b03      	ldr	r3, [pc, #12]	@ (800dc74 <tcp_write+0x2dc>)
 800dc66:	f240 224a 	movw	r2, #586	@ 0x24a
 800dc6a:	490a      	ldr	r1, [pc, #40]	@ (800dc94 <tcp_write+0x2fc>)
 800dc6c:	4803      	ldr	r0, [pc, #12]	@ (800dc7c <tcp_write+0x2e4>)
 800dc6e:	f005 f82f 	bl	8012cd0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dc72:	e0ce      	b.n	800de12 <tcp_write+0x47a>
 800dc74:	080155a0 	.word	0x080155a0
 800dc78:	08015740 	.word	0x08015740
 800dc7c:	080155f4 	.word	0x080155f4
 800dc80:	08015758 	.word	0x08015758
 800dc84:	0801578c 	.word	0x0801578c
 800dc88:	080157a4 	.word	0x080157a4
 800dc8c:	080157c4 	.word	0x080157c4
 800dc90:	080157e4 	.word	0x080157e4
 800dc94:	08015810 	.word	0x08015810
    struct pbuf *p;
    u16_t left = len - pos;
 800dc98:	88fa      	ldrh	r2, [r7, #6]
 800dc9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc9e:	1ad3      	subs	r3, r2, r3
 800dca0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800dca2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800dcae:	8b7a      	ldrh	r2, [r7, #26]
 800dcb0:	8bbb      	ldrh	r3, [r7, #28]
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	bf28      	it	cs
 800dcb6:	4613      	movcs	r3, r2
 800dcb8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dcba:	797b      	ldrb	r3, [r7, #5]
 800dcbc:	f003 0301 	and.w	r3, r3, #1
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d036      	beq.n	800dd32 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dcc4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	8b3b      	ldrh	r3, [r7, #24]
 800dccc:	4413      	add	r3, r2
 800dcce:	b299      	uxth	r1, r3
 800dcd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	bf0c      	ite	eq
 800dcd6:	2301      	moveq	r3, #1
 800dcd8:	2300      	movne	r3, #0
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f107 0012 	add.w	r0, r7, #18
 800dce0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dce2:	9302      	str	r3, [sp, #8]
 800dce4:	797b      	ldrb	r3, [r7, #5]
 800dce6:	9301      	str	r3, [sp, #4]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	4603      	mov	r3, r0
 800dcee:	2036      	movs	r0, #54	@ 0x36
 800dcf0:	f7ff fd5e 	bl	800d7b0 <tcp_pbuf_prealloc>
 800dcf4:	6338      	str	r0, [r7, #48]	@ 0x30
 800dcf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 8178 	beq.w	800dfee <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd00:	895b      	ldrh	r3, [r3, #10]
 800dd02:	8b3a      	ldrh	r2, [r7, #24]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d906      	bls.n	800dd16 <tcp_write+0x37e>
 800dd08:	4b8c      	ldr	r3, [pc, #560]	@ (800df3c <tcp_write+0x5a4>)
 800dd0a:	f240 2266 	movw	r2, #614	@ 0x266
 800dd0e:	498c      	ldr	r1, [pc, #560]	@ (800df40 <tcp_write+0x5a8>)
 800dd10:	488c      	ldr	r0, [pc, #560]	@ (800df44 <tcp_write+0x5ac>)
 800dd12:	f004 ffdd 	bl	8012cd0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800dd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd18:	685a      	ldr	r2, [r3, #4]
 800dd1a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dd1e:	18d0      	adds	r0, r2, r3
 800dd20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd24:	68ba      	ldr	r2, [r7, #8]
 800dd26:	4413      	add	r3, r2
 800dd28:	8b3a      	ldrh	r2, [r7, #24]
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	f005 f91f 	bl	8012f6e <memcpy>
 800dd30:	e02f      	b.n	800dd92 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dd32:	8a7b      	ldrh	r3, [r7, #18]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d006      	beq.n	800dd46 <tcp_write+0x3ae>
 800dd38:	4b80      	ldr	r3, [pc, #512]	@ (800df3c <tcp_write+0x5a4>)
 800dd3a:	f240 2271 	movw	r2, #625	@ 0x271
 800dd3e:	4982      	ldr	r1, [pc, #520]	@ (800df48 <tcp_write+0x5b0>)
 800dd40:	4880      	ldr	r0, [pc, #512]	@ (800df44 <tcp_write+0x5ac>)
 800dd42:	f004 ffc5 	bl	8012cd0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dd46:	8b3b      	ldrh	r3, [r7, #24]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	2036      	movs	r0, #54	@ 0x36
 800dd4e:	f7fa fdd1 	bl	80088f4 <pbuf_alloc>
 800dd52:	6178      	str	r0, [r7, #20]
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 814b 	beq.w	800dff2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dd5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd60:	68ba      	ldr	r2, [r7, #8]
 800dd62:	441a      	add	r2, r3
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dd68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dd72:	4619      	mov	r1, r3
 800dd74:	2036      	movs	r0, #54	@ 0x36
 800dd76:	f7fa fdbd 	bl	80088f4 <pbuf_alloc>
 800dd7a:	6338      	str	r0, [r7, #48]	@ 0x30
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d103      	bne.n	800dd8a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800dd82:	6978      	ldr	r0, [r7, #20]
 800dd84:	f7fb f89a 	bl	8008ebc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dd88:	e136      	b.n	800dff8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dd8a:	6979      	ldr	r1, [r7, #20]
 800dd8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd8e:	f7fb f961 	bl	8009054 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800dd92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd94:	f7fb f920 	bl	8008fd8 <pbuf_clen>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dda0:	4413      	add	r3, r2
 800dda2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800dda6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ddaa:	2b09      	cmp	r3, #9
 800ddac:	d903      	bls.n	800ddb6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ddae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ddb0:	f7fb f884 	bl	8008ebc <pbuf_free>
      goto memerr;
 800ddb4:	e120      	b.n	800dff8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ddbe:	441a      	add	r2, r3
 800ddc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddc4:	9300      	str	r3, [sp, #0]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	2200      	movs	r2, #0
 800ddca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f7ff fc53 	bl	800d678 <tcp_create_segment>
 800ddd2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ddd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 810d 	beq.w	800dff6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800dddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d102      	bne.n	800dde8 <tcp_write+0x450>
      queue = seg;
 800dde2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dde6:	e00c      	b.n	800de02 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dde8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <tcp_write+0x464>
 800ddee:	4b53      	ldr	r3, [pc, #332]	@ (800df3c <tcp_write+0x5a4>)
 800ddf0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ddf4:	4955      	ldr	r1, [pc, #340]	@ (800df4c <tcp_write+0x5b4>)
 800ddf6:	4853      	ldr	r0, [pc, #332]	@ (800df44 <tcp_write+0x5ac>)
 800ddf8:	f004 ff6a 	bl	8012cd0 <iprintf>
      prev_seg->next = seg;
 800ddfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddfe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800de00:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800de02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de04:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800de06:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800de0a:	8b3b      	ldrh	r3, [r7, #24]
 800de0c:	4413      	add	r3, r2
 800de0e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800de12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800de16:	88fb      	ldrh	r3, [r7, #6]
 800de18:	429a      	cmp	r2, r3
 800de1a:	f4ff af3d 	bcc.w	800dc98 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800de1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de20:	2b00      	cmp	r3, #0
 800de22:	d02c      	beq.n	800de7e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800de24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de26:	685b      	ldr	r3, [r3, #4]
 800de28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de2a:	e01e      	b.n	800de6a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800de2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2e:	891a      	ldrh	r2, [r3, #8]
 800de30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de32:	4413      	add	r3, r2
 800de34:	b29a      	uxth	r2, r3
 800de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de38:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800de3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d110      	bne.n	800de64 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800de42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de48:	8952      	ldrh	r2, [r2, #10]
 800de4a:	4413      	add	r3, r2
 800de4c:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800de4e:	68b9      	ldr	r1, [r7, #8]
 800de50:	4618      	mov	r0, r3
 800de52:	f005 f88c 	bl	8012f6e <memcpy>
        p->len += oversize_used;
 800de56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de58:	895a      	ldrh	r2, [r3, #10]
 800de5a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de5c:	4413      	add	r3, r2
 800de5e:	b29a      	uxth	r2, r3
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800de64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d1dd      	bne.n	800de2c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800de70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de72:	891a      	ldrh	r2, [r3, #8]
 800de74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de76:	4413      	add	r3, r2
 800de78:	b29a      	uxth	r2, r3
 800de7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de7c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800de7e:	8a7a      	ldrh	r2, [r7, #18]
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800de86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d018      	beq.n	800debe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800de8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <tcp_write+0x508>
 800de92:	4b2a      	ldr	r3, [pc, #168]	@ (800df3c <tcp_write+0x5a4>)
 800de94:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800de98:	492d      	ldr	r1, [pc, #180]	@ (800df50 <tcp_write+0x5b8>)
 800de9a:	482a      	ldr	r0, [pc, #168]	@ (800df44 <tcp_write+0x5ac>)
 800de9c:	f004 ff18 	bl	8012cd0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800dea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7fb f8d4 	bl	8009054 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800deac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deae:	891a      	ldrh	r2, [r3, #8]
 800deb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deb2:	891b      	ldrh	r3, [r3, #8]
 800deb4:	4413      	add	r3, r2
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deba:	811a      	strh	r2, [r3, #8]
 800debc:	e037      	b.n	800df2e <tcp_write+0x596>
  } else if (extendlen > 0) {
 800debe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d034      	beq.n	800df2e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d003      	beq.n	800ded2 <tcp_write+0x53a>
 800deca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d106      	bne.n	800dee0 <tcp_write+0x548>
 800ded2:	4b1a      	ldr	r3, [pc, #104]	@ (800df3c <tcp_write+0x5a4>)
 800ded4:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800ded8:	491e      	ldr	r1, [pc, #120]	@ (800df54 <tcp_write+0x5bc>)
 800deda:	481a      	ldr	r0, [pc, #104]	@ (800df44 <tcp_write+0x5ac>)
 800dedc:	f004 fef8 	bl	8012cd0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dee6:	e009      	b.n	800defc <tcp_write+0x564>
      p->tot_len += extendlen;
 800dee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deea:	891a      	ldrh	r2, [r3, #8]
 800deec:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800deee:	4413      	add	r3, r2
 800def0:	b29a      	uxth	r2, r3
 800def2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800def6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800defc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d1f1      	bne.n	800dee8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800df04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df06:	891a      	ldrh	r2, [r3, #8]
 800df08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df0a:	4413      	add	r3, r2
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df10:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800df12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df14:	895a      	ldrh	r2, [r3, #10]
 800df16:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df18:	4413      	add	r3, r2
 800df1a:	b29a      	uxth	r2, r3
 800df1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800df20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df22:	891a      	ldrh	r2, [r3, #8]
 800df24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df26:	4413      	add	r3, r2
 800df28:	b29a      	uxth	r2, r3
 800df2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800df2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df30:	2b00      	cmp	r3, #0
 800df32:	d111      	bne.n	800df58 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df38:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df3a:	e010      	b.n	800df5e <tcp_write+0x5c6>
 800df3c:	080155a0 	.word	0x080155a0
 800df40:	08015840 	.word	0x08015840
 800df44:	080155f4 	.word	0x080155f4
 800df48:	08015880 	.word	0x08015880
 800df4c:	08015890 	.word	0x08015890
 800df50:	080158a4 	.word	0x080158a4
 800df54:	080158dc 	.word	0x080158dc
  } else {
    last_unsent->next = queue;
 800df58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df5c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df62:	88fb      	ldrh	r3, [r7, #6]
 800df64:	441a      	add	r2, r3
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800df70:	88fb      	ldrh	r3, [r7, #6]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	b29a      	uxth	r2, r3
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800df82:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00e      	beq.n	800dfae <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df94:	2b00      	cmp	r3, #0
 800df96:	d10a      	bne.n	800dfae <tcp_write+0x616>
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d106      	bne.n	800dfae <tcp_write+0x616>
 800dfa0:	4b2c      	ldr	r3, [pc, #176]	@ (800e054 <tcp_write+0x6bc>)
 800dfa2:	f240 3212 	movw	r2, #786	@ 0x312
 800dfa6:	492c      	ldr	r1, [pc, #176]	@ (800e058 <tcp_write+0x6c0>)
 800dfa8:	482c      	ldr	r0, [pc, #176]	@ (800e05c <tcp_write+0x6c4>)
 800dfaa:	f004 fe91 	bl	8012cd0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800dfae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d016      	beq.n	800dfe2 <tcp_write+0x64a>
 800dfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d012      	beq.n	800dfe2 <tcp_write+0x64a>
 800dfbc:	797b      	ldrb	r3, [r7, #5]
 800dfbe:	f003 0302 	and.w	r3, r3, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10d      	bne.n	800dfe2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dfc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	899b      	ldrh	r3, [r3, #12]
 800dfcc:	b29c      	uxth	r4, r3
 800dfce:	2008      	movs	r0, #8
 800dfd0:	f7f9 fa92 	bl	80074f8 <lwip_htons>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	461a      	mov	r2, r3
 800dfd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfda:	68db      	ldr	r3, [r3, #12]
 800dfdc:	4322      	orrs	r2, r4
 800dfde:	b292      	uxth	r2, r2
 800dfe0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e031      	b.n	800e04a <tcp_write+0x6b2>
          goto memerr;
 800dfe6:	bf00      	nop
 800dfe8:	e006      	b.n	800dff8 <tcp_write+0x660>
            goto memerr;
 800dfea:	bf00      	nop
 800dfec:	e004      	b.n	800dff8 <tcp_write+0x660>
        goto memerr;
 800dfee:	bf00      	nop
 800dff0:	e002      	b.n	800dff8 <tcp_write+0x660>
        goto memerr;
 800dff2:	bf00      	nop
 800dff4:	e000      	b.n	800dff8 <tcp_write+0x660>
      goto memerr;
 800dff6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	8b5b      	ldrh	r3, [r3, #26]
 800dffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e000:	b29a      	uxth	r2, r3
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d002      	beq.n	800e012 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e00c:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e00e:	f7fa ff55 	bl	8008ebc <pbuf_free>
  }
  if (queue != NULL) {
 800e012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e014:	2b00      	cmp	r3, #0
 800e016:	d002      	beq.n	800e01e <tcp_write+0x686>
    tcp_segs_free(queue);
 800e018:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e01a:	f7fc fb51 	bl	800a6c0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e024:	2b00      	cmp	r3, #0
 800e026:	d00e      	beq.n	800e046 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d10a      	bne.n	800e046 <tcp_write+0x6ae>
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d106      	bne.n	800e046 <tcp_write+0x6ae>
 800e038:	4b06      	ldr	r3, [pc, #24]	@ (800e054 <tcp_write+0x6bc>)
 800e03a:	f240 3227 	movw	r2, #807	@ 0x327
 800e03e:	4906      	ldr	r1, [pc, #24]	@ (800e058 <tcp_write+0x6c0>)
 800e040:	4806      	ldr	r0, [pc, #24]	@ (800e05c <tcp_write+0x6c4>)
 800e042:	f004 fe45 	bl	8012cd0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e046:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	375c      	adds	r7, #92	@ 0x5c
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd90      	pop	{r4, r7, pc}
 800e052:	bf00      	nop
 800e054:	080155a0 	.word	0x080155a0
 800e058:	08015914 	.word	0x08015914
 800e05c:	080155f4 	.word	0x080155f4

0800e060 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e060:	b590      	push	{r4, r7, lr}
 800e062:	b08b      	sub	sp, #44	@ 0x2c
 800e064:	af02      	add	r7, sp, #8
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e06c:	2300      	movs	r3, #0
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	2300      	movs	r3, #0
 800e072:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e074:	2300      	movs	r3, #0
 800e076:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d106      	bne.n	800e08c <tcp_split_unsent_seg+0x2c>
 800e07e:	4b95      	ldr	r3, [pc, #596]	@ (800e2d4 <tcp_split_unsent_seg+0x274>)
 800e080:	f240 324b 	movw	r2, #843	@ 0x34b
 800e084:	4994      	ldr	r1, [pc, #592]	@ (800e2d8 <tcp_split_unsent_seg+0x278>)
 800e086:	4895      	ldr	r0, [pc, #596]	@ (800e2dc <tcp_split_unsent_seg+0x27c>)
 800e088:	f004 fe22 	bl	8012cd0 <iprintf>

  useg = pcb->unsent;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e090:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d102      	bne.n	800e09e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e09c:	e116      	b.n	800e2cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e09e:	887b      	ldrh	r3, [r7, #2]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d109      	bne.n	800e0b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e0a4:	4b8b      	ldr	r3, [pc, #556]	@ (800e2d4 <tcp_split_unsent_seg+0x274>)
 800e0a6:	f240 3253 	movw	r2, #851	@ 0x353
 800e0aa:	498d      	ldr	r1, [pc, #564]	@ (800e2e0 <tcp_split_unsent_seg+0x280>)
 800e0ac:	488b      	ldr	r0, [pc, #556]	@ (800e2dc <tcp_split_unsent_seg+0x27c>)
 800e0ae:	f004 fe0f 	bl	8012cd0 <iprintf>
    return ERR_VAL;
 800e0b2:	f06f 0305 	mvn.w	r3, #5
 800e0b6:	e109      	b.n	800e2cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	891b      	ldrh	r3, [r3, #8]
 800e0bc:	887a      	ldrh	r2, [r7, #2]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d301      	bcc.n	800e0c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	e102      	b.n	800e2cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0ca:	887a      	ldrh	r2, [r7, #2]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d906      	bls.n	800e0de <tcp_split_unsent_seg+0x7e>
 800e0d0:	4b80      	ldr	r3, [pc, #512]	@ (800e2d4 <tcp_split_unsent_seg+0x274>)
 800e0d2:	f240 325b 	movw	r2, #859	@ 0x35b
 800e0d6:	4983      	ldr	r1, [pc, #524]	@ (800e2e4 <tcp_split_unsent_seg+0x284>)
 800e0d8:	4880      	ldr	r0, [pc, #512]	@ (800e2dc <tcp_split_unsent_seg+0x27c>)
 800e0da:	f004 fdf9 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e0de:	697b      	ldr	r3, [r7, #20]
 800e0e0:	891b      	ldrh	r3, [r3, #8]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <tcp_split_unsent_seg+0x94>
 800e0e6:	4b7b      	ldr	r3, [pc, #492]	@ (800e2d4 <tcp_split_unsent_seg+0x274>)
 800e0e8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e0ec:	497e      	ldr	r1, [pc, #504]	@ (800e2e8 <tcp_split_unsent_seg+0x288>)
 800e0ee:	487b      	ldr	r0, [pc, #492]	@ (800e2dc <tcp_split_unsent_seg+0x27c>)
 800e0f0:	f004 fdee 	bl	8012cd0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	7a9b      	ldrb	r3, [r3, #10]
 800e0f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e0fa:	7bfb      	ldrb	r3, [r7, #15]
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	f003 0304 	and.w	r3, r3, #4
 800e104:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	891a      	ldrh	r2, [r3, #8]
 800e10a:	887b      	ldrh	r3, [r7, #2]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e110:	7bbb      	ldrb	r3, [r7, #14]
 800e112:	b29a      	uxth	r2, r3
 800e114:	89bb      	ldrh	r3, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	b29b      	uxth	r3, r3
 800e11a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e11e:	4619      	mov	r1, r3
 800e120:	2036      	movs	r0, #54	@ 0x36
 800e122:	f7fa fbe7 	bl	80088f4 <pbuf_alloc>
 800e126:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f000 80b7 	beq.w	800e29e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	891a      	ldrh	r2, [r3, #8]
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	891b      	ldrh	r3, [r3, #8]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	887b      	ldrh	r3, [r7, #2]
 800e140:	4413      	add	r3, r2
 800e142:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	6858      	ldr	r0, [r3, #4]
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	685a      	ldr	r2, [r3, #4]
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
 800e14e:	18d1      	adds	r1, r2, r3
 800e150:	897b      	ldrh	r3, [r7, #10]
 800e152:	89ba      	ldrh	r2, [r7, #12]
 800e154:	f7fb f8b6 	bl	80092c4 <pbuf_copy_partial>
 800e158:	4603      	mov	r3, r0
 800e15a:	461a      	mov	r2, r3
 800e15c:	89bb      	ldrh	r3, [r7, #12]
 800e15e:	4293      	cmp	r3, r2
 800e160:	f040 809f 	bne.w	800e2a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	68db      	ldr	r3, [r3, #12]
 800e168:	899b      	ldrh	r3, [r3, #12]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	4618      	mov	r0, r3
 800e16e:	f7f9 f9c3 	bl	80074f8 <lwip_htons>
 800e172:	4603      	mov	r3, r0
 800e174:	b2db      	uxtb	r3, r3
 800e176:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e17a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e17c:	2300      	movs	r3, #0
 800e17e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e180:	7efb      	ldrb	r3, [r7, #27]
 800e182:	f003 0308 	and.w	r3, r3, #8
 800e186:	2b00      	cmp	r3, #0
 800e188:	d007      	beq.n	800e19a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e18a:	7efb      	ldrb	r3, [r7, #27]
 800e18c:	f023 0308 	bic.w	r3, r3, #8
 800e190:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e192:	7ebb      	ldrb	r3, [r7, #26]
 800e194:	f043 0308 	orr.w	r3, r3, #8
 800e198:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e19a:	7efb      	ldrb	r3, [r7, #27]
 800e19c:	f003 0301 	and.w	r3, r3, #1
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d007      	beq.n	800e1b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e1a4:	7efb      	ldrb	r3, [r7, #27]
 800e1a6:	f023 0301 	bic.w	r3, r3, #1
 800e1aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e1ac:	7ebb      	ldrb	r3, [r7, #26]
 800e1ae:	f043 0301 	orr.w	r3, r3, #1
 800e1b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7f9 f9b0 	bl	8007520 <lwip_htonl>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	887b      	ldrh	r3, [r7, #2]
 800e1c4:	18d1      	adds	r1, r2, r3
 800e1c6:	7eba      	ldrb	r2, [r7, #26]
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	9300      	str	r3, [sp, #0]
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	6939      	ldr	r1, [r7, #16]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f7ff fa51 	bl	800d678 <tcp_create_segment>
 800e1d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d063      	beq.n	800e2a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fa fef8 	bl	8008fd8 <pbuf_clen>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e1f2:	1a9b      	subs	r3, r3, r2
 800e1f4:	b29a      	uxth	r2, r3
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	6858      	ldr	r0, [r3, #4]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	891a      	ldrh	r2, [r3, #8]
 800e206:	89bb      	ldrh	r3, [r7, #12]
 800e208:	1ad3      	subs	r3, r2, r3
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	4619      	mov	r1, r3
 800e20e:	f7fa fccf 	bl	8008bb0 <pbuf_realloc>
  useg->len -= remainder;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	891a      	ldrh	r2, [r3, #8]
 800e216:	89bb      	ldrh	r3, [r7, #12]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	899b      	ldrh	r3, [r3, #12]
 800e226:	b29c      	uxth	r4, r3
 800e228:	7efb      	ldrb	r3, [r7, #27]
 800e22a:	b29b      	uxth	r3, r3
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f9 f963 	bl	80074f8 <lwip_htons>
 800e232:	4603      	mov	r3, r0
 800e234:	461a      	mov	r2, r3
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	4322      	orrs	r2, r4
 800e23c:	b292      	uxth	r2, r2
 800e23e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e240:	697b      	ldr	r3, [r7, #20]
 800e242:	685b      	ldr	r3, [r3, #4]
 800e244:	4618      	mov	r0, r3
 800e246:	f7fa fec7 	bl	8008fd8 <pbuf_clen>
 800e24a:	4603      	mov	r3, r0
 800e24c:	461a      	mov	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e254:	4413      	add	r3, r2
 800e256:	b29a      	uxth	r2, r3
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e25e:	69fb      	ldr	r3, [r7, #28]
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	4618      	mov	r0, r3
 800e264:	f7fa feb8 	bl	8008fd8 <pbuf_clen>
 800e268:	4603      	mov	r3, r0
 800e26a:	461a      	mov	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e272:	4413      	add	r3, r2
 800e274:	b29a      	uxth	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	69fb      	ldr	r3, [r7, #28]
 800e282:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	69fa      	ldr	r2, [r7, #28]
 800e288:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e28a:	69fb      	ldr	r3, [r7, #28]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d103      	bne.n	800e29a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e29a:	2300      	movs	r3, #0
 800e29c:	e016      	b.n	800e2cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e29e:	bf00      	nop
 800e2a0:	e002      	b.n	800e2a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2a2:	bf00      	nop
 800e2a4:	e000      	b.n	800e2a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d006      	beq.n	800e2bc <tcp_split_unsent_seg+0x25c>
 800e2ae:	4b09      	ldr	r3, [pc, #36]	@ (800e2d4 <tcp_split_unsent_seg+0x274>)
 800e2b0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e2b4:	490d      	ldr	r1, [pc, #52]	@ (800e2ec <tcp_split_unsent_seg+0x28c>)
 800e2b6:	4809      	ldr	r0, [pc, #36]	@ (800e2dc <tcp_split_unsent_seg+0x27c>)
 800e2b8:	f004 fd0a 	bl	8012cd0 <iprintf>
  if (p != NULL) {
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2c2:	6938      	ldr	r0, [r7, #16]
 800e2c4:	f7fa fdfa 	bl	8008ebc <pbuf_free>
  }

  return ERR_MEM;
 800e2c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3724      	adds	r7, #36	@ 0x24
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd90      	pop	{r4, r7, pc}
 800e2d4:	080155a0 	.word	0x080155a0
 800e2d8:	08015934 	.word	0x08015934
 800e2dc:	080155f4 	.word	0x080155f4
 800e2e0:	08015958 	.word	0x08015958
 800e2e4:	0801597c 	.word	0x0801597c
 800e2e8:	0801598c 	.word	0x0801598c
 800e2ec:	0801599c 	.word	0x0801599c

0800e2f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e2f0:	b590      	push	{r4, r7, lr}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d106      	bne.n	800e30c <tcp_send_fin+0x1c>
 800e2fe:	4b21      	ldr	r3, [pc, #132]	@ (800e384 <tcp_send_fin+0x94>)
 800e300:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e304:	4920      	ldr	r1, [pc, #128]	@ (800e388 <tcp_send_fin+0x98>)
 800e306:	4821      	ldr	r0, [pc, #132]	@ (800e38c <tcp_send_fin+0x9c>)
 800e308:	f004 fce2 	bl	8012cd0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e310:	2b00      	cmp	r3, #0
 800e312:	d02e      	beq.n	800e372 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e318:	60fb      	str	r3, [r7, #12]
 800e31a:	e002      	b.n	800e322 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1f8      	bne.n	800e31c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	68db      	ldr	r3, [r3, #12]
 800e32e:	899b      	ldrh	r3, [r3, #12]
 800e330:	b29b      	uxth	r3, r3
 800e332:	4618      	mov	r0, r3
 800e334:	f7f9 f8e0 	bl	80074f8 <lwip_htons>
 800e338:	4603      	mov	r3, r0
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	f003 0307 	and.w	r3, r3, #7
 800e340:	2b00      	cmp	r3, #0
 800e342:	d116      	bne.n	800e372 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	899b      	ldrh	r3, [r3, #12]
 800e34a:	b29c      	uxth	r4, r3
 800e34c:	2001      	movs	r0, #1
 800e34e:	f7f9 f8d3 	bl	80074f8 <lwip_htons>
 800e352:	4603      	mov	r3, r0
 800e354:	461a      	mov	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	4322      	orrs	r2, r4
 800e35c:	b292      	uxth	r2, r2
 800e35e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	8b5b      	ldrh	r3, [r3, #26]
 800e364:	f043 0320 	orr.w	r3, r3, #32
 800e368:	b29a      	uxth	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	e004      	b.n	800e37c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e372:	2101      	movs	r1, #1
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 f80b 	bl	800e390 <tcp_enqueue_flags>
 800e37a:	4603      	mov	r3, r0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3714      	adds	r7, #20
 800e380:	46bd      	mov	sp, r7
 800e382:	bd90      	pop	{r4, r7, pc}
 800e384:	080155a0 	.word	0x080155a0
 800e388:	080159a8 	.word	0x080159a8
 800e38c:	080155f4 	.word	0x080155f4

0800e390 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b08a      	sub	sp, #40	@ 0x28
 800e394:	af02      	add	r7, sp, #8
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e3a4:	78fb      	ldrb	r3, [r7, #3]
 800e3a6:	f003 0303 	and.w	r3, r3, #3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d106      	bne.n	800e3bc <tcp_enqueue_flags+0x2c>
 800e3ae:	4b67      	ldr	r3, [pc, #412]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e3b0:	f240 4211 	movw	r2, #1041	@ 0x411
 800e3b4:	4966      	ldr	r1, [pc, #408]	@ (800e550 <tcp_enqueue_flags+0x1c0>)
 800e3b6:	4867      	ldr	r0, [pc, #412]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e3b8:	f004 fc8a 	bl	8012cd0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d106      	bne.n	800e3d0 <tcp_enqueue_flags+0x40>
 800e3c2:	4b62      	ldr	r3, [pc, #392]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e3c4:	f240 4213 	movw	r2, #1043	@ 0x413
 800e3c8:	4963      	ldr	r1, [pc, #396]	@ (800e558 <tcp_enqueue_flags+0x1c8>)
 800e3ca:	4862      	ldr	r0, [pc, #392]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e3cc:	f004 fc80 	bl	8012cd0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e3d0:	78fb      	ldrb	r3, [r7, #3]
 800e3d2:	f003 0302 	and.w	r3, r3, #2
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d001      	beq.n	800e3de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e3da:	2301      	movs	r3, #1
 800e3dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3de:	7ffb      	ldrb	r3, [r7, #31]
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	f003 0304 	and.w	r3, r3, #4
 800e3e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e3ea:	7dfb      	ldrb	r3, [r7, #23]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	2036      	movs	r0, #54	@ 0x36
 800e3f6:	f7fa fa7d 	bl	80088f4 <pbuf_alloc>
 800e3fa:	6138      	str	r0, [r7, #16]
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d109      	bne.n	800e416 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8b5b      	ldrh	r3, [r3, #26]
 800e406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e414:	e095      	b.n	800e542 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	895a      	ldrh	r2, [r3, #10]
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
 800e41c:	b29b      	uxth	r3, r3
 800e41e:	429a      	cmp	r2, r3
 800e420:	d206      	bcs.n	800e430 <tcp_enqueue_flags+0xa0>
 800e422:	4b4a      	ldr	r3, [pc, #296]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e424:	f240 4239 	movw	r2, #1081	@ 0x439
 800e428:	494c      	ldr	r1, [pc, #304]	@ (800e55c <tcp_enqueue_flags+0x1cc>)
 800e42a:	484a      	ldr	r0, [pc, #296]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e42c:	f004 fc50 	bl	8012cd0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e434:	78fa      	ldrb	r2, [r7, #3]
 800e436:	7ffb      	ldrb	r3, [r7, #31]
 800e438:	9300      	str	r3, [sp, #0]
 800e43a:	460b      	mov	r3, r1
 800e43c:	6939      	ldr	r1, [r7, #16]
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7ff f91a 	bl	800d678 <tcp_create_segment>
 800e444:	60f8      	str	r0, [r7, #12]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d109      	bne.n	800e460 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	8b5b      	ldrh	r3, [r3, #26]
 800e450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e454:	b29a      	uxth	r2, r3
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e45a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e45e:	e070      	b.n	800e542 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f003 0303 	and.w	r3, r3, #3
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d006      	beq.n	800e47a <tcp_enqueue_flags+0xea>
 800e46c:	4b37      	ldr	r3, [pc, #220]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e46e:	f240 4242 	movw	r2, #1090	@ 0x442
 800e472:	493b      	ldr	r1, [pc, #236]	@ (800e560 <tcp_enqueue_flags+0x1d0>)
 800e474:	4837      	ldr	r0, [pc, #220]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e476:	f004 fc2b 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	891b      	ldrh	r3, [r3, #8]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d006      	beq.n	800e490 <tcp_enqueue_flags+0x100>
 800e482:	4b32      	ldr	r3, [pc, #200]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e484:	f240 4243 	movw	r2, #1091	@ 0x443
 800e488:	4936      	ldr	r1, [pc, #216]	@ (800e564 <tcp_enqueue_flags+0x1d4>)
 800e48a:	4832      	ldr	r0, [pc, #200]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e48c:	f004 fc20 	bl	8012cd0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e494:	2b00      	cmp	r3, #0
 800e496:	d103      	bne.n	800e4a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	68fa      	ldr	r2, [r7, #12]
 800e49c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e49e:	e00d      	b.n	800e4bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a4:	61bb      	str	r3, [r7, #24]
 800e4a6:	e002      	b.n	800e4ae <tcp_enqueue_flags+0x11e>
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	61bb      	str	r3, [r7, #24]
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1f8      	bne.n	800e4a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e4b6:	69bb      	ldr	r3, [r7, #24]
 800e4b8:	68fa      	ldr	r2, [r7, #12]
 800e4ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4c4:	78fb      	ldrb	r3, [r7, #3]
 800e4c6:	f003 0302 	and.w	r3, r3, #2
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d104      	bne.n	800e4d8 <tcp_enqueue_flags+0x148>
 800e4ce:	78fb      	ldrb	r3, [r7, #3]
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d004      	beq.n	800e4e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e4e2:	78fb      	ldrb	r3, [r7, #3]
 800e4e4:	f003 0301 	and.w	r3, r3, #1
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	8b5b      	ldrh	r3, [r3, #26]
 800e4f0:	f043 0320 	orr.w	r3, r3, #32
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	685b      	ldr	r3, [r3, #4]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fa fd6a 	bl	8008fd8 <pbuf_clen>
 800e504:	4603      	mov	r3, r0
 800e506:	461a      	mov	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e50e:	4413      	add	r3, r2
 800e510:	b29a      	uxth	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d00e      	beq.n	800e540 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e526:	2b00      	cmp	r3, #0
 800e528:	d10a      	bne.n	800e540 <tcp_enqueue_flags+0x1b0>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d106      	bne.n	800e540 <tcp_enqueue_flags+0x1b0>
 800e532:	4b06      	ldr	r3, [pc, #24]	@ (800e54c <tcp_enqueue_flags+0x1bc>)
 800e534:	f240 4265 	movw	r2, #1125	@ 0x465
 800e538:	490b      	ldr	r1, [pc, #44]	@ (800e568 <tcp_enqueue_flags+0x1d8>)
 800e53a:	4806      	ldr	r0, [pc, #24]	@ (800e554 <tcp_enqueue_flags+0x1c4>)
 800e53c:	f004 fbc8 	bl	8012cd0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	3720      	adds	r7, #32
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	080155a0 	.word	0x080155a0
 800e550:	080159c4 	.word	0x080159c4
 800e554:	080155f4 	.word	0x080155f4
 800e558:	08015a1c 	.word	0x08015a1c
 800e55c:	08015a3c 	.word	0x08015a3c
 800e560:	08015a78 	.word	0x08015a78
 800e564:	08015a90 	.word	0x08015a90
 800e568:	08015abc 	.word	0x08015abc

0800e56c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e56c:	b5b0      	push	{r4, r5, r7, lr}
 800e56e:	b08a      	sub	sp, #40	@ 0x28
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d106      	bne.n	800e588 <tcp_output+0x1c>
 800e57a:	4b8a      	ldr	r3, [pc, #552]	@ (800e7a4 <tcp_output+0x238>)
 800e57c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e580:	4989      	ldr	r1, [pc, #548]	@ (800e7a8 <tcp_output+0x23c>)
 800e582:	488a      	ldr	r0, [pc, #552]	@ (800e7ac <tcp_output+0x240>)
 800e584:	f004 fba4 	bl	8012cd0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	7d1b      	ldrb	r3, [r3, #20]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d106      	bne.n	800e59e <tcp_output+0x32>
 800e590:	4b84      	ldr	r3, [pc, #528]	@ (800e7a4 <tcp_output+0x238>)
 800e592:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e596:	4986      	ldr	r1, [pc, #536]	@ (800e7b0 <tcp_output+0x244>)
 800e598:	4884      	ldr	r0, [pc, #528]	@ (800e7ac <tcp_output+0x240>)
 800e59a:	f004 fb99 	bl	8012cd0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e59e:	4b85      	ldr	r3, [pc, #532]	@ (800e7b4 <tcp_output+0x248>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	687a      	ldr	r2, [r7, #4]
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	d101      	bne.n	800e5ac <tcp_output+0x40>
    return ERR_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	e1ce      	b.n	800e94a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5b8:	4293      	cmp	r3, r2
 800e5ba:	bf28      	it	cs
 800e5bc:	4613      	movcs	r3, r2
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d10b      	bne.n	800e5e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8b5b      	ldrh	r3, [r3, #26]
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	f000 81aa 	beq.w	800e930 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 fded 	bl	800f1bc <tcp_send_empty_ack>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	e1b1      	b.n	800e94a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e5e6:	6879      	ldr	r1, [r7, #4]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff f826 	bl	800d640 <tcp_route>
 800e5f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e5f6:	697b      	ldr	r3, [r7, #20]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d102      	bne.n	800e602 <tcp_output+0x96>
    return ERR_RTE;
 800e5fc:	f06f 0303 	mvn.w	r3, #3
 800e600:	e1a3      	b.n	800e94a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d003      	beq.n	800e610 <tcp_output+0xa4>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d111      	bne.n	800e634 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d002      	beq.n	800e61c <tcp_output+0xb0>
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	3304      	adds	r3, #4
 800e61a:	e000      	b.n	800e61e <tcp_output+0xb2>
 800e61c:	2300      	movs	r3, #0
 800e61e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <tcp_output+0xc0>
      return ERR_RTE;
 800e626:	f06f 0303 	mvn.w	r3, #3
 800e62a:	e18e      	b.n	800e94a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7f8 ff70 	bl	8007520 <lwip_htonl>
 800e640:	4602      	mov	r2, r0
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e64a:	8912      	ldrh	r2, [r2, #8]
 800e64c:	4413      	add	r3, r2
 800e64e:	69ba      	ldr	r2, [r7, #24]
 800e650:	429a      	cmp	r2, r3
 800e652:	d227      	bcs.n	800e6a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e65a:	461a      	mov	r2, r3
 800e65c:	69bb      	ldr	r3, [r7, #24]
 800e65e:	4293      	cmp	r3, r2
 800e660:	d114      	bne.n	800e68c <tcp_output+0x120>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e666:	2b00      	cmp	r3, #0
 800e668:	d110      	bne.n	800e68c <tcp_output+0x120>
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10b      	bne.n	800e68c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	2200      	movs	r2, #0
 800e678:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2201      	movs	r2, #1
 800e680:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	8b5b      	ldrh	r3, [r3, #26]
 800e690:	f003 0302 	and.w	r3, r3, #2
 800e694:	2b00      	cmp	r3, #0
 800e696:	f000 814d 	beq.w	800e934 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 fd8e 	bl	800f1bc <tcp_send_empty_ack>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	e152      	b.n	800e94a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e6b2:	6a3b      	ldr	r3, [r7, #32]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 811c 	beq.w	800e8f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e6ba:	e002      	b.n	800e6c2 <tcp_output+0x156>
 800e6bc:	6a3b      	ldr	r3, [r7, #32]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	623b      	str	r3, [r7, #32]
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1f8      	bne.n	800e6bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6ca:	e112      	b.n	800e8f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ce:	68db      	ldr	r3, [r3, #12]
 800e6d0:	899b      	ldrh	r3, [r3, #12]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f8 ff0f 	bl	80074f8 <lwip_htons>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	f003 0304 	and.w	r3, r3, #4
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d006      	beq.n	800e6f4 <tcp_output+0x188>
 800e6e6:	4b2f      	ldr	r3, [pc, #188]	@ (800e7a4 <tcp_output+0x238>)
 800e6e8:	f240 5236 	movw	r2, #1334	@ 0x536
 800e6ec:	4932      	ldr	r1, [pc, #200]	@ (800e7b8 <tcp_output+0x24c>)
 800e6ee:	482f      	ldr	r0, [pc, #188]	@ (800e7ac <tcp_output+0x240>)
 800e6f0:	f004 faee 	bl	8012cd0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d01f      	beq.n	800e73c <tcp_output+0x1d0>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	8b5b      	ldrh	r3, [r3, #26]
 800e700:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e704:	2b00      	cmp	r3, #0
 800e706:	d119      	bne.n	800e73c <tcp_output+0x1d0>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d00b      	beq.n	800e728 <tcp_output+0x1bc>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d110      	bne.n	800e73c <tcp_output+0x1d0>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e71e:	891a      	ldrh	r2, [r3, #8]
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e724:	429a      	cmp	r2, r3
 800e726:	d209      	bcs.n	800e73c <tcp_output+0x1d0>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d004      	beq.n	800e73c <tcp_output+0x1d0>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e738:	2b08      	cmp	r3, #8
 800e73a:	d901      	bls.n	800e740 <tcp_output+0x1d4>
 800e73c:	2301      	movs	r3, #1
 800e73e:	e000      	b.n	800e742 <tcp_output+0x1d6>
 800e740:	2300      	movs	r3, #0
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	8b5b      	ldrh	r3, [r3, #26]
 800e74a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f000 80e4 	beq.w	800e91c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	7d1b      	ldrb	r3, [r3, #20]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d00d      	beq.n	800e778 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	899b      	ldrh	r3, [r3, #12]
 800e762:	b29c      	uxth	r4, r3
 800e764:	2010      	movs	r0, #16
 800e766:	f7f8 fec7 	bl	80074f8 <lwip_htons>
 800e76a:	4603      	mov	r3, r0
 800e76c:	461a      	mov	r2, r3
 800e76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	4322      	orrs	r2, r4
 800e774:	b292      	uxth	r2, r2
 800e776:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e778:	697a      	ldr	r2, [r7, #20]
 800e77a:	6879      	ldr	r1, [r7, #4]
 800e77c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e77e:	f000 f909 	bl	800e994 <tcp_output_segment>
 800e782:	4603      	mov	r3, r0
 800e784:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d016      	beq.n	800e7bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	8b5b      	ldrh	r3, [r3, #26]
 800e792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e796:	b29a      	uxth	r2, r3
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	835a      	strh	r2, [r3, #26]
      return err;
 800e79c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e7a0:	e0d3      	b.n	800e94a <tcp_output+0x3de>
 800e7a2:	bf00      	nop
 800e7a4:	080155a0 	.word	0x080155a0
 800e7a8:	08015ae4 	.word	0x08015ae4
 800e7ac:	080155f4 	.word	0x080155f4
 800e7b0:	08015afc 	.word	0x08015afc
 800e7b4:	20007740 	.word	0x20007740
 800e7b8:	08015b24 	.word	0x08015b24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7be:	681a      	ldr	r2, [r3, #0]
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	7d1b      	ldrb	r3, [r3, #20]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d006      	beq.n	800e7da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	8b5b      	ldrh	r3, [r3, #26]
 800e7d0:	f023 0303 	bic.w	r3, r3, #3
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7dc:	68db      	ldr	r3, [r3, #12]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f7f8 fe9d 	bl	8007520 <lwip_htonl>
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ea:	891b      	ldrh	r3, [r3, #8]
 800e7ec:	461d      	mov	r5, r3
 800e7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	899b      	ldrh	r3, [r3, #12]
 800e7f4:	b29b      	uxth	r3, r3
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	f7f8 fe7e 	bl	80074f8 <lwip_htons>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	f003 0303 	and.w	r3, r3, #3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <tcp_output+0x2a0>
 800e808:	2301      	movs	r3, #1
 800e80a:	e000      	b.n	800e80e <tcp_output+0x2a2>
 800e80c:	2300      	movs	r3, #0
 800e80e:	442b      	add	r3, r5
 800e810:	4423      	add	r3, r4
 800e812:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	1ad3      	subs	r3, r2, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	da02      	bge.n	800e826 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e828:	891b      	ldrh	r3, [r3, #8]
 800e82a:	461c      	mov	r4, r3
 800e82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	899b      	ldrh	r3, [r3, #12]
 800e832:	b29b      	uxth	r3, r3
 800e834:	4618      	mov	r0, r3
 800e836:	f7f8 fe5f 	bl	80074f8 <lwip_htons>
 800e83a:	4603      	mov	r3, r0
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 0303 	and.w	r3, r3, #3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d001      	beq.n	800e84a <tcp_output+0x2de>
 800e846:	2301      	movs	r3, #1
 800e848:	e000      	b.n	800e84c <tcp_output+0x2e0>
 800e84a:	2300      	movs	r3, #0
 800e84c:	4423      	add	r3, r4
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d049      	beq.n	800e8e6 <tcp_output+0x37a>
      seg->next = NULL;
 800e852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e854:	2200      	movs	r2, #0
 800e856:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d105      	bne.n	800e86c <tcp_output+0x300>
        pcb->unacked = seg;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e864:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e868:	623b      	str	r3, [r7, #32]
 800e86a:	e03f      	b.n	800e8ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	4618      	mov	r0, r3
 800e874:	f7f8 fe54 	bl	8007520 <lwip_htonl>
 800e878:	4604      	mov	r4, r0
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	685b      	ldr	r3, [r3, #4]
 800e880:	4618      	mov	r0, r3
 800e882:	f7f8 fe4d 	bl	8007520 <lwip_htonl>
 800e886:	4603      	mov	r3, r0
 800e888:	1ae3      	subs	r3, r4, r3
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	da24      	bge.n	800e8d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	3370      	adds	r3, #112	@ 0x70
 800e892:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e894:	e002      	b.n	800e89c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d011      	beq.n	800e8c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	68db      	ldr	r3, [r3, #12]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7f8 fe37 	bl	8007520 <lwip_htonl>
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b6:	68db      	ldr	r3, [r3, #12]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	f7f8 fe30 	bl	8007520 <lwip_htonl>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dbe6      	blt.n	800e896 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d4:	601a      	str	r2, [r3, #0]
 800e8d6:	e009      	b.n	800e8ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e8d8:	6a3b      	ldr	r3, [r7, #32]
 800e8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e8de:	6a3b      	ldr	r3, [r7, #32]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	623b      	str	r3, [r7, #32]
 800e8e4:	e002      	b.n	800e8ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e8e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8e8:	f7fb feff 	bl	800a6ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d012      	beq.n	800e91e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7f8 fe0e 	bl	8007520 <lwip_htonl>
 800e904:	4602      	mov	r2, r0
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e90a:	1ad3      	subs	r3, r2, r3
 800e90c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e90e:	8912      	ldrh	r2, [r2, #8]
 800e910:	4413      	add	r3, r2
  while (seg != NULL &&
 800e912:	69ba      	ldr	r2, [r7, #24]
 800e914:	429a      	cmp	r2, r3
 800e916:	f4bf aed9 	bcs.w	800e6cc <tcp_output+0x160>
 800e91a:	e000      	b.n	800e91e <tcp_output+0x3b2>
      break;
 800e91c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e922:	2b00      	cmp	r3, #0
 800e924:	d108      	bne.n	800e938 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e92e:	e004      	b.n	800e93a <tcp_output+0x3ce>
    goto output_done;
 800e930:	bf00      	nop
 800e932:	e002      	b.n	800e93a <tcp_output+0x3ce>
    goto output_done;
 800e934:	bf00      	nop
 800e936:	e000      	b.n	800e93a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e938:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	8b5b      	ldrh	r3, [r3, #26]
 800e93e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e942:	b29a      	uxth	r2, r3
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3728      	adds	r7, #40	@ 0x28
 800e94e:	46bd      	mov	sp, r7
 800e950:	bdb0      	pop	{r4, r5, r7, pc}
 800e952:	bf00      	nop

0800e954 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <tcp_output_segment_busy+0x1c>
 800e962:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <tcp_output_segment_busy+0x34>)
 800e964:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e968:	4908      	ldr	r1, [pc, #32]	@ (800e98c <tcp_output_segment_busy+0x38>)
 800e96a:	4809      	ldr	r0, [pc, #36]	@ (800e990 <tcp_output_segment_busy+0x3c>)
 800e96c:	f004 f9b0 	bl	8012cd0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	7b9b      	ldrb	r3, [r3, #14]
 800e976:	2b01      	cmp	r3, #1
 800e978:	d001      	beq.n	800e97e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e97a:	2301      	movs	r3, #1
 800e97c:	e000      	b.n	800e980 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	080155a0 	.word	0x080155a0
 800e98c:	08015b3c 	.word	0x08015b3c
 800e990:	080155f4 	.word	0x080155f4

0800e994 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e994:	b5b0      	push	{r4, r5, r7, lr}
 800e996:	b08c      	sub	sp, #48	@ 0x30
 800e998:	af04      	add	r7, sp, #16
 800e99a:	60f8      	str	r0, [r7, #12]
 800e99c:	60b9      	str	r1, [r7, #8]
 800e99e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d106      	bne.n	800e9b4 <tcp_output_segment+0x20>
 800e9a6:	4b6d      	ldr	r3, [pc, #436]	@ (800eb5c <tcp_output_segment+0x1c8>)
 800e9a8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e9ac:	496c      	ldr	r1, [pc, #432]	@ (800eb60 <tcp_output_segment+0x1cc>)
 800e9ae:	486d      	ldr	r0, [pc, #436]	@ (800eb64 <tcp_output_segment+0x1d0>)
 800e9b0:	f004 f98e 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d106      	bne.n	800e9c8 <tcp_output_segment+0x34>
 800e9ba:	4b68      	ldr	r3, [pc, #416]	@ (800eb5c <tcp_output_segment+0x1c8>)
 800e9bc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e9c0:	4969      	ldr	r1, [pc, #420]	@ (800eb68 <tcp_output_segment+0x1d4>)
 800e9c2:	4868      	ldr	r0, [pc, #416]	@ (800eb64 <tcp_output_segment+0x1d0>)
 800e9c4:	f004 f984 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d106      	bne.n	800e9dc <tcp_output_segment+0x48>
 800e9ce:	4b63      	ldr	r3, [pc, #396]	@ (800eb5c <tcp_output_segment+0x1c8>)
 800e9d0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e9d4:	4965      	ldr	r1, [pc, #404]	@ (800eb6c <tcp_output_segment+0x1d8>)
 800e9d6:	4863      	ldr	r0, [pc, #396]	@ (800eb64 <tcp_output_segment+0x1d0>)
 800e9d8:	f004 f97a 	bl	8012cd0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f7ff ffb9 	bl	800e954 <tcp_output_segment_busy>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	e0b3      	b.n	800eb54 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	68dc      	ldr	r4, [r3, #12]
 800e9f4:	4610      	mov	r0, r2
 800e9f6:	f7f8 fd93 	bl	8007520 <lwip_htonl>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9fe:	68bb      	ldr	r3, [r7, #8]
 800ea00:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	68dc      	ldr	r4, [r3, #12]
 800ea06:	4610      	mov	r0, r2
 800ea08:	f7f8 fd76 	bl	80074f8 <lwip_htons>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea14:	68ba      	ldr	r2, [r7, #8]
 800ea16:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ea18:	441a      	add	r2, r3
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	3314      	adds	r3, #20
 800ea24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	7a9b      	ldrb	r3, [r3, #10]
 800ea2a:	f003 0301 	and.w	r3, r3, #1
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d015      	beq.n	800ea5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	3304      	adds	r3, #4
 800ea36:	461a      	mov	r2, r3
 800ea38:	6879      	ldr	r1, [r7, #4]
 800ea3a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ea3e:	f7fc fa3b 	bl	800aeb8 <tcp_eff_send_mss_netif>
 800ea42:	4603      	mov	r3, r0
 800ea44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea46:	8b7b      	ldrh	r3, [r7, #26]
 800ea48:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7f8 fd67 	bl	8007520 <lwip_htonl>
 800ea52:	4602      	mov	r2, r0
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	da02      	bge.n	800ea6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d10c      	bne.n	800ea90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ea76:	4b3e      	ldr	r3, [pc, #248]	@ (800eb70 <tcp_output_segment+0x1dc>)
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	68bb      	ldr	r3, [r7, #8]
 800ea7c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7f8 fd4b 	bl	8007520 <lwip_htonl>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68da      	ldr	r2, [r3, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	1ad3      	subs	r3, r2, r3
 800ea9c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	8959      	ldrh	r1, [r3, #10]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	685b      	ldr	r3, [r3, #4]
 800eaa8:	8b3a      	ldrh	r2, [r7, #24]
 800eaaa:	1a8a      	subs	r2, r1, r2
 800eaac:	b292      	uxth	r2, r2
 800eaae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	685b      	ldr	r3, [r3, #4]
 800eab4:	8919      	ldrh	r1, [r3, #8]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	8b3a      	ldrh	r2, [r7, #24]
 800eabc:	1a8a      	subs	r2, r1, r2
 800eabe:	b292      	uxth	r2, r2
 800eac0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	68d2      	ldr	r2, [r2, #12]
 800eaca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	2200      	movs	r2, #0
 800ead2:	741a      	strb	r2, [r3, #16]
 800ead4:	2200      	movs	r2, #0
 800ead6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	68da      	ldr	r2, [r3, #12]
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	7a9b      	ldrb	r3, [r3, #10]
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d001      	beq.n	800eaec <tcp_output_segment+0x158>
 800eae8:	2318      	movs	r3, #24
 800eaea:	e000      	b.n	800eaee <tcp_output_segment+0x15a>
 800eaec:	2314      	movs	r3, #20
 800eaee:	4413      	add	r3, r2
 800eaf0:	69fa      	ldr	r2, [r7, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d006      	beq.n	800eb04 <tcp_output_segment+0x170>
 800eaf6:	4b19      	ldr	r3, [pc, #100]	@ (800eb5c <tcp_output_segment+0x1c8>)
 800eaf8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800eafc:	491d      	ldr	r1, [pc, #116]	@ (800eb74 <tcp_output_segment+0x1e0>)
 800eafe:	4819      	ldr	r0, [pc, #100]	@ (800eb64 <tcp_output_segment+0x1d0>)
 800eb00:	f004 f8e6 	bl	8012cd0 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb0c:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800eb0e:	68bd      	ldr	r5, [r7, #8]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	68d4      	ldr	r4, [r2, #12]
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462b      	mov	r3, r5
 800eb1c:	460a      	mov	r2, r1
 800eb1e:	2106      	movs	r1, #6
 800eb20:	f7f8 fe4f 	bl	80077c2 <ip_chksum_pseudo>
 800eb24:	4603      	mov	r3, r0
 800eb26:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6858      	ldr	r0, [r3, #4]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	1d1c      	adds	r4, r3, #4
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	7add      	ldrb	r5, [r3, #11]
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	7a9b      	ldrb	r3, [r3, #10]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	9202      	str	r2, [sp, #8]
 800eb3e:	2206      	movs	r2, #6
 800eb40:	9201      	str	r2, [sp, #4]
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	462b      	mov	r3, r5
 800eb46:	4622      	mov	r2, r4
 800eb48:	f002 faf2 	bl	8011130 <ip4_output_if>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3720      	adds	r7, #32
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb5c:	080155a0 	.word	0x080155a0
 800eb60:	08015b64 	.word	0x08015b64
 800eb64:	080155f4 	.word	0x080155f4
 800eb68:	08015b84 	.word	0x08015b84
 800eb6c:	08015ba4 	.word	0x08015ba4
 800eb70:	200076f4 	.word	0x200076f4
 800eb74:	08015bc8 	.word	0x08015bc8

0800eb78 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb78:	b5b0      	push	{r4, r5, r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d106      	bne.n	800eb94 <tcp_rexmit_rto_prepare+0x1c>
 800eb86:	4b31      	ldr	r3, [pc, #196]	@ (800ec4c <tcp_rexmit_rto_prepare+0xd4>)
 800eb88:	f240 6263 	movw	r2, #1635	@ 0x663
 800eb8c:	4930      	ldr	r1, [pc, #192]	@ (800ec50 <tcp_rexmit_rto_prepare+0xd8>)
 800eb8e:	4831      	ldr	r0, [pc, #196]	@ (800ec54 <tcp_rexmit_rto_prepare+0xdc>)
 800eb90:	f004 f89e 	bl	8012cd0 <iprintf>

  if (pcb->unacked == NULL) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eb9c:	f06f 0305 	mvn.w	r3, #5
 800eba0:	e050      	b.n	800ec44 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	e00b      	b.n	800ebc2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ebaa:	68f8      	ldr	r0, [r7, #12]
 800ebac:	f7ff fed2 	bl	800e954 <tcp_output_segment_busy>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d002      	beq.n	800ebbc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ebb6:	f06f 0305 	mvn.w	r3, #5
 800ebba:	e043      	b.n	800ec44 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	60fb      	str	r3, [r7, #12]
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d1ef      	bne.n	800ebaa <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ebca:	68f8      	ldr	r0, [r7, #12]
 800ebcc:	f7ff fec2 	bl	800e954 <tcp_output_segment_busy>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ebd6:	f06f 0305 	mvn.w	r3, #5
 800ebda:	e033      	b.n	800ec44 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	8b5b      	ldrh	r3, [r3, #26]
 800ebf6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ebfa:	b29a      	uxth	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	68db      	ldr	r3, [r3, #12]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7f8 fc8a 	bl	8007520 <lwip_htonl>
 800ec0c:	4604      	mov	r4, r0
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	891b      	ldrh	r3, [r3, #8]
 800ec12:	461d      	mov	r5, r3
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	899b      	ldrh	r3, [r3, #12]
 800ec1a:	b29b      	uxth	r3, r3
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7f8 fc6b 	bl	80074f8 <lwip_htons>
 800ec22:	4603      	mov	r3, r0
 800ec24:	b2db      	uxtb	r3, r3
 800ec26:	f003 0303 	and.w	r3, r3, #3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <tcp_rexmit_rto_prepare+0xba>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	e000      	b.n	800ec34 <tcp_rexmit_rto_prepare+0xbc>
 800ec32:	2300      	movs	r3, #0
 800ec34:	442b      	add	r3, r5
 800ec36:	18e2      	adds	r2, r4, r3
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ec4c:	080155a0 	.word	0x080155a0
 800ec50:	08015bdc 	.word	0x08015bdc
 800ec54:	080155f4 	.word	0x080155f4

0800ec58 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d106      	bne.n	800ec74 <tcp_rexmit_rto_commit+0x1c>
 800ec66:	4b0d      	ldr	r3, [pc, #52]	@ (800ec9c <tcp_rexmit_rto_commit+0x44>)
 800ec68:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ec6c:	490c      	ldr	r1, [pc, #48]	@ (800eca0 <tcp_rexmit_rto_commit+0x48>)
 800ec6e:	480d      	ldr	r0, [pc, #52]	@ (800eca4 <tcp_rexmit_rto_commit+0x4c>)
 800ec70:	f004 f82e 	bl	8012cd0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec7a:	2bff      	cmp	r3, #255	@ 0xff
 800ec7c:	d007      	beq.n	800ec8e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec84:	3301      	adds	r3, #1
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7ff fc6c 	bl	800e56c <tcp_output>
}
 800ec94:	bf00      	nop
 800ec96:	3708      	adds	r7, #8
 800ec98:	46bd      	mov	sp, r7
 800ec9a:	bd80      	pop	{r7, pc}
 800ec9c:	080155a0 	.word	0x080155a0
 800eca0:	08015c00 	.word	0x08015c00
 800eca4:	080155f4 	.word	0x080155f4

0800eca8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d106      	bne.n	800ecc4 <tcp_rexmit_rto+0x1c>
 800ecb6:	4b0a      	ldr	r3, [pc, #40]	@ (800ece0 <tcp_rexmit_rto+0x38>)
 800ecb8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ecbc:	4909      	ldr	r1, [pc, #36]	@ (800ece4 <tcp_rexmit_rto+0x3c>)
 800ecbe:	480a      	ldr	r0, [pc, #40]	@ (800ece8 <tcp_rexmit_rto+0x40>)
 800ecc0:	f004 f806 	bl	8012cd0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff ff57 	bl	800eb78 <tcp_rexmit_rto_prepare>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d102      	bne.n	800ecd6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7ff ffc1 	bl	800ec58 <tcp_rexmit_rto_commit>
  }
}
 800ecd6:	bf00      	nop
 800ecd8:	3708      	adds	r7, #8
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	080155a0 	.word	0x080155a0
 800ece4:	08015c24 	.word	0x08015c24
 800ece8:	080155f4 	.word	0x080155f4

0800ecec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ecec:	b590      	push	{r4, r7, lr}
 800ecee:	b085      	sub	sp, #20
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <tcp_rexmit+0x1c>
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	@ (800edb8 <tcp_rexmit+0xcc>)
 800ecfc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ed00:	492e      	ldr	r1, [pc, #184]	@ (800edbc <tcp_rexmit+0xd0>)
 800ed02:	482f      	ldr	r0, [pc, #188]	@ (800edc0 <tcp_rexmit+0xd4>)
 800ed04:	f003 ffe4 	bl	8012cd0 <iprintf>

  if (pcb->unacked == NULL) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d102      	bne.n	800ed16 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ed10:	f06f 0305 	mvn.w	r3, #5
 800ed14:	e04c      	b.n	800edb0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed1a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ed1c:	68b8      	ldr	r0, [r7, #8]
 800ed1e:	f7ff fe19 	bl	800e954 <tcp_output_segment_busy>
 800ed22:	4603      	mov	r3, r0
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ed28:	f06f 0305 	mvn.w	r3, #5
 800ed2c:	e040      	b.n	800edb0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	336c      	adds	r3, #108	@ 0x6c
 800ed3a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed3c:	e002      	b.n	800ed44 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d011      	beq.n	800ed70 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f7f8 fbe3 	bl	8007520 <lwip_htonl>
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7f8 fbdc 	bl	8007520 <lwip_htonl>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dbe6      	blt.n	800ed3e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	68ba      	ldr	r2, [r7, #8]
 800ed7c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d103      	bne.n	800ed8e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed94:	2bff      	cmp	r3, #255	@ 0xff
 800ed96:	d007      	beq.n	800eda8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed9e:	3301      	adds	r3, #1
 800eda0:	b2da      	uxtb	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2200      	movs	r2, #0
 800edac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3714      	adds	r7, #20
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd90      	pop	{r4, r7, pc}
 800edb8:	080155a0 	.word	0x080155a0
 800edbc:	08015c40 	.word	0x08015c40
 800edc0:	080155f4 	.word	0x080155f4

0800edc4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d106      	bne.n	800ede0 <tcp_rexmit_fast+0x1c>
 800edd2:	4b2a      	ldr	r3, [pc, #168]	@ (800ee7c <tcp_rexmit_fast+0xb8>)
 800edd4:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800edd8:	4929      	ldr	r1, [pc, #164]	@ (800ee80 <tcp_rexmit_fast+0xbc>)
 800edda:	482a      	ldr	r0, [pc, #168]	@ (800ee84 <tcp_rexmit_fast+0xc0>)
 800eddc:	f003 ff78 	bl	8012cd0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d044      	beq.n	800ee72 <tcp_rexmit_fast+0xae>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8b5b      	ldrh	r3, [r3, #26]
 800edec:	f003 0304 	and.w	r3, r3, #4
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d13e      	bne.n	800ee72 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7ff ff79 	bl	800ecec <tcp_rexmit>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d138      	bne.n	800ee72 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	bf28      	it	cs
 800ee10:	4613      	movcs	r3, r2
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	0fda      	lsrs	r2, r3, #31
 800ee16:	4413      	add	r3, r2
 800ee18:	105b      	asrs	r3, r3, #1
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ee28:	461a      	mov	r2, r3
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee2e:	005b      	lsls	r3, r3, #1
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d206      	bcs.n	800ee42 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee38:	005b      	lsls	r3, r3, #1
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	0049      	lsls	r1, r1, #1
 800ee50:	440b      	add	r3, r1
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	4413      	add	r3, r2
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	8b5b      	ldrh	r3, [r3, #26]
 800ee62:	f043 0304 	orr.w	r3, r3, #4
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2200      	movs	r2, #0
 800ee70:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ee72:	bf00      	nop
 800ee74:	3708      	adds	r7, #8
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	080155a0 	.word	0x080155a0
 800ee80:	08015c58 	.word	0x08015c58
 800ee84:	080155f4 	.word	0x080155f4

0800ee88 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	607b      	str	r3, [r7, #4]
 800ee92:	460b      	mov	r3, r1
 800ee94:	817b      	strh	r3, [r7, #10]
 800ee96:	4613      	mov	r3, r2
 800ee98:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ee9a:	897a      	ldrh	r2, [r7, #10]
 800ee9c:	893b      	ldrh	r3, [r7, #8]
 800ee9e:	4413      	add	r3, r2
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	3314      	adds	r3, #20
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eeaa:	4619      	mov	r1, r3
 800eeac:	2022      	movs	r0, #34	@ 0x22
 800eeae:	f7f9 fd21 	bl	80088f4 <pbuf_alloc>
 800eeb2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d04d      	beq.n	800ef56 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eeba:	897b      	ldrh	r3, [r7, #10]
 800eebc:	3313      	adds	r3, #19
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	8952      	ldrh	r2, [r2, #10]
 800eec2:	4293      	cmp	r3, r2
 800eec4:	db06      	blt.n	800eed4 <tcp_output_alloc_header_common+0x4c>
 800eec6:	4b26      	ldr	r3, [pc, #152]	@ (800ef60 <tcp_output_alloc_header_common+0xd8>)
 800eec8:	f240 7223 	movw	r2, #1827	@ 0x723
 800eecc:	4925      	ldr	r1, [pc, #148]	@ (800ef64 <tcp_output_alloc_header_common+0xdc>)
 800eece:	4826      	ldr	r0, [pc, #152]	@ (800ef68 <tcp_output_alloc_header_common+0xe0>)
 800eed0:	f003 fefe 	bl	8012cd0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eed4:	697b      	ldr	r3, [r7, #20]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eeda:	8c3b      	ldrh	r3, [r7, #32]
 800eedc:	4618      	mov	r0, r3
 800eede:	f7f8 fb0b 	bl	80074f8 <lwip_htons>
 800eee2:	4603      	mov	r3, r0
 800eee4:	461a      	mov	r2, r3
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eeea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7f8 fb03 	bl	80074f8 <lwip_htons>
 800eef2:	4603      	mov	r3, r0
 800eef4:	461a      	mov	r2, r3
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f7f8 fb0d 	bl	8007520 <lwip_htonl>
 800ef06:	4602      	mov	r2, r0
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ef0c:	897b      	ldrh	r3, [r7, #10]
 800ef0e:	089b      	lsrs	r3, r3, #2
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	3305      	adds	r3, #5
 800ef14:	b29b      	uxth	r3, r3
 800ef16:	031b      	lsls	r3, r3, #12
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4313      	orrs	r3, r2
 800ef22:	b29b      	uxth	r3, r3
 800ef24:	4618      	mov	r0, r3
 800ef26:	f7f8 fae7 	bl	80074f8 <lwip_htons>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	693b      	ldr	r3, [r7, #16]
 800ef30:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ef34:	4618      	mov	r0, r3
 800ef36:	f7f8 fadf 	bl	80074f8 <lwip_htons>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	2200      	movs	r2, #0
 800ef46:	741a      	strb	r2, [r3, #16]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	749a      	strb	r2, [r3, #18]
 800ef52:	2200      	movs	r2, #0
 800ef54:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef56:	697b      	ldr	r3, [r7, #20]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	080155a0 	.word	0x080155a0
 800ef64:	08015c78 	.word	0x08015c78
 800ef68:	080155f4 	.word	0x080155f4

0800ef6c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef6c:	b5b0      	push	{r4, r5, r7, lr}
 800ef6e:	b08a      	sub	sp, #40	@ 0x28
 800ef70:	af04      	add	r7, sp, #16
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	607b      	str	r3, [r7, #4]
 800ef76:	460b      	mov	r3, r1
 800ef78:	817b      	strh	r3, [r7, #10]
 800ef7a:	4613      	mov	r3, r2
 800ef7c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d106      	bne.n	800ef92 <tcp_output_alloc_header+0x26>
 800ef84:	4b15      	ldr	r3, [pc, #84]	@ (800efdc <tcp_output_alloc_header+0x70>)
 800ef86:	f240 7242 	movw	r2, #1858	@ 0x742
 800ef8a:	4915      	ldr	r1, [pc, #84]	@ (800efe0 <tcp_output_alloc_header+0x74>)
 800ef8c:	4815      	ldr	r0, [pc, #84]	@ (800efe4 <tcp_output_alloc_header+0x78>)
 800ef8e:	f003 fe9f 	bl	8012cd0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	8adb      	ldrh	r3, [r3, #22]
 800ef9a:	68fa      	ldr	r2, [r7, #12]
 800ef9c:	8b12      	ldrh	r2, [r2, #24]
 800ef9e:	68f9      	ldr	r1, [r7, #12]
 800efa0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800efa2:	893d      	ldrh	r5, [r7, #8]
 800efa4:	897c      	ldrh	r4, [r7, #10]
 800efa6:	9103      	str	r1, [sp, #12]
 800efa8:	2110      	movs	r1, #16
 800efaa:	9102      	str	r1, [sp, #8]
 800efac:	9201      	str	r2, [sp, #4]
 800efae:	9300      	str	r3, [sp, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	462a      	mov	r2, r5
 800efb4:	4621      	mov	r1, r4
 800efb6:	f7ff ff67 	bl	800ee88 <tcp_output_alloc_header_common>
 800efba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d006      	beq.n	800efd0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc6:	68fa      	ldr	r2, [r7, #12]
 800efc8:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800efca:	441a      	add	r2, r3
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800efd0:	697b      	ldr	r3, [r7, #20]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bdb0      	pop	{r4, r5, r7, pc}
 800efda:	bf00      	nop
 800efdc:	080155a0 	.word	0x080155a0
 800efe0:	08015ca8 	.word	0x08015ca8
 800efe4:	080155f4 	.word	0x080155f4

0800efe8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b088      	sub	sp, #32
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4611      	mov	r1, r2
 800eff4:	461a      	mov	r2, r3
 800eff6:	460b      	mov	r3, r1
 800eff8:	71fb      	strb	r3, [r7, #7]
 800effa:	4613      	mov	r3, r2
 800effc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800effe:	2300      	movs	r3, #0
 800f000:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d106      	bne.n	800f016 <tcp_output_fill_options+0x2e>
 800f008:	4b12      	ldr	r3, [pc, #72]	@ (800f054 <tcp_output_fill_options+0x6c>)
 800f00a:	f240 7256 	movw	r2, #1878	@ 0x756
 800f00e:	4912      	ldr	r1, [pc, #72]	@ (800f058 <tcp_output_fill_options+0x70>)
 800f010:	4812      	ldr	r0, [pc, #72]	@ (800f05c <tcp_output_fill_options+0x74>)
 800f012:	f003 fe5d 	bl	8012cd0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	685b      	ldr	r3, [r3, #4]
 800f01a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f01c:	69bb      	ldr	r3, [r7, #24]
 800f01e:	3314      	adds	r3, #20
 800f020:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f022:	8bfb      	ldrh	r3, [r7, #30]
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	461a      	mov	r2, r3
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	f003 0304 	and.w	r3, r3, #4
 800f030:	4413      	add	r3, r2
 800f032:	3314      	adds	r3, #20
 800f034:	69ba      	ldr	r2, [r7, #24]
 800f036:	4413      	add	r3, r2
 800f038:	697a      	ldr	r2, [r7, #20]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d006      	beq.n	800f04c <tcp_output_fill_options+0x64>
 800f03e:	4b05      	ldr	r3, [pc, #20]	@ (800f054 <tcp_output_fill_options+0x6c>)
 800f040:	f240 7275 	movw	r2, #1909	@ 0x775
 800f044:	4906      	ldr	r1, [pc, #24]	@ (800f060 <tcp_output_fill_options+0x78>)
 800f046:	4805      	ldr	r0, [pc, #20]	@ (800f05c <tcp_output_fill_options+0x74>)
 800f048:	f003 fe42 	bl	8012cd0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f04c:	bf00      	nop
 800f04e:	3720      	adds	r7, #32
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	080155a0 	.word	0x080155a0
 800f058:	08015cd0 	.word	0x08015cd0
 800f05c:	080155f4 	.word	0x080155f4
 800f060:	08015bc8 	.word	0x08015bc8

0800f064 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b08c      	sub	sp, #48	@ 0x30
 800f068:	af04      	add	r7, sp, #16
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
 800f070:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d106      	bne.n	800f086 <tcp_output_control_segment+0x22>
 800f078:	4b24      	ldr	r3, [pc, #144]	@ (800f10c <tcp_output_control_segment+0xa8>)
 800f07a:	f240 7287 	movw	r2, #1927	@ 0x787
 800f07e:	4924      	ldr	r1, [pc, #144]	@ (800f110 <tcp_output_control_segment+0xac>)
 800f080:	4824      	ldr	r0, [pc, #144]	@ (800f114 <tcp_output_control_segment+0xb0>)
 800f082:	f003 fe25 	bl	8012cd0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	6879      	ldr	r1, [r7, #4]
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7fe fad8 	bl	800d640 <tcp_route>
 800f090:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d102      	bne.n	800f09e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f098:	23fc      	movs	r3, #252	@ 0xfc
 800f09a:	77fb      	strb	r3, [r7, #31]
 800f09c:	e02c      	b.n	800f0f8 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	685b      	ldr	r3, [r3, #4]
 800f0a2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	891a      	ldrh	r2, [r3, #8]
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2106      	movs	r1, #6
 800f0b0:	68b8      	ldr	r0, [r7, #8]
 800f0b2:	f7f8 fb86 	bl	80077c2 <ip_chksum_pseudo>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d006      	beq.n	800f0d2 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	7adb      	ldrb	r3, [r3, #11]
 800f0c8:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	7a9b      	ldrb	r3, [r3, #10]
 800f0ce:	777b      	strb	r3, [r7, #29]
 800f0d0:	e003      	b.n	800f0da <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f0d2:	23ff      	movs	r3, #255	@ 0xff
 800f0d4:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f0da:	7fba      	ldrb	r2, [r7, #30]
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	9302      	str	r3, [sp, #8]
 800f0e0:	2306      	movs	r3, #6
 800f0e2:	9301      	str	r3, [sp, #4]
 800f0e4:	7f7b      	ldrb	r3, [r7, #29]
 800f0e6:	9300      	str	r3, [sp, #0]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	683a      	ldr	r2, [r7, #0]
 800f0ec:	6879      	ldr	r1, [r7, #4]
 800f0ee:	68b8      	ldr	r0, [r7, #8]
 800f0f0:	f002 f81e 	bl	8011130 <ip4_output_if>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f0f8:	68b8      	ldr	r0, [r7, #8]
 800f0fa:	f7f9 fedf 	bl	8008ebc <pbuf_free>
  return err;
 800f0fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f102:	4618      	mov	r0, r3
 800f104:	3720      	adds	r7, #32
 800f106:	46bd      	mov	sp, r7
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	bf00      	nop
 800f10c:	080155a0 	.word	0x080155a0
 800f110:	08015cf8 	.word	0x08015cf8
 800f114:	080155f4 	.word	0x080155f4

0800f118 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f118:	b590      	push	{r4, r7, lr}
 800f11a:	b08b      	sub	sp, #44	@ 0x2c
 800f11c:	af04      	add	r7, sp, #16
 800f11e:	60f8      	str	r0, [r7, #12]
 800f120:	60b9      	str	r1, [r7, #8]
 800f122:	607a      	str	r2, [r7, #4]
 800f124:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d106      	bne.n	800f13a <tcp_rst+0x22>
 800f12c:	4b1f      	ldr	r3, [pc, #124]	@ (800f1ac <tcp_rst+0x94>)
 800f12e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f132:	491f      	ldr	r1, [pc, #124]	@ (800f1b0 <tcp_rst+0x98>)
 800f134:	481f      	ldr	r0, [pc, #124]	@ (800f1b4 <tcp_rst+0x9c>)
 800f136:	f003 fdcb 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <tcp_rst+0x36>
 800f140:	4b1a      	ldr	r3, [pc, #104]	@ (800f1ac <tcp_rst+0x94>)
 800f142:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f146:	491c      	ldr	r1, [pc, #112]	@ (800f1b8 <tcp_rst+0xa0>)
 800f148:	481a      	ldr	r0, [pc, #104]	@ (800f1b4 <tcp_rst+0x9c>)
 800f14a:	f003 fdc1 	bl	8012cd0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f14e:	2300      	movs	r3, #0
 800f150:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f152:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f156:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f158:	7dfb      	ldrb	r3, [r7, #23]
 800f15a:	b29c      	uxth	r4, r3
 800f15c:	68b8      	ldr	r0, [r7, #8]
 800f15e:	f7f8 f9df 	bl	8007520 <lwip_htonl>
 800f162:	4602      	mov	r2, r0
 800f164:	8abb      	ldrh	r3, [r7, #20]
 800f166:	9303      	str	r3, [sp, #12]
 800f168:	2314      	movs	r3, #20
 800f16a:	9302      	str	r3, [sp, #8]
 800f16c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	4613      	mov	r3, r2
 800f176:	2200      	movs	r2, #0
 800f178:	4621      	mov	r1, r4
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f7ff fe84 	bl	800ee88 <tcp_output_alloc_header_common>
 800f180:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00c      	beq.n	800f1a2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f188:	7dfb      	ldrb	r3, [r7, #23]
 800f18a:	2200      	movs	r2, #0
 800f18c:	6939      	ldr	r1, [r7, #16]
 800f18e:	68f8      	ldr	r0, [r7, #12]
 800f190:	f7ff ff2a 	bl	800efe8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	6939      	ldr	r1, [r7, #16]
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7ff ff62 	bl	800f064 <tcp_output_control_segment>
 800f1a0:	e000      	b.n	800f1a4 <tcp_rst+0x8c>
    return;
 800f1a2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f1a4:	371c      	adds	r7, #28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd90      	pop	{r4, r7, pc}
 800f1aa:	bf00      	nop
 800f1ac:	080155a0 	.word	0x080155a0
 800f1b0:	08015d24 	.word	0x08015d24
 800f1b4:	080155f4 	.word	0x080155f4
 800f1b8:	08015d40 	.word	0x08015d40

0800f1bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f1bc:	b590      	push	{r4, r7, lr}
 800f1be:	b087      	sub	sp, #28
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d106      	bne.n	800f1e0 <tcp_send_empty_ack+0x24>
 800f1d2:	4b28      	ldr	r3, [pc, #160]	@ (800f274 <tcp_send_empty_ack+0xb8>)
 800f1d4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f1d8:	4927      	ldr	r1, [pc, #156]	@ (800f278 <tcp_send_empty_ack+0xbc>)
 800f1da:	4828      	ldr	r0, [pc, #160]	@ (800f27c <tcp_send_empty_ack+0xc0>)
 800f1dc:	f003 fd78 	bl	8012cd0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f1e0:	7dfb      	ldrb	r3, [r7, #23]
 800f1e2:	009b      	lsls	r3, r3, #2
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	f003 0304 	and.w	r3, r3, #4
 800f1ea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f1ec:	7d7b      	ldrb	r3, [r7, #21]
 800f1ee:	b29c      	uxth	r4, r3
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7f8 f993 	bl	8007520 <lwip_htonl>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	4621      	mov	r1, r4
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f7ff feb3 	bl	800ef6c <tcp_output_alloc_header>
 800f206:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f208:	693b      	ldr	r3, [r7, #16]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d109      	bne.n	800f222 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	8b5b      	ldrh	r3, [r3, #26]
 800f212:	f043 0303 	orr.w	r3, r3, #3
 800f216:	b29a      	uxth	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f21c:	f06f 0301 	mvn.w	r3, #1
 800f220:	e023      	b.n	800f26a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f222:	7dbb      	ldrb	r3, [r7, #22]
 800f224:	7dfa      	ldrb	r2, [r7, #23]
 800f226:	6939      	ldr	r1, [r7, #16]
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f7ff fedd 	bl	800efe8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	3304      	adds	r3, #4
 800f234:	6939      	ldr	r1, [r7, #16]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff ff14 	bl	800f064 <tcp_output_control_segment>
 800f23c:	4603      	mov	r3, r0
 800f23e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	8b5b      	ldrh	r3, [r3, #26]
 800f24c:	f043 0303 	orr.w	r3, r3, #3
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	835a      	strh	r2, [r3, #26]
 800f256:	e006      	b.n	800f266 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	8b5b      	ldrh	r3, [r3, #26]
 800f25c:	f023 0303 	bic.w	r3, r3, #3
 800f260:	b29a      	uxth	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f266:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	371c      	adds	r7, #28
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd90      	pop	{r4, r7, pc}
 800f272:	bf00      	nop
 800f274:	080155a0 	.word	0x080155a0
 800f278:	08015d5c 	.word	0x08015d5c
 800f27c:	080155f4 	.word	0x080155f4

0800f280 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f280:	b590      	push	{r4, r7, lr}
 800f282:	b087      	sub	sp, #28
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f288:	2300      	movs	r3, #0
 800f28a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d106      	bne.n	800f2a0 <tcp_keepalive+0x20>
 800f292:	4b18      	ldr	r3, [pc, #96]	@ (800f2f4 <tcp_keepalive+0x74>)
 800f294:	f640 0224 	movw	r2, #2084	@ 0x824
 800f298:	4917      	ldr	r1, [pc, #92]	@ (800f2f8 <tcp_keepalive+0x78>)
 800f29a:	4818      	ldr	r0, [pc, #96]	@ (800f2fc <tcp_keepalive+0x7c>)
 800f29c:	f003 fd18 	bl	8012cd0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f2a0:	7dfb      	ldrb	r3, [r7, #23]
 800f2a2:	b29c      	uxth	r4, r3
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7f8 f938 	bl	8007520 <lwip_htonl>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	4621      	mov	r1, r4
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff fe58 	bl	800ef6c <tcp_output_alloc_header>
 800f2bc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2c8:	e010      	b.n	800f2ec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2ca:	7dfb      	ldrb	r3, [r7, #23]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	6939      	ldr	r1, [r7, #16]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7ff fe89 	bl	800efe8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2d6:	687a      	ldr	r2, [r7, #4]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	6939      	ldr	r1, [r7, #16]
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fec0 	bl	800f064 <tcp_output_control_segment>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	371c      	adds	r7, #28
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd90      	pop	{r4, r7, pc}
 800f2f4:	080155a0 	.word	0x080155a0
 800f2f8:	08015d7c 	.word	0x08015d7c
 800f2fc:	080155f4 	.word	0x080155f4

0800f300 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f300:	b590      	push	{r4, r7, lr}
 800f302:	b08b      	sub	sp, #44	@ 0x2c
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f308:	2300      	movs	r3, #0
 800f30a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d106      	bne.n	800f322 <tcp_zero_window_probe+0x22>
 800f314:	4b4c      	ldr	r3, [pc, #304]	@ (800f448 <tcp_zero_window_probe+0x148>)
 800f316:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f31a:	494c      	ldr	r1, [pc, #304]	@ (800f44c <tcp_zero_window_probe+0x14c>)
 800f31c:	484c      	ldr	r0, [pc, #304]	@ (800f450 <tcp_zero_window_probe+0x150>)
 800f31e:	f003 fcd7 	bl	8012cd0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f326:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f328:	6a3b      	ldr	r3, [r7, #32]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d101      	bne.n	800f332 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f32e:	2300      	movs	r3, #0
 800f330:	e086      	b.n	800f440 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f338:	2bff      	cmp	r3, #255	@ 0xff
 800f33a:	d007      	beq.n	800f34c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f342:	3301      	adds	r3, #1
 800f344:	b2da      	uxtb	r2, r3
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f34c:	6a3b      	ldr	r3, [r7, #32]
 800f34e:	68db      	ldr	r3, [r3, #12]
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	b29b      	uxth	r3, r3
 800f354:	4618      	mov	r0, r3
 800f356:	f7f8 f8cf 	bl	80074f8 <lwip_htons>
 800f35a:	4603      	mov	r3, r0
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d005      	beq.n	800f372 <tcp_zero_window_probe+0x72>
 800f366:	6a3b      	ldr	r3, [r7, #32]
 800f368:	891b      	ldrh	r3, [r3, #8]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <tcp_zero_window_probe+0x72>
 800f36e:	2301      	movs	r3, #1
 800f370:	e000      	b.n	800f374 <tcp_zero_window_probe+0x74>
 800f372:	2300      	movs	r3, #0
 800f374:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f376:	7ffb      	ldrb	r3, [r7, #31]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bf0c      	ite	eq
 800f37c:	2301      	moveq	r3, #1
 800f37e:	2300      	movne	r3, #0
 800f380:	b2db      	uxtb	r3, r3
 800f382:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f388:	b299      	uxth	r1, r3
 800f38a:	6a3b      	ldr	r3, [r7, #32]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	685b      	ldr	r3, [r3, #4]
 800f390:	8bba      	ldrh	r2, [r7, #28]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff fdea 	bl	800ef6c <tcp_output_alloc_header>
 800f398:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f39a:	69bb      	ldr	r3, [r7, #24]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d102      	bne.n	800f3a6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f3a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3a4:	e04c      	b.n	800f440 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f3ac:	7ffb      	ldrb	r3, [r7, #31]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d011      	beq.n	800f3d6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	899b      	ldrh	r3, [r3, #12]
 800f3b6:	b29b      	uxth	r3, r3
 800f3b8:	b21b      	sxth	r3, r3
 800f3ba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f3be:	b21c      	sxth	r4, r3
 800f3c0:	2011      	movs	r0, #17
 800f3c2:	f7f8 f899 	bl	80074f8 <lwip_htons>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	b21b      	sxth	r3, r3
 800f3ca:	4323      	orrs	r3, r4
 800f3cc:	b21b      	sxth	r3, r3
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	819a      	strh	r2, [r3, #12]
 800f3d4:	e010      	b.n	800f3f8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f3d6:	69bb      	ldr	r3, [r7, #24]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	3314      	adds	r3, #20
 800f3dc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	6858      	ldr	r0, [r3, #4]
 800f3e2:	6a3b      	ldr	r3, [r7, #32]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	891a      	ldrh	r2, [r3, #8]
 800f3e8:	6a3b      	ldr	r3, [r7, #32]
 800f3ea:	891b      	ldrh	r3, [r3, #8]
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	2201      	movs	r2, #1
 800f3f2:	6939      	ldr	r1, [r7, #16]
 800f3f4:	f7f9 ff66 	bl	80092c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f3f8:	6a3b      	ldr	r3, [r7, #32]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7f8 f88e 	bl	8007520 <lwip_htonl>
 800f404:	4603      	mov	r3, r0
 800f406:	3301      	adds	r3, #1
 800f408:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	1ad3      	subs	r3, r2, r3
 800f412:	2b00      	cmp	r3, #0
 800f414:	da02      	bge.n	800f41c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f41c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f420:	2200      	movs	r2, #0
 800f422:	69b9      	ldr	r1, [r7, #24]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff fddf 	bl	800efe8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3304      	adds	r3, #4
 800f430:	69b9      	ldr	r1, [r7, #24]
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f7ff fe16 	bl	800f064 <tcp_output_control_segment>
 800f438:	4603      	mov	r3, r0
 800f43a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f43c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f440:	4618      	mov	r0, r3
 800f442:	372c      	adds	r7, #44	@ 0x2c
 800f444:	46bd      	mov	sp, r7
 800f446:	bd90      	pop	{r4, r7, pc}
 800f448:	080155a0 	.word	0x080155a0
 800f44c:	08015d98 	.word	0x08015d98
 800f450:	080155f4 	.word	0x080155f4

0800f454 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b082      	sub	sp, #8
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f45c:	f7f9 ffee 	bl	800943c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f460:	4b0a      	ldr	r3, [pc, #40]	@ (800f48c <tcpip_tcp_timer+0x38>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d103      	bne.n	800f470 <tcpip_tcp_timer+0x1c>
 800f468:	4b09      	ldr	r3, [pc, #36]	@ (800f490 <tcpip_tcp_timer+0x3c>)
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f470:	2200      	movs	r2, #0
 800f472:	4908      	ldr	r1, [pc, #32]	@ (800f494 <tcpip_tcp_timer+0x40>)
 800f474:	20fa      	movs	r0, #250	@ 0xfa
 800f476:	f000 f8f3 	bl	800f660 <sys_timeout>
 800f47a:	e003      	b.n	800f484 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f47c:	4b06      	ldr	r3, [pc, #24]	@ (800f498 <tcpip_tcp_timer+0x44>)
 800f47e:	2200      	movs	r2, #0
 800f480:	601a      	str	r2, [r3, #0]
  }
}
 800f482:	bf00      	nop
 800f484:	bf00      	nop
 800f486:	3708      	adds	r7, #8
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	20007700 	.word	0x20007700
 800f490:	20007704 	.word	0x20007704
 800f494:	0800f455 	.word	0x0800f455
 800f498:	2000774c 	.word	0x2000774c

0800f49c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f4cc <tcp_timer_needed+0x30>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10f      	bne.n	800f4c8 <tcp_timer_needed+0x2c>
 800f4a8:	4b09      	ldr	r3, [pc, #36]	@ (800f4d0 <tcp_timer_needed+0x34>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d103      	bne.n	800f4b8 <tcp_timer_needed+0x1c>
 800f4b0:	4b08      	ldr	r3, [pc, #32]	@ (800f4d4 <tcp_timer_needed+0x38>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d007      	beq.n	800f4c8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f4b8:	4b04      	ldr	r3, [pc, #16]	@ (800f4cc <tcp_timer_needed+0x30>)
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4905      	ldr	r1, [pc, #20]	@ (800f4d8 <tcp_timer_needed+0x3c>)
 800f4c2:	20fa      	movs	r0, #250	@ 0xfa
 800f4c4:	f000 f8cc 	bl	800f660 <sys_timeout>
  }
}
 800f4c8:	bf00      	nop
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	2000774c 	.word	0x2000774c
 800f4d0:	20007700 	.word	0x20007700
 800f4d4:	20007704 	.word	0x20007704
 800f4d8:	0800f455 	.word	0x0800f455

0800f4dc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b086      	sub	sp, #24
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f4e8:	200a      	movs	r0, #10
 800f4ea:	f7f8 fe5d 	bl	80081a8 <memp_malloc>
 800f4ee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f4f0:	693b      	ldr	r3, [r7, #16]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d109      	bne.n	800f50a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d151      	bne.n	800f5a0 <sys_timeout_abs+0xc4>
 800f4fc:	4b2a      	ldr	r3, [pc, #168]	@ (800f5a8 <sys_timeout_abs+0xcc>)
 800f4fe:	22be      	movs	r2, #190	@ 0xbe
 800f500:	492a      	ldr	r1, [pc, #168]	@ (800f5ac <sys_timeout_abs+0xd0>)
 800f502:	482b      	ldr	r0, [pc, #172]	@ (800f5b0 <sys_timeout_abs+0xd4>)
 800f504:	f003 fbe4 	bl	8012cd0 <iprintf>
    return;
 800f508:	e04a      	b.n	800f5a0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	2200      	movs	r2, #0
 800f50e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	68fa      	ldr	r2, [r7, #12]
 800f520:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f522:	4b24      	ldr	r3, [pc, #144]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d103      	bne.n	800f532 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f52a:	4a22      	ldr	r2, [pc, #136]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	6013      	str	r3, [r2, #0]
    return;
 800f530:	e037      	b.n	800f5a2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	4b1f      	ldr	r3, [pc, #124]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	1ad3      	subs	r3, r2, r3
 800f53e:	0fdb      	lsrs	r3, r3, #31
 800f540:	f003 0301 	and.w	r3, r3, #1
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b00      	cmp	r3, #0
 800f548:	d007      	beq.n	800f55a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f54a:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f552:	4a18      	ldr	r2, [pc, #96]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	e023      	b.n	800f5a2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f55a:	4b16      	ldr	r3, [pc, #88]	@ (800f5b4 <sys_timeout_abs+0xd8>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	617b      	str	r3, [r7, #20]
 800f560:	e01a      	b.n	800f598 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d00b      	beq.n	800f582 <sys_timeout_abs+0xa6>
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	0fdb      	lsrs	r3, r3, #31
 800f578:	f003 0301 	and.w	r3, r3, #1
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d007      	beq.n	800f592 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	681a      	ldr	r2, [r3, #0]
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	601a      	str	r2, [r3, #0]
        break;
 800f590:	e007      	b.n	800f5a2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	617b      	str	r3, [r7, #20]
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d1e1      	bne.n	800f562 <sys_timeout_abs+0x86>
 800f59e:	e000      	b.n	800f5a2 <sys_timeout_abs+0xc6>
    return;
 800f5a0:	bf00      	nop
      }
    }
  }
}
 800f5a2:	3718      	adds	r7, #24
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	08015dbc 	.word	0x08015dbc
 800f5ac:	08015df0 	.word	0x08015df0
 800f5b0:	08015e30 	.word	0x08015e30
 800f5b4:	20007744 	.word	0x20007744

0800f5b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	685b      	ldr	r3, [r3, #4]
 800f5c8:	4798      	blx	r3

  now = sys_now();
 800f5ca:	f7f4 f98a 	bl	80038e2 <sys_now>
 800f5ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800f614 <lwip_cyclic_timer+0x5c>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4413      	add	r3, r2
 800f5da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f5dc:	68fa      	ldr	r2, [r7, #12]
 800f5de:	693b      	ldr	r3, [r7, #16]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	0fdb      	lsrs	r3, r3, #31
 800f5e4:	f003 0301 	and.w	r3, r3, #1
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d009      	beq.n	800f602 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	687a      	ldr	r2, [r7, #4]
 800f5f8:	4907      	ldr	r1, [pc, #28]	@ (800f618 <lwip_cyclic_timer+0x60>)
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7ff ff6e 	bl	800f4dc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f600:	e004      	b.n	800f60c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f602:	687a      	ldr	r2, [r7, #4]
 800f604:	4904      	ldr	r1, [pc, #16]	@ (800f618 <lwip_cyclic_timer+0x60>)
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7ff ff68 	bl	800f4dc <sys_timeout_abs>
}
 800f60c:	bf00      	nop
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	20007748 	.word	0x20007748
 800f618:	0800f5b9 	.word	0x0800f5b9

0800f61c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f622:	2301      	movs	r3, #1
 800f624:	607b      	str	r3, [r7, #4]
 800f626:	e00e      	b.n	800f646 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f628:	4a0b      	ldr	r2, [pc, #44]	@ (800f658 <sys_timeouts_init+0x3c>)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	00db      	lsls	r3, r3, #3
 800f634:	4a08      	ldr	r2, [pc, #32]	@ (800f658 <sys_timeouts_init+0x3c>)
 800f636:	4413      	add	r3, r2
 800f638:	461a      	mov	r2, r3
 800f63a:	4908      	ldr	r1, [pc, #32]	@ (800f65c <sys_timeouts_init+0x40>)
 800f63c:	f000 f810 	bl	800f660 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	3301      	adds	r3, #1
 800f644:	607b      	str	r3, [r7, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b02      	cmp	r3, #2
 800f64a:	d9ed      	bls.n	800f628 <sys_timeouts_init+0xc>
  }
}
 800f64c:	bf00      	nop
 800f64e:	bf00      	nop
 800f650:	3708      	adds	r7, #8
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}
 800f656:	bf00      	nop
 800f658:	080178a0 	.word	0x080178a0
 800f65c:	0800f5b9 	.word	0x0800f5b9

0800f660 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f672:	d306      	bcc.n	800f682 <sys_timeout+0x22>
 800f674:	4b0a      	ldr	r3, [pc, #40]	@ (800f6a0 <sys_timeout+0x40>)
 800f676:	f240 1229 	movw	r2, #297	@ 0x129
 800f67a:	490a      	ldr	r1, [pc, #40]	@ (800f6a4 <sys_timeout+0x44>)
 800f67c:	480a      	ldr	r0, [pc, #40]	@ (800f6a8 <sys_timeout+0x48>)
 800f67e:	f003 fb27 	bl	8012cd0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f682:	f7f4 f92e 	bl	80038e2 <sys_now>
 800f686:	4602      	mov	r2, r0
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	4413      	add	r3, r2
 800f68c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	68b9      	ldr	r1, [r7, #8]
 800f692:	6978      	ldr	r0, [r7, #20]
 800f694:	f7ff ff22 	bl	800f4dc <sys_timeout_abs>
#endif
}
 800f698:	bf00      	nop
 800f69a:	3718      	adds	r7, #24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	08015dbc 	.word	0x08015dbc
 800f6a4:	08015e58 	.word	0x08015e58
 800f6a8:	08015e30 	.word	0x08015e30

0800f6ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f6b2:	f7f4 f916 	bl	80038e2 <sys_now>
 800f6b6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f6b8:	4b17      	ldr	r3, [pc, #92]	@ (800f718 <sys_check_timeouts+0x6c>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d022      	beq.n	800f70a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	1ad3      	subs	r3, r2, r3
 800f6cc:	0fdb      	lsrs	r3, r3, #31
 800f6ce:	f003 0301 	and.w	r3, r3, #1
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d11a      	bne.n	800f70e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a0e      	ldr	r2, [pc, #56]	@ (800f718 <sys_check_timeouts+0x6c>)
 800f6de:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	68db      	ldr	r3, [r3, #12]
 800f6ea:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	4a0a      	ldr	r2, [pc, #40]	@ (800f71c <sys_check_timeouts+0x70>)
 800f6f2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f6f4:	68b9      	ldr	r1, [r7, #8]
 800f6f6:	200a      	movs	r0, #10
 800f6f8:	f7f8 fda8 	bl	800824c <memp_free>
    if (handler != NULL) {
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d0da      	beq.n	800f6b8 <sys_check_timeouts+0xc>
      handler(arg);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6838      	ldr	r0, [r7, #0]
 800f706:	4798      	blx	r3
  do {
 800f708:	e7d6      	b.n	800f6b8 <sys_check_timeouts+0xc>
      return;
 800f70a:	bf00      	nop
 800f70c:	e000      	b.n	800f710 <sys_check_timeouts+0x64>
      return;
 800f70e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f710:	3710      	adds	r7, #16
 800f712:	46bd      	mov	sp, r7
 800f714:	bd80      	pop	{r7, pc}
 800f716:	bf00      	nop
 800f718:	20007744 	.word	0x20007744
 800f71c:	20007748 	.word	0x20007748

0800f720 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f726:	4b16      	ldr	r3, [pc, #88]	@ (800f780 <sys_timeouts_sleeptime+0x60>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d102      	bne.n	800f734 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f72e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f732:	e020      	b.n	800f776 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f734:	f7f4 f8d5 	bl	80038e2 <sys_now>
 800f738:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f73a:	4b11      	ldr	r3, [pc, #68]	@ (800f780 <sys_timeouts_sleeptime+0x60>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	685a      	ldr	r2, [r3, #4]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	1ad3      	subs	r3, r2, r3
 800f744:	0fdb      	lsrs	r3, r3, #31
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d001      	beq.n	800f754 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f750:	2300      	movs	r3, #0
 800f752:	e010      	b.n	800f776 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f754:	4b0a      	ldr	r3, [pc, #40]	@ (800f780 <sys_timeouts_sleeptime+0x60>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	685a      	ldr	r2, [r3, #4]
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	da06      	bge.n	800f774 <sys_timeouts_sleeptime+0x54>
 800f766:	4b07      	ldr	r3, [pc, #28]	@ (800f784 <sys_timeouts_sleeptime+0x64>)
 800f768:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f76c:	4906      	ldr	r1, [pc, #24]	@ (800f788 <sys_timeouts_sleeptime+0x68>)
 800f76e:	4807      	ldr	r0, [pc, #28]	@ (800f78c <sys_timeouts_sleeptime+0x6c>)
 800f770:	f003 faae 	bl	8012cd0 <iprintf>
    return ret;
 800f774:	683b      	ldr	r3, [r7, #0]
  }
}
 800f776:	4618      	mov	r0, r3
 800f778:	3708      	adds	r7, #8
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}
 800f77e:	bf00      	nop
 800f780:	20007744 	.word	0x20007744
 800f784:	08015dbc 	.word	0x08015dbc
 800f788:	08015e90 	.word	0x08015e90
 800f78c:	08015e30 	.word	0x08015e30

0800f790 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f794:	f003 f99c 	bl	8012ad0 <rand>
 800f798:	4603      	mov	r3, r0
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f7a0:	b29b      	uxth	r3, r3
 800f7a2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	4b01      	ldr	r3, [pc, #4]	@ (800f7b0 <udp_init+0x20>)
 800f7aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7ac:	bf00      	nop
 800f7ae:	bd80      	pop	{r7, pc}
 800f7b0:	20000018 	.word	0x20000018

0800f7b4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f7b4:	b480      	push	{r7}
 800f7b6:	b083      	sub	sp, #12
 800f7b8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f7be:	4b17      	ldr	r3, [pc, #92]	@ (800f81c <udp_new_port+0x68>)
 800f7c0:	881b      	ldrh	r3, [r3, #0]
 800f7c2:	1c5a      	adds	r2, r3, #1
 800f7c4:	b291      	uxth	r1, r2
 800f7c6:	4a15      	ldr	r2, [pc, #84]	@ (800f81c <udp_new_port+0x68>)
 800f7c8:	8011      	strh	r1, [r2, #0]
 800f7ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d103      	bne.n	800f7da <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f7d2:	4b12      	ldr	r3, [pc, #72]	@ (800f81c <udp_new_port+0x68>)
 800f7d4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f7d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7da:	4b11      	ldr	r3, [pc, #68]	@ (800f820 <udp_new_port+0x6c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	e011      	b.n	800f806 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	8a5a      	ldrh	r2, [r3, #18]
 800f7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f81c <udp_new_port+0x68>)
 800f7e8:	881b      	ldrh	r3, [r3, #0]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d108      	bne.n	800f800 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f7ee:	88fb      	ldrh	r3, [r7, #6]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	80fb      	strh	r3, [r7, #6]
 800f7f4:	88fb      	ldrh	r3, [r7, #6]
 800f7f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f7fa:	d3e0      	bcc.n	800f7be <udp_new_port+0xa>
        return 0;
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	e007      	b.n	800f810 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	603b      	str	r3, [r7, #0]
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d1ea      	bne.n	800f7e2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f80c:	4b03      	ldr	r3, [pc, #12]	@ (800f81c <udp_new_port+0x68>)
 800f80e:	881b      	ldrh	r3, [r3, #0]
}
 800f810:	4618      	mov	r0, r3
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	bc80      	pop	{r7}
 800f818:	4770      	bx	lr
 800f81a:	bf00      	nop
 800f81c:	20000018 	.word	0x20000018
 800f820:	20007750 	.word	0x20007750

0800f824 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	4613      	mov	r3, r2
 800f830:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d105      	bne.n	800f844 <udp_input_local_match+0x20>
 800f838:	4b27      	ldr	r3, [pc, #156]	@ (800f8d8 <udp_input_local_match+0xb4>)
 800f83a:	2287      	movs	r2, #135	@ 0x87
 800f83c:	4927      	ldr	r1, [pc, #156]	@ (800f8dc <udp_input_local_match+0xb8>)
 800f83e:	4828      	ldr	r0, [pc, #160]	@ (800f8e0 <udp_input_local_match+0xbc>)
 800f840:	f003 fa46 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <udp_input_local_match+0x32>
 800f84a:	4b23      	ldr	r3, [pc, #140]	@ (800f8d8 <udp_input_local_match+0xb4>)
 800f84c:	2288      	movs	r2, #136	@ 0x88
 800f84e:	4925      	ldr	r1, [pc, #148]	@ (800f8e4 <udp_input_local_match+0xc0>)
 800f850:	4823      	ldr	r0, [pc, #140]	@ (800f8e0 <udp_input_local_match+0xbc>)
 800f852:	f003 fa3d 	bl	8012cd0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	7a1b      	ldrb	r3, [r3, #8]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d00b      	beq.n	800f876 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	7a1a      	ldrb	r2, [r3, #8]
 800f862:	4b21      	ldr	r3, [pc, #132]	@ (800f8e8 <udp_input_local_match+0xc4>)
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f86a:	3301      	adds	r3, #1
 800f86c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f86e:	429a      	cmp	r2, r3
 800f870:	d001      	beq.n	800f876 <udp_input_local_match+0x52>
    return 0;
 800f872:	2300      	movs	r3, #0
 800f874:	e02b      	b.n	800f8ce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f876:	79fb      	ldrb	r3, [r7, #7]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d018      	beq.n	800f8ae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d013      	beq.n	800f8aa <udp_input_local_match+0x86>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00f      	beq.n	800f8aa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f88a:	4b17      	ldr	r3, [pc, #92]	@ (800f8e8 <udp_input_local_match+0xc4>)
 800f88c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f88e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f892:	d00a      	beq.n	800f8aa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	4b13      	ldr	r3, [pc, #76]	@ (800f8e8 <udp_input_local_match+0xc4>)
 800f89a:	695b      	ldr	r3, [r3, #20]
 800f89c:	405a      	eors	r2, r3
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d110      	bne.n	800f8cc <udp_input_local_match+0xa8>
          return 1;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	e00f      	b.n	800f8ce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <udp_input_local_match+0xa4>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d005      	beq.n	800f8c8 <udp_input_local_match+0xa4>
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681a      	ldr	r2, [r3, #0]
 800f8c0:	4b09      	ldr	r3, [pc, #36]	@ (800f8e8 <udp_input_local_match+0xc4>)
 800f8c2:	695b      	ldr	r3, [r3, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d101      	bne.n	800f8cc <udp_input_local_match+0xa8>
        return 1;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e000      	b.n	800f8ce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f8cc:	2300      	movs	r3, #0
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	08015ea4 	.word	0x08015ea4
 800f8dc:	08015ed4 	.word	0x08015ed4
 800f8e0:	08015ef8 	.word	0x08015ef8
 800f8e4:	08015f20 	.word	0x08015f20
 800f8e8:	200045f4 	.word	0x200045f4

0800f8ec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f8ec:	b590      	push	{r4, r7, lr}
 800f8ee:	b08d      	sub	sp, #52	@ 0x34
 800f8f0:	af02      	add	r7, sp, #8
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <udp_input+0x20>
 800f900:	4b7c      	ldr	r3, [pc, #496]	@ (800faf4 <udp_input+0x208>)
 800f902:	22cf      	movs	r2, #207	@ 0xcf
 800f904:	497c      	ldr	r1, [pc, #496]	@ (800faf8 <udp_input+0x20c>)
 800f906:	487d      	ldr	r0, [pc, #500]	@ (800fafc <udp_input+0x210>)
 800f908:	f003 f9e2 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d105      	bne.n	800f91e <udp_input+0x32>
 800f912:	4b78      	ldr	r3, [pc, #480]	@ (800faf4 <udp_input+0x208>)
 800f914:	22d0      	movs	r2, #208	@ 0xd0
 800f916:	497a      	ldr	r1, [pc, #488]	@ (800fb00 <udp_input+0x214>)
 800f918:	4878      	ldr	r0, [pc, #480]	@ (800fafc <udp_input+0x210>)
 800f91a:	f003 f9d9 	bl	8012cd0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	895b      	ldrh	r3, [r3, #10]
 800f922:	2b07      	cmp	r3, #7
 800f924:	d803      	bhi.n	800f92e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7f9 fac8 	bl	8008ebc <pbuf_free>
    goto end;
 800f92c:	e0de      	b.n	800faec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f934:	4b73      	ldr	r3, [pc, #460]	@ (800fb04 <udp_input+0x218>)
 800f936:	695b      	ldr	r3, [r3, #20]
 800f938:	4a72      	ldr	r2, [pc, #456]	@ (800fb04 <udp_input+0x218>)
 800f93a:	6812      	ldr	r2, [r2, #0]
 800f93c:	4611      	mov	r1, r2
 800f93e:	4618      	mov	r0, r3
 800f940:	f001 fd34 	bl	80113ac <ip4_addr_isbroadcast_u32>
 800f944:	4603      	mov	r3, r0
 800f946:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	4618      	mov	r0, r3
 800f950:	f7f7 fdd2 	bl	80074f8 <lwip_htons>
 800f954:	4603      	mov	r3, r0
 800f956:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	885b      	ldrh	r3, [r3, #2]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4618      	mov	r0, r3
 800f960:	f7f7 fdca 	bl	80074f8 <lwip_htons>
 800f964:	4603      	mov	r3, r0
 800f966:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f968:	2300      	movs	r3, #0
 800f96a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f970:	2300      	movs	r3, #0
 800f972:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f974:	4b64      	ldr	r3, [pc, #400]	@ (800fb08 <udp_input+0x21c>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	627b      	str	r3, [r7, #36]	@ 0x24
 800f97a:	e054      	b.n	800fa26 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97e:	8a5b      	ldrh	r3, [r3, #18]
 800f980:	89fa      	ldrh	r2, [r7, #14]
 800f982:	429a      	cmp	r2, r3
 800f984:	d14a      	bne.n	800fa1c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f986:	7cfb      	ldrb	r3, [r7, #19]
 800f988:	461a      	mov	r2, r3
 800f98a:	6839      	ldr	r1, [r7, #0]
 800f98c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f98e:	f7ff ff49 	bl	800f824 <udp_input_local_match>
 800f992:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f994:	2b00      	cmp	r3, #0
 800f996:	d041      	beq.n	800fa1c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f99a:	7c1b      	ldrb	r3, [r3, #16]
 800f99c:	f003 0304 	and.w	r3, r3, #4
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d11d      	bne.n	800f9e0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d102      	bne.n	800f9b0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ac:	61fb      	str	r3, [r7, #28]
 800f9ae:	e017      	b.n	800f9e0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f9b0:	7cfb      	ldrb	r3, [r7, #19]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d014      	beq.n	800f9e0 <udp_input+0xf4>
 800f9b6:	4b53      	ldr	r3, [pc, #332]	@ (800fb04 <udp_input+0x218>)
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9be:	d10f      	bne.n	800f9e0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f9c0:	69fb      	ldr	r3, [r7, #28]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d008      	beq.n	800f9e0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	681a      	ldr	r2, [r3, #0]
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d101      	bne.n	800f9e0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9de:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e2:	8a9b      	ldrh	r3, [r3, #20]
 800f9e4:	8a3a      	ldrh	r2, [r7, #16]
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	d118      	bne.n	800fa1c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9ec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d005      	beq.n	800f9fe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f4:	685a      	ldr	r2, [r3, #4]
 800f9f6:	4b43      	ldr	r3, [pc, #268]	@ (800fb04 <udp_input+0x218>)
 800f9f8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d10e      	bne.n	800fa1c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f9fe:	6a3b      	ldr	r3, [r7, #32]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d014      	beq.n	800fa2e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fa04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa06:	68da      	ldr	r2, [r3, #12]
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fa0c:	4b3e      	ldr	r3, [pc, #248]	@ (800fb08 <udp_input+0x21c>)
 800fa0e:	681a      	ldr	r2, [r3, #0]
 800fa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa12:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fa14:	4a3c      	ldr	r2, [pc, #240]	@ (800fb08 <udp_input+0x21c>)
 800fa16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa18:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fa1a:	e008      	b.n	800fa2e <udp_input+0x142>
      }
    }

    prev = pcb;
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1a7      	bne.n	800f97c <udp_input+0x90>
 800fa2c:	e000      	b.n	800fa30 <udp_input+0x144>
        break;
 800fa2e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d101      	bne.n	800fa3a <udp_input+0x14e>
    pcb = uncon_pcb;
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d002      	beq.n	800fa46 <udp_input+0x15a>
    for_us = 1;
 800fa40:	2301      	movs	r3, #1
 800fa42:	76fb      	strb	r3, [r7, #27]
 800fa44:	e00a      	b.n	800fa5c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	3304      	adds	r3, #4
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	4b2d      	ldr	r3, [pc, #180]	@ (800fb04 <udp_input+0x218>)
 800fa4e:	695b      	ldr	r3, [r3, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	bf0c      	ite	eq
 800fa54:	2301      	moveq	r3, #1
 800fa56:	2300      	movne	r3, #0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fa5c:	7efb      	ldrb	r3, [r7, #27]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d041      	beq.n	800fae6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fa62:	2108      	movs	r1, #8
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f7f9 f9a3 	bl	8008db0 <pbuf_remove_header>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d00a      	beq.n	800fa86 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fa70:	4b20      	ldr	r3, [pc, #128]	@ (800faf4 <udp_input+0x208>)
 800fa72:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800fa76:	4925      	ldr	r1, [pc, #148]	@ (800fb0c <udp_input+0x220>)
 800fa78:	4820      	ldr	r0, [pc, #128]	@ (800fafc <udp_input+0x210>)
 800fa7a:	f003 f929 	bl	8012cd0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7f9 fa1c 	bl	8008ebc <pbuf_free>
      goto end;
 800fa84:	e032      	b.n	800faec <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d012      	beq.n	800fab2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8e:	699b      	ldr	r3, [r3, #24]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d00a      	beq.n	800faaa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	699c      	ldr	r4, [r3, #24]
 800fa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9a:	69d8      	ldr	r0, [r3, #28]
 800fa9c:	8a3b      	ldrh	r3, [r7, #16]
 800fa9e:	9300      	str	r3, [sp, #0]
 800faa0:	4b1b      	ldr	r3, [pc, #108]	@ (800fb10 <udp_input+0x224>)
 800faa2:	687a      	ldr	r2, [r7, #4]
 800faa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800faa6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800faa8:	e021      	b.n	800faee <udp_input+0x202>
        pbuf_free(p);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7f9 fa06 	bl	8008ebc <pbuf_free>
        goto end;
 800fab0:	e01c      	b.n	800faec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800fab2:	7cfb      	ldrb	r3, [r7, #19]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d112      	bne.n	800fade <udp_input+0x1f2>
 800fab8:	4b12      	ldr	r3, [pc, #72]	@ (800fb04 <udp_input+0x218>)
 800faba:	695b      	ldr	r3, [r3, #20]
 800fabc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fac0:	2be0      	cmp	r3, #224	@ 0xe0
 800fac2:	d00c      	beq.n	800fade <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fac4:	4b0f      	ldr	r3, [pc, #60]	@ (800fb04 <udp_input+0x218>)
 800fac6:	899b      	ldrh	r3, [r3, #12]
 800fac8:	3308      	adds	r3, #8
 800faca:	b29b      	uxth	r3, r3
 800facc:	b21b      	sxth	r3, r3
 800face:	4619      	mov	r1, r3
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f7f9 f9e0 	bl	8008e96 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fad6:	2103      	movs	r1, #3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f001 f8d9 	bl	8010c90 <icmp_dest_unreach>
      pbuf_free(p);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7f9 f9ec 	bl	8008ebc <pbuf_free>
  return;
 800fae4:	e003      	b.n	800faee <udp_input+0x202>
    pbuf_free(p);
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f7f9 f9e8 	bl	8008ebc <pbuf_free>
  return;
 800faec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800faee:	372c      	adds	r7, #44	@ 0x2c
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd90      	pop	{r4, r7, pc}
 800faf4:	08015ea4 	.word	0x08015ea4
 800faf8:	08015f48 	.word	0x08015f48
 800fafc:	08015ef8 	.word	0x08015ef8
 800fb00:	08015f60 	.word	0x08015f60
 800fb04:	200045f4 	.word	0x200045f4
 800fb08:	20007750 	.word	0x20007750
 800fb0c:	08015f7c 	.word	0x08015f7c
 800fb10:	20004604 	.word	0x20004604

0800fb14 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	b088      	sub	sp, #32
 800fb18:	af02      	add	r7, sp, #8
 800fb1a:	60f8      	str	r0, [r7, #12]
 800fb1c:	60b9      	str	r1, [r7, #8]
 800fb1e:	607a      	str	r2, [r7, #4]
 800fb20:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d109      	bne.n	800fb3c <udp_sendto+0x28>
 800fb28:	4b23      	ldr	r3, [pc, #140]	@ (800fbb8 <udp_sendto+0xa4>)
 800fb2a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fb2e:	4923      	ldr	r1, [pc, #140]	@ (800fbbc <udp_sendto+0xa8>)
 800fb30:	4823      	ldr	r0, [pc, #140]	@ (800fbc0 <udp_sendto+0xac>)
 800fb32:	f003 f8cd 	bl	8012cd0 <iprintf>
 800fb36:	f06f 030f 	mvn.w	r3, #15
 800fb3a:	e038      	b.n	800fbae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d109      	bne.n	800fb56 <udp_sendto+0x42>
 800fb42:	4b1d      	ldr	r3, [pc, #116]	@ (800fbb8 <udp_sendto+0xa4>)
 800fb44:	f240 2219 	movw	r2, #537	@ 0x219
 800fb48:	491e      	ldr	r1, [pc, #120]	@ (800fbc4 <udp_sendto+0xb0>)
 800fb4a:	481d      	ldr	r0, [pc, #116]	@ (800fbc0 <udp_sendto+0xac>)
 800fb4c:	f003 f8c0 	bl	8012cd0 <iprintf>
 800fb50:	f06f 030f 	mvn.w	r3, #15
 800fb54:	e02b      	b.n	800fbae <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d109      	bne.n	800fb70 <udp_sendto+0x5c>
 800fb5c:	4b16      	ldr	r3, [pc, #88]	@ (800fbb8 <udp_sendto+0xa4>)
 800fb5e:	f240 221a 	movw	r2, #538	@ 0x21a
 800fb62:	4919      	ldr	r1, [pc, #100]	@ (800fbc8 <udp_sendto+0xb4>)
 800fb64:	4816      	ldr	r0, [pc, #88]	@ (800fbc0 <udp_sendto+0xac>)
 800fb66:	f003 f8b3 	bl	8012cd0 <iprintf>
 800fb6a:	f06f 030f 	mvn.w	r3, #15
 800fb6e:	e01e      	b.n	800fbae <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	7a1b      	ldrb	r3, [r3, #8]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d006      	beq.n	800fb86 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	7a1b      	ldrb	r3, [r3, #8]
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7f8 fe11 	bl	80087a4 <netif_get_by_index>
 800fb82:	6178      	str	r0, [r7, #20]
 800fb84:	e003      	b.n	800fb8e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f001 f916 	bl	8010db8 <ip4_route>
 800fb8c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fb8e:	697b      	ldr	r3, [r7, #20]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d102      	bne.n	800fb9a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fb94:	f06f 0303 	mvn.w	r3, #3
 800fb98:	e009      	b.n	800fbae <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fb9a:	887a      	ldrh	r2, [r7, #2]
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	4613      	mov	r3, r2
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	68b9      	ldr	r1, [r7, #8]
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f000 f810 	bl	800fbcc <udp_sendto_if>
 800fbac:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3718      	adds	r7, #24
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	08015ea4 	.word	0x08015ea4
 800fbbc:	08015fc8 	.word	0x08015fc8
 800fbc0:	08015ef8 	.word	0x08015ef8
 800fbc4:	08015fe0 	.word	0x08015fe0
 800fbc8:	08015ffc 	.word	0x08015ffc

0800fbcc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b088      	sub	sp, #32
 800fbd0:	af02      	add	r7, sp, #8
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]
 800fbd8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d109      	bne.n	800fbf4 <udp_sendto_if+0x28>
 800fbe0:	4b2e      	ldr	r3, [pc, #184]	@ (800fc9c <udp_sendto_if+0xd0>)
 800fbe2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fbe6:	492e      	ldr	r1, [pc, #184]	@ (800fca0 <udp_sendto_if+0xd4>)
 800fbe8:	482e      	ldr	r0, [pc, #184]	@ (800fca4 <udp_sendto_if+0xd8>)
 800fbea:	f003 f871 	bl	8012cd0 <iprintf>
 800fbee:	f06f 030f 	mvn.w	r3, #15
 800fbf2:	e04f      	b.n	800fc94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d109      	bne.n	800fc0e <udp_sendto_if+0x42>
 800fbfa:	4b28      	ldr	r3, [pc, #160]	@ (800fc9c <udp_sendto_if+0xd0>)
 800fbfc:	f240 2281 	movw	r2, #641	@ 0x281
 800fc00:	4929      	ldr	r1, [pc, #164]	@ (800fca8 <udp_sendto_if+0xdc>)
 800fc02:	4828      	ldr	r0, [pc, #160]	@ (800fca4 <udp_sendto_if+0xd8>)
 800fc04:	f003 f864 	bl	8012cd0 <iprintf>
 800fc08:	f06f 030f 	mvn.w	r3, #15
 800fc0c:	e042      	b.n	800fc94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d109      	bne.n	800fc28 <udp_sendto_if+0x5c>
 800fc14:	4b21      	ldr	r3, [pc, #132]	@ (800fc9c <udp_sendto_if+0xd0>)
 800fc16:	f240 2282 	movw	r2, #642	@ 0x282
 800fc1a:	4924      	ldr	r1, [pc, #144]	@ (800fcac <udp_sendto_if+0xe0>)
 800fc1c:	4821      	ldr	r0, [pc, #132]	@ (800fca4 <udp_sendto_if+0xd8>)
 800fc1e:	f003 f857 	bl	8012cd0 <iprintf>
 800fc22:	f06f 030f 	mvn.w	r3, #15
 800fc26:	e035      	b.n	800fc94 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fc28:	6a3b      	ldr	r3, [r7, #32]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d109      	bne.n	800fc42 <udp_sendto_if+0x76>
 800fc2e:	4b1b      	ldr	r3, [pc, #108]	@ (800fc9c <udp_sendto_if+0xd0>)
 800fc30:	f240 2283 	movw	r2, #643	@ 0x283
 800fc34:	491e      	ldr	r1, [pc, #120]	@ (800fcb0 <udp_sendto_if+0xe4>)
 800fc36:	481b      	ldr	r0, [pc, #108]	@ (800fca4 <udp_sendto_if+0xd8>)
 800fc38:	f003 f84a 	bl	8012cd0 <iprintf>
 800fc3c:	f06f 030f 	mvn.w	r3, #15
 800fc40:	e028      	b.n	800fc94 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d009      	beq.n	800fc5c <udp_sendto_if+0x90>
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d005      	beq.n	800fc5c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc58:	2be0      	cmp	r3, #224	@ 0xe0
 800fc5a:	d103      	bne.n	800fc64 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fc5c:	6a3b      	ldr	r3, [r7, #32]
 800fc5e:	3304      	adds	r3, #4
 800fc60:	617b      	str	r3, [r7, #20]
 800fc62:	e00b      	b.n	800fc7c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	681a      	ldr	r2, [r3, #0]
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d002      	beq.n	800fc78 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fc72:	f06f 0303 	mvn.w	r3, #3
 800fc76:	e00d      	b.n	800fc94 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fc7c:	887a      	ldrh	r2, [r7, #2]
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	9301      	str	r3, [sp, #4]
 800fc82:	6a3b      	ldr	r3, [r7, #32]
 800fc84:	9300      	str	r3, [sp, #0]
 800fc86:	4613      	mov	r3, r2
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	68b9      	ldr	r1, [r7, #8]
 800fc8c:	68f8      	ldr	r0, [r7, #12]
 800fc8e:	f000 f811 	bl	800fcb4 <udp_sendto_if_src>
 800fc92:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fc94:	4618      	mov	r0, r3
 800fc96:	3718      	adds	r7, #24
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	bd80      	pop	{r7, pc}
 800fc9c:	08015ea4 	.word	0x08015ea4
 800fca0:	08016018 	.word	0x08016018
 800fca4:	08015ef8 	.word	0x08015ef8
 800fca8:	08016034 	.word	0x08016034
 800fcac:	08016050 	.word	0x08016050
 800fcb0:	08016070 	.word	0x08016070

0800fcb4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08c      	sub	sp, #48	@ 0x30
 800fcb8:	af04      	add	r7, sp, #16
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d109      	bne.n	800fcdc <udp_sendto_if_src+0x28>
 800fcc8:	4b72      	ldr	r3, [pc, #456]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fcca:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fcce:	4972      	ldr	r1, [pc, #456]	@ (800fe98 <udp_sendto_if_src+0x1e4>)
 800fcd0:	4872      	ldr	r0, [pc, #456]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fcd2:	f002 fffd 	bl	8012cd0 <iprintf>
 800fcd6:	f06f 030f 	mvn.w	r3, #15
 800fcda:	e0d6      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fcdc:	68bb      	ldr	r3, [r7, #8]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d109      	bne.n	800fcf6 <udp_sendto_if_src+0x42>
 800fce2:	4b6c      	ldr	r3, [pc, #432]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fce4:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800fce8:	496d      	ldr	r1, [pc, #436]	@ (800fea0 <udp_sendto_if_src+0x1ec>)
 800fcea:	486c      	ldr	r0, [pc, #432]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fcec:	f002 fff0 	bl	8012cd0 <iprintf>
 800fcf0:	f06f 030f 	mvn.w	r3, #15
 800fcf4:	e0c9      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d109      	bne.n	800fd10 <udp_sendto_if_src+0x5c>
 800fcfc:	4b65      	ldr	r3, [pc, #404]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fcfe:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fd02:	4968      	ldr	r1, [pc, #416]	@ (800fea4 <udp_sendto_if_src+0x1f0>)
 800fd04:	4865      	ldr	r0, [pc, #404]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fd06:	f002 ffe3 	bl	8012cd0 <iprintf>
 800fd0a:	f06f 030f 	mvn.w	r3, #15
 800fd0e:	e0bc      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fd10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d109      	bne.n	800fd2a <udp_sendto_if_src+0x76>
 800fd16:	4b5f      	ldr	r3, [pc, #380]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fd18:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800fd1c:	4962      	ldr	r1, [pc, #392]	@ (800fea8 <udp_sendto_if_src+0x1f4>)
 800fd1e:	485f      	ldr	r0, [pc, #380]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fd20:	f002 ffd6 	bl	8012cd0 <iprintf>
 800fd24:	f06f 030f 	mvn.w	r3, #15
 800fd28:	e0af      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d109      	bne.n	800fd44 <udp_sendto_if_src+0x90>
 800fd30:	4b58      	ldr	r3, [pc, #352]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fd32:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fd36:	495d      	ldr	r1, [pc, #372]	@ (800feac <udp_sendto_if_src+0x1f8>)
 800fd38:	4858      	ldr	r0, [pc, #352]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fd3a:	f002 ffc9 	bl	8012cd0 <iprintf>
 800fd3e:	f06f 030f 	mvn.w	r3, #15
 800fd42:	e0a2      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	8a5b      	ldrh	r3, [r3, #18]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10f      	bne.n	800fd6c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fd4c:	68f9      	ldr	r1, [r7, #12]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	8a5b      	ldrh	r3, [r3, #18]
 800fd52:	461a      	mov	r2, r3
 800fd54:	68f8      	ldr	r0, [r7, #12]
 800fd56:	f000 f8ad 	bl	800feb4 <udp_bind>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800fd5e:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d002      	beq.n	800fd6c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fd66:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fd6a:	e08e      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	891b      	ldrh	r3, [r3, #8]
 800fd70:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d902      	bls.n	800fd7e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fd78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd7c:	e085      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fd7e:	2108      	movs	r1, #8
 800fd80:	68b8      	ldr	r0, [r7, #8]
 800fd82:	f7f9 f805 	bl	8008d90 <pbuf_add_header>
 800fd86:	4603      	mov	r3, r0
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d015      	beq.n	800fdb8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fd8c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd90:	2108      	movs	r1, #8
 800fd92:	2022      	movs	r0, #34	@ 0x22
 800fd94:	f7f8 fdae 	bl	80088f4 <pbuf_alloc>
 800fd98:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d102      	bne.n	800fda6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fda0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fda4:	e071      	b.n	800fe8a <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	891b      	ldrh	r3, [r3, #8]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d006      	beq.n	800fdbc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fdae:	68b9      	ldr	r1, [r7, #8]
 800fdb0:	69f8      	ldr	r0, [r7, #28]
 800fdb2:	f7f9 f9a5 	bl	8009100 <pbuf_chain>
 800fdb6:	e001      	b.n	800fdbc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fdb8:	68bb      	ldr	r3, [r7, #8]
 800fdba:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	895b      	ldrh	r3, [r3, #10]
 800fdc0:	2b07      	cmp	r3, #7
 800fdc2:	d806      	bhi.n	800fdd2 <udp_sendto_if_src+0x11e>
 800fdc4:	4b33      	ldr	r3, [pc, #204]	@ (800fe94 <udp_sendto_if_src+0x1e0>)
 800fdc6:	f240 320d 	movw	r2, #781	@ 0x30d
 800fdca:	4939      	ldr	r1, [pc, #228]	@ (800feb0 <udp_sendto_if_src+0x1fc>)
 800fdcc:	4833      	ldr	r0, [pc, #204]	@ (800fe9c <udp_sendto_if_src+0x1e8>)
 800fdce:	f002 ff7f 	bl	8012cd0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fdd2:	69fb      	ldr	r3, [r7, #28]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	8a5b      	ldrh	r3, [r3, #18]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7f7 fb8b 	bl	80074f8 <lwip_htons>
 800fde2:	4603      	mov	r3, r0
 800fde4:	461a      	mov	r2, r3
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fdea:	887b      	ldrh	r3, [r7, #2]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7f7 fb83 	bl	80074f8 <lwip_htons>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	719a      	strb	r2, [r3, #6]
 800fe00:	2200      	movs	r2, #0
 800fe02:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	891b      	ldrh	r3, [r3, #8]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7f7 fb75 	bl	80074f8 <lwip_htons>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	461a      	mov	r2, r3
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	7c1b      	ldrb	r3, [r3, #16]
 800fe1a:	f003 0301 	and.w	r3, r3, #1
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d113      	bne.n	800fe4a <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	891a      	ldrh	r2, [r3, #8]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	9300      	str	r3, [sp, #0]
 800fe2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe2c:	2111      	movs	r1, #17
 800fe2e:	69f8      	ldr	r0, [r7, #28]
 800fe30:	f7f7 fcc7 	bl	80077c2 <ip_chksum_pseudo>
 800fe34:	4603      	mov	r3, r0
 800fe36:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800fe38:	8b7b      	ldrh	r3, [r7, #26]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d102      	bne.n	800fe44 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800fe3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe42:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	8b7a      	ldrh	r2, [r7, #26]
 800fe48:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fe4a:	2311      	movs	r3, #17
 800fe4c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	7adb      	ldrb	r3, [r3, #11]
 800fe52:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	7a9b      	ldrb	r3, [r3, #10]
 800fe58:	7cb9      	ldrb	r1, [r7, #18]
 800fe5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe5c:	9202      	str	r2, [sp, #8]
 800fe5e:	7cfa      	ldrb	r2, [r7, #19]
 800fe60:	9201      	str	r2, [sp, #4]
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	460b      	mov	r3, r1
 800fe66:	687a      	ldr	r2, [r7, #4]
 800fe68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe6a:	69f8      	ldr	r0, [r7, #28]
 800fe6c:	f001 f98a 	bl	8011184 <ip4_output_if_src>
 800fe70:	4603      	mov	r3, r0
 800fe72:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fe74:	69fa      	ldr	r2, [r7, #28]
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d004      	beq.n	800fe86 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800fe7c:	69f8      	ldr	r0, [r7, #28]
 800fe7e:	f7f9 f81d 	bl	8008ebc <pbuf_free>
    q = NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fe86:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3720      	adds	r7, #32
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}
 800fe92:	bf00      	nop
 800fe94:	08015ea4 	.word	0x08015ea4
 800fe98:	08016090 	.word	0x08016090
 800fe9c:	08015ef8 	.word	0x08015ef8
 800fea0:	080160b0 	.word	0x080160b0
 800fea4:	080160d0 	.word	0x080160d0
 800fea8:	080160f4 	.word	0x080160f4
 800feac:	08016118 	.word	0x08016118
 800feb0:	0801613c 	.word	0x0801613c

0800feb4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b086      	sub	sp, #24
 800feb8:	af00      	add	r7, sp, #0
 800feba:	60f8      	str	r0, [r7, #12]
 800febc:	60b9      	str	r1, [r7, #8]
 800febe:	4613      	mov	r3, r2
 800fec0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d101      	bne.n	800fecc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fec8:	4b39      	ldr	r3, [pc, #228]	@ (800ffb0 <udp_bind+0xfc>)
 800feca:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d109      	bne.n	800fee6 <udp_bind+0x32>
 800fed2:	4b38      	ldr	r3, [pc, #224]	@ (800ffb4 <udp_bind+0x100>)
 800fed4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800fed8:	4937      	ldr	r1, [pc, #220]	@ (800ffb8 <udp_bind+0x104>)
 800feda:	4838      	ldr	r0, [pc, #224]	@ (800ffbc <udp_bind+0x108>)
 800fedc:	f002 fef8 	bl	8012cd0 <iprintf>
 800fee0:	f06f 030f 	mvn.w	r3, #15
 800fee4:	e060      	b.n	800ffa8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fee6:	2300      	movs	r3, #0
 800fee8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800feea:	4b35      	ldr	r3, [pc, #212]	@ (800ffc0 <udp_bind+0x10c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	617b      	str	r3, [r7, #20]
 800fef0:	e009      	b.n	800ff06 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	429a      	cmp	r2, r3
 800fef8:	d102      	bne.n	800ff00 <udp_bind+0x4c>
      rebind = 1;
 800fefa:	2301      	movs	r3, #1
 800fefc:	74fb      	strb	r3, [r7, #19]
      break;
 800fefe:	e005      	b.n	800ff0c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d1f2      	bne.n	800fef2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ff0c:	88fb      	ldrh	r3, [r7, #6]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d109      	bne.n	800ff26 <udp_bind+0x72>
    port = udp_new_port();
 800ff12:	f7ff fc4f 	bl	800f7b4 <udp_new_port>
 800ff16:	4603      	mov	r3, r0
 800ff18:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ff1a:	88fb      	ldrh	r3, [r7, #6]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d12c      	bne.n	800ff7a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ff20:	f06f 0307 	mvn.w	r3, #7
 800ff24:	e040      	b.n	800ffa8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff26:	4b26      	ldr	r3, [pc, #152]	@ (800ffc0 <udp_bind+0x10c>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	617b      	str	r3, [r7, #20]
 800ff2c:	e022      	b.n	800ff74 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ff2e:	68fa      	ldr	r2, [r7, #12]
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d01b      	beq.n	800ff6e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	8a5b      	ldrh	r3, [r3, #18]
 800ff3a:	88fa      	ldrh	r2, [r7, #6]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	d116      	bne.n	800ff6e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	681a      	ldr	r2, [r3, #0]
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d00d      	beq.n	800ff68 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d00a      	beq.n	800ff68 <udp_bind+0xb4>
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d006      	beq.n	800ff68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff5a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d003      	beq.n	800ff68 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff60:	697b      	ldr	r3, [r7, #20]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d102      	bne.n	800ff6e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ff68:	f06f 0307 	mvn.w	r3, #7
 800ff6c:	e01c      	b.n	800ffa8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	617b      	str	r3, [r7, #20]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1d9      	bne.n	800ff2e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d002      	beq.n	800ff86 <udp_bind+0xd2>
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	e000      	b.n	800ff88 <udp_bind+0xd4>
 800ff86:	2300      	movs	r3, #0
 800ff88:	68fa      	ldr	r2, [r7, #12]
 800ff8a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	88fa      	ldrh	r2, [r7, #6]
 800ff90:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ff92:	7cfb      	ldrb	r3, [r7, #19]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ff98:	4b09      	ldr	r3, [pc, #36]	@ (800ffc0 <udp_bind+0x10c>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ffa0:	4a07      	ldr	r2, [pc, #28]	@ (800ffc0 <udp_bind+0x10c>)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ffa6:	2300      	movs	r3, #0
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3718      	adds	r7, #24
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}
 800ffb0:	080178b8 	.word	0x080178b8
 800ffb4:	08015ea4 	.word	0x08015ea4
 800ffb8:	0801616c 	.word	0x0801616c
 800ffbc:	08015ef8 	.word	0x08015ef8
 800ffc0:	20007750 	.word	0x20007750

0800ffc4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	60f8      	str	r0, [r7, #12]
 800ffcc:	60b9      	str	r1, [r7, #8]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d109      	bne.n	800ffec <udp_connect+0x28>
 800ffd8:	4b2c      	ldr	r3, [pc, #176]	@ (801008c <udp_connect+0xc8>)
 800ffda:	f240 4235 	movw	r2, #1077	@ 0x435
 800ffde:	492c      	ldr	r1, [pc, #176]	@ (8010090 <udp_connect+0xcc>)
 800ffe0:	482c      	ldr	r0, [pc, #176]	@ (8010094 <udp_connect+0xd0>)
 800ffe2:	f002 fe75 	bl	8012cd0 <iprintf>
 800ffe6:	f06f 030f 	mvn.w	r3, #15
 800ffea:	e04b      	b.n	8010084 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d109      	bne.n	8010006 <udp_connect+0x42>
 800fff2:	4b26      	ldr	r3, [pc, #152]	@ (801008c <udp_connect+0xc8>)
 800fff4:	f240 4236 	movw	r2, #1078	@ 0x436
 800fff8:	4927      	ldr	r1, [pc, #156]	@ (8010098 <udp_connect+0xd4>)
 800fffa:	4826      	ldr	r0, [pc, #152]	@ (8010094 <udp_connect+0xd0>)
 800fffc:	f002 fe68 	bl	8012cd0 <iprintf>
 8010000:	f06f 030f 	mvn.w	r3, #15
 8010004:	e03e      	b.n	8010084 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	8a5b      	ldrh	r3, [r3, #18]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10f      	bne.n	801002e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801000e:	68f9      	ldr	r1, [r7, #12]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	8a5b      	ldrh	r3, [r3, #18]
 8010014:	461a      	mov	r2, r3
 8010016:	68f8      	ldr	r0, [r7, #12]
 8010018:	f7ff ff4c 	bl	800feb4 <udp_bind>
 801001c:	4603      	mov	r3, r0
 801001e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010020:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d002      	beq.n	801002e <udp_connect+0x6a>
      return err;
 8010028:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801002c:	e02a      	b.n	8010084 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d002      	beq.n	801003a <udp_connect+0x76>
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	e000      	b.n	801003c <udp_connect+0x78>
 801003a:	2300      	movs	r3, #0
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	88fa      	ldrh	r2, [r7, #6]
 8010044:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	7c1b      	ldrb	r3, [r3, #16]
 801004a:	f043 0304 	orr.w	r3, r3, #4
 801004e:	b2da      	uxtb	r2, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010054:	4b11      	ldr	r3, [pc, #68]	@ (801009c <udp_connect+0xd8>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	617b      	str	r3, [r7, #20]
 801005a:	e008      	b.n	801006e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801005c:	68fa      	ldr	r2, [r7, #12]
 801005e:	697b      	ldr	r3, [r7, #20]
 8010060:	429a      	cmp	r2, r3
 8010062:	d101      	bne.n	8010068 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010064:	2300      	movs	r3, #0
 8010066:	e00d      	b.n	8010084 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d1f3      	bne.n	801005c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010074:	4b09      	ldr	r3, [pc, #36]	@ (801009c <udp_connect+0xd8>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801007c:	4a07      	ldr	r2, [pc, #28]	@ (801009c <udp_connect+0xd8>)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3718      	adds	r7, #24
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	08015ea4 	.word	0x08015ea4
 8010090:	08016184 	.word	0x08016184
 8010094:	08015ef8 	.word	0x08015ef8
 8010098:	080161a0 	.word	0x080161a0
 801009c:	20007750 	.word	0x20007750

080100a0 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d107      	bne.n	80100be <udp_disconnect+0x1e>
 80100ae:	4b0d      	ldr	r3, [pc, #52]	@ (80100e4 <udp_disconnect+0x44>)
 80100b0:	f240 426a 	movw	r2, #1130	@ 0x46a
 80100b4:	490c      	ldr	r1, [pc, #48]	@ (80100e8 <udp_disconnect+0x48>)
 80100b6:	480d      	ldr	r0, [pc, #52]	@ (80100ec <udp_disconnect+0x4c>)
 80100b8:	f002 fe0a 	bl	8012cd0 <iprintf>
 80100bc:	e00f      	b.n	80100de <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2200      	movs	r2, #0
 80100c8:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7c1b      	ldrb	r3, [r3, #16]
 80100d4:	f023 0304 	bic.w	r3, r3, #4
 80100d8:	b2da      	uxtb	r2, r3
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	741a      	strb	r2, [r3, #16]
}
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	08015ea4 	.word	0x08015ea4
 80100e8:	080161bc 	.word	0x080161bc
 80100ec:	08015ef8 	.word	0x08015ef8

080100f0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b084      	sub	sp, #16
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	60f8      	str	r0, [r7, #12]
 80100f8:	60b9      	str	r1, [r7, #8]
 80100fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d107      	bne.n	8010112 <udp_recv+0x22>
 8010102:	4b08      	ldr	r3, [pc, #32]	@ (8010124 <udp_recv+0x34>)
 8010104:	f240 428a 	movw	r2, #1162	@ 0x48a
 8010108:	4907      	ldr	r1, [pc, #28]	@ (8010128 <udp_recv+0x38>)
 801010a:	4808      	ldr	r0, [pc, #32]	@ (801012c <udp_recv+0x3c>)
 801010c:	f002 fde0 	bl	8012cd0 <iprintf>
 8010110:	e005      	b.n	801011e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	61da      	str	r2, [r3, #28]
}
 801011e:	3710      	adds	r7, #16
 8010120:	46bd      	mov	sp, r7
 8010122:	bd80      	pop	{r7, pc}
 8010124:	08015ea4 	.word	0x08015ea4
 8010128:	080161d8 	.word	0x080161d8
 801012c:	08015ef8 	.word	0x08015ef8

08010130 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b082      	sub	sp, #8
 8010134:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010136:	2000      	movs	r0, #0
 8010138:	f7f8 f836 	bl	80081a8 <memp_malloc>
 801013c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d007      	beq.n	8010154 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010144:	2220      	movs	r2, #32
 8010146:	2100      	movs	r1, #0
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f002 fe26 	bl	8012d9a <memset>
    pcb->ttl = UDP_TTL;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	22ff      	movs	r2, #255	@ 0xff
 8010152:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010154:	687b      	ldr	r3, [r7, #4]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
	...

08010160 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010160:	b480      	push	{r7}
 8010162:	b085      	sub	sp, #20
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d01e      	beq.n	80101ae <udp_netif_ip_addr_changed+0x4e>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d01a      	beq.n	80101ae <udp_netif_ip_addr_changed+0x4e>
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d017      	beq.n	80101ae <udp_netif_ip_addr_changed+0x4e>
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d013      	beq.n	80101ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010186:	4b0c      	ldr	r3, [pc, #48]	@ (80101b8 <udp_netif_ip_addr_changed+0x58>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	e00c      	b.n	80101a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681a      	ldr	r2, [r3, #0]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	429a      	cmp	r2, r3
 8010198:	d103      	bne.n	80101a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	60fb      	str	r3, [r7, #12]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1ef      	bne.n	801018e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80101ae:	bf00      	nop
 80101b0:	3714      	adds	r7, #20
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bc80      	pop	{r7}
 80101b6:	4770      	bx	lr
 80101b8:	20007750 	.word	0x20007750

080101bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80101c4:	4915      	ldr	r1, [pc, #84]	@ (801021c <etharp_free_entry+0x60>)
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	4613      	mov	r3, r2
 80101ca:	005b      	lsls	r3, r3, #1
 80101cc:	4413      	add	r3, r2
 80101ce:	00db      	lsls	r3, r3, #3
 80101d0:	440b      	add	r3, r1
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d013      	beq.n	8010200 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80101d8:	4910      	ldr	r1, [pc, #64]	@ (801021c <etharp_free_entry+0x60>)
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	4613      	mov	r3, r2
 80101de:	005b      	lsls	r3, r3, #1
 80101e0:	4413      	add	r3, r2
 80101e2:	00db      	lsls	r3, r3, #3
 80101e4:	440b      	add	r3, r1
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7f8 fe67 	bl	8008ebc <pbuf_free>
    arp_table[i].q = NULL;
 80101ee:	490b      	ldr	r1, [pc, #44]	@ (801021c <etharp_free_entry+0x60>)
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	4613      	mov	r3, r2
 80101f4:	005b      	lsls	r3, r3, #1
 80101f6:	4413      	add	r3, r2
 80101f8:	00db      	lsls	r3, r3, #3
 80101fa:	440b      	add	r3, r1
 80101fc:	2200      	movs	r2, #0
 80101fe:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010200:	4906      	ldr	r1, [pc, #24]	@ (801021c <etharp_free_entry+0x60>)
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	4613      	mov	r3, r2
 8010206:	005b      	lsls	r3, r3, #1
 8010208:	4413      	add	r3, r2
 801020a:	00db      	lsls	r3, r3, #3
 801020c:	440b      	add	r3, r1
 801020e:	3314      	adds	r3, #20
 8010210:	2200      	movs	r2, #0
 8010212:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010214:	bf00      	nop
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20007754 	.word	0x20007754

08010220 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010226:	2300      	movs	r3, #0
 8010228:	607b      	str	r3, [r7, #4]
 801022a:	e096      	b.n	801035a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801022c:	494f      	ldr	r1, [pc, #316]	@ (801036c <etharp_tmr+0x14c>)
 801022e:	687a      	ldr	r2, [r7, #4]
 8010230:	4613      	mov	r3, r2
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	4413      	add	r3, r2
 8010236:	00db      	lsls	r3, r3, #3
 8010238:	440b      	add	r3, r1
 801023a:	3314      	adds	r3, #20
 801023c:	781b      	ldrb	r3, [r3, #0]
 801023e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010240:	78fb      	ldrb	r3, [r7, #3]
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 8086 	beq.w	8010354 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010248:	4948      	ldr	r1, [pc, #288]	@ (801036c <etharp_tmr+0x14c>)
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	4613      	mov	r3, r2
 801024e:	005b      	lsls	r3, r3, #1
 8010250:	4413      	add	r3, r2
 8010252:	00db      	lsls	r3, r3, #3
 8010254:	440b      	add	r3, r1
 8010256:	3312      	adds	r3, #18
 8010258:	881b      	ldrh	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	b298      	uxth	r0, r3
 801025e:	4943      	ldr	r1, [pc, #268]	@ (801036c <etharp_tmr+0x14c>)
 8010260:	687a      	ldr	r2, [r7, #4]
 8010262:	4613      	mov	r3, r2
 8010264:	005b      	lsls	r3, r3, #1
 8010266:	4413      	add	r3, r2
 8010268:	00db      	lsls	r3, r3, #3
 801026a:	440b      	add	r3, r1
 801026c:	3312      	adds	r3, #18
 801026e:	4602      	mov	r2, r0
 8010270:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010272:	493e      	ldr	r1, [pc, #248]	@ (801036c <etharp_tmr+0x14c>)
 8010274:	687a      	ldr	r2, [r7, #4]
 8010276:	4613      	mov	r3, r2
 8010278:	005b      	lsls	r3, r3, #1
 801027a:	4413      	add	r3, r2
 801027c:	00db      	lsls	r3, r3, #3
 801027e:	440b      	add	r3, r1
 8010280:	3312      	adds	r3, #18
 8010282:	881b      	ldrh	r3, [r3, #0]
 8010284:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010288:	d215      	bcs.n	80102b6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801028a:	4938      	ldr	r1, [pc, #224]	@ (801036c <etharp_tmr+0x14c>)
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	4613      	mov	r3, r2
 8010290:	005b      	lsls	r3, r3, #1
 8010292:	4413      	add	r3, r2
 8010294:	00db      	lsls	r3, r3, #3
 8010296:	440b      	add	r3, r1
 8010298:	3314      	adds	r3, #20
 801029a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801029c:	2b01      	cmp	r3, #1
 801029e:	d10e      	bne.n	80102be <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80102a0:	4932      	ldr	r1, [pc, #200]	@ (801036c <etharp_tmr+0x14c>)
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	4613      	mov	r3, r2
 80102a6:	005b      	lsls	r3, r3, #1
 80102a8:	4413      	add	r3, r2
 80102aa:	00db      	lsls	r3, r3, #3
 80102ac:	440b      	add	r3, r1
 80102ae:	3312      	adds	r3, #18
 80102b0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102b2:	2b04      	cmp	r3, #4
 80102b4:	d903      	bls.n	80102be <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7ff ff80 	bl	80101bc <etharp_free_entry>
 80102bc:	e04a      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80102be:	492b      	ldr	r1, [pc, #172]	@ (801036c <etharp_tmr+0x14c>)
 80102c0:	687a      	ldr	r2, [r7, #4]
 80102c2:	4613      	mov	r3, r2
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	4413      	add	r3, r2
 80102c8:	00db      	lsls	r3, r3, #3
 80102ca:	440b      	add	r3, r1
 80102cc:	3314      	adds	r3, #20
 80102ce:	781b      	ldrb	r3, [r3, #0]
 80102d0:	2b03      	cmp	r3, #3
 80102d2:	d10a      	bne.n	80102ea <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80102d4:	4925      	ldr	r1, [pc, #148]	@ (801036c <etharp_tmr+0x14c>)
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	4613      	mov	r3, r2
 80102da:	005b      	lsls	r3, r3, #1
 80102dc:	4413      	add	r3, r2
 80102de:	00db      	lsls	r3, r3, #3
 80102e0:	440b      	add	r3, r1
 80102e2:	3314      	adds	r3, #20
 80102e4:	2204      	movs	r2, #4
 80102e6:	701a      	strb	r2, [r3, #0]
 80102e8:	e034      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80102ea:	4920      	ldr	r1, [pc, #128]	@ (801036c <etharp_tmr+0x14c>)
 80102ec:	687a      	ldr	r2, [r7, #4]
 80102ee:	4613      	mov	r3, r2
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	4413      	add	r3, r2
 80102f4:	00db      	lsls	r3, r3, #3
 80102f6:	440b      	add	r3, r1
 80102f8:	3314      	adds	r3, #20
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	2b04      	cmp	r3, #4
 80102fe:	d10a      	bne.n	8010316 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010300:	491a      	ldr	r1, [pc, #104]	@ (801036c <etharp_tmr+0x14c>)
 8010302:	687a      	ldr	r2, [r7, #4]
 8010304:	4613      	mov	r3, r2
 8010306:	005b      	lsls	r3, r3, #1
 8010308:	4413      	add	r3, r2
 801030a:	00db      	lsls	r3, r3, #3
 801030c:	440b      	add	r3, r1
 801030e:	3314      	adds	r3, #20
 8010310:	2202      	movs	r2, #2
 8010312:	701a      	strb	r2, [r3, #0]
 8010314:	e01e      	b.n	8010354 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010316:	4915      	ldr	r1, [pc, #84]	@ (801036c <etharp_tmr+0x14c>)
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	4613      	mov	r3, r2
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	4413      	add	r3, r2
 8010320:	00db      	lsls	r3, r3, #3
 8010322:	440b      	add	r3, r1
 8010324:	3314      	adds	r3, #20
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	2b01      	cmp	r3, #1
 801032a:	d113      	bne.n	8010354 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801032c:	490f      	ldr	r1, [pc, #60]	@ (801036c <etharp_tmr+0x14c>)
 801032e:	687a      	ldr	r2, [r7, #4]
 8010330:	4613      	mov	r3, r2
 8010332:	005b      	lsls	r3, r3, #1
 8010334:	4413      	add	r3, r2
 8010336:	00db      	lsls	r3, r3, #3
 8010338:	440b      	add	r3, r1
 801033a:	3308      	adds	r3, #8
 801033c:	6818      	ldr	r0, [r3, #0]
 801033e:	687a      	ldr	r2, [r7, #4]
 8010340:	4613      	mov	r3, r2
 8010342:	005b      	lsls	r3, r3, #1
 8010344:	4413      	add	r3, r2
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	4a08      	ldr	r2, [pc, #32]	@ (801036c <etharp_tmr+0x14c>)
 801034a:	4413      	add	r3, r2
 801034c:	3304      	adds	r3, #4
 801034e:	4619      	mov	r1, r3
 8010350:	f000 fb64 	bl	8010a1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	3301      	adds	r3, #1
 8010358:	607b      	str	r3, [r7, #4]
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2b09      	cmp	r3, #9
 801035e:	f77f af65 	ble.w	801022c <etharp_tmr+0xc>
      }
    }
  }
}
 8010362:	bf00      	nop
 8010364:	bf00      	nop
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	20007754 	.word	0x20007754

08010370 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b08a      	sub	sp, #40	@ 0x28
 8010374:	af00      	add	r7, sp, #0
 8010376:	60f8      	str	r0, [r7, #12]
 8010378:	460b      	mov	r3, r1
 801037a:	607a      	str	r2, [r7, #4]
 801037c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801037e:	230a      	movs	r3, #10
 8010380:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8010382:	230a      	movs	r3, #10
 8010384:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010386:	230a      	movs	r3, #10
 8010388:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801038e:	230a      	movs	r3, #10
 8010390:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	83bb      	strh	r3, [r7, #28]
 8010396:	2300      	movs	r3, #0
 8010398:	837b      	strh	r3, [r7, #26]
 801039a:	2300      	movs	r3, #0
 801039c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801039e:	2300      	movs	r3, #0
 80103a0:	843b      	strh	r3, [r7, #32]
 80103a2:	e0ae      	b.n	8010502 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80103a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103a8:	49a6      	ldr	r1, [pc, #664]	@ (8010644 <etharp_find_entry+0x2d4>)
 80103aa:	4613      	mov	r3, r2
 80103ac:	005b      	lsls	r3, r3, #1
 80103ae:	4413      	add	r3, r2
 80103b0:	00db      	lsls	r3, r3, #3
 80103b2:	440b      	add	r3, r1
 80103b4:	3314      	adds	r3, #20
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80103ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80103be:	2b0a      	cmp	r3, #10
 80103c0:	d105      	bne.n	80103ce <etharp_find_entry+0x5e>
 80103c2:	7dfb      	ldrb	r3, [r7, #23]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d102      	bne.n	80103ce <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80103c8:	8c3b      	ldrh	r3, [r7, #32]
 80103ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80103cc:	e095      	b.n	80104fa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 8092 	beq.w	80104fa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80103d6:	7dfb      	ldrb	r3, [r7, #23]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d009      	beq.n	80103f0 <etharp_find_entry+0x80>
 80103dc:	7dfb      	ldrb	r3, [r7, #23]
 80103de:	2b01      	cmp	r3, #1
 80103e0:	d806      	bhi.n	80103f0 <etharp_find_entry+0x80>
 80103e2:	4b99      	ldr	r3, [pc, #612]	@ (8010648 <etharp_find_entry+0x2d8>)
 80103e4:	f240 1223 	movw	r2, #291	@ 0x123
 80103e8:	4998      	ldr	r1, [pc, #608]	@ (801064c <etharp_find_entry+0x2dc>)
 80103ea:	4899      	ldr	r0, [pc, #612]	@ (8010650 <etharp_find_entry+0x2e0>)
 80103ec:	f002 fc70 	bl	8012cd0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d020      	beq.n	8010438 <etharp_find_entry+0xc8>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	6819      	ldr	r1, [r3, #0]
 80103fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103fe:	4891      	ldr	r0, [pc, #580]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010400:	4613      	mov	r3, r2
 8010402:	005b      	lsls	r3, r3, #1
 8010404:	4413      	add	r3, r2
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	4403      	add	r3, r0
 801040a:	3304      	adds	r3, #4
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	4299      	cmp	r1, r3
 8010410:	d112      	bne.n	8010438 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00c      	beq.n	8010432 <etharp_find_entry+0xc2>
 8010418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801041c:	4989      	ldr	r1, [pc, #548]	@ (8010644 <etharp_find_entry+0x2d4>)
 801041e:	4613      	mov	r3, r2
 8010420:	005b      	lsls	r3, r3, #1
 8010422:	4413      	add	r3, r2
 8010424:	00db      	lsls	r3, r3, #3
 8010426:	440b      	add	r3, r1
 8010428:	3308      	adds	r3, #8
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	687a      	ldr	r2, [r7, #4]
 801042e:	429a      	cmp	r2, r3
 8010430:	d102      	bne.n	8010438 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8010432:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010436:	e100      	b.n	801063a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010438:	7dfb      	ldrb	r3, [r7, #23]
 801043a:	2b01      	cmp	r3, #1
 801043c:	d140      	bne.n	80104c0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801043e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010442:	4980      	ldr	r1, [pc, #512]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010444:	4613      	mov	r3, r2
 8010446:	005b      	lsls	r3, r3, #1
 8010448:	4413      	add	r3, r2
 801044a:	00db      	lsls	r3, r3, #3
 801044c:	440b      	add	r3, r1
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d01a      	beq.n	801048a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010458:	497a      	ldr	r1, [pc, #488]	@ (8010644 <etharp_find_entry+0x2d4>)
 801045a:	4613      	mov	r3, r2
 801045c:	005b      	lsls	r3, r3, #1
 801045e:	4413      	add	r3, r2
 8010460:	00db      	lsls	r3, r3, #3
 8010462:	440b      	add	r3, r1
 8010464:	3312      	adds	r3, #18
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	8bba      	ldrh	r2, [r7, #28]
 801046a:	429a      	cmp	r2, r3
 801046c:	d845      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_queue = i;
 801046e:	8c3b      	ldrh	r3, [r7, #32]
 8010470:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8010472:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010476:	4973      	ldr	r1, [pc, #460]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010478:	4613      	mov	r3, r2
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	4413      	add	r3, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	440b      	add	r3, r1
 8010482:	3312      	adds	r3, #18
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	83bb      	strh	r3, [r7, #28]
 8010488:	e037      	b.n	80104fa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801048a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801048e:	496d      	ldr	r1, [pc, #436]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010490:	4613      	mov	r3, r2
 8010492:	005b      	lsls	r3, r3, #1
 8010494:	4413      	add	r3, r2
 8010496:	00db      	lsls	r3, r3, #3
 8010498:	440b      	add	r3, r1
 801049a:	3312      	adds	r3, #18
 801049c:	881b      	ldrh	r3, [r3, #0]
 801049e:	8b7a      	ldrh	r2, [r7, #26]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d82a      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_pending = i;
 80104a4:	8c3b      	ldrh	r3, [r7, #32]
 80104a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80104a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ac:	4965      	ldr	r1, [pc, #404]	@ (8010644 <etharp_find_entry+0x2d4>)
 80104ae:	4613      	mov	r3, r2
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4413      	add	r3, r2
 80104b4:	00db      	lsls	r3, r3, #3
 80104b6:	440b      	add	r3, r1
 80104b8:	3312      	adds	r3, #18
 80104ba:	881b      	ldrh	r3, [r3, #0]
 80104bc:	837b      	strh	r3, [r7, #26]
 80104be:	e01c      	b.n	80104fa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
 80104c2:	2b01      	cmp	r3, #1
 80104c4:	d919      	bls.n	80104fa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80104c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104ca:	495e      	ldr	r1, [pc, #376]	@ (8010644 <etharp_find_entry+0x2d4>)
 80104cc:	4613      	mov	r3, r2
 80104ce:	005b      	lsls	r3, r3, #1
 80104d0:	4413      	add	r3, r2
 80104d2:	00db      	lsls	r3, r3, #3
 80104d4:	440b      	add	r3, r1
 80104d6:	3312      	adds	r3, #18
 80104d8:	881b      	ldrh	r3, [r3, #0]
 80104da:	8b3a      	ldrh	r2, [r7, #24]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d80c      	bhi.n	80104fa <etharp_find_entry+0x18a>
            old_stable = i;
 80104e0:	8c3b      	ldrh	r3, [r7, #32]
 80104e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80104e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104e8:	4956      	ldr	r1, [pc, #344]	@ (8010644 <etharp_find_entry+0x2d4>)
 80104ea:	4613      	mov	r3, r2
 80104ec:	005b      	lsls	r3, r3, #1
 80104ee:	4413      	add	r3, r2
 80104f0:	00db      	lsls	r3, r3, #3
 80104f2:	440b      	add	r3, r1
 80104f4:	3312      	adds	r3, #18
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104fa:	8c3b      	ldrh	r3, [r7, #32]
 80104fc:	3301      	adds	r3, #1
 80104fe:	b29b      	uxth	r3, r3
 8010500:	843b      	strh	r3, [r7, #32]
 8010502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010506:	2b09      	cmp	r3, #9
 8010508:	f77f af4c 	ble.w	80103a4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801050c:	7afb      	ldrb	r3, [r7, #11]
 801050e:	f003 0302 	and.w	r3, r3, #2
 8010512:	2b00      	cmp	r3, #0
 8010514:	d108      	bne.n	8010528 <etharp_find_entry+0x1b8>
 8010516:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801051a:	2b0a      	cmp	r3, #10
 801051c:	d107      	bne.n	801052e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801051e:	7afb      	ldrb	r3, [r7, #11]
 8010520:	f003 0301 	and.w	r3, r3, #1
 8010524:	2b00      	cmp	r3, #0
 8010526:	d102      	bne.n	801052e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801052c:	e085      	b.n	801063a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801052e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010532:	2b09      	cmp	r3, #9
 8010534:	dc02      	bgt.n	801053c <etharp_find_entry+0x1cc>
    i = empty;
 8010536:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010538:	843b      	strh	r3, [r7, #32]
 801053a:	e039      	b.n	80105b0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801053c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8010540:	2b09      	cmp	r3, #9
 8010542:	dc14      	bgt.n	801056e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010544:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010546:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010548:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801054c:	493d      	ldr	r1, [pc, #244]	@ (8010644 <etharp_find_entry+0x2d4>)
 801054e:	4613      	mov	r3, r2
 8010550:	005b      	lsls	r3, r3, #1
 8010552:	4413      	add	r3, r2
 8010554:	00db      	lsls	r3, r3, #3
 8010556:	440b      	add	r3, r1
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d018      	beq.n	8010590 <etharp_find_entry+0x220>
 801055e:	4b3a      	ldr	r3, [pc, #232]	@ (8010648 <etharp_find_entry+0x2d8>)
 8010560:	f240 126d 	movw	r2, #365	@ 0x16d
 8010564:	493b      	ldr	r1, [pc, #236]	@ (8010654 <etharp_find_entry+0x2e4>)
 8010566:	483a      	ldr	r0, [pc, #232]	@ (8010650 <etharp_find_entry+0x2e0>)
 8010568:	f002 fbb2 	bl	8012cd0 <iprintf>
 801056c:	e010      	b.n	8010590 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801056e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8010572:	2b09      	cmp	r3, #9
 8010574:	dc02      	bgt.n	801057c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010578:	843b      	strh	r3, [r7, #32]
 801057a:	e009      	b.n	8010590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801057c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8010580:	2b09      	cmp	r3, #9
 8010582:	dc02      	bgt.n	801058a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010584:	8bfb      	ldrh	r3, [r7, #30]
 8010586:	843b      	strh	r3, [r7, #32]
 8010588:	e002      	b.n	8010590 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801058a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801058e:	e054      	b.n	801063a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010590:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010594:	2b09      	cmp	r3, #9
 8010596:	dd06      	ble.n	80105a6 <etharp_find_entry+0x236>
 8010598:	4b2b      	ldr	r3, [pc, #172]	@ (8010648 <etharp_find_entry+0x2d8>)
 801059a:	f240 127f 	movw	r2, #383	@ 0x17f
 801059e:	492e      	ldr	r1, [pc, #184]	@ (8010658 <etharp_find_entry+0x2e8>)
 80105a0:	482b      	ldr	r0, [pc, #172]	@ (8010650 <etharp_find_entry+0x2e0>)
 80105a2:	f002 fb95 	bl	8012cd0 <iprintf>
    etharp_free_entry(i);
 80105a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff fe06 	bl	80101bc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105b4:	2b09      	cmp	r3, #9
 80105b6:	dd06      	ble.n	80105c6 <etharp_find_entry+0x256>
 80105b8:	4b23      	ldr	r3, [pc, #140]	@ (8010648 <etharp_find_entry+0x2d8>)
 80105ba:	f240 1283 	movw	r2, #387	@ 0x183
 80105be:	4926      	ldr	r1, [pc, #152]	@ (8010658 <etharp_find_entry+0x2e8>)
 80105c0:	4823      	ldr	r0, [pc, #140]	@ (8010650 <etharp_find_entry+0x2e0>)
 80105c2:	f002 fb85 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80105c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105ca:	491e      	ldr	r1, [pc, #120]	@ (8010644 <etharp_find_entry+0x2d4>)
 80105cc:	4613      	mov	r3, r2
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	4413      	add	r3, r2
 80105d2:	00db      	lsls	r3, r3, #3
 80105d4:	440b      	add	r3, r1
 80105d6:	3314      	adds	r3, #20
 80105d8:	781b      	ldrb	r3, [r3, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d006      	beq.n	80105ec <etharp_find_entry+0x27c>
 80105de:	4b1a      	ldr	r3, [pc, #104]	@ (8010648 <etharp_find_entry+0x2d8>)
 80105e0:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80105e4:	491d      	ldr	r1, [pc, #116]	@ (801065c <etharp_find_entry+0x2ec>)
 80105e6:	481a      	ldr	r0, [pc, #104]	@ (8010650 <etharp_find_entry+0x2e0>)
 80105e8:	f002 fb72 	bl	8012cd0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00b      	beq.n	801060a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80105f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	6819      	ldr	r1, [r3, #0]
 80105fa:	4812      	ldr	r0, [pc, #72]	@ (8010644 <etharp_find_entry+0x2d4>)
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	00db      	lsls	r3, r3, #3
 8010604:	4403      	add	r3, r0
 8010606:	3304      	adds	r3, #4
 8010608:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801060a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801060e:	490d      	ldr	r1, [pc, #52]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010610:	4613      	mov	r3, r2
 8010612:	005b      	lsls	r3, r3, #1
 8010614:	4413      	add	r3, r2
 8010616:	00db      	lsls	r3, r3, #3
 8010618:	440b      	add	r3, r1
 801061a:	3312      	adds	r3, #18
 801061c:	2200      	movs	r2, #0
 801061e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8010620:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010624:	4907      	ldr	r1, [pc, #28]	@ (8010644 <etharp_find_entry+0x2d4>)
 8010626:	4613      	mov	r3, r2
 8010628:	005b      	lsls	r3, r3, #1
 801062a:	4413      	add	r3, r2
 801062c:	00db      	lsls	r3, r3, #3
 801062e:	440b      	add	r3, r1
 8010630:	3308      	adds	r3, #8
 8010632:	687a      	ldr	r2, [r7, #4]
 8010634:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010636:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801063a:	4618      	mov	r0, r3
 801063c:	3728      	adds	r7, #40	@ 0x28
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	20007754 	.word	0x20007754
 8010648:	08016208 	.word	0x08016208
 801064c:	08016240 	.word	0x08016240
 8010650:	08016280 	.word	0x08016280
 8010654:	080162a8 	.word	0x080162a8
 8010658:	080162c0 	.word	0x080162c0
 801065c:	080162d4 	.word	0x080162d4

08010660 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af02      	add	r7, sp, #8
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
 801066c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010674:	2b06      	cmp	r3, #6
 8010676:	d006      	beq.n	8010686 <etharp_update_arp_entry+0x26>
 8010678:	4b48      	ldr	r3, [pc, #288]	@ (801079c <etharp_update_arp_entry+0x13c>)
 801067a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801067e:	4948      	ldr	r1, [pc, #288]	@ (80107a0 <etharp_update_arp_entry+0x140>)
 8010680:	4848      	ldr	r0, [pc, #288]	@ (80107a4 <etharp_update_arp_entry+0x144>)
 8010682:	f002 fb25 	bl	8012cd0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010686:	68bb      	ldr	r3, [r7, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d012      	beq.n	80106b2 <etharp_update_arp_entry+0x52>
 801068c:	68bb      	ldr	r3, [r7, #8]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00e      	beq.n	80106b2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	68f9      	ldr	r1, [r7, #12]
 801069a:	4618      	mov	r0, r3
 801069c:	f000 fe86 	bl	80113ac <ip4_addr_isbroadcast_u32>
 80106a0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d105      	bne.n	80106b2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80106a6:	68bb      	ldr	r3, [r7, #8]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80106ae:	2be0      	cmp	r3, #224	@ 0xe0
 80106b0:	d102      	bne.n	80106b8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80106b2:	f06f 030f 	mvn.w	r3, #15
 80106b6:	e06c      	b.n	8010792 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80106b8:	78fb      	ldrb	r3, [r7, #3]
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	4619      	mov	r1, r3
 80106be:	68b8      	ldr	r0, [r7, #8]
 80106c0:	f7ff fe56 	bl	8010370 <etharp_find_entry>
 80106c4:	4603      	mov	r3, r0
 80106c6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80106c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da02      	bge.n	80106d6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80106d0:	8afb      	ldrh	r3, [r7, #22]
 80106d2:	b25b      	sxtb	r3, r3
 80106d4:	e05d      	b.n	8010792 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80106d6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106da:	4933      	ldr	r1, [pc, #204]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 80106dc:	4613      	mov	r3, r2
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	4413      	add	r3, r2
 80106e2:	00db      	lsls	r3, r3, #3
 80106e4:	440b      	add	r3, r1
 80106e6:	3314      	adds	r3, #20
 80106e8:	2202      	movs	r2, #2
 80106ea:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80106ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106f0:	492d      	ldr	r1, [pc, #180]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 80106f2:	4613      	mov	r3, r2
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	4413      	add	r3, r2
 80106f8:	00db      	lsls	r3, r3, #3
 80106fa:	440b      	add	r3, r1
 80106fc:	3308      	adds	r3, #8
 80106fe:	68fa      	ldr	r2, [r7, #12]
 8010700:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8010702:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010706:	4613      	mov	r3, r2
 8010708:	005b      	lsls	r3, r3, #1
 801070a:	4413      	add	r3, r2
 801070c:	00db      	lsls	r3, r3, #3
 801070e:	3308      	adds	r3, #8
 8010710:	4a25      	ldr	r2, [pc, #148]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 8010712:	4413      	add	r3, r2
 8010714:	3304      	adds	r3, #4
 8010716:	2206      	movs	r2, #6
 8010718:	6879      	ldr	r1, [r7, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	f002 fc27 	bl	8012f6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010720:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010724:	4920      	ldr	r1, [pc, #128]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 8010726:	4613      	mov	r3, r2
 8010728:	005b      	lsls	r3, r3, #1
 801072a:	4413      	add	r3, r2
 801072c:	00db      	lsls	r3, r3, #3
 801072e:	440b      	add	r3, r1
 8010730:	3312      	adds	r3, #18
 8010732:	2200      	movs	r2, #0
 8010734:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010736:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801073a:	491b      	ldr	r1, [pc, #108]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 801073c:	4613      	mov	r3, r2
 801073e:	005b      	lsls	r3, r3, #1
 8010740:	4413      	add	r3, r2
 8010742:	00db      	lsls	r3, r3, #3
 8010744:	440b      	add	r3, r1
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d021      	beq.n	8010790 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801074c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010750:	4915      	ldr	r1, [pc, #84]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 8010752:	4613      	mov	r3, r2
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	4413      	add	r3, r2
 8010758:	00db      	lsls	r3, r3, #3
 801075a:	440b      	add	r3, r1
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010760:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010764:	4910      	ldr	r1, [pc, #64]	@ (80107a8 <etharp_update_arp_entry+0x148>)
 8010766:	4613      	mov	r3, r2
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	00db      	lsls	r3, r3, #3
 801076e:	440b      	add	r3, r1
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801077a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6939      	ldr	r1, [r7, #16]
 8010784:	68f8      	ldr	r0, [r7, #12]
 8010786:	f001 fd2d 	bl	80121e4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801078a:	6938      	ldr	r0, [r7, #16]
 801078c:	f7f8 fb96 	bl	8008ebc <pbuf_free>
  }
  return ERR_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	08016208 	.word	0x08016208
 80107a0:	08016300 	.word	0x08016300
 80107a4:	08016280 	.word	0x08016280
 80107a8:	20007754 	.word	0x20007754

080107ac <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80107ac:	b5b0      	push	{r4, r5, r7, lr}
 80107ae:	b08a      	sub	sp, #40	@ 0x28
 80107b0:	af04      	add	r7, sp, #16
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d107      	bne.n	80107cc <etharp_input+0x20>
 80107bc:	4b3d      	ldr	r3, [pc, #244]	@ (80108b4 <etharp_input+0x108>)
 80107be:	f240 228a 	movw	r2, #650	@ 0x28a
 80107c2:	493d      	ldr	r1, [pc, #244]	@ (80108b8 <etharp_input+0x10c>)
 80107c4:	483d      	ldr	r0, [pc, #244]	@ (80108bc <etharp_input+0x110>)
 80107c6:	f002 fa83 	bl	8012cd0 <iprintf>
 80107ca:	e06f      	b.n	80108ac <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	685b      	ldr	r3, [r3, #4]
 80107d0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80107d2:	693b      	ldr	r3, [r7, #16]
 80107d4:	881b      	ldrh	r3, [r3, #0]
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107dc:	d10c      	bne.n	80107f8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80107de:	693b      	ldr	r3, [r7, #16]
 80107e0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80107e2:	2b06      	cmp	r3, #6
 80107e4:	d108      	bne.n	80107f8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80107ea:	2b04      	cmp	r3, #4
 80107ec:	d104      	bne.n	80107f8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	885b      	ldrh	r3, [r3, #2]
 80107f2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80107f4:	2b08      	cmp	r3, #8
 80107f6:	d003      	beq.n	8010800 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7f8 fb5f 	bl	8008ebc <pbuf_free>
    return;
 80107fe:	e055      	b.n	80108ac <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	330e      	adds	r3, #14
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	3318      	adds	r3, #24
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	3304      	adds	r3, #4
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d102      	bne.n	8010820 <etharp_input+0x74>
    for_us = 0;
 801081a:	2300      	movs	r3, #0
 801081c:	75fb      	strb	r3, [r7, #23]
 801081e:	e009      	b.n	8010834 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010820:	68ba      	ldr	r2, [r7, #8]
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	3304      	adds	r3, #4
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	429a      	cmp	r2, r3
 801082a:	bf0c      	ite	eq
 801082c:	2301      	moveq	r3, #1
 801082e:	2300      	movne	r3, #0
 8010830:	b2db      	uxtb	r3, r3
 8010832:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f103 0208 	add.w	r2, r3, #8
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <etharp_input+0x98>
 8010840:	2301      	movs	r3, #1
 8010842:	e000      	b.n	8010846 <etharp_input+0x9a>
 8010844:	2302      	movs	r3, #2
 8010846:	f107 010c 	add.w	r1, r7, #12
 801084a:	6838      	ldr	r0, [r7, #0]
 801084c:	f7ff ff08 	bl	8010660 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	88db      	ldrh	r3, [r3, #6]
 8010854:	b29b      	uxth	r3, r3
 8010856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801085a:	d003      	beq.n	8010864 <etharp_input+0xb8>
 801085c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010860:	d01e      	beq.n	80108a0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8010862:	e020      	b.n	80108a6 <etharp_input+0xfa>
      if (for_us) {
 8010864:	7dfb      	ldrb	r3, [r7, #23]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d01c      	beq.n	80108a4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8010880:	693a      	ldr	r2, [r7, #16]
 8010882:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010884:	2102      	movs	r1, #2
 8010886:	9103      	str	r1, [sp, #12]
 8010888:	f107 010c 	add.w	r1, r7, #12
 801088c:	9102      	str	r1, [sp, #8]
 801088e:	9201      	str	r2, [sp, #4]
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	462b      	mov	r3, r5
 8010894:	4622      	mov	r2, r4
 8010896:	4601      	mov	r1, r0
 8010898:	6838      	ldr	r0, [r7, #0]
 801089a:	f000 f811 	bl	80108c0 <etharp_raw>
      break;
 801089e:	e001      	b.n	80108a4 <etharp_input+0xf8>
      break;
 80108a0:	bf00      	nop
 80108a2:	e000      	b.n	80108a6 <etharp_input+0xfa>
      break;
 80108a4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7f8 fb08 	bl	8008ebc <pbuf_free>
}
 80108ac:	3718      	adds	r7, #24
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bdb0      	pop	{r4, r5, r7, pc}
 80108b2:	bf00      	nop
 80108b4:	08016208 	.word	0x08016208
 80108b8:	08016358 	.word	0x08016358
 80108bc:	08016280 	.word	0x08016280

080108c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b08a      	sub	sp, #40	@ 0x28
 80108c4:	af02      	add	r7, sp, #8
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	607a      	str	r2, [r7, #4]
 80108cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80108ce:	2300      	movs	r3, #0
 80108d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d106      	bne.n	80108e6 <etharp_raw+0x26>
 80108d8:	4b3a      	ldr	r3, [pc, #232]	@ (80109c4 <etharp_raw+0x104>)
 80108da:	f240 4257 	movw	r2, #1111	@ 0x457
 80108de:	493a      	ldr	r1, [pc, #232]	@ (80109c8 <etharp_raw+0x108>)
 80108e0:	483a      	ldr	r0, [pc, #232]	@ (80109cc <etharp_raw+0x10c>)
 80108e2:	f002 f9f5 	bl	8012cd0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80108e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80108ea:	211c      	movs	r1, #28
 80108ec:	200e      	movs	r0, #14
 80108ee:	f7f8 f801 	bl	80088f4 <pbuf_alloc>
 80108f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d102      	bne.n	8010900 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80108fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108fe:	e05d      	b.n	80109bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8010900:	69bb      	ldr	r3, [r7, #24]
 8010902:	895b      	ldrh	r3, [r3, #10]
 8010904:	2b1b      	cmp	r3, #27
 8010906:	d806      	bhi.n	8010916 <etharp_raw+0x56>
 8010908:	4b2e      	ldr	r3, [pc, #184]	@ (80109c4 <etharp_raw+0x104>)
 801090a:	f240 4262 	movw	r2, #1122	@ 0x462
 801090e:	4930      	ldr	r1, [pc, #192]	@ (80109d0 <etharp_raw+0x110>)
 8010910:	482e      	ldr	r0, [pc, #184]	@ (80109cc <etharp_raw+0x10c>)
 8010912:	f002 f9dd 	bl	8012cd0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010916:	69bb      	ldr	r3, [r7, #24]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801091c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801091e:	4618      	mov	r0, r3
 8010920:	f7f6 fdea 	bl	80074f8 <lwip_htons>
 8010924:	4603      	mov	r3, r0
 8010926:	461a      	mov	r2, r3
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010932:	2b06      	cmp	r3, #6
 8010934:	d006      	beq.n	8010944 <etharp_raw+0x84>
 8010936:	4b23      	ldr	r3, [pc, #140]	@ (80109c4 <etharp_raw+0x104>)
 8010938:	f240 4269 	movw	r2, #1129	@ 0x469
 801093c:	4925      	ldr	r1, [pc, #148]	@ (80109d4 <etharp_raw+0x114>)
 801093e:	4823      	ldr	r0, [pc, #140]	@ (80109cc <etharp_raw+0x10c>)
 8010940:	f002 f9c6 	bl	8012cd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	3308      	adds	r3, #8
 8010948:	2206      	movs	r2, #6
 801094a:	6839      	ldr	r1, [r7, #0]
 801094c:	4618      	mov	r0, r3
 801094e:	f002 fb0e 	bl	8012f6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	3312      	adds	r3, #18
 8010956:	2206      	movs	r2, #6
 8010958:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801095a:	4618      	mov	r0, r3
 801095c:	f002 fb07 	bl	8012f6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	330e      	adds	r3, #14
 8010964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010966:	6812      	ldr	r2, [r2, #0]
 8010968:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	3318      	adds	r3, #24
 801096e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010970:	6812      	ldr	r2, [r2, #0]
 8010972:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	2200      	movs	r2, #0
 8010978:	701a      	strb	r2, [r3, #0]
 801097a:	2200      	movs	r2, #0
 801097c:	f042 0201 	orr.w	r2, r2, #1
 8010980:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	2200      	movs	r2, #0
 8010986:	f042 0208 	orr.w	r2, r2, #8
 801098a:	709a      	strb	r2, [r3, #2]
 801098c:	2200      	movs	r2, #0
 801098e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	2206      	movs	r2, #6
 8010994:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2204      	movs	r2, #4
 801099a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801099c:	f640 0306 	movw	r3, #2054	@ 0x806
 80109a0:	9300      	str	r3, [sp, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	68ba      	ldr	r2, [r7, #8]
 80109a6:	69b9      	ldr	r1, [r7, #24]
 80109a8:	68f8      	ldr	r0, [r7, #12]
 80109aa:	f001 fc1b 	bl	80121e4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80109ae:	69b8      	ldr	r0, [r7, #24]
 80109b0:	f7f8 fa84 	bl	8008ebc <pbuf_free>
  p = NULL;
 80109b4:	2300      	movs	r3, #0
 80109b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80109b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3720      	adds	r7, #32
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}
 80109c4:	08016208 	.word	0x08016208
 80109c8:	08016358 	.word	0x08016358
 80109cc:	08016280 	.word	0x08016280
 80109d0:	08016408 	.word	0x08016408
 80109d4:	0801643c 	.word	0x0801643c

080109d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b088      	sub	sp, #32
 80109dc:	af04      	add	r7, sp, #16
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109f4:	2201      	movs	r2, #1
 80109f6:	9203      	str	r2, [sp, #12]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	9202      	str	r2, [sp, #8]
 80109fc:	4a06      	ldr	r2, [pc, #24]	@ (8010a18 <etharp_request_dst+0x40>)
 80109fe:	9201      	str	r2, [sp, #4]
 8010a00:	9300      	str	r3, [sp, #0]
 8010a02:	4603      	mov	r3, r0
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	68f8      	ldr	r0, [r7, #12]
 8010a08:	f7ff ff5a 	bl	80108c0 <etharp_raw>
 8010a0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	080178c4 	.word	0x080178c4

08010a1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
 8010a24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010a26:	4a05      	ldr	r2, [pc, #20]	@ (8010a3c <etharp_request+0x20>)
 8010a28:	6839      	ldr	r1, [r7, #0]
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f7ff ffd4 	bl	80109d8 <etharp_request_dst>
 8010a30:	4603      	mov	r3, r0
}
 8010a32:	4618      	mov	r0, r3
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	080178bc 	.word	0x080178bc

08010a40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b08e      	sub	sp, #56	@ 0x38
 8010a44:	af04      	add	r7, sp, #16
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8010c78 <icmp_input+0x238>)
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	f003 030f 	and.w	r3, r3, #15
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010a60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a62:	2b13      	cmp	r3, #19
 8010a64:	f240 80f1 	bls.w	8010c4a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	895b      	ldrh	r3, [r3, #10]
 8010a6c:	2b03      	cmp	r3, #3
 8010a6e:	f240 80ee 	bls.w	8010c4e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	781b      	ldrb	r3, [r3, #0]
 8010a78:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010a7c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	f000 80db 	beq.w	8010c3c <icmp_input+0x1fc>
 8010a86:	2b08      	cmp	r3, #8
 8010a88:	f040 80db 	bne.w	8010c42 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8010c7c <icmp_input+0x23c>)
 8010a8e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a90:	4b79      	ldr	r3, [pc, #484]	@ (8010c78 <icmp_input+0x238>)
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010a98:	2be0      	cmp	r3, #224	@ 0xe0
 8010a9a:	f000 80df 	beq.w	8010c5c <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010a9e:	4b76      	ldr	r3, [pc, #472]	@ (8010c78 <icmp_input+0x238>)
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	4a75      	ldr	r2, [pc, #468]	@ (8010c78 <icmp_input+0x238>)
 8010aa4:	6812      	ldr	r2, [r2, #0]
 8010aa6:	4611      	mov	r1, r2
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f000 fc7f 	bl	80113ac <ip4_addr_isbroadcast_u32>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f040 80d5 	bne.w	8010c60 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	891b      	ldrh	r3, [r3, #8]
 8010aba:	2b07      	cmp	r3, #7
 8010abc:	f240 80c9 	bls.w	8010c52 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7f6 fea6 	bl	8007812 <inet_chksum_pbuf>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d003      	beq.n	8010ad4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f7f8 f9f5 	bl	8008ebc <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8010ad2:	e0ce      	b.n	8010c72 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010ad4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ad6:	330e      	adds	r3, #14
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7f8 f958 	bl	8008d90 <pbuf_add_header>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d04b      	beq.n	8010b7e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	891a      	ldrh	r2, [r3, #8]
 8010aea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010aec:	4413      	add	r3, r2
 8010aee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	891b      	ldrh	r3, [r3, #8]
 8010af4:	8b7a      	ldrh	r2, [r7, #26]
 8010af6:	429a      	cmp	r2, r3
 8010af8:	f0c0 80b4 	bcc.w	8010c64 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010afc:	8b7b      	ldrh	r3, [r7, #26]
 8010afe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010b02:	4619      	mov	r1, r3
 8010b04:	200e      	movs	r0, #14
 8010b06:	f7f7 fef5 	bl	80088f4 <pbuf_alloc>
 8010b0a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 80aa 	beq.w	8010c68 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	895b      	ldrh	r3, [r3, #10]
 8010b18:	461a      	mov	r2, r3
 8010b1a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b1c:	3308      	adds	r3, #8
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d203      	bcs.n	8010b2a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010b22:	6978      	ldr	r0, [r7, #20]
 8010b24:	f7f8 f9ca 	bl	8008ebc <pbuf_free>
          goto icmperr;
 8010b28:	e09f      	b.n	8010c6a <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010b2a:	697b      	ldr	r3, [r7, #20]
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b32:	4618      	mov	r0, r3
 8010b34:	f002 fa1b 	bl	8012f6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010b38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	6978      	ldr	r0, [r7, #20]
 8010b3e:	f7f8 f937 	bl	8008db0 <pbuf_remove_header>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d009      	beq.n	8010b5c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010b48:	4b4d      	ldr	r3, [pc, #308]	@ (8010c80 <icmp_input+0x240>)
 8010b4a:	22b6      	movs	r2, #182	@ 0xb6
 8010b4c:	494d      	ldr	r1, [pc, #308]	@ (8010c84 <icmp_input+0x244>)
 8010b4e:	484e      	ldr	r0, [pc, #312]	@ (8010c88 <icmp_input+0x248>)
 8010b50:	f002 f8be 	bl	8012cd0 <iprintf>
          pbuf_free(r);
 8010b54:	6978      	ldr	r0, [r7, #20]
 8010b56:	f7f8 f9b1 	bl	8008ebc <pbuf_free>
          goto icmperr;
 8010b5a:	e086      	b.n	8010c6a <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010b5c:	6879      	ldr	r1, [r7, #4]
 8010b5e:	6978      	ldr	r0, [r7, #20]
 8010b60:	f7f8 fade 	bl	8009120 <pbuf_copy>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d003      	beq.n	8010b72 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010b6a:	6978      	ldr	r0, [r7, #20]
 8010b6c:	f7f8 f9a6 	bl	8008ebc <pbuf_free>
          goto icmperr;
 8010b70:	e07b      	b.n	8010c6a <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	f7f8 f9a2 	bl	8008ebc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	607b      	str	r3, [r7, #4]
 8010b7c:	e00f      	b.n	8010b9e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010b7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b80:	330e      	adds	r3, #14
 8010b82:	4619      	mov	r1, r3
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7f8 f913 	bl	8008db0 <pbuf_remove_header>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d006      	beq.n	8010b9e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010b90:	4b3b      	ldr	r3, [pc, #236]	@ (8010c80 <icmp_input+0x240>)
 8010b92:	22c7      	movs	r2, #199	@ 0xc7
 8010b94:	493d      	ldr	r1, [pc, #244]	@ (8010c8c <icmp_input+0x24c>)
 8010b96:	483c      	ldr	r0, [pc, #240]	@ (8010c88 <icmp_input+0x248>)
 8010b98:	f002 f89a 	bl	8012cd0 <iprintf>
          goto icmperr;
 8010b9c:	e065      	b.n	8010c6a <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010ba4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	6878      	ldr	r0, [r7, #4]
 8010baa:	f7f8 f8f1 	bl	8008d90 <pbuf_add_header>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d145      	bne.n	8010c40 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010bba:	69fb      	ldr	r3, [r7, #28]
 8010bbc:	681a      	ldr	r2, [r3, #0]
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8010c78 <icmp_input+0x238>)
 8010bc4:	691a      	ldr	r2, [r3, #16]
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	2200      	movs	r2, #0
 8010bce:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	885b      	ldrh	r3, [r3, #2]
 8010bd4:	b29b      	uxth	r3, r3
 8010bd6:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010bda:	4293      	cmp	r3, r2
 8010bdc:	d907      	bls.n	8010bee <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	885b      	ldrh	r3, [r3, #2]
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	3309      	adds	r3, #9
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	805a      	strh	r2, [r3, #2]
 8010bec:	e006      	b.n	8010bfc <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	885b      	ldrh	r3, [r3, #2]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	3308      	adds	r3, #8
 8010bf6:	b29a      	uxth	r2, r3
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	22ff      	movs	r2, #255	@ 0xff
 8010c00:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2200      	movs	r2, #0
 8010c06:	729a      	strb	r2, [r3, #10]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8010c0c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c0e:	4619      	mov	r1, r3
 8010c10:	68f8      	ldr	r0, [r7, #12]
 8010c12:	f7f6 fdec 	bl	80077ee <inet_chksum>
 8010c16:	4603      	mov	r3, r0
 8010c18:	461a      	mov	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	9302      	str	r3, [sp, #8]
 8010c22:	2301      	movs	r3, #1
 8010c24:	9301      	str	r3, [sp, #4]
 8010c26:	2300      	movs	r3, #0
 8010c28:	9300      	str	r3, [sp, #0]
 8010c2a:	23ff      	movs	r3, #255	@ 0xff
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	69f9      	ldr	r1, [r7, #28]
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f000 fa7d 	bl	8011130 <ip4_output_if>
 8010c36:	4603      	mov	r3, r0
 8010c38:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010c3a:	e001      	b.n	8010c40 <icmp_input+0x200>
      break;
 8010c3c:	bf00      	nop
 8010c3e:	e000      	b.n	8010c42 <icmp_input+0x202>
      break;
 8010c40:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7f8 f93a 	bl	8008ebc <pbuf_free>
  return;
 8010c48:	e013      	b.n	8010c72 <icmp_input+0x232>
    goto lenerr;
 8010c4a:	bf00      	nop
 8010c4c:	e002      	b.n	8010c54 <icmp_input+0x214>
    goto lenerr;
 8010c4e:	bf00      	nop
 8010c50:	e000      	b.n	8010c54 <icmp_input+0x214>
        goto lenerr;
 8010c52:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f7f8 f931 	bl	8008ebc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c5a:	e00a      	b.n	8010c72 <icmp_input+0x232>
        goto icmperr;
 8010c5c:	bf00      	nop
 8010c5e:	e004      	b.n	8010c6a <icmp_input+0x22a>
        goto icmperr;
 8010c60:	bf00      	nop
 8010c62:	e002      	b.n	8010c6a <icmp_input+0x22a>
          goto icmperr;
 8010c64:	bf00      	nop
 8010c66:	e000      	b.n	8010c6a <icmp_input+0x22a>
          goto icmperr;
 8010c68:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f7f8 f926 	bl	8008ebc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c70:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010c72:	3728      	adds	r7, #40	@ 0x28
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	200045f4 	.word	0x200045f4
 8010c7c:	20004608 	.word	0x20004608
 8010c80:	08016480 	.word	0x08016480
 8010c84:	080164b8 	.word	0x080164b8
 8010c88:	080164f0 	.word	0x080164f0
 8010c8c:	08016518 	.word	0x08016518

08010c90 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
 8010c98:	460b      	mov	r3, r1
 8010c9a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010c9c:	78fb      	ldrb	r3, [r7, #3]
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	2103      	movs	r1, #3
 8010ca2:	6878      	ldr	r0, [r7, #4]
 8010ca4:	f000 f814 	bl	8010cd0 <icmp_send_response>
}
 8010ca8:	bf00      	nop
 8010caa:	3708      	adds	r7, #8
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}

08010cb0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	460b      	mov	r3, r1
 8010cba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010cbc:	78fb      	ldrb	r3, [r7, #3]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	210b      	movs	r1, #11
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f000 f804 	bl	8010cd0 <icmp_send_response>
}
 8010cc8:	bf00      	nop
 8010cca:	3708      	adds	r7, #8
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}

08010cd0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b08c      	sub	sp, #48	@ 0x30
 8010cd4:	af04      	add	r7, sp, #16
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	460b      	mov	r3, r1
 8010cda:	70fb      	strb	r3, [r7, #3]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010ce0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ce4:	2124      	movs	r1, #36	@ 0x24
 8010ce6:	2022      	movs	r0, #34	@ 0x22
 8010ce8:	f7f7 fe04 	bl	80088f4 <pbuf_alloc>
 8010cec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010cee:	69fb      	ldr	r3, [r7, #28]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d056      	beq.n	8010da2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	895b      	ldrh	r3, [r3, #10]
 8010cf8:	2b23      	cmp	r3, #35	@ 0x23
 8010cfa:	d806      	bhi.n	8010d0a <icmp_send_response+0x3a>
 8010cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8010dac <icmp_send_response+0xdc>)
 8010cfe:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010d02:	492b      	ldr	r1, [pc, #172]	@ (8010db0 <icmp_send_response+0xe0>)
 8010d04:	482b      	ldr	r0, [pc, #172]	@ (8010db4 <icmp_send_response+0xe4>)
 8010d06:	f001 ffe3 	bl	8012cd0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	78fa      	ldrb	r2, [r7, #3]
 8010d1a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	78ba      	ldrb	r2, [r7, #2]
 8010d20:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2200      	movs	r2, #0
 8010d26:	711a      	strb	r2, [r3, #4]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	719a      	strb	r2, [r3, #6]
 8010d32:	2200      	movs	r2, #0
 8010d34:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010d36:	69fb      	ldr	r3, [r7, #28]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	f103 0008 	add.w	r0, r3, #8
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	221c      	movs	r2, #28
 8010d44:	4619      	mov	r1, r3
 8010d46:	f002 f912 	bl	8012f6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	68db      	ldr	r3, [r3, #12]
 8010d4e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010d50:	f107 030c 	add.w	r3, r7, #12
 8010d54:	4618      	mov	r0, r3
 8010d56:	f000 f82f 	bl	8010db8 <ip4_route>
 8010d5a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d01b      	beq.n	8010d9a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	2200      	movs	r2, #0
 8010d66:	709a      	strb	r2, [r3, #2]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	895b      	ldrh	r3, [r3, #10]
 8010d70:	4619      	mov	r1, r3
 8010d72:	6978      	ldr	r0, [r7, #20]
 8010d74:	f7f6 fd3b 	bl	80077ee <inet_chksum>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010d80:	f107 020c 	add.w	r2, r7, #12
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	9302      	str	r3, [sp, #8]
 8010d88:	2301      	movs	r3, #1
 8010d8a:	9301      	str	r3, [sp, #4]
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	9300      	str	r3, [sp, #0]
 8010d90:	23ff      	movs	r3, #255	@ 0xff
 8010d92:	2100      	movs	r1, #0
 8010d94:	69f8      	ldr	r0, [r7, #28]
 8010d96:	f000 f9cb 	bl	8011130 <ip4_output_if>
  }
  pbuf_free(q);
 8010d9a:	69f8      	ldr	r0, [r7, #28]
 8010d9c:	f7f8 f88e 	bl	8008ebc <pbuf_free>
 8010da0:	e000      	b.n	8010da4 <icmp_send_response+0xd4>
    return;
 8010da2:	bf00      	nop
}
 8010da4:	3720      	adds	r7, #32
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	08016480 	.word	0x08016480
 8010db0:	0801654c 	.word	0x0801654c
 8010db4:	080164f0 	.word	0x080164f0

08010db8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010dc0:	4b32      	ldr	r3, [pc, #200]	@ (8010e8c <ip4_route+0xd4>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	60fb      	str	r3, [r7, #12]
 8010dc6:	e036      	b.n	8010e36 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010dce:	f003 0301 	and.w	r3, r3, #1
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d02b      	beq.n	8010e30 <ip4_route+0x78>
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010dde:	089b      	lsrs	r3, r3, #2
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	b2db      	uxtb	r3, r3
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d022      	beq.n	8010e30 <ip4_route+0x78>
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	3304      	adds	r3, #4
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d01d      	beq.n	8010e30 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	3304      	adds	r3, #4
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	405a      	eors	r2, r3
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	3308      	adds	r3, #8
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4013      	ands	r3, r2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d101      	bne.n	8010e10 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	e038      	b.n	8010e82 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e16:	f003 0302 	and.w	r3, r3, #2
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d108      	bne.n	8010e30 <ip4_route+0x78>
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	330c      	adds	r3, #12
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	429a      	cmp	r2, r3
 8010e2a:	d101      	bne.n	8010e30 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	e028      	b.n	8010e82 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	60fb      	str	r3, [r7, #12]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1c5      	bne.n	8010dc8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010e3c:	4b14      	ldr	r3, [pc, #80]	@ (8010e90 <ip4_route+0xd8>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d01a      	beq.n	8010e7a <ip4_route+0xc2>
 8010e44:	4b12      	ldr	r3, [pc, #72]	@ (8010e90 <ip4_route+0xd8>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e4c:	f003 0301 	and.w	r3, r3, #1
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d012      	beq.n	8010e7a <ip4_route+0xc2>
 8010e54:	4b0e      	ldr	r3, [pc, #56]	@ (8010e90 <ip4_route+0xd8>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e5c:	f003 0304 	and.w	r3, r3, #4
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d00a      	beq.n	8010e7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010e64:	4b0a      	ldr	r3, [pc, #40]	@ (8010e90 <ip4_route+0xd8>)
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e78:	d101      	bne.n	8010e7e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	e001      	b.n	8010e82 <ip4_route+0xca>
  }

  return netif_default;
 8010e7e:	4b04      	ldr	r3, [pc, #16]	@ (8010e90 <ip4_route+0xd8>)
 8010e80:	681b      	ldr	r3, [r3, #0]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3714      	adds	r7, #20
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bc80      	pop	{r7}
 8010e8a:	4770      	bx	lr
 8010e8c:	200076e8 	.word	0x200076e8
 8010e90:	200076ec 	.word	0x200076ec

08010e94 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b082      	sub	sp, #8
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010ea2:	f003 0301 	and.w	r3, r3, #1
 8010ea6:	b2db      	uxtb	r3, r3
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d016      	beq.n	8010eda <ip4_input_accept+0x46>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	3304      	adds	r3, #4
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d011      	beq.n	8010eda <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee4 <ip4_input_accept+0x50>)
 8010eb8:	695a      	ldr	r2, [r3, #20]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d008      	beq.n	8010ed6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010ec4:	4b07      	ldr	r3, [pc, #28]	@ (8010ee4 <ip4_input_accept+0x50>)
 8010ec6:	695b      	ldr	r3, [r3, #20]
 8010ec8:	6879      	ldr	r1, [r7, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 fa6e 	bl	80113ac <ip4_addr_isbroadcast_u32>
 8010ed0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d001      	beq.n	8010eda <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e000      	b.n	8010edc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010eda:	2300      	movs	r3, #0
}
 8010edc:	4618      	mov	r0, r3
 8010ede:	3708      	adds	r7, #8
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}
 8010ee4:	200045f4 	.word	0x200045f4

08010ee8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b086      	sub	sp, #24
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	091b      	lsrs	r3, r3, #4
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b04      	cmp	r3, #4
 8010f02:	d004      	beq.n	8010f0e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7f7 ffd9 	bl	8008ebc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	e107      	b.n	801111e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	f003 030f 	and.w	r3, r3, #15
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	009b      	lsls	r3, r3, #2
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	885b      	ldrh	r3, [r3, #2]
 8010f22:	b29b      	uxth	r3, r3
 8010f24:	4618      	mov	r0, r3
 8010f26:	f7f6 fae7 	bl	80074f8 <lwip_htons>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	891b      	ldrh	r3, [r3, #8]
 8010f32:	89ba      	ldrh	r2, [r7, #12]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d204      	bcs.n	8010f42 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010f38:	89bb      	ldrh	r3, [r7, #12]
 8010f3a:	4619      	mov	r1, r3
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f7f7 fe37 	bl	8008bb0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	895b      	ldrh	r3, [r3, #10]
 8010f46:	89fa      	ldrh	r2, [r7, #14]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d807      	bhi.n	8010f5c <ip4_input+0x74>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	891b      	ldrh	r3, [r3, #8]
 8010f50:	89ba      	ldrh	r2, [r7, #12]
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d802      	bhi.n	8010f5c <ip4_input+0x74>
 8010f56:	89fb      	ldrh	r3, [r7, #14]
 8010f58:	2b13      	cmp	r3, #19
 8010f5a:	d804      	bhi.n	8010f66 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010f5c:	6878      	ldr	r0, [r7, #4]
 8010f5e:	f7f7 ffad 	bl	8008ebc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010f62:	2300      	movs	r3, #0
 8010f64:	e0db      	b.n	801111e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010f66:	697b      	ldr	r3, [r7, #20]
 8010f68:	691b      	ldr	r3, [r3, #16]
 8010f6a:	4a6f      	ldr	r2, [pc, #444]	@ (8011128 <ip4_input+0x240>)
 8010f6c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	4a6d      	ldr	r2, [pc, #436]	@ (8011128 <ip4_input+0x240>)
 8010f74:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f76:	4b6c      	ldr	r3, [pc, #432]	@ (8011128 <ip4_input+0x240>)
 8010f78:	695b      	ldr	r3, [r3, #20]
 8010f7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f7e:	2be0      	cmp	r3, #224	@ 0xe0
 8010f80:	d112      	bne.n	8010fa8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010f82:	683b      	ldr	r3, [r7, #0]
 8010f84:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f88:	f003 0301 	and.w	r3, r3, #1
 8010f8c:	b2db      	uxtb	r3, r3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d007      	beq.n	8010fa2 <ip4_input+0xba>
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	3304      	adds	r3, #4
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d002      	beq.n	8010fa2 <ip4_input+0xba>
      netif = inp;
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	613b      	str	r3, [r7, #16]
 8010fa0:	e02a      	b.n	8010ff8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	e027      	b.n	8010ff8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010fa8:	6838      	ldr	r0, [r7, #0]
 8010faa:	f7ff ff73 	bl	8010e94 <ip4_input_accept>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <ip4_input+0xd2>
      netif = inp;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	613b      	str	r3, [r7, #16]
 8010fb8:	e01e      	b.n	8010ff8 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010fbe:	4b5a      	ldr	r3, [pc, #360]	@ (8011128 <ip4_input+0x240>)
 8010fc0:	695b      	ldr	r3, [r3, #20]
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8010fc6:	d017      	beq.n	8010ff8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010fc8:	4b58      	ldr	r3, [pc, #352]	@ (801112c <ip4_input+0x244>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	613b      	str	r3, [r7, #16]
 8010fce:	e00e      	b.n	8010fee <ip4_input+0x106>
          if (netif == inp) {
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d006      	beq.n	8010fe6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010fd8:	6938      	ldr	r0, [r7, #16]
 8010fda:	f7ff ff5b 	bl	8010e94 <ip4_input_accept>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <ip4_input+0x10e>
 8010fe4:	e000      	b.n	8010fe8 <ip4_input+0x100>
            continue;
 8010fe6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	613b      	str	r3, [r7, #16]
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d1ed      	bne.n	8010fd0 <ip4_input+0xe8>
 8010ff4:	e000      	b.n	8010ff8 <ip4_input+0x110>
            break;
 8010ff6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8011128 <ip4_input+0x240>)
 8010ffa:	691b      	ldr	r3, [r3, #16]
 8010ffc:	6839      	ldr	r1, [r7, #0]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f000 f9d4 	bl	80113ac <ip4_addr_isbroadcast_u32>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d105      	bne.n	8011016 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801100a:	4b47      	ldr	r3, [pc, #284]	@ (8011128 <ip4_input+0x240>)
 801100c:	691b      	ldr	r3, [r3, #16]
 801100e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8011012:	2be0      	cmp	r3, #224	@ 0xe0
 8011014:	d104      	bne.n	8011020 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7f7 ff50 	bl	8008ebc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801101c:	2300      	movs	r3, #0
 801101e:	e07e      	b.n	801111e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8011020:	693b      	ldr	r3, [r7, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d104      	bne.n	8011030 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7f7 ff48 	bl	8008ebc <pbuf_free>
    return ERR_OK;
 801102c:	2300      	movs	r3, #0
 801102e:	e076      	b.n	801111e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	88db      	ldrh	r3, [r3, #6]
 8011034:	b29b      	uxth	r3, r3
 8011036:	461a      	mov	r2, r3
 8011038:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801103c:	4013      	ands	r3, r2
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00b      	beq.n	801105a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fcf6 	bl	8011a34 <ip4_reass>
 8011048:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d101      	bne.n	8011054 <ip4_input+0x16c>
      return ERR_OK;
 8011050:	2300      	movs	r3, #0
 8011052:	e064      	b.n	801111e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801105a:	4a33      	ldr	r2, [pc, #204]	@ (8011128 <ip4_input+0x240>)
 801105c:	693b      	ldr	r3, [r7, #16]
 801105e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8011060:	4a31      	ldr	r2, [pc, #196]	@ (8011128 <ip4_input+0x240>)
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011066:	4a30      	ldr	r2, [pc, #192]	@ (8011128 <ip4_input+0x240>)
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	f003 030f 	and.w	r3, r3, #15
 8011074:	b2db      	uxtb	r3, r3
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	b2db      	uxtb	r3, r3
 801107a:	461a      	mov	r2, r3
 801107c:	4b2a      	ldr	r3, [pc, #168]	@ (8011128 <ip4_input+0x240>)
 801107e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8011080:	89fb      	ldrh	r3, [r7, #14]
 8011082:	4619      	mov	r1, r3
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	f7f7 fe93 	bl	8008db0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	7a5b      	ldrb	r3, [r3, #9]
 801108e:	2b11      	cmp	r3, #17
 8011090:	d006      	beq.n	80110a0 <ip4_input+0x1b8>
 8011092:	2b11      	cmp	r3, #17
 8011094:	dc13      	bgt.n	80110be <ip4_input+0x1d6>
 8011096:	2b01      	cmp	r3, #1
 8011098:	d00c      	beq.n	80110b4 <ip4_input+0x1cc>
 801109a:	2b06      	cmp	r3, #6
 801109c:	d005      	beq.n	80110aa <ip4_input+0x1c2>
 801109e:	e00e      	b.n	80110be <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80110a0:	6839      	ldr	r1, [r7, #0]
 80110a2:	6878      	ldr	r0, [r7, #4]
 80110a4:	f7fe fc22 	bl	800f8ec <udp_input>
        break;
 80110a8:	e026      	b.n	80110f8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80110aa:	6839      	ldr	r1, [r7, #0]
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7f9 ffc1 	bl	800b034 <tcp_input>
        break;
 80110b2:	e021      	b.n	80110f8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80110b4:	6839      	ldr	r1, [r7, #0]
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff fcc2 	bl	8010a40 <icmp_input>
        break;
 80110bc:	e01c      	b.n	80110f8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80110be:	4b1a      	ldr	r3, [pc, #104]	@ (8011128 <ip4_input+0x240>)
 80110c0:	695b      	ldr	r3, [r3, #20]
 80110c2:	6939      	ldr	r1, [r7, #16]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f000 f971 	bl	80113ac <ip4_addr_isbroadcast_u32>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d10f      	bne.n	80110f0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110d0:	4b15      	ldr	r3, [pc, #84]	@ (8011128 <ip4_input+0x240>)
 80110d2:	695b      	ldr	r3, [r3, #20]
 80110d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80110d8:	2be0      	cmp	r3, #224	@ 0xe0
 80110da:	d009      	beq.n	80110f0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80110dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110e0:	4619      	mov	r1, r3
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7f7 fed7 	bl	8008e96 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80110e8:	2102      	movs	r1, #2
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7ff fdd0 	bl	8010c90 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80110f0:	6878      	ldr	r0, [r7, #4]
 80110f2:	f7f7 fee3 	bl	8008ebc <pbuf_free>
        break;
 80110f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80110f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011128 <ip4_input+0x240>)
 80110fa:	2200      	movs	r2, #0
 80110fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80110fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011128 <ip4_input+0x240>)
 8011100:	2200      	movs	r2, #0
 8011102:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011104:	4b08      	ldr	r3, [pc, #32]	@ (8011128 <ip4_input+0x240>)
 8011106:	2200      	movs	r2, #0
 8011108:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801110a:	4b07      	ldr	r3, [pc, #28]	@ (8011128 <ip4_input+0x240>)
 801110c:	2200      	movs	r2, #0
 801110e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8011110:	4b05      	ldr	r3, [pc, #20]	@ (8011128 <ip4_input+0x240>)
 8011112:	2200      	movs	r2, #0
 8011114:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011116:	4b04      	ldr	r3, [pc, #16]	@ (8011128 <ip4_input+0x240>)
 8011118:	2200      	movs	r2, #0
 801111a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3718      	adds	r7, #24
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	200045f4 	.word	0x200045f4
 801112c:	200076e8 	.word	0x200076e8

08011130 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b08a      	sub	sp, #40	@ 0x28
 8011134:	af04      	add	r7, sp, #16
 8011136:	60f8      	str	r0, [r7, #12]
 8011138:	60b9      	str	r1, [r7, #8]
 801113a:	607a      	str	r2, [r7, #4]
 801113c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d009      	beq.n	801115c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d003      	beq.n	8011156 <ip4_output_if+0x26>
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d102      	bne.n	801115c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011158:	3304      	adds	r3, #4
 801115a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801115c:	78fa      	ldrb	r2, [r7, #3]
 801115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011160:	9302      	str	r3, [sp, #8]
 8011162:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011166:	9301      	str	r3, [sp, #4]
 8011168:	f897 3020 	ldrb.w	r3, [r7, #32]
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	4613      	mov	r3, r2
 8011170:	687a      	ldr	r2, [r7, #4]
 8011172:	6979      	ldr	r1, [r7, #20]
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f000 f805 	bl	8011184 <ip4_output_if_src>
 801117a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801117c:	4618      	mov	r0, r3
 801117e:	3718      	adds	r7, #24
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b088      	sub	sp, #32
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
 8011190:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	7b9b      	ldrb	r3, [r3, #14]
 801119a:	2b01      	cmp	r3, #1
 801119c:	d006      	beq.n	80111ac <ip4_output_if_src+0x28>
 801119e:	4b7d      	ldr	r3, [pc, #500]	@ (8011394 <ip4_output_if_src+0x210>)
 80111a0:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80111a4:	497c      	ldr	r1, [pc, #496]	@ (8011398 <ip4_output_if_src+0x214>)
 80111a6:	487d      	ldr	r0, [pc, #500]	@ (801139c <ip4_output_if_src+0x218>)
 80111a8:	f001 fd92 	bl	8012cd0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	f000 80c4 	beq.w	801133c <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 80111b4:	2314      	movs	r3, #20
 80111b6:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80111b8:	2114      	movs	r1, #20
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f7f7 fde8 	bl	8008d90 <pbuf_add_header>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d002      	beq.n	80111cc <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80111c6:	f06f 0301 	mvn.w	r3, #1
 80111ca:	e0df      	b.n	801138c <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	895b      	ldrh	r3, [r3, #10]
 80111d6:	2b13      	cmp	r3, #19
 80111d8:	d806      	bhi.n	80111e8 <ip4_output_if_src+0x64>
 80111da:	4b6e      	ldr	r3, [pc, #440]	@ (8011394 <ip4_output_if_src+0x210>)
 80111dc:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80111e0:	496f      	ldr	r1, [pc, #444]	@ (80113a0 <ip4_output_if_src+0x21c>)
 80111e2:	486e      	ldr	r0, [pc, #440]	@ (801139c <ip4_output_if_src+0x218>)
 80111e4:	f001 fd74 	bl	8012cd0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80111e8:	69bb      	ldr	r3, [r7, #24]
 80111ea:	78fa      	ldrb	r2, [r7, #3]
 80111ec:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80111f4:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80111f6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80111fa:	78fb      	ldrb	r3, [r7, #3]
 80111fc:	021b      	lsls	r3, r3, #8
 80111fe:	4313      	orrs	r3, r2
 8011200:	021b      	lsls	r3, r3, #8
 8011202:	b21a      	sxth	r2, r3
 8011204:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8011208:	78fb      	ldrb	r3, [r7, #3]
 801120a:	021b      	lsls	r3, r3, #8
 801120c:	430b      	orrs	r3, r1
 801120e:	121b      	asrs	r3, r3, #8
 8011210:	b21b      	sxth	r3, r3
 8011212:	b2db      	uxtb	r3, r3
 8011214:	b21b      	sxth	r3, r3
 8011216:	4313      	orrs	r3, r2
 8011218:	b21b      	sxth	r3, r3
 801121a:	b29b      	uxth	r3, r3
 801121c:	461a      	mov	r2, r3
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	4413      	add	r3, r2
 8011222:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681a      	ldr	r2, [r3, #0]
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 801122c:	69bb      	ldr	r3, [r7, #24]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	b29b      	uxth	r3, r3
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	4413      	add	r3, r2
 8011236:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8011238:	69bb      	ldr	r3, [r7, #24]
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	0c1b      	lsrs	r3, r3, #16
 801123e:	69fa      	ldr	r2, [r7, #28]
 8011240:	4413      	add	r3, r2
 8011242:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011244:	8afb      	ldrh	r3, [r7, #22]
 8011246:	089b      	lsrs	r3, r3, #2
 8011248:	b29b      	uxth	r3, r3
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011250:	b2da      	uxtb	r2, r3
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801125c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801125e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	021b      	lsls	r3, r3, #8
 8011268:	4313      	orrs	r3, r2
 801126a:	021b      	lsls	r3, r3, #8
 801126c:	b21a      	sxth	r2, r3
 801126e:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8011272:	69bb      	ldr	r3, [r7, #24]
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	021b      	lsls	r3, r3, #8
 8011278:	430b      	orrs	r3, r1
 801127a:	121b      	asrs	r3, r3, #8
 801127c:	b21b      	sxth	r3, r3
 801127e:	b2db      	uxtb	r3, r3
 8011280:	b21b      	sxth	r3, r3
 8011282:	4313      	orrs	r3, r2
 8011284:	b21b      	sxth	r3, r3
 8011286:	b29b      	uxth	r3, r3
 8011288:	461a      	mov	r2, r3
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	4413      	add	r3, r2
 801128e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	891b      	ldrh	r3, [r3, #8]
 8011294:	4618      	mov	r0, r3
 8011296:	f7f6 f92f 	bl	80074f8 <lwip_htons>
 801129a:	4603      	mov	r3, r0
 801129c:	461a      	mov	r2, r3
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	885b      	ldrh	r3, [r3, #2]
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	461a      	mov	r2, r3
 80112aa:	69fb      	ldr	r3, [r7, #28]
 80112ac:	4413      	add	r3, r2
 80112ae:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	2200      	movs	r2, #0
 80112b4:	719a      	strb	r2, [r3, #6]
 80112b6:	2200      	movs	r2, #0
 80112b8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80112ba:	4b3a      	ldr	r3, [pc, #232]	@ (80113a4 <ip4_output_if_src+0x220>)
 80112bc:	881b      	ldrh	r3, [r3, #0]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7f6 f91a 	bl	80074f8 <lwip_htons>
 80112c4:	4603      	mov	r3, r0
 80112c6:	461a      	mov	r2, r3
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	889b      	ldrh	r3, [r3, #4]
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	461a      	mov	r2, r3
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	4413      	add	r3, r2
 80112d8:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80112da:	4b32      	ldr	r3, [pc, #200]	@ (80113a4 <ip4_output_if_src+0x220>)
 80112dc:	881b      	ldrh	r3, [r3, #0]
 80112de:	3301      	adds	r3, #1
 80112e0:	b29a      	uxth	r2, r3
 80112e2:	4b30      	ldr	r3, [pc, #192]	@ (80113a4 <ip4_output_if_src+0x220>)
 80112e4:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d104      	bne.n	80112f6 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80112ec:	4b2e      	ldr	r3, [pc, #184]	@ (80113a8 <ip4_output_if_src+0x224>)
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	60da      	str	r2, [r3, #12]
 80112f4:	e003      	b.n	80112fe <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	b29b      	uxth	r3, r3
 8011304:	69fa      	ldr	r2, [r7, #28]
 8011306:	4413      	add	r3, r2
 8011308:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	0c1b      	lsrs	r3, r3, #16
 8011310:	69fa      	ldr	r2, [r7, #28]
 8011312:	4413      	add	r3, r2
 8011314:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	0c1a      	lsrs	r2, r3, #16
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	b29b      	uxth	r3, r3
 801131e:	4413      	add	r3, r2
 8011320:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	0c1b      	lsrs	r3, r3, #16
 8011326:	69fa      	ldr	r2, [r7, #28]
 8011328:	4413      	add	r3, r2
 801132a:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 801132c:	69fb      	ldr	r3, [r7, #28]
 801132e:	43db      	mvns	r3, r3
 8011330:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	b29a      	uxth	r2, r3
 8011336:	69bb      	ldr	r3, [r7, #24]
 8011338:	815a      	strh	r2, [r3, #10]
 801133a:	e00f      	b.n	801135c <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	895b      	ldrh	r3, [r3, #10]
 8011340:	2b13      	cmp	r3, #19
 8011342:	d802      	bhi.n	801134a <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011344:	f06f 0301 	mvn.w	r3, #1
 8011348:	e020      	b.n	801138c <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	691b      	ldr	r3, [r3, #16]
 8011354:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8011356:	f107 0310 	add.w	r3, r7, #16
 801135a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801135c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011360:	2b00      	cmp	r3, #0
 8011362:	d00c      	beq.n	801137e <ip4_output_if_src+0x1fa>
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	891a      	ldrh	r2, [r3, #8]
 8011368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801136a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801136c:	429a      	cmp	r2, r3
 801136e:	d906      	bls.n	801137e <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f000 fd59 	bl	8011e2c <ip4_frag>
 801137a:	4603      	mov	r3, r0
 801137c:	e006      	b.n	801138c <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801137e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011380:	695b      	ldr	r3, [r3, #20]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	68f9      	ldr	r1, [r7, #12]
 8011386:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011388:	4798      	blx	r3
 801138a:	4603      	mov	r3, r0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3720      	adds	r7, #32
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	08016578 	.word	0x08016578
 8011398:	080165ac 	.word	0x080165ac
 801139c:	080165b8 	.word	0x080165b8
 80113a0:	080165e0 	.word	0x080165e0
 80113a4:	20007844 	.word	0x20007844
 80113a8:	080178b8 	.word	0x080178b8

080113ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80113c0:	d002      	beq.n	80113c8 <ip4_addr_isbroadcast_u32+0x1c>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d101      	bne.n	80113cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80113c8:	2301      	movs	r3, #1
 80113ca:	e02a      	b.n	8011422 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113d2:	f003 0302 	and.w	r3, r3, #2
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d101      	bne.n	80113de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80113da:	2300      	movs	r3, #0
 80113dc:	e021      	b.n	8011422 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	3304      	adds	r3, #4
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	687a      	ldr	r2, [r7, #4]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d101      	bne.n	80113ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	e019      	b.n	8011422 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80113ee:	68fa      	ldr	r2, [r7, #12]
 80113f0:	683b      	ldr	r3, [r7, #0]
 80113f2:	3304      	adds	r3, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	405a      	eors	r2, r3
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	3308      	adds	r3, #8
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	4013      	ands	r3, r2
 8011400:	2b00      	cmp	r3, #0
 8011402:	d10d      	bne.n	8011420 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	3308      	adds	r3, #8
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	43da      	mvns	r2, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	3308      	adds	r3, #8
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011418:	429a      	cmp	r2, r3
 801141a:	d101      	bne.n	8011420 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801141c:	2301      	movs	r3, #1
 801141e:	e000      	b.n	8011422 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8011420:	2300      	movs	r3, #0
  }
}
 8011422:	4618      	mov	r0, r3
 8011424:	3714      	adds	r7, #20
 8011426:	46bd      	mov	sp, r7
 8011428:	bc80      	pop	{r7}
 801142a:	4770      	bx	lr

0801142c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8011432:	2300      	movs	r3, #0
 8011434:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011436:	4b12      	ldr	r3, [pc, #72]	@ (8011480 <ip_reass_tmr+0x54>)
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801143c:	e018      	b.n	8011470 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	7fdb      	ldrb	r3, [r3, #31]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00b      	beq.n	801145e <ip_reass_tmr+0x32>
      r->timer--;
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	7fdb      	ldrb	r3, [r3, #31]
 801144a:	3b01      	subs	r3, #1
 801144c:	b2da      	uxtb	r2, r3
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	60fb      	str	r3, [r7, #12]
 801145c:	e008      	b.n	8011470 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011468:	68b9      	ldr	r1, [r7, #8]
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f000 f80a 	bl	8011484 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d1e3      	bne.n	801143e <ip_reass_tmr+0x12>
    }
  }
}
 8011476:	bf00      	nop
 8011478:	bf00      	nop
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	20007848 	.word	0x20007848

08011484 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b088      	sub	sp, #32
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801148e:	2300      	movs	r3, #0
 8011490:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8011492:	683a      	ldr	r2, [r7, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	429a      	cmp	r2, r3
 8011498:	d105      	bne.n	80114a6 <ip_reass_free_complete_datagram+0x22>
 801149a:	4b45      	ldr	r3, [pc, #276]	@ (80115b0 <ip_reass_free_complete_datagram+0x12c>)
 801149c:	22ab      	movs	r2, #171	@ 0xab
 801149e:	4945      	ldr	r1, [pc, #276]	@ (80115b4 <ip_reass_free_complete_datagram+0x130>)
 80114a0:	4845      	ldr	r0, [pc, #276]	@ (80115b8 <ip_reass_free_complete_datagram+0x134>)
 80114a2:	f001 fc15 	bl	8012cd0 <iprintf>
  if (prev != NULL) {
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d00a      	beq.n	80114c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d005      	beq.n	80114c2 <ip_reass_free_complete_datagram+0x3e>
 80114b6:	4b3e      	ldr	r3, [pc, #248]	@ (80115b0 <ip_reass_free_complete_datagram+0x12c>)
 80114b8:	22ad      	movs	r2, #173	@ 0xad
 80114ba:	4940      	ldr	r1, [pc, #256]	@ (80115bc <ip_reass_free_complete_datagram+0x138>)
 80114bc:	483e      	ldr	r0, [pc, #248]	@ (80115b8 <ip_reass_free_complete_datagram+0x134>)
 80114be:	f001 fc07 	bl	8012cd0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	889b      	ldrh	r3, [r3, #4]
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d12a      	bne.n	801152a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	681a      	ldr	r2, [r3, #0]
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	6858      	ldr	r0, [r3, #4]
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	3308      	adds	r3, #8
 80114ea:	2214      	movs	r2, #20
 80114ec:	4619      	mov	r1, r3
 80114ee:	f001 fd3e 	bl	8012f6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80114f2:	2101      	movs	r1, #1
 80114f4:	69b8      	ldr	r0, [r7, #24]
 80114f6:	f7ff fbdb 	bl	8010cb0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80114fa:	69b8      	ldr	r0, [r7, #24]
 80114fc:	f7f7 fd6c 	bl	8008fd8 <pbuf_clen>
 8011500:	4603      	mov	r3, r0
 8011502:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011504:	8bfa      	ldrh	r2, [r7, #30]
 8011506:	8a7b      	ldrh	r3, [r7, #18]
 8011508:	4413      	add	r3, r2
 801150a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801150e:	db05      	blt.n	801151c <ip_reass_free_complete_datagram+0x98>
 8011510:	4b27      	ldr	r3, [pc, #156]	@ (80115b0 <ip_reass_free_complete_datagram+0x12c>)
 8011512:	22bc      	movs	r2, #188	@ 0xbc
 8011514:	492a      	ldr	r1, [pc, #168]	@ (80115c0 <ip_reass_free_complete_datagram+0x13c>)
 8011516:	4828      	ldr	r0, [pc, #160]	@ (80115b8 <ip_reass_free_complete_datagram+0x134>)
 8011518:	f001 fbda 	bl	8012cd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801151c:	8bfa      	ldrh	r2, [r7, #30]
 801151e:	8a7b      	ldrh	r3, [r7, #18]
 8011520:	4413      	add	r3, r2
 8011522:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011524:	69b8      	ldr	r0, [r7, #24]
 8011526:	f7f7 fcc9 	bl	8008ebc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8011530:	e01f      	b.n	8011572 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8011542:	68f8      	ldr	r0, [r7, #12]
 8011544:	f7f7 fd48 	bl	8008fd8 <pbuf_clen>
 8011548:	4603      	mov	r3, r0
 801154a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801154c:	8bfa      	ldrh	r2, [r7, #30]
 801154e:	8a7b      	ldrh	r3, [r7, #18]
 8011550:	4413      	add	r3, r2
 8011552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011556:	db05      	blt.n	8011564 <ip_reass_free_complete_datagram+0xe0>
 8011558:	4b15      	ldr	r3, [pc, #84]	@ (80115b0 <ip_reass_free_complete_datagram+0x12c>)
 801155a:	22cc      	movs	r2, #204	@ 0xcc
 801155c:	4918      	ldr	r1, [pc, #96]	@ (80115c0 <ip_reass_free_complete_datagram+0x13c>)
 801155e:	4816      	ldr	r0, [pc, #88]	@ (80115b8 <ip_reass_free_complete_datagram+0x134>)
 8011560:	f001 fbb6 	bl	8012cd0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011564:	8bfa      	ldrh	r2, [r7, #30]
 8011566:	8a7b      	ldrh	r3, [r7, #18]
 8011568:	4413      	add	r3, r2
 801156a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801156c:	68f8      	ldr	r0, [r7, #12]
 801156e:	f7f7 fca5 	bl	8008ebc <pbuf_free>
  while (p != NULL) {
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d1dc      	bne.n	8011532 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011578:	6839      	ldr	r1, [r7, #0]
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 f8c2 	bl	8011704 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8011580:	4b10      	ldr	r3, [pc, #64]	@ (80115c4 <ip_reass_free_complete_datagram+0x140>)
 8011582:	881b      	ldrh	r3, [r3, #0]
 8011584:	8bfa      	ldrh	r2, [r7, #30]
 8011586:	429a      	cmp	r2, r3
 8011588:	d905      	bls.n	8011596 <ip_reass_free_complete_datagram+0x112>
 801158a:	4b09      	ldr	r3, [pc, #36]	@ (80115b0 <ip_reass_free_complete_datagram+0x12c>)
 801158c:	22d2      	movs	r2, #210	@ 0xd2
 801158e:	490e      	ldr	r1, [pc, #56]	@ (80115c8 <ip_reass_free_complete_datagram+0x144>)
 8011590:	4809      	ldr	r0, [pc, #36]	@ (80115b8 <ip_reass_free_complete_datagram+0x134>)
 8011592:	f001 fb9d 	bl	8012cd0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011596:	4b0b      	ldr	r3, [pc, #44]	@ (80115c4 <ip_reass_free_complete_datagram+0x140>)
 8011598:	881a      	ldrh	r2, [r3, #0]
 801159a:	8bfb      	ldrh	r3, [r7, #30]
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	b29a      	uxth	r2, r3
 80115a0:	4b08      	ldr	r3, [pc, #32]	@ (80115c4 <ip_reass_free_complete_datagram+0x140>)
 80115a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80115a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80115a6:	4618      	mov	r0, r3
 80115a8:	3720      	adds	r7, #32
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	08016610 	.word	0x08016610
 80115b4:	0801664c 	.word	0x0801664c
 80115b8:	08016658 	.word	0x08016658
 80115bc:	08016680 	.word	0x08016680
 80115c0:	08016694 	.word	0x08016694
 80115c4:	2000784c 	.word	0x2000784c
 80115c8:	080166b4 	.word	0x080166b4

080115cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b08a      	sub	sp, #40	@ 0x28
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80115d6:	2300      	movs	r3, #0
 80115d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80115da:	2300      	movs	r3, #0
 80115dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80115de:	2300      	movs	r3, #0
 80115e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80115e2:	2300      	movs	r3, #0
 80115e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80115e6:	2300      	movs	r3, #0
 80115e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80115ea:	4b28      	ldr	r3, [pc, #160]	@ (801168c <ip_reass_remove_oldest_datagram+0xc0>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80115f0:	e030      	b.n	8011654 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80115f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f4:	695a      	ldr	r2, [r3, #20]
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d10c      	bne.n	8011618 <ip_reass_remove_oldest_datagram+0x4c>
 80115fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011600:	699a      	ldr	r2, [r3, #24]
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	429a      	cmp	r2, r3
 8011608:	d106      	bne.n	8011618 <ip_reass_remove_oldest_datagram+0x4c>
 801160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801160c:	899a      	ldrh	r2, [r3, #12]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	889b      	ldrh	r3, [r3, #4]
 8011612:	b29b      	uxth	r3, r3
 8011614:	429a      	cmp	r2, r3
 8011616:	d014      	beq.n	8011642 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	3301      	adds	r3, #1
 801161c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d104      	bne.n	801162e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011626:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	61bb      	str	r3, [r7, #24]
 801162c:	e009      	b.n	8011642 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801162e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011630:	7fda      	ldrb	r2, [r3, #31]
 8011632:	6a3b      	ldr	r3, [r7, #32]
 8011634:	7fdb      	ldrb	r3, [r3, #31]
 8011636:	429a      	cmp	r2, r3
 8011638:	d803      	bhi.n	8011642 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801163c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8011642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d001      	beq.n	801164e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011656:	2b00      	cmp	r3, #0
 8011658:	d1cb      	bne.n	80115f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801165a:	6a3b      	ldr	r3, [r7, #32]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d008      	beq.n	8011672 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8011660:	69b9      	ldr	r1, [r7, #24]
 8011662:	6a38      	ldr	r0, [r7, #32]
 8011664:	f7ff ff0e 	bl	8011484 <ip_reass_free_complete_datagram>
 8011668:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801166a:	697a      	ldr	r2, [r7, #20]
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	4413      	add	r3, r2
 8011670:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8011672:	697a      	ldr	r2, [r7, #20]
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	429a      	cmp	r2, r3
 8011678:	da02      	bge.n	8011680 <ip_reass_remove_oldest_datagram+0xb4>
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	2b01      	cmp	r3, #1
 801167e:	dcac      	bgt.n	80115da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8011680:	697b      	ldr	r3, [r7, #20]
}
 8011682:	4618      	mov	r0, r3
 8011684:	3728      	adds	r7, #40	@ 0x28
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	20007848 	.word	0x20007848

08011690 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801169a:	2004      	movs	r0, #4
 801169c:	f7f6 fd84 	bl	80081a8 <memp_malloc>
 80116a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d110      	bne.n	80116ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80116a8:	6839      	ldr	r1, [r7, #0]
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f7ff ff8e 	bl	80115cc <ip_reass_remove_oldest_datagram>
 80116b0:	4602      	mov	r2, r0
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	4293      	cmp	r3, r2
 80116b6:	dc03      	bgt.n	80116c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80116b8:	2004      	movs	r0, #4
 80116ba:	f7f6 fd75 	bl	80081a8 <memp_malloc>
 80116be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80116c6:	2300      	movs	r3, #0
 80116c8:	e016      	b.n	80116f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80116ca:	2220      	movs	r2, #32
 80116cc:	2100      	movs	r1, #0
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f001 fb63 	bl	8012d9a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	220f      	movs	r2, #15
 80116d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80116da:	4b09      	ldr	r3, [pc, #36]	@ (8011700 <ip_reass_enqueue_new_datagram+0x70>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80116e2:	4a07      	ldr	r2, [pc, #28]	@ (8011700 <ip_reass_enqueue_new_datagram+0x70>)
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	3308      	adds	r3, #8
 80116ec:	2214      	movs	r2, #20
 80116ee:	6879      	ldr	r1, [r7, #4]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f001 fc3c 	bl	8012f6e <memcpy>
  return ipr;
 80116f6:	68fb      	ldr	r3, [r7, #12]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}
 8011700:	20007848 	.word	0x20007848

08011704 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801170e:	4b10      	ldr	r3, [pc, #64]	@ (8011750 <ip_reass_dequeue_datagram+0x4c>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	429a      	cmp	r2, r3
 8011716:	d104      	bne.n	8011722 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	4a0c      	ldr	r2, [pc, #48]	@ (8011750 <ip_reass_dequeue_datagram+0x4c>)
 801171e:	6013      	str	r3, [r2, #0]
 8011720:	e00d      	b.n	801173e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <ip_reass_dequeue_datagram+0x32>
 8011728:	4b0a      	ldr	r3, [pc, #40]	@ (8011754 <ip_reass_dequeue_datagram+0x50>)
 801172a:	f240 1245 	movw	r2, #325	@ 0x145
 801172e:	490a      	ldr	r1, [pc, #40]	@ (8011758 <ip_reass_dequeue_datagram+0x54>)
 8011730:	480a      	ldr	r0, [pc, #40]	@ (801175c <ip_reass_dequeue_datagram+0x58>)
 8011732:	f001 facd 	bl	8012cd0 <iprintf>
    prev->next = ipr->next;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801173e:	6879      	ldr	r1, [r7, #4]
 8011740:	2004      	movs	r0, #4
 8011742:	f7f6 fd83 	bl	800824c <memp_free>
}
 8011746:	bf00      	nop
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	20007848 	.word	0x20007848
 8011754:	08016610 	.word	0x08016610
 8011758:	080166d8 	.word	0x080166d8
 801175c:	08016658 	.word	0x08016658

08011760 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b08c      	sub	sp, #48	@ 0x30
 8011764:	af00      	add	r7, sp, #0
 8011766:	60f8      	str	r0, [r7, #12]
 8011768:	60b9      	str	r1, [r7, #8]
 801176a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801176c:	2300      	movs	r3, #0
 801176e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8011770:	2301      	movs	r3, #1
 8011772:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	685b      	ldr	r3, [r3, #4]
 8011778:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801177a:	69fb      	ldr	r3, [r7, #28]
 801177c:	885b      	ldrh	r3, [r3, #2]
 801177e:	b29b      	uxth	r3, r3
 8011780:	4618      	mov	r0, r3
 8011782:	f7f5 feb9 	bl	80074f8 <lwip_htons>
 8011786:	4603      	mov	r3, r0
 8011788:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801178a:	69fb      	ldr	r3, [r7, #28]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	f003 030f 	and.w	r3, r3, #15
 8011792:	b2db      	uxtb	r3, r3
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011798:	7e7b      	ldrb	r3, [r7, #25]
 801179a:	b29b      	uxth	r3, r3
 801179c:	8b7a      	ldrh	r2, [r7, #26]
 801179e:	429a      	cmp	r2, r3
 80117a0:	d202      	bcs.n	80117a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117a6:	e135      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80117a8:	7e7b      	ldrb	r3, [r7, #25]
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	8b7a      	ldrh	r2, [r7, #26]
 80117ae:	1ad3      	subs	r3, r2, r3
 80117b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	88db      	ldrh	r3, [r3, #6]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f5 fe9d 	bl	80074f8 <lwip_htons>
 80117be:	4603      	mov	r3, r0
 80117c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	00db      	lsls	r3, r3, #3
 80117c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80117ca:	68bb      	ldr	r3, [r7, #8]
 80117cc:	685b      	ldr	r3, [r3, #4]
 80117ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80117d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117d2:	2200      	movs	r2, #0
 80117d4:	701a      	strb	r2, [r3, #0]
 80117d6:	2200      	movs	r2, #0
 80117d8:	705a      	strb	r2, [r3, #1]
 80117da:	2200      	movs	r2, #0
 80117dc:	709a      	strb	r2, [r3, #2]
 80117de:	2200      	movs	r2, #0
 80117e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80117e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e4:	8afa      	ldrh	r2, [r7, #22]
 80117e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80117e8:	8afa      	ldrh	r2, [r7, #22]
 80117ea:	8b7b      	ldrh	r3, [r7, #26]
 80117ec:	4413      	add	r3, r2
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80117f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f6:	88db      	ldrh	r3, [r3, #6]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	8afa      	ldrh	r2, [r7, #22]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d902      	bls.n	8011806 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011800:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011804:	e106      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	627b      	str	r3, [r7, #36]	@ 0x24
 801180c:	e068      	b.n	80118e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011816:	889b      	ldrh	r3, [r3, #4]
 8011818:	b29a      	uxth	r2, r3
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	889b      	ldrh	r3, [r3, #4]
 801181e:	b29b      	uxth	r3, r3
 8011820:	429a      	cmp	r2, r3
 8011822:	d235      	bcs.n	8011890 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011828:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801182a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801182c:	2b00      	cmp	r3, #0
 801182e:	d020      	beq.n	8011872 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8011830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011832:	889b      	ldrh	r3, [r3, #4]
 8011834:	b29a      	uxth	r2, r3
 8011836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011838:	88db      	ldrh	r3, [r3, #6]
 801183a:	b29b      	uxth	r3, r3
 801183c:	429a      	cmp	r2, r3
 801183e:	d307      	bcc.n	8011850 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8011840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011842:	88db      	ldrh	r3, [r3, #6]
 8011844:	b29a      	uxth	r2, r3
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	889b      	ldrh	r3, [r3, #4]
 801184a:	b29b      	uxth	r3, r3
 801184c:	429a      	cmp	r2, r3
 801184e:	d902      	bls.n	8011856 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011850:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011854:	e0de      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011858:	68ba      	ldr	r2, [r7, #8]
 801185a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801185e:	88db      	ldrh	r3, [r3, #6]
 8011860:	b29a      	uxth	r2, r3
 8011862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011864:	889b      	ldrh	r3, [r3, #4]
 8011866:	b29b      	uxth	r3, r3
 8011868:	429a      	cmp	r2, r3
 801186a:	d03d      	beq.n	80118e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801186c:	2300      	movs	r3, #0
 801186e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8011870:	e03a      	b.n	80118e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8011872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011874:	88db      	ldrh	r3, [r3, #6]
 8011876:	b29a      	uxth	r2, r3
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	889b      	ldrh	r3, [r3, #4]
 801187c:	b29b      	uxth	r3, r3
 801187e:	429a      	cmp	r2, r3
 8011880:	d902      	bls.n	8011888 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8011882:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011886:	e0c5      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	68ba      	ldr	r2, [r7, #8]
 801188c:	605a      	str	r2, [r3, #4]
      break;
 801188e:	e02b      	b.n	80118e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8011890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011892:	889b      	ldrh	r3, [r3, #4]
 8011894:	b29a      	uxth	r2, r3
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	889b      	ldrh	r3, [r3, #4]
 801189a:	b29b      	uxth	r3, r3
 801189c:	429a      	cmp	r2, r3
 801189e:	d102      	bne.n	80118a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118a4:	e0b6      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80118a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a8:	889b      	ldrh	r3, [r3, #4]
 80118aa:	b29a      	uxth	r2, r3
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	88db      	ldrh	r3, [r3, #6]
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d202      	bcs.n	80118bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118ba:	e0ab      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80118bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d009      	beq.n	80118d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80118c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c4:	88db      	ldrh	r3, [r3, #6]
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	693b      	ldr	r3, [r7, #16]
 80118ca:	889b      	ldrh	r3, [r3, #4]
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d001      	beq.n	80118d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118d2:	2300      	movs	r3, #0
 80118d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80118d6:	693b      	ldr	r3, [r7, #16]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80118dc:	693b      	ldr	r3, [r7, #16]
 80118de:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80118e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d193      	bne.n	801180e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80118e6:	e000      	b.n	80118ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80118e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80118ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d12d      	bne.n	801194c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80118f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d01c      	beq.n	8011930 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80118f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f8:	88db      	ldrh	r3, [r3, #6]
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fe:	889b      	ldrh	r3, [r3, #4]
 8011900:	b29b      	uxth	r3, r3
 8011902:	429a      	cmp	r2, r3
 8011904:	d906      	bls.n	8011914 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011906:	4b45      	ldr	r3, [pc, #276]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011908:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801190c:	4944      	ldr	r1, [pc, #272]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801190e:	4845      	ldr	r0, [pc, #276]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011910:	f001 f9de 	bl	8012cd0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191c:	88db      	ldrh	r3, [r3, #6]
 801191e:	b29a      	uxth	r2, r3
 8011920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011922:	889b      	ldrh	r3, [r3, #4]
 8011924:	b29b      	uxth	r3, r3
 8011926:	429a      	cmp	r2, r3
 8011928:	d010      	beq.n	801194c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	623b      	str	r3, [r7, #32]
 801192e:	e00d      	b.n	801194c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d006      	beq.n	8011946 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011938:	4b38      	ldr	r3, [pc, #224]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801193a:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801193e:	493a      	ldr	r1, [pc, #232]	@ (8011a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8011940:	4838      	ldr	r0, [pc, #224]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011942:	f001 f9c5 	bl	8012cd0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d105      	bne.n	801195e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	7f9b      	ldrb	r3, [r3, #30]
 8011956:	f003 0301 	and.w	r3, r3, #1
 801195a:	2b00      	cmp	r3, #0
 801195c:	d059      	beq.n	8011a12 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d04f      	beq.n	8011a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d006      	beq.n	801197a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	685b      	ldr	r3, [r3, #4]
 8011972:	889b      	ldrh	r3, [r3, #4]
 8011974:	b29b      	uxth	r3, r3
 8011976:	2b00      	cmp	r3, #0
 8011978:	d002      	beq.n	8011980 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	623b      	str	r3, [r7, #32]
 801197e:	e041      	b.n	8011a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8011980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011982:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801198a:	e012      	b.n	80119b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8011992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011994:	88db      	ldrh	r3, [r3, #6]
 8011996:	b29a      	uxth	r2, r3
 8011998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801199a:	889b      	ldrh	r3, [r3, #4]
 801199c:	b29b      	uxth	r3, r3
 801199e:	429a      	cmp	r2, r3
 80119a0:	d002      	beq.n	80119a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80119a2:	2300      	movs	r3, #0
 80119a4:	623b      	str	r3, [r7, #32]
            break;
 80119a6:	e007      	b.n	80119b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80119a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119aa:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80119ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80119b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1e9      	bne.n	801198c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80119b8:	6a3b      	ldr	r3, [r7, #32]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d022      	beq.n	8011a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d106      	bne.n	80119d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80119c6:	4b15      	ldr	r3, [pc, #84]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80119cc:	4917      	ldr	r1, [pc, #92]	@ (8011a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119ce:	4815      	ldr	r0, [pc, #84]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119d0:	f001 f97e 	bl	8012cd0 <iprintf>
          LWIP_ASSERT("sanity check",
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	685b      	ldr	r3, [r3, #4]
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119dc:	429a      	cmp	r2, r3
 80119de:	d106      	bne.n	80119ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80119e0:	4b0e      	ldr	r3, [pc, #56]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119e2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80119e6:	4911      	ldr	r1, [pc, #68]	@ (8011a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119e8:	480e      	ldr	r0, [pc, #56]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119ea:	f001 f971 	bl	8012cd0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80119ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d006      	beq.n	8011a04 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80119f6:	4b09      	ldr	r3, [pc, #36]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119f8:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80119fc:	490c      	ldr	r1, [pc, #48]	@ (8011a30 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80119fe:	4809      	ldr	r0, [pc, #36]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8011a00:	f001 f966 	bl	8012cd0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011a04:	6a3b      	ldr	r3, [r7, #32]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	bf14      	ite	ne
 8011a0a:	2301      	movne	r3, #1
 8011a0c:	2300      	moveq	r3, #0
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	e000      	b.n	8011a14 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3730      	adds	r7, #48	@ 0x30
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	08016610 	.word	0x08016610
 8011a20:	080166f4 	.word	0x080166f4
 8011a24:	08016658 	.word	0x08016658
 8011a28:	08016714 	.word	0x08016714
 8011a2c:	0801674c 	.word	0x0801674c
 8011a30:	0801675c 	.word	0x0801675c

08011a34 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b08e      	sub	sp, #56	@ 0x38
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	f003 030f 	and.w	r3, r3, #15
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	2b14      	cmp	r3, #20
 8011a52:	f040 8179 	bne.w	8011d48 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a58:	88db      	ldrh	r3, [r3, #6]
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7f5 fd4b 	bl	80074f8 <lwip_htons>
 8011a62:	4603      	mov	r3, r0
 8011a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	00db      	lsls	r3, r3, #3
 8011a6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a70:	885b      	ldrh	r3, [r3, #2]
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7f5 fd3f 	bl	80074f8 <lwip_htons>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	f003 030f 	and.w	r3, r3, #15
 8011a86:	b2db      	uxtb	r3, r3
 8011a88:	009b      	lsls	r3, r3, #2
 8011a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a92:	b29b      	uxth	r3, r3
 8011a94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a96:	429a      	cmp	r2, r3
 8011a98:	f0c0 8158 	bcc.w	8011d4c <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011a9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011aa4:	1ad3      	subs	r3, r2, r3
 8011aa6:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f7f7 fa95 	bl	8008fd8 <pbuf_clen>
 8011aae:	4603      	mov	r3, r0
 8011ab0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011ab2:	4b90      	ldr	r3, [pc, #576]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011ab4:	881b      	ldrh	r3, [r3, #0]
 8011ab6:	461a      	mov	r2, r3
 8011ab8:	8c3b      	ldrh	r3, [r7, #32]
 8011aba:	4413      	add	r3, r2
 8011abc:	2b0a      	cmp	r3, #10
 8011abe:	dd10      	ble.n	8011ae2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011ac0:	8c3b      	ldrh	r3, [r7, #32]
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ac6:	f7ff fd81 	bl	80115cc <ip_reass_remove_oldest_datagram>
 8011aca:	4603      	mov	r3, r0
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f000 813f 	beq.w	8011d50 <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011ad2:	4b88      	ldr	r3, [pc, #544]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	8c3b      	ldrh	r3, [r7, #32]
 8011ada:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011adc:	2b0a      	cmp	r3, #10
 8011ade:	f300 8137 	bgt.w	8011d50 <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ae2:	4b85      	ldr	r3, [pc, #532]	@ (8011cf8 <ip4_reass+0x2c4>)
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ae8:	e015      	b.n	8011b16 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011aec:	695a      	ldr	r2, [r3, #20]
 8011aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d10c      	bne.n	8011b10 <ip4_reass+0xdc>
 8011af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af8:	699a      	ldr	r2, [r3, #24]
 8011afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011afc:	691b      	ldr	r3, [r3, #16]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d106      	bne.n	8011b10 <ip4_reass+0xdc>
 8011b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b04:	899a      	ldrh	r2, [r3, #12]
 8011b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b08:	889b      	ldrh	r3, [r3, #4]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d006      	beq.n	8011b1e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1e6      	bne.n	8011aea <ip4_reass+0xb6>
 8011b1c:	e000      	b.n	8011b20 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011b1e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d109      	bne.n	8011b3a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011b26:	8c3b      	ldrh	r3, [r7, #32]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b2c:	f7ff fdb0 	bl	8011690 <ip_reass_enqueue_new_datagram>
 8011b30:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d11c      	bne.n	8011b72 <ip4_reass+0x13e>
      goto nullreturn;
 8011b38:	e10d      	b.n	8011d56 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b3c:	88db      	ldrh	r3, [r3, #6]
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	4618      	mov	r0, r3
 8011b42:	f7f5 fcd9 	bl	80074f8 <lwip_htons>
 8011b46:	4603      	mov	r3, r0
 8011b48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d110      	bne.n	8011b72 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b52:	89db      	ldrh	r3, [r3, #14]
 8011b54:	4618      	mov	r0, r3
 8011b56:	f7f5 fccf 	bl	80074f8 <lwip_htons>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d006      	beq.n	8011b72 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b66:	3308      	adds	r3, #8
 8011b68:	2214      	movs	r2, #20
 8011b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f001 f9fe 	bl	8012f6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b74:	88db      	ldrh	r3, [r3, #6]
 8011b76:	b29b      	uxth	r3, r3
 8011b78:	f003 0320 	and.w	r3, r3, #32
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	bf0c      	ite	eq
 8011b80:	2301      	moveq	r3, #1
 8011b82:	2300      	movne	r3, #0
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00e      	beq.n	8011bac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011b8e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011b90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b92:	4413      	add	r3, r2
 8011b94:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011b96:	8b7a      	ldrh	r2, [r7, #26]
 8011b98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	f0c0 80a8 	bcc.w	8011cf0 <ip4_reass+0x2bc>
 8011ba0:	8b7b      	ldrh	r3, [r7, #26]
 8011ba2:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	f200 80a2 	bhi.w	8011cf0 <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011bac:	69fa      	ldr	r2, [r7, #28]
 8011bae:	6879      	ldr	r1, [r7, #4]
 8011bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bb2:	f7ff fdd5 	bl	8011760 <ip_reass_chain_frag_into_datagram_and_validate>
 8011bb6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011bbe:	f000 80a3 	beq.w	8011d08 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011bc4:	881a      	ldrh	r2, [r3, #0]
 8011bc6:	8c3b      	ldrh	r3, [r7, #32]
 8011bc8:	4413      	add	r3, r2
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	4b49      	ldr	r3, [pc, #292]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011bce:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00d      	beq.n	8011bf2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011bd6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011bd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011bda:	4413      	add	r3, r2
 8011bdc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be0:	8a7a      	ldrh	r2, [r7, #18]
 8011be2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be6:	7f9b      	ldrb	r3, [r3, #30]
 8011be8:	f043 0301 	orr.w	r3, r3, #1
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	2b01      	cmp	r3, #1
 8011bf6:	d179      	bne.n	8011cec <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfa:	8b9b      	ldrh	r3, [r3, #28]
 8011bfc:	3314      	adds	r3, #20
 8011bfe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c14:	3308      	adds	r3, #8
 8011c16:	2214      	movs	r2, #20
 8011c18:	4619      	mov	r1, r3
 8011c1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c1c:	f001 f9a7 	bl	8012f6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c20:	8a3b      	ldrh	r3, [r7, #16]
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7f5 fc68 	bl	80074f8 <lwip_htons>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c32:	2200      	movs	r2, #0
 8011c34:	719a      	strb	r2, [r3, #6]
 8011c36:	2200      	movs	r2, #0
 8011c38:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	729a      	strb	r2, [r3, #10]
 8011c40:	2200      	movs	r2, #0
 8011c42:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8011c44:	2114      	movs	r1, #20
 8011c46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c48:	f7f5 fdd1 	bl	80077ee <inet_chksum>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	461a      	mov	r2, r3
 8011c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c52:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c56:	685b      	ldr	r3, [r3, #4]
 8011c58:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011c5a:	e00d      	b.n	8011c78 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8011c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011c62:	2114      	movs	r1, #20
 8011c64:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011c66:	f7f7 f8a3 	bl	8008db0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011c6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f7f7 f9f1 	bl	8009054 <pbuf_cat>
      r = iprh->next_pbuf;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8011c78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1ee      	bne.n	8011c5c <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf8 <ip4_reass+0x2c4>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d102      	bne.n	8011c8e <ip4_reass+0x25a>
      ipr_prev = NULL;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c8c:	e010      	b.n	8011cb0 <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf8 <ip4_reass+0x2c4>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c94:	e007      	b.n	8011ca6 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8011c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d006      	beq.n	8011cae <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1f4      	bne.n	8011c96 <ip4_reass+0x262>
 8011cac:	e000      	b.n	8011cb0 <ip4_reass+0x27c>
          break;
 8011cae:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011cb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cb4:	f7ff fd26 	bl	8011704 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7f7 f98d 	bl	8008fd8 <pbuf_clen>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011cc4:	881b      	ldrh	r3, [r3, #0]
 8011cc6:	8c3a      	ldrh	r2, [r7, #32]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d906      	bls.n	8011cda <ip4_reass+0x2a6>
 8011ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8011cfc <ip4_reass+0x2c8>)
 8011cce:	f240 229b 	movw	r2, #667	@ 0x29b
 8011cd2:	490b      	ldr	r1, [pc, #44]	@ (8011d00 <ip4_reass+0x2cc>)
 8011cd4:	480b      	ldr	r0, [pc, #44]	@ (8011d04 <ip4_reass+0x2d0>)
 8011cd6:	f000 fffb 	bl	8012cd0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011cda:	4b06      	ldr	r3, [pc, #24]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011cdc:	881a      	ldrh	r2, [r3, #0]
 8011cde:	8c3b      	ldrh	r3, [r7, #32]
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	b29a      	uxth	r2, r3
 8011ce4:	4b03      	ldr	r3, [pc, #12]	@ (8011cf4 <ip4_reass+0x2c0>)
 8011ce6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	e038      	b.n	8011d5e <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011cec:	2300      	movs	r3, #0
 8011cee:	e036      	b.n	8011d5e <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8011cf0:	bf00      	nop
 8011cf2:	e00a      	b.n	8011d0a <ip4_reass+0x2d6>
 8011cf4:	2000784c 	.word	0x2000784c
 8011cf8:	20007848 	.word	0x20007848
 8011cfc:	08016610 	.word	0x08016610
 8011d00:	08016780 	.word	0x08016780
 8011d04:	08016658 	.word	0x08016658
    goto nullreturn_ipr;
 8011d08:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d106      	bne.n	8011d1e <ip4_reass+0x2ea>
 8011d10:	4b15      	ldr	r3, [pc, #84]	@ (8011d68 <ip4_reass+0x334>)
 8011d12:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8011d16:	4915      	ldr	r1, [pc, #84]	@ (8011d6c <ip4_reass+0x338>)
 8011d18:	4815      	ldr	r0, [pc, #84]	@ (8011d70 <ip4_reass+0x33c>)
 8011d1a:	f000 ffd9 	bl	8012cd0 <iprintf>
  if (ipr->p == NULL) {
 8011d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d116      	bne.n	8011d54 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011d26:	4b13      	ldr	r3, [pc, #76]	@ (8011d74 <ip4_reass+0x340>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d006      	beq.n	8011d3e <ip4_reass+0x30a>
 8011d30:	4b0d      	ldr	r3, [pc, #52]	@ (8011d68 <ip4_reass+0x334>)
 8011d32:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011d36:	4910      	ldr	r1, [pc, #64]	@ (8011d78 <ip4_reass+0x344>)
 8011d38:	480d      	ldr	r0, [pc, #52]	@ (8011d70 <ip4_reass+0x33c>)
 8011d3a:	f000 ffc9 	bl	8012cd0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d3e:	2100      	movs	r1, #0
 8011d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d42:	f7ff fcdf 	bl	8011704 <ip_reass_dequeue_datagram>
 8011d46:	e006      	b.n	8011d56 <ip4_reass+0x322>
    goto nullreturn;
 8011d48:	bf00      	nop
 8011d4a:	e004      	b.n	8011d56 <ip4_reass+0x322>
    goto nullreturn;
 8011d4c:	bf00      	nop
 8011d4e:	e002      	b.n	8011d56 <ip4_reass+0x322>
      goto nullreturn;
 8011d50:	bf00      	nop
 8011d52:	e000      	b.n	8011d56 <ip4_reass+0x322>
  }

nullreturn:
 8011d54:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7f7 f8b0 	bl	8008ebc <pbuf_free>
  return NULL;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3738      	adds	r7, #56	@ 0x38
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	08016610 	.word	0x08016610
 8011d6c:	0801679c 	.word	0x0801679c
 8011d70:	08016658 	.word	0x08016658
 8011d74:	20007848 	.word	0x20007848
 8011d78:	080167a8 	.word	0x080167a8

08011d7c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011d80:	2005      	movs	r0, #5
 8011d82:	f7f6 fa11 	bl	80081a8 <memp_malloc>
 8011d86:	4603      	mov	r3, r0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
 8011d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d106      	bne.n	8011da8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011d9a:	4b07      	ldr	r3, [pc, #28]	@ (8011db8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011d9c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011da0:	4906      	ldr	r1, [pc, #24]	@ (8011dbc <ip_frag_free_pbuf_custom_ref+0x30>)
 8011da2:	4807      	ldr	r0, [pc, #28]	@ (8011dc0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8011da4:	f000 ff94 	bl	8012cd0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011da8:	6879      	ldr	r1, [r7, #4]
 8011daa:	2005      	movs	r0, #5
 8011dac:	f7f6 fa4e 	bl	800824c <memp_free>
}
 8011db0:	bf00      	nop
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	08016610 	.word	0x08016610
 8011dbc:	080167c8 	.word	0x080167c8
 8011dc0:	08016658 	.word	0x08016658

08011dc4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b084      	sub	sp, #16
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d106      	bne.n	8011de4 <ipfrag_free_pbuf_custom+0x20>
 8011dd6:	4b11      	ldr	r3, [pc, #68]	@ (8011e1c <ipfrag_free_pbuf_custom+0x58>)
 8011dd8:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011ddc:	4910      	ldr	r1, [pc, #64]	@ (8011e20 <ipfrag_free_pbuf_custom+0x5c>)
 8011dde:	4811      	ldr	r0, [pc, #68]	@ (8011e24 <ipfrag_free_pbuf_custom+0x60>)
 8011de0:	f000 ff76 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011de4:	68fa      	ldr	r2, [r7, #12]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d006      	beq.n	8011dfa <ipfrag_free_pbuf_custom+0x36>
 8011dec:	4b0b      	ldr	r3, [pc, #44]	@ (8011e1c <ipfrag_free_pbuf_custom+0x58>)
 8011dee:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011df2:	490d      	ldr	r1, [pc, #52]	@ (8011e28 <ipfrag_free_pbuf_custom+0x64>)
 8011df4:	480b      	ldr	r0, [pc, #44]	@ (8011e24 <ipfrag_free_pbuf_custom+0x60>)
 8011df6:	f000 ff6b 	bl	8012cd0 <iprintf>
  if (pcr->original != NULL) {
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	695b      	ldr	r3, [r3, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d004      	beq.n	8011e0c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7f7 f858 	bl	8008ebc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011e0c:	68f8      	ldr	r0, [r7, #12]
 8011e0e:	f7ff ffbd 	bl	8011d8c <ip_frag_free_pbuf_custom_ref>
}
 8011e12:	bf00      	nop
 8011e14:	3710      	adds	r7, #16
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	08016610 	.word	0x08016610
 8011e20:	080167d4 	.word	0x080167d4
 8011e24:	08016658 	.word	0x08016658
 8011e28:	080167e0 	.word	0x080167e0

08011e2c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b094      	sub	sp, #80	@ 0x50
 8011e30:	af02      	add	r7, sp, #8
 8011e32:	60f8      	str	r0, [r7, #12]
 8011e34:	60b9      	str	r1, [r7, #8]
 8011e36:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011e38:	2300      	movs	r3, #0
 8011e3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011e3e:	68bb      	ldr	r3, [r7, #8]
 8011e40:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011e42:	3b14      	subs	r3, #20
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	da00      	bge.n	8011e4a <ip4_frag+0x1e>
 8011e48:	3307      	adds	r3, #7
 8011e4a:	10db      	asrs	r3, r3, #3
 8011e4c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e4e:	2314      	movs	r3, #20
 8011e50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8011e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e5a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	f003 030f 	and.w	r3, r3, #15
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	b2db      	uxtb	r3, r3
 8011e6a:	2b14      	cmp	r3, #20
 8011e6c:	d002      	beq.n	8011e74 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011e6e:	f06f 0305 	mvn.w	r3, #5
 8011e72:	e118      	b.n	80120a6 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	895b      	ldrh	r3, [r3, #10]
 8011e78:	2b13      	cmp	r3, #19
 8011e7a:	d809      	bhi.n	8011e90 <ip4_frag+0x64>
 8011e7c:	4b8c      	ldr	r3, [pc, #560]	@ (80120b0 <ip4_frag+0x284>)
 8011e7e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8011e82:	498c      	ldr	r1, [pc, #560]	@ (80120b4 <ip4_frag+0x288>)
 8011e84:	488c      	ldr	r0, [pc, #560]	@ (80120b8 <ip4_frag+0x28c>)
 8011e86:	f000 ff23 	bl	8012cd0 <iprintf>
 8011e8a:	f06f 0305 	mvn.w	r3, #5
 8011e8e:	e10a      	b.n	80120a6 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e92:	88db      	ldrh	r3, [r3, #6]
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7f5 fb2e 	bl	80074f8 <lwip_htons>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011ea0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ea2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ea6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011eaa:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011eac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	891b      	ldrh	r3, [r3, #8]
 8011eb6:	3b14      	subs	r3, #20
 8011eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011ebc:	e0e9      	b.n	8012092 <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011ebe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ec0:	00db      	lsls	r3, r3, #3
 8011ec2:	b29b      	uxth	r3, r3
 8011ec4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ec8:	4293      	cmp	r3, r2
 8011eca:	bf28      	it	cs
 8011ecc:	4613      	movcs	r3, r2
 8011ece:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011ed0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011ed4:	2114      	movs	r1, #20
 8011ed6:	200e      	movs	r0, #14
 8011ed8:	f7f6 fd0c 	bl	80088f4 <pbuf_alloc>
 8011edc:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	f000 80dd 	beq.w	80120a0 <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee8:	895b      	ldrh	r3, [r3, #10]
 8011eea:	2b13      	cmp	r3, #19
 8011eec:	d806      	bhi.n	8011efc <ip4_frag+0xd0>
 8011eee:	4b70      	ldr	r3, [pc, #448]	@ (80120b0 <ip4_frag+0x284>)
 8011ef0:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011ef4:	4971      	ldr	r1, [pc, #452]	@ (80120bc <ip4_frag+0x290>)
 8011ef6:	4870      	ldr	r0, [pc, #448]	@ (80120b8 <ip4_frag+0x28c>)
 8011ef8:	f000 feea 	bl	8012cd0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efe:	685b      	ldr	r3, [r3, #4]
 8011f00:	2214      	movs	r2, #20
 8011f02:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011f04:	4618      	mov	r0, r3
 8011f06:	f001 f832 	bl	8012f6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011f10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f12:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011f16:	e064      	b.n	8011fe2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	895a      	ldrh	r2, [r3, #10]
 8011f1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f1e:	1ad3      	subs	r3, r2, r3
 8011f20:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	895b      	ldrh	r3, [r3, #10]
 8011f26:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	d906      	bls.n	8011f3a <ip4_frag+0x10e>
 8011f2c:	4b60      	ldr	r3, [pc, #384]	@ (80120b0 <ip4_frag+0x284>)
 8011f2e:	f240 322d 	movw	r2, #813	@ 0x32d
 8011f32:	4963      	ldr	r1, [pc, #396]	@ (80120c0 <ip4_frag+0x294>)
 8011f34:	4860      	ldr	r0, [pc, #384]	@ (80120b8 <ip4_frag+0x28c>)
 8011f36:	f000 fecb 	bl	8012cd0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011f3a:	8bfa      	ldrh	r2, [r7, #30]
 8011f3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011f40:	4293      	cmp	r3, r2
 8011f42:	bf28      	it	cs
 8011f44:	4613      	movcs	r3, r2
 8011f46:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d105      	bne.n	8011f5e <ip4_frag+0x132>
        poff = 0;
 8011f52:	2300      	movs	r3, #0
 8011f54:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	60fb      	str	r3, [r7, #12]
        continue;
 8011f5c:	e041      	b.n	8011fe2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011f5e:	f7ff ff0d 	bl	8011d7c <ip_frag_alloc_pbuf_custom_ref>
 8011f62:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011f64:	69bb      	ldr	r3, [r7, #24]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d103      	bne.n	8011f72 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011f6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f6c:	f7f6 ffa6 	bl	8008ebc <pbuf_free>
        goto memerr;
 8011f70:	e097      	b.n	80120a2 <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f72:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f7a:	4413      	add	r3, r2
 8011f7c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8011f80:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011f84:	9201      	str	r2, [sp, #4]
 8011f86:	9300      	str	r3, [sp, #0]
 8011f88:	4603      	mov	r3, r0
 8011f8a:	2241      	movs	r2, #65	@ 0x41
 8011f8c:	2000      	movs	r0, #0
 8011f8e:	f7f6 fddb 	bl	8008b48 <pbuf_alloced_custom>
 8011f92:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d106      	bne.n	8011fa8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011f9a:	69b8      	ldr	r0, [r7, #24]
 8011f9c:	f7ff fef6 	bl	8011d8c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011fa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fa2:	f7f6 ff8b 	bl	8008ebc <pbuf_free>
        goto memerr;
 8011fa6:	e07c      	b.n	80120a2 <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f7f7 f82b 	bl	8009004 <pbuf_ref>
      pcr->original = p;
 8011fae:	69bb      	ldr	r3, [r7, #24]
 8011fb0:	68fa      	ldr	r2, [r7, #12]
 8011fb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	4a43      	ldr	r2, [pc, #268]	@ (80120c4 <ip4_frag+0x298>)
 8011fb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011fba:	6979      	ldr	r1, [r7, #20]
 8011fbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fbe:	f7f7 f849 	bl	8009054 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011fc2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011fc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011fca:	1ad3      	subs	r3, r2, r3
 8011fcc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011fd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <ip4_frag+0x1b6>
        poff = 0;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011fe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d196      	bne.n	8011f18 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011fea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011fec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011ff0:	4413      	add	r3, r2
 8011ff2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ff8:	f1a3 0213 	sub.w	r2, r3, #19
 8011ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012000:	429a      	cmp	r2, r3
 8012002:	bfcc      	ite	gt
 8012004:	2301      	movgt	r3, #1
 8012006:	2300      	movle	r3, #0
 8012008:	b2db      	uxtb	r3, r3
 801200a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801200c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012014:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012016:	6a3b      	ldr	r3, [r7, #32]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d002      	beq.n	8012022 <ip4_frag+0x1f6>
 801201c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801201e:	2b00      	cmp	r3, #0
 8012020:	d003      	beq.n	801202a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8012022:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012028:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801202a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801202c:	4618      	mov	r0, r3
 801202e:	f7f5 fa63 	bl	80074f8 <lwip_htons>
 8012032:	4603      	mov	r3, r0
 8012034:	461a      	mov	r2, r3
 8012036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012038:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801203a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801203c:	3314      	adds	r3, #20
 801203e:	b29b      	uxth	r3, r3
 8012040:	4618      	mov	r0, r3
 8012042:	f7f5 fa59 	bl	80074f8 <lwip_htons>
 8012046:	4603      	mov	r3, r0
 8012048:	461a      	mov	r2, r3
 801204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801204c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801204e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012050:	2200      	movs	r2, #0
 8012052:	729a      	strb	r2, [r3, #10]
 8012054:	2200      	movs	r2, #0
 8012056:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8012058:	2114      	movs	r1, #20
 801205a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801205c:	f7f5 fbc7 	bl	80077ee <inet_chksum>
 8012060:	4603      	mov	r3, r0
 8012062:	461a      	mov	r2, r3
 8012064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012066:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	695b      	ldr	r3, [r3, #20]
 801206c:	687a      	ldr	r2, [r7, #4]
 801206e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012070:	68b8      	ldr	r0, [r7, #8]
 8012072:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012074:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012076:	f7f6 ff21 	bl	8008ebc <pbuf_free>
    left = (u16_t)(left - fragsize);
 801207a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801207e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012086:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801208a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801208c:	4413      	add	r3, r2
 801208e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8012092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012096:	2b00      	cmp	r3, #0
 8012098:	f47f af11 	bne.w	8011ebe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801209c:	2300      	movs	r3, #0
 801209e:	e002      	b.n	80120a6 <ip4_frag+0x27a>
      goto memerr;
 80120a0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80120a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80120a6:	4618      	mov	r0, r3
 80120a8:	3748      	adds	r7, #72	@ 0x48
 80120aa:	46bd      	mov	sp, r7
 80120ac:	bd80      	pop	{r7, pc}
 80120ae:	bf00      	nop
 80120b0:	08016610 	.word	0x08016610
 80120b4:	080167ec 	.word	0x080167ec
 80120b8:	08016658 	.word	0x08016658
 80120bc:	08016808 	.word	0x08016808
 80120c0:	08016828 	.word	0x08016828
 80120c4:	08011dc5 	.word	0x08011dc5

080120c8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b086      	sub	sp, #24
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80120d2:	230e      	movs	r3, #14
 80120d4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	895b      	ldrh	r3, [r3, #10]
 80120da:	2b0e      	cmp	r3, #14
 80120dc:	d96e      	bls.n	80121bc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	7bdb      	ldrb	r3, [r3, #15]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d106      	bne.n	80120f4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80120e6:	683b      	ldr	r3, [r7, #0]
 80120e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120ec:	3301      	adds	r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	7b1a      	ldrb	r2, [r3, #12]
 80120fe:	7b5b      	ldrb	r3, [r3, #13]
 8012100:	021b      	lsls	r3, r3, #8
 8012102:	4313      	orrs	r3, r2
 8012104:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	f003 0301 	and.w	r3, r3, #1
 801210e:	2b00      	cmp	r3, #0
 8012110:	d023      	beq.n	801215a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	781b      	ldrb	r3, [r3, #0]
 8012116:	2b01      	cmp	r3, #1
 8012118:	d10f      	bne.n	801213a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	785b      	ldrb	r3, [r3, #1]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d11b      	bne.n	801215a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012126:	2b5e      	cmp	r3, #94	@ 0x5e
 8012128:	d117      	bne.n	801215a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	7b5b      	ldrb	r3, [r3, #13]
 801212e:	f043 0310 	orr.w	r3, r3, #16
 8012132:	b2da      	uxtb	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	735a      	strb	r2, [r3, #13]
 8012138:	e00f      	b.n	801215a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	2206      	movs	r2, #6
 801213e:	4928      	ldr	r1, [pc, #160]	@ (80121e0 <ethernet_input+0x118>)
 8012140:	4618      	mov	r0, r3
 8012142:	f000 fe1a 	bl	8012d7a <memcmp>
 8012146:	4603      	mov	r3, r0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d106      	bne.n	801215a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	7b5b      	ldrb	r3, [r3, #13]
 8012150:	f043 0308 	orr.w	r3, r3, #8
 8012154:	b2da      	uxtb	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801215a:	89fb      	ldrh	r3, [r7, #14]
 801215c:	2b08      	cmp	r3, #8
 801215e:	d003      	beq.n	8012168 <ethernet_input+0xa0>
 8012160:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012164:	d014      	beq.n	8012190 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012166:	e032      	b.n	80121ce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801216e:	f003 0308 	and.w	r3, r3, #8
 8012172:	2b00      	cmp	r3, #0
 8012174:	d024      	beq.n	80121c0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012176:	8afb      	ldrh	r3, [r7, #22]
 8012178:	4619      	mov	r1, r3
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f7f6 fe18 	bl	8008db0 <pbuf_remove_header>
 8012180:	4603      	mov	r3, r0
 8012182:	2b00      	cmp	r3, #0
 8012184:	d11e      	bne.n	80121c4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7fe fead 	bl	8010ee8 <ip4_input>
      break;
 801218e:	e013      	b.n	80121b8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012190:	683b      	ldr	r3, [r7, #0]
 8012192:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012196:	f003 0308 	and.w	r3, r3, #8
 801219a:	2b00      	cmp	r3, #0
 801219c:	d014      	beq.n	80121c8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801219e:	8afb      	ldrh	r3, [r7, #22]
 80121a0:	4619      	mov	r1, r3
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7f6 fe04 	bl	8008db0 <pbuf_remove_header>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d10e      	bne.n	80121cc <ethernet_input+0x104>
        etharp_input(p, netif);
 80121ae:	6839      	ldr	r1, [r7, #0]
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f7fe fafb 	bl	80107ac <etharp_input>
      break;
 80121b6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	e00c      	b.n	80121d6 <ethernet_input+0x10e>
    goto free_and_return;
 80121bc:	bf00      	nop
 80121be:	e006      	b.n	80121ce <ethernet_input+0x106>
        goto free_and_return;
 80121c0:	bf00      	nop
 80121c2:	e004      	b.n	80121ce <ethernet_input+0x106>
        goto free_and_return;
 80121c4:	bf00      	nop
 80121c6:	e002      	b.n	80121ce <ethernet_input+0x106>
        goto free_and_return;
 80121c8:	bf00      	nop
 80121ca:	e000      	b.n	80121ce <ethernet_input+0x106>
        goto free_and_return;
 80121cc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7f6 fe74 	bl	8008ebc <pbuf_free>
  return ERR_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3718      	adds	r7, #24
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	080178bc 	.word	0x080178bc

080121e4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b086      	sub	sp, #24
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	60f8      	str	r0, [r7, #12]
 80121ec:	60b9      	str	r1, [r7, #8]
 80121ee:	607a      	str	r2, [r7, #4]
 80121f0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80121f2:	8c3b      	ldrh	r3, [r7, #32]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f5 f97f 	bl	80074f8 <lwip_htons>
 80121fa:	4603      	mov	r3, r0
 80121fc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80121fe:	210e      	movs	r1, #14
 8012200:	68b8      	ldr	r0, [r7, #8]
 8012202:	f7f6 fdc5 	bl	8008d90 <pbuf_add_header>
 8012206:	4603      	mov	r3, r0
 8012208:	2b00      	cmp	r3, #0
 801220a:	d125      	bne.n	8012258 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	8afa      	ldrh	r2, [r7, #22]
 8012216:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	2206      	movs	r2, #6
 801221c:	6839      	ldr	r1, [r7, #0]
 801221e:	4618      	mov	r0, r3
 8012220:	f000 fea5 	bl	8012f6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	3306      	adds	r3, #6
 8012228:	2206      	movs	r2, #6
 801222a:	6879      	ldr	r1, [r7, #4]
 801222c:	4618      	mov	r0, r3
 801222e:	f000 fe9e 	bl	8012f6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012238:	2b06      	cmp	r3, #6
 801223a:	d006      	beq.n	801224a <ethernet_output+0x66>
 801223c:	4b0a      	ldr	r3, [pc, #40]	@ (8012268 <ethernet_output+0x84>)
 801223e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8012242:	490a      	ldr	r1, [pc, #40]	@ (801226c <ethernet_output+0x88>)
 8012244:	480a      	ldr	r0, [pc, #40]	@ (8012270 <ethernet_output+0x8c>)
 8012246:	f000 fd43 	bl	8012cd0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	699b      	ldr	r3, [r3, #24]
 801224e:	68b9      	ldr	r1, [r7, #8]
 8012250:	68f8      	ldr	r0, [r7, #12]
 8012252:	4798      	blx	r3
 8012254:	4603      	mov	r3, r0
 8012256:	e002      	b.n	801225e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012258:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801225a:	f06f 0301 	mvn.w	r3, #1
}
 801225e:	4618      	mov	r0, r3
 8012260:	3718      	adds	r7, #24
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}
 8012266:	bf00      	nop
 8012268:	08016838 	.word	0x08016838
 801226c:	08016870 	.word	0x08016870
 8012270:	080168a4 	.word	0x080168a4

08012274 <sio_open>:
u8_t temp [RXBUFFER_SIZE];
u8_t rx_buffer [RXBUFFER_SIZE];
int read_index = 0;
int write_index = 0;

sio_fd_t sio_open(u8_t devnum) {
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	71fb      	strb	r3, [r7, #7]

	return (sio_fd_t)&huart1;
 801227e:	4b03      	ldr	r3, [pc, #12]	@ (801228c <sio_open+0x18>)

}
 8012280:	4618      	mov	r0, r3
 8012282:	370c      	adds	r7, #12
 8012284:	46bd      	mov	sp, r7
 8012286:	bc80      	pop	{r7}
 8012288:	4770      	bx	lr
 801228a:	bf00      	nop
 801228c:	20000334 	.word	0x20000334

08012290 <sio_send>:
void sio_send(u8_t* c, sio_fd_t fd, u16_t byte_count) {
 8012290:	b580      	push	{r7, lr}
 8012292:	b086      	sub	sp, #24
 8012294:	af00      	add	r7, sp, #0
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	4613      	mov	r3, r2
 801229c:	80fb      	strh	r3, [r7, #6]

	UART_HandleTypeDef *uart = (UART_HandleTypeDef *)fd;
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	617b      	str	r3, [r7, #20]

	HAL_UART_Transmit_DMA(uart, c, byte_count);
 80122a2:	88fb      	ldrh	r3, [r7, #6]
 80122a4:	461a      	mov	r2, r3
 80122a6:	68f9      	ldr	r1, [r7, #12]
 80122a8:	6978      	ldr	r0, [r7, #20]
 80122aa:	f7f0 fb1d 	bl	80028e8 <HAL_UART_Transmit_DMA>

	while (uart->gState != HAL_UART_STATE_READY)
 80122ae:	e007      	b.n	80122c0 <sio_send+0x30>
	{
		taskYIELD();
 80122b0:	4b09      	ldr	r3, [pc, #36]	@ (80122d8 <sio_send+0x48>)
 80122b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	f3bf 8f4f 	dsb	sy
 80122bc:	f3bf 8f6f 	isb	sy
	while (uart->gState != HAL_UART_STATE_READY)
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80122c6:	b2db      	uxtb	r3, r3
 80122c8:	2b20      	cmp	r3, #32
 80122ca:	d1f1      	bne.n	80122b0 <sio_send+0x20>
	}
}
 80122cc:	bf00      	nop
 80122ce:	bf00      	nop
 80122d0:	3718      	adds	r7, #24
 80122d2:	46bd      	mov	sp, r7
 80122d4:	bd80      	pop	{r7, pc}
 80122d6:	bf00      	nop
 80122d8:	e000ed04 	.word	0xe000ed04

080122dc <sio_tryread>:
    UART_HandleTypeDef *uart = (UART_HandleTypeDef *)fd;
    HAL_UART_Receive(uart, data, len, HAL_MAX_DELAY);
    return len;
}

u32_t sio_tryread(sio_fd_t fd, u8_t *data, u32_t len) {
 80122dc:	b580      	push	{r7, lr}
 80122de:	b086      	sub	sp, #24
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	607a      	str	r2, [r7, #4]
    u32_t i = 0;
 80122e8:	2300      	movs	r3, #0
 80122ea:	617b      	str	r3, [r7, #20]
    taskENTER_CRITICAL();
 80122ec:	f7f3 fe7e 	bl	8005fec <vPortEnterCritical>
    while (read_index != write_index && i < len) {
 80122f0:	e01a      	b.n	8012328 <sio_tryread+0x4c>
        data[i] = rx_buffer[read_index];
 80122f2:	4b16      	ldr	r3, [pc, #88]	@ (801234c <sio_tryread+0x70>)
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	68b9      	ldr	r1, [r7, #8]
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	440b      	add	r3, r1
 80122fc:	4914      	ldr	r1, [pc, #80]	@ (8012350 <sio_tryread+0x74>)
 80122fe:	5c8a      	ldrb	r2, [r1, r2]
 8012300:	701a      	strb	r2, [r3, #0]
        read_index = (read_index + 1) % RXBUFFER_SIZE;
 8012302:	4b12      	ldr	r3, [pc, #72]	@ (801234c <sio_tryread+0x70>)
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	4b12      	ldr	r3, [pc, #72]	@ (8012354 <sio_tryread+0x78>)
 801230a:	fb83 1302 	smull	r1, r3, r3, r2
 801230e:	1299      	asrs	r1, r3, #10
 8012310:	17d3      	asrs	r3, r2, #31
 8012312:	1acb      	subs	r3, r1, r3
 8012314:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8012318:	fb01 f303 	mul.w	r3, r1, r3
 801231c:	1ad3      	subs	r3, r2, r3
 801231e:	4a0b      	ldr	r2, [pc, #44]	@ (801234c <sio_tryread+0x70>)
 8012320:	6013      	str	r3, [r2, #0]
        i++;
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	3301      	adds	r3, #1
 8012326:	617b      	str	r3, [r7, #20]
    while (read_index != write_index && i < len) {
 8012328:	4b08      	ldr	r3, [pc, #32]	@ (801234c <sio_tryread+0x70>)
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	4b0a      	ldr	r3, [pc, #40]	@ (8012358 <sio_tryread+0x7c>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d003      	beq.n	801233c <sio_tryread+0x60>
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	429a      	cmp	r2, r3
 801233a:	d3da      	bcc.n	80122f2 <sio_tryread+0x16>
    }
    taskEXIT_CRITICAL();
 801233c:	f7f3 fe86 	bl	800604c <vPortExitCritical>

    return i;
 8012340:	697b      	ldr	r3, [r7, #20]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3718      	adds	r7, #24
 8012346:	46bd      	mov	sp, r7
 8012348:	bd80      	pop	{r7, pc}
 801234a:	bf00      	nop
 801234c:	20008214 	.word	0x20008214
 8012350:	20007850 	.word	0x20007850
 8012354:	68db8bad 	.word	0x68db8bad
 8012358:	20008218 	.word	0x20008218

0801235c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	4a15      	ldr	r2, [pc, #84]	@ (80123bc <HAL_UART_RxCpltCallback+0x60>)
 8012368:	4293      	cmp	r3, r2
 801236a:	d122      	bne.n	80123b2 <HAL_UART_RxCpltCallback+0x56>

        u32_t next_write_index = (write_index + 1) % RXBUFFER_SIZE;
 801236c:	4b14      	ldr	r3, [pc, #80]	@ (80123c0 <HAL_UART_RxCpltCallback+0x64>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	1c5a      	adds	r2, r3, #1
 8012372:	4b14      	ldr	r3, [pc, #80]	@ (80123c4 <HAL_UART_RxCpltCallback+0x68>)
 8012374:	fb83 1302 	smull	r1, r3, r3, r2
 8012378:	1299      	asrs	r1, r3, #10
 801237a:	17d3      	asrs	r3, r2, #31
 801237c:	1acb      	subs	r3, r1, r3
 801237e:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 8012382:	fb01 f303 	mul.w	r3, r1, r3
 8012386:	1ad3      	subs	r3, r2, r3
 8012388:	60fb      	str	r3, [r7, #12]
        if (next_write_index != read_index) {
 801238a:	4b0f      	ldr	r3, [pc, #60]	@ (80123c8 <HAL_UART_RxCpltCallback+0x6c>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	461a      	mov	r2, r3
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	4293      	cmp	r3, r2
 8012394:	d008      	beq.n	80123a8 <HAL_UART_RxCpltCallback+0x4c>
            rx_buffer[write_index] = rx_byte;
 8012396:	4b0a      	ldr	r3, [pc, #40]	@ (80123c0 <HAL_UART_RxCpltCallback+0x64>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	4a0c      	ldr	r2, [pc, #48]	@ (80123cc <HAL_UART_RxCpltCallback+0x70>)
 801239c:	7811      	ldrb	r1, [r2, #0]
 801239e:	4a0c      	ldr	r2, [pc, #48]	@ (80123d0 <HAL_UART_RxCpltCallback+0x74>)
 80123a0:	54d1      	strb	r1, [r2, r3]
            write_index = next_write_index;
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	4a06      	ldr	r2, [pc, #24]	@ (80123c0 <HAL_UART_RxCpltCallback+0x64>)
 80123a6:	6013      	str	r3, [r2, #0]
        }

        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80123a8:	2201      	movs	r2, #1
 80123aa:	4908      	ldr	r1, [pc, #32]	@ (80123cc <HAL_UART_RxCpltCallback+0x70>)
 80123ac:	4803      	ldr	r0, [pc, #12]	@ (80123bc <HAL_UART_RxCpltCallback+0x60>)
 80123ae:	f7f0 fa75 	bl	800289c <HAL_UART_Receive_IT>
    }
}
 80123b2:	bf00      	nop
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	20000334 	.word	0x20000334
 80123c0:	20008218 	.word	0x20008218
 80123c4:	68db8bad 	.word	0x68db8bad
 80123c8:	20008214 	.word	0x20008214
 80123cc:	2000784e 	.word	0x2000784e
 80123d0:	20007850 	.word	0x20007850

080123d4 <slipif_output>:
 * @param p the pbuf chain packet to send
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output(struct netif *netif, struct pbuf *p)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	f5ad 6d1e 	sub.w	sp, sp, #2528	@ 0x9e0
 80123da:	af00      	add	r7, sp, #0
 80123dc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80123e0:	f6a3 13dc 	subw	r3, r3, #2524	@ 0x9dc
 80123e4:	6018      	str	r0, [r3, #0]
 80123e6:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80123ea:	f5a3 631e 	sub.w	r3, r3, #2528	@ 0x9e0
 80123ee:	6019      	str	r1, [r3, #0]
  struct slipif_priv *priv;
  struct pbuf *q;
  u16_t i;
  u16_t size = 0;
 80123f0:	2300      	movs	r3, #0
 80123f2:	f8a7 39d8 	strh.w	r3, [r7, #2520]	@ 0x9d8
  u8_t c;
  u8_t uart_buffer [2500];


  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80123f6:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80123fa:	f6a3 13dc 	subw	r3, r3, #2524	@ 0x9dc
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d105      	bne.n	8012410 <slipif_output+0x3c>
 8012404:	4b60      	ldr	r3, [pc, #384]	@ (8012588 <slipif_output+0x1b4>)
 8012406:	2281      	movs	r2, #129	@ 0x81
 8012408:	4960      	ldr	r1, [pc, #384]	@ (801258c <slipif_output+0x1b8>)
 801240a:	4861      	ldr	r0, [pc, #388]	@ (8012590 <slipif_output+0x1bc>)
 801240c:	f000 fc60 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 8012410:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012414:	f6a3 13dc 	subw	r3, r3, #2524	@ 0x9dc
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	6a1b      	ldr	r3, [r3, #32]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d105      	bne.n	801242c <slipif_output+0x58>
 8012420:	4b59      	ldr	r3, [pc, #356]	@ (8012588 <slipif_output+0x1b4>)
 8012422:	2282      	movs	r2, #130	@ 0x82
 8012424:	495b      	ldr	r1, [pc, #364]	@ (8012594 <slipif_output+0x1c0>)
 8012426:	485a      	ldr	r0, [pc, #360]	@ (8012590 <slipif_output+0x1bc>)
 8012428:	f000 fc52 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("p != NULL", (p != NULL));
 801242c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012430:	f5a3 631e 	sub.w	r3, r3, #2528	@ 0x9e0
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d105      	bne.n	8012446 <slipif_output+0x72>
 801243a:	4b53      	ldr	r3, [pc, #332]	@ (8012588 <slipif_output+0x1b4>)
 801243c:	2283      	movs	r2, #131	@ 0x83
 801243e:	4956      	ldr	r1, [pc, #344]	@ (8012598 <slipif_output+0x1c4>)
 8012440:	4853      	ldr	r0, [pc, #332]	@ (8012590 <slipif_output+0x1bc>)
 8012442:	f000 fc45 	bl	8012cd0 <iprintf>

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_output: sending %"U16_F" bytes\n", p->tot_len));
  priv = (struct slipif_priv *)netif->state;
 8012446:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801244a:	f6a3 13dc 	subw	r3, r3, #2524	@ 0x9dc
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	6a1b      	ldr	r3, [r3, #32]
 8012452:	f8c7 39d4 	str.w	r3, [r7, #2516]	@ 0x9d4

  /* Send pbuf out on the serial I/O device. */
  /* Start with packet delimiter. */
  //sio_send(SLIP_END, priv->sd);
  uart_buffer[size++] = SLIP_END;
 8012456:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 8012460:	461a      	mov	r2, r3
 8012462:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012466:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 801246a:	21c0      	movs	r1, #192	@ 0xc0
 801246c:	5499      	strb	r1, [r3, r2]

  for (q = p; q != NULL; q = q->next) {
 801246e:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012472:	f5a3 631e 	sub.w	r3, r3, #2528	@ 0x9e0
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 801247c:	e064      	b.n	8012548 <slipif_output+0x174>
    for (i = 0; i < q->len; i++) {
 801247e:	2300      	movs	r3, #0
 8012480:	f8a7 39da 	strh.w	r3, [r7, #2522]	@ 0x9da
 8012484:	e054      	b.n	8012530 <slipif_output+0x15c>
      c = ((u8_t *)q->payload)[i];
 8012486:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801248a:	685a      	ldr	r2, [r3, #4]
 801248c:	f8b7 39da 	ldrh.w	r3, [r7, #2522]	@ 0x9da
 8012490:	4413      	add	r3, r2
 8012492:	781b      	ldrb	r3, [r3, #0]
 8012494:	f887 39d3 	strb.w	r3, [r7, #2515]	@ 0x9d3
      switch (c) {
 8012498:	f897 39d3 	ldrb.w	r3, [r7, #2515]	@ 0x9d3
 801249c:	2bc0      	cmp	r3, #192	@ 0xc0
 801249e:	d002      	beq.n	80124a6 <slipif_output+0xd2>
 80124a0:	2bdb      	cmp	r3, #219	@ 0xdb
 80124a2:	d019      	beq.n	80124d8 <slipif_output+0x104>
 80124a4:	e031      	b.n	801250a <slipif_output+0x136>
        case SLIP_END:
          /* need to escape this byte (0xC0 -> 0xDB, 0xDC) */
		  uart_buffer[size++] = SLIP_ESC;
 80124a6:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 80124aa:	1c5a      	adds	r2, r3, #1
 80124ac:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 80124b0:	461a      	mov	r2, r3
 80124b2:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80124b6:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 80124ba:	21db      	movs	r1, #219	@ 0xdb
 80124bc:	5499      	strb	r1, [r3, r2]
		  uart_buffer[size++] = SLIP_ESC_END;
 80124be:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 80124c2:	1c5a      	adds	r2, r3, #1
 80124c4:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 80124c8:	461a      	mov	r2, r3
 80124ca:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80124ce:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 80124d2:	21dc      	movs	r1, #220	@ 0xdc
 80124d4:	5499      	strb	r1, [r3, r2]
          break;
 80124d6:	e026      	b.n	8012526 <slipif_output+0x152>
        case SLIP_ESC:
          /* need to escape this byte (0xDB -> 0xDB, 0xDD) */
		  uart_buffer[size++] = SLIP_ESC;
 80124d8:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 80124dc:	1c5a      	adds	r2, r3, #1
 80124de:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 80124e2:	461a      	mov	r2, r3
 80124e4:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 80124e8:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 80124ec:	21db      	movs	r1, #219	@ 0xdb
 80124ee:	5499      	strb	r1, [r3, r2]
		  uart_buffer[size++] = SLIP_ESC_ESC;
 80124f0:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 80124f4:	1c5a      	adds	r2, r3, #1
 80124f6:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 80124fa:	461a      	mov	r2, r3
 80124fc:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012500:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 8012504:	21dd      	movs	r1, #221	@ 0xdd
 8012506:	5499      	strb	r1, [r3, r2]
          break;
 8012508:	e00d      	b.n	8012526 <slipif_output+0x152>
        default:
          /* normal byte - no need for escaping */
		  uart_buffer[size++] = c;
 801250a:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 801250e:	1c5a      	adds	r2, r3, #1
 8012510:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 8012514:	4619      	mov	r1, r3
 8012516:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 801251a:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 801251e:	f897 29d3 	ldrb.w	r2, [r7, #2515]	@ 0x9d3
 8012522:	545a      	strb	r2, [r3, r1]
          break;
 8012524:	bf00      	nop
    for (i = 0; i < q->len; i++) {
 8012526:	f8b7 39da 	ldrh.w	r3, [r7, #2522]	@ 0x9da
 801252a:	3301      	adds	r3, #1
 801252c:	f8a7 39da 	strh.w	r3, [r7, #2522]	@ 0x9da
 8012530:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012534:	895b      	ldrh	r3, [r3, #10]
 8012536:	f8b7 29da 	ldrh.w	r2, [r7, #2522]	@ 0x9da
 801253a:	429a      	cmp	r2, r3
 801253c:	d3a3      	bcc.n	8012486 <slipif_output+0xb2>
  for (q = p; q != NULL; q = q->next) {
 801253e:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	f8c7 39dc 	str.w	r3, [r7, #2524]	@ 0x9dc
 8012548:	f8d7 39dc 	ldr.w	r3, [r7, #2524]	@ 0x9dc
 801254c:	2b00      	cmp	r3, #0
 801254e:	d196      	bne.n	801247e <slipif_output+0xaa>
      }
    }
  }
  /* End with packet delimiter. */
  uart_buffer[size++] = SLIP_END;
 8012550:	f8b7 39d8 	ldrh.w	r3, [r7, #2520]	@ 0x9d8
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	f8a7 29d8 	strh.w	r2, [r7, #2520]	@ 0x9d8
 801255a:	461a      	mov	r2, r3
 801255c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8012560:	f6a3 13d4 	subw	r3, r3, #2516	@ 0x9d4
 8012564:	21c0      	movs	r1, #192	@ 0xc0
 8012566:	5499      	strb	r1, [r3, r2]

  sio_send(uart_buffer, priv->sd, size);
 8012568:	f8d7 39d4 	ldr.w	r3, [r7, #2516]	@ 0x9d4
 801256c:	6819      	ldr	r1, [r3, #0]
 801256e:	f8b7 29d8 	ldrh.w	r2, [r7, #2520]	@ 0x9d8
 8012572:	f107 030c 	add.w	r3, r7, #12
 8012576:	4618      	mov	r0, r3
 8012578:	f7ff fe8a 	bl	8012290 <sio_send>
  return ERR_OK;
 801257c:	2300      	movs	r3, #0
}
 801257e:	4618      	mov	r0, r3
 8012580:	f507 671e 	add.w	r7, r7, #2528	@ 0x9e0
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}
 8012588:	080168cc 	.word	0x080168cc
 801258c:	08016900 	.word	0x08016900
 8012590:	08016910 	.word	0x08016910
 8012594:	08016938 	.word	0x08016938
 8012598:	08016950 	.word	0x08016950

0801259c <slipif_output_v4>:
 * @param ipaddr the ip address to send the packet to (not used for slipif)
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output_v4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b084      	sub	sp, #16
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return slipif_output(netif, p);
 80125a8:	68b9      	ldr	r1, [r7, #8]
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f7ff ff12 	bl	80123d4 <slipif_output>
 80125b0:	4603      	mov	r3, r0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
	...

080125bc <slipif_rxbyte>:
 *        return a complete packet, NULL is returned before - used for polling)
 * @return The IP packet when SLIP_END is received
 */
static struct pbuf *
slipif_rxbyte(struct netif *netif, u8_t c)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	460b      	mov	r3, r1
 80125c6:	70fb      	strb	r3, [r7, #3]
  struct slipif_priv *priv;
  struct pbuf *t;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d105      	bne.n	80125da <slipif_rxbyte+0x1e>
 80125ce:	4b5e      	ldr	r3, [pc, #376]	@ (8012748 <slipif_rxbyte+0x18c>)
 80125d0:	22dd      	movs	r2, #221	@ 0xdd
 80125d2:	495e      	ldr	r1, [pc, #376]	@ (801274c <slipif_rxbyte+0x190>)
 80125d4:	485e      	ldr	r0, [pc, #376]	@ (8012750 <slipif_rxbyte+0x194>)
 80125d6:	f000 fb7b 	bl	8012cd0 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	6a1b      	ldr	r3, [r3, #32]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d105      	bne.n	80125ee <slipif_rxbyte+0x32>
 80125e2:	4b59      	ldr	r3, [pc, #356]	@ (8012748 <slipif_rxbyte+0x18c>)
 80125e4:	22de      	movs	r2, #222	@ 0xde
 80125e6:	495b      	ldr	r1, [pc, #364]	@ (8012754 <slipif_rxbyte+0x198>)
 80125e8:	4859      	ldr	r0, [pc, #356]	@ (8012750 <slipif_rxbyte+0x194>)
 80125ea:	f000 fb71 	bl	8012cd0 <iprintf>

  priv = (struct slipif_priv *)netif->state;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6a1b      	ldr	r3, [r3, #32]
 80125f2:	60fb      	str	r3, [r7, #12]

  switch (priv->state) {
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	7b1b      	ldrb	r3, [r3, #12]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d002      	beq.n	8012602 <slipif_rxbyte+0x46>
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d02d      	beq.n	801265c <slipif_rxbyte+0xa0>
          break;
      }
      priv->state = SLIP_RECV_NORMAL;
      break;
    default:
      break;
 8012600:	e03c      	b.n	801267c <slipif_rxbyte+0xc0>
      switch (c) {
 8012602:	78fb      	ldrb	r3, [r7, #3]
 8012604:	2bc0      	cmp	r3, #192	@ 0xc0
 8012606:	d002      	beq.n	801260e <slipif_rxbyte+0x52>
 8012608:	2bdb      	cmp	r3, #219	@ 0xdb
 801260a:	d021      	beq.n	8012650 <slipif_rxbyte+0x94>
          break;
 801260c:	e025      	b.n	801265a <slipif_rxbyte+0x9e>
          if (priv->recved > 0) {
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	8a1b      	ldrh	r3, [r3, #16]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d01a      	beq.n	801264c <slipif_rxbyte+0x90>
            pbuf_realloc(priv->q, priv->recved);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	689a      	ldr	r2, [r3, #8]
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	8a1b      	ldrh	r3, [r3, #16]
 801261e:	4619      	mov	r1, r3
 8012620:	4610      	mov	r0, r2
 8012622:	f7f6 fac5 	bl	8008bb0 <pbuf_realloc>
            t = priv->q;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	689b      	ldr	r3, [r3, #8]
 801262a:	60bb      	str	r3, [r7, #8]
            priv->p = priv->q = NULL;
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	2200      	movs	r2, #0
 8012630:	609a      	str	r2, [r3, #8]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	689a      	ldr	r2, [r3, #8]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	605a      	str	r2, [r3, #4]
            priv->i = priv->recved = 0;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2200      	movs	r2, #0
 801263e:	821a      	strh	r2, [r3, #16]
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	8a1a      	ldrh	r2, [r3, #16]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	81da      	strh	r2, [r3, #14]
            return t;
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	e079      	b.n	8012740 <slipif_rxbyte+0x184>
          return NULL;
 801264c:	2300      	movs	r3, #0
 801264e:	e077      	b.n	8012740 <slipif_rxbyte+0x184>
          priv->state = SLIP_RECV_ESCAPE;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2201      	movs	r2, #1
 8012654:	731a      	strb	r2, [r3, #12]
          return NULL;
 8012656:	2300      	movs	r3, #0
 8012658:	e072      	b.n	8012740 <slipif_rxbyte+0x184>
      break;
 801265a:	e00f      	b.n	801267c <slipif_rxbyte+0xc0>
      switch (c) {
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	2bdc      	cmp	r3, #220	@ 0xdc
 8012660:	d002      	beq.n	8012668 <slipif_rxbyte+0xac>
 8012662:	2bdd      	cmp	r3, #221	@ 0xdd
 8012664:	d003      	beq.n	801266e <slipif_rxbyte+0xb2>
          break;
 8012666:	e005      	b.n	8012674 <slipif_rxbyte+0xb8>
          c = SLIP_END;
 8012668:	23c0      	movs	r3, #192	@ 0xc0
 801266a:	70fb      	strb	r3, [r7, #3]
          break;
 801266c:	e002      	b.n	8012674 <slipif_rxbyte+0xb8>
          c = SLIP_ESC;
 801266e:	23db      	movs	r3, #219	@ 0xdb
 8012670:	70fb      	strb	r3, [r7, #3]
          break;
 8012672:	bf00      	nop
      priv->state = SLIP_RECV_NORMAL;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2200      	movs	r2, #0
 8012678:	731a      	strb	r2, [r3, #12]
      break;
 801267a:	bf00      	nop
  } /* end switch (priv->state) */

  /* byte received, packet not yet completely received */
  if (priv->p == NULL) {
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d120      	bne.n	80126c6 <slipif_rxbyte+0x10a>
    /* allocate a new pbuf */
    LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: alloc\n"));
    priv->p = pbuf_alloc(PBUF_LINK, (PBUF_POOL_BUFSIZE - PBUF_LINK_HLEN - PBUF_LINK_ENCAPSULATION_HLEN), PBUF_POOL);
 8012684:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8012688:	f240 2142 	movw	r1, #578	@ 0x242
 801268c:	200e      	movs	r0, #14
 801268e:	f7f6 f931 	bl	80088f4 <pbuf_alloc>
 8012692:	4602      	mov	r2, r0
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	605a      	str	r2, [r3, #4]

    if (priv->p == NULL) {
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d101      	bne.n	80126a4 <slipif_rxbyte+0xe8>
      LINK_STATS_INC(link.drop);
      LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: no new pbuf! (DROP)\n"));
      /* don't process any further since we got no pbuf to receive to */
      return NULL;
 80126a0:	2300      	movs	r3, #0
 80126a2:	e04d      	b.n	8012740 <slipif_rxbyte+0x184>
    }

    if (priv->q != NULL) {
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d008      	beq.n	80126be <slipif_rxbyte+0x102>
      /* 'chain' the pbuf to the existing chain */
      pbuf_cat(priv->q, priv->p);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	689a      	ldr	r2, [r3, #8]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	4619      	mov	r1, r3
 80126b6:	4610      	mov	r0, r2
 80126b8:	f7f6 fccc 	bl	8009054 <pbuf_cat>
 80126bc:	e003      	b.n	80126c6 <slipif_rxbyte+0x10a>
    } else {
      /* p is the first pbuf in the chain */
      priv->q = priv->p;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	685a      	ldr	r2, [r3, #4]
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	609a      	str	r2, [r3, #8]
    }
  }

  /* this automatically drops bytes if > SLIP_MAX_SIZE */
  if ((priv->p != NULL) && (priv->recved <= SLIP_MAX_SIZE)) {
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d037      	beq.n	801273e <slipif_rxbyte+0x182>
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	8a1b      	ldrh	r3, [r3, #16]
 80126d2:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80126d6:	4293      	cmp	r3, r2
 80126d8:	d831      	bhi.n	801273e <slipif_rxbyte+0x182>
    ((u8_t *)priv->p->payload)[priv->i] = c;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	685b      	ldr	r3, [r3, #4]
 80126e0:	68fa      	ldr	r2, [r7, #12]
 80126e2:	89d2      	ldrh	r2, [r2, #14]
 80126e4:	4413      	add	r3, r2
 80126e6:	78fa      	ldrb	r2, [r7, #3]
 80126e8:	701a      	strb	r2, [r3, #0]
    priv->recved++;
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	8a1b      	ldrh	r3, [r3, #16]
 80126ee:	3301      	adds	r3, #1
 80126f0:	b29a      	uxth	r2, r3
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	821a      	strh	r2, [r3, #16]
    priv->i++;
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	89db      	ldrh	r3, [r3, #14]
 80126fa:	3301      	adds	r3, #1
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	81da      	strh	r2, [r3, #14]
    if (priv->i >= priv->p->len) {
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	89da      	ldrh	r2, [r3, #14]
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	895b      	ldrh	r3, [r3, #10]
 801270c:	429a      	cmp	r2, r3
 801270e:	d316      	bcc.n	801273e <slipif_rxbyte+0x182>
      /* on to the next pbuf */
      priv->i = 0;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	2200      	movs	r2, #0
 8012714:	81da      	strh	r2, [r3, #14]
      if (priv->p->next != NULL && priv->p->next->len > 0) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00b      	beq.n	8012738 <slipif_rxbyte+0x17c>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	895b      	ldrh	r3, [r3, #10]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d005      	beq.n	8012738 <slipif_rxbyte+0x17c>
        /* p is a chain, on to the next in the chain */
        priv->p = priv->p->next;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	681a      	ldr	r2, [r3, #0]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	605a      	str	r2, [r3, #4]
 8012736:	e002      	b.n	801273e <slipif_rxbyte+0x182>
      } else {
        /* p is a single pbuf, set it to NULL so next time a new
         * pbuf is allocated */
        priv->p = NULL;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	2200      	movs	r2, #0
 801273c:	605a      	str	r2, [r3, #4]
      }
    }
  }
  return NULL;
 801273e:	2300      	movs	r3, #0
}
 8012740:	4618      	mov	r0, r3
 8012742:	3710      	adds	r7, #16
 8012744:	46bd      	mov	sp, r7
 8012746:	bd80      	pop	{r7, pc}
 8012748:	080168cc 	.word	0x080168cc
 801274c:	08016900 	.word	0x08016900
 8012750:	08016910 	.word	0x08016910
 8012754:	08016938 	.word	0x08016938

08012758 <slipif_rxbyte_input>:
 * @param netif The lwip network interface structure for this slipif
 * @param c received character
 */
static void
slipif_rxbyte_input(struct netif *netif, u8_t c)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	460b      	mov	r3, r1
 8012762:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  p = slipif_rxbyte(netif, c);
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff ff27 	bl	80125bc <slipif_rxbyte>
 801276e:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d00a      	beq.n	801278c <slipif_rxbyte_input+0x34>
    if (netif->input(p, netif) != ERR_OK) {
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	691b      	ldr	r3, [r3, #16]
 801277a:	6879      	ldr	r1, [r7, #4]
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	4798      	blx	r3
 8012780:	4603      	mov	r3, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d002      	beq.n	801278c <slipif_rxbyte_input+0x34>
      pbuf_free(p);
 8012786:	68f8      	ldr	r0, [r7, #12]
 8012788:	f7f6 fb98 	bl	8008ebc <pbuf_free>
    }
  }
}
 801278c:	bf00      	nop
 801278e:	3710      	adds	r7, #16
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}

08012794 <slipif_loop_thread>:
 *
 * @param nf the lwip network interface structure for this slipif
 */
static void
slipif_loop_thread(void *nf)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  u8_t c;
  struct netif *netif = (struct netif *)nf;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	617b      	str	r3, [r7, #20]
  struct slipif_priv *priv = (struct slipif_priv *)netif->state;
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	6a1b      	ldr	r3, [r3, #32]
 80127a4:	613b      	str	r3, [r7, #16]

  while (1)
  {

	  if (sio_tryread(priv->sd, &c, 1) > 0)
 80127a6:	693b      	ldr	r3, [r7, #16]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	f107 010f 	add.w	r1, r7, #15
 80127ae:	2201      	movs	r2, #1
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7ff fd93 	bl	80122dc <sio_tryread>
 80127b6:	4603      	mov	r3, r0
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d0f4      	beq.n	80127a6 <slipif_loop_thread+0x12>
	  {
		  slipif_rxbyte_input(netif, c);
 80127bc:	7bfb      	ldrb	r3, [r7, #15]
 80127be:	4619      	mov	r1, r3
 80127c0:	6978      	ldr	r0, [r7, #20]
 80127c2:	f7ff ffc9 	bl	8012758 <slipif_rxbyte_input>
	  if (sio_tryread(priv->sd, &c, 1) > 0)
 80127c6:	e7ee      	b.n	80127a6 <slipif_loop_thread+0x12>

080127c8 <slipif_init>:
 * @note If netif->state is interpreted as an u8_t serial port number.
 *
 */
err_t
slipif_init(struct netif *netif)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	b086      	sub	sp, #24
 80127cc:	af02      	add	r7, sp, #8
 80127ce:	6078      	str	r0, [r7, #4]
  struct slipif_priv *priv;
  u8_t sio_num;

  LWIP_ASSERT("slipif needs an input callback", netif->input != NULL);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	691b      	ldr	r3, [r3, #16]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <slipif_init+0x1e>
 80127d8:	4b2c      	ldr	r3, [pc, #176]	@ (801288c <slipif_init+0xc4>)
 80127da:	f240 127b 	movw	r2, #379	@ 0x17b
 80127de:	492c      	ldr	r1, [pc, #176]	@ (8012890 <slipif_init+0xc8>)
 80127e0:	482c      	ldr	r0, [pc, #176]	@ (8012894 <slipif_init+0xcc>)
 80127e2:	f000 fa75 	bl	8012cd0 <iprintf>

  /* netif->state contains serial port number */
  sio_num = LWIP_PTR_NUMERIC_CAST(u8_t, netif->state);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6a1b      	ldr	r3, [r3, #32]
 80127ea:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_init: netif->num=%"U16_F"\n", (u16_t)sio_num));

  /* Allocate private data */
  priv = (struct slipif_priv *)mem_malloc(sizeof(struct slipif_priv));
 80127ec:	2014      	movs	r0, #20
 80127ee:	f7f5 fb59 	bl	8007ea4 <mem_malloc>
 80127f2:	60b8      	str	r0, [r7, #8]
  if (!priv) {
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d102      	bne.n	8012800 <slipif_init+0x38>
    return ERR_MEM;
 80127fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127fe:	e041      	b.n	8012884 <slipif_init+0xbc>
  }

  netif->name[0] = 's';
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2273      	movs	r2, #115	@ 0x73
 8012804:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = 'l';
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	226c      	movs	r2, #108	@ 0x6c
 801280c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV4
  netif->output = slipif_output_v4;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	4a21      	ldr	r2, [pc, #132]	@ (8012898 <slipif_init+0xd0>)
 8012814:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
  netif->output_ip6 = slipif_output_v6;
#endif /* LWIP_IPV6 */
  netif->mtu = SLIP_MAX_SIZE;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801281c:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Try to open the serial port. */
  priv->sd = sio_open(sio_num);
 801281e:	7bfb      	ldrb	r3, [r7, #15]
 8012820:	4618      	mov	r0, r3
 8012822:	f7ff fd27 	bl	8012274 <sio_open>
 8012826:	4602      	mov	r2, r0
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	601a      	str	r2, [r3, #0]
  if (!priv->sd) {
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d105      	bne.n	8012840 <slipif_init+0x78>
    /* Opening the serial port failed. */
    mem_free(priv);
 8012834:	68b8      	ldr	r0, [r7, #8]
 8012836:	f7f5 f99b 	bl	8007b70 <mem_free>
    return ERR_IF;
 801283a:	f06f 030b 	mvn.w	r3, #11
 801283e:	e021      	b.n	8012884 <slipif_init+0xbc>
  }

  /* Initialize private data */
  priv->p = NULL;
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	2200      	movs	r2, #0
 8012844:	605a      	str	r2, [r3, #4]
  priv->q = NULL;
 8012846:	68bb      	ldr	r3, [r7, #8]
 8012848:	2200      	movs	r2, #0
 801284a:	609a      	str	r2, [r3, #8]
  priv->state = SLIP_RECV_NORMAL;
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	2200      	movs	r2, #0
 8012850:	731a      	strb	r2, [r3, #12]
  priv->i = 0;
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	2200      	movs	r2, #0
 8012856:	81da      	strh	r2, [r3, #14]
  priv->recved = 0;
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	2200      	movs	r2, #0
 801285c:	821a      	strh	r2, [r3, #16]
#if SLIP_RX_FROM_ISR
  priv->rxpackets = NULL;
#endif

  netif->state = priv;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	68ba      	ldr	r2, [r7, #8]
 8012862:	621a      	str	r2, [r3, #32]
  netif_set_up(netif);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7f5 fedf 	bl	8008628 <netif_set_up>
  netif_set_link_up(netif);
 801286a:	6878      	ldr	r0, [r7, #4]
 801286c:	f7f5 ff48 	bl	8008700 <netif_set_link_up>
  /* initialize the snmp variables and counters inside the struct netif */
  MIB2_INIT_NETIF(netif, snmp_ifType_slip, SLIP_SIO_SPEED(priv->sd));

#if SLIP_USE_RX_THREAD
  /* Create a thread to poll the serial line. */
  sys_thread_new(SLIPIF_THREAD_NAME, slipif_loop_thread, netif,
 8012870:	2300      	movs	r3, #0
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	4908      	ldr	r1, [pc, #32]	@ (801289c <slipif_init+0xd4>)
 801287c:	4808      	ldr	r0, [pc, #32]	@ (80128a0 <slipif_init+0xd8>)
 801287e:	f000 f8e3 	bl	8012a48 <sys_thread_new>
                 SLIPIF_THREAD_STACKSIZE, SLIPIF_THREAD_PRIO);

#endif /* SLIP_USE_RX_THREAD */
  return ERR_OK;
 8012882:	2300      	movs	r3, #0
}
 8012884:	4618      	mov	r0, r3
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}
 801288c:	080168cc 	.word	0x080168cc
 8012890:	0801695c 	.word	0x0801695c
 8012894:	08016910 	.word	0x08016910
 8012898:	0801259d 	.word	0x0801259d
 801289c:	08012795 	.word	0x08012795
 80128a0:	0801697c 	.word	0x0801697c

080128a4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	60bb      	str	r3, [r7, #8]
 80128b2:	2304      	movs	r3, #4
 80128b4:	60fb      	str	r3, [r7, #12]
 80128b6:	2300      	movs	r3, #0
 80128b8:	613b      	str	r3, [r7, #16]
 80128ba:	2300      	movs	r3, #0
 80128bc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80128be:	f107 0308 	add.w	r3, r7, #8
 80128c2:	2100      	movs	r1, #0
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7f1 f94f 	bl	8003b68 <osMessageCreate>
 80128ca:	4602      	mov	r2, r0
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d102      	bne.n	80128de <sys_mbox_new+0x3a>
    return ERR_MEM;
 80128d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80128dc:	e000      	b.n	80128e0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80128de:	2300      	movs	r3, #0
}
 80128e0:	4618      	mov	r0, r3
 80128e2:	3718      	adds	r7, #24
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd80      	pop	{r7, pc}

080128e8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	6839      	ldr	r1, [r7, #0]
 80128f8:	2200      	movs	r2, #0
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7f1 f95c 	bl	8003bb8 <osMessagePut>
 8012900:	4603      	mov	r3, r0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d102      	bne.n	801290c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8012906:	2300      	movs	r3, #0
 8012908:	73fb      	strb	r3, [r7, #15]
 801290a:	e001      	b.n	8012910 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801290c:	23ff      	movs	r3, #255	@ 0xff
 801290e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8012910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}

0801291c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b08c      	sub	sp, #48	@ 0x30
 8012920:	af00      	add	r7, sp, #0
 8012922:	61f8      	str	r0, [r7, #28]
 8012924:	61b9      	str	r1, [r7, #24]
 8012926:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8012928:	f7f1 f811 	bl	800394e <osKernelSysTick>
 801292c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d017      	beq.n	8012964 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	6819      	ldr	r1, [r3, #0]
 8012938:	f107 0320 	add.w	r3, r7, #32
 801293c:	697a      	ldr	r2, [r7, #20]
 801293e:	4618      	mov	r0, r3
 8012940:	f7f1 f97a 	bl	8003c38 <osMessageGet>

    if(event.status == osEventMessage)
 8012944:	6a3b      	ldr	r3, [r7, #32]
 8012946:	2b10      	cmp	r3, #16
 8012948:	d109      	bne.n	801295e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801294c:	461a      	mov	r2, r3
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012952:	f7f0 fffc 	bl	800394e <osKernelSysTick>
 8012956:	4602      	mov	r2, r0
 8012958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	e019      	b.n	8012992 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801295e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012962:	e016      	b.n	8012992 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	6819      	ldr	r1, [r3, #0]
 8012968:	463b      	mov	r3, r7
 801296a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801296e:	4618      	mov	r0, r3
 8012970:	f7f1 f962 	bl	8003c38 <osMessageGet>
 8012974:	f107 0320 	add.w	r3, r7, #32
 8012978:	463a      	mov	r2, r7
 801297a:	ca07      	ldmia	r2, {r0, r1, r2}
 801297c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012982:	461a      	mov	r2, r3
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012988:	f7f0 ffe1 	bl	800394e <osKernelSysTick>
 801298c:	4602      	mov	r2, r0
 801298e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012990:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012992:	4618      	mov	r0, r3
 8012994:	3730      	adds	r7, #48	@ 0x30
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}

0801299a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801299a:	b480      	push	{r7}
 801299c:	b083      	sub	sp, #12
 801299e:	af00      	add	r7, sp, #0
 80129a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d101      	bne.n	80129ae <sys_mbox_valid+0x14>
    return 0;
 80129aa:	2300      	movs	r3, #0
 80129ac:	e000      	b.n	80129b0 <sys_mbox_valid+0x16>
  else
    return 1;
 80129ae:	2301      	movs	r3, #1
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	370c      	adds	r7, #12
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bc80      	pop	{r7}
 80129b8:	4770      	bx	lr
	...

080129bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80129c0:	4803      	ldr	r0, [pc, #12]	@ (80129d0 <sys_init+0x14>)
 80129c2:	f7f1 f834 	bl	8003a2e <osMutexCreate>
 80129c6:	4603      	mov	r3, r0
 80129c8:	4a02      	ldr	r2, [pc, #8]	@ (80129d4 <sys_init+0x18>)
 80129ca:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80129cc:	bf00      	nop
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	080178cc 	.word	0x080178cc
 80129d4:	2000821c 	.word	0x2000821c

080129d8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80129e0:	2300      	movs	r3, #0
 80129e2:	60bb      	str	r3, [r7, #8]
 80129e4:	2300      	movs	r3, #0
 80129e6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80129e8:	f107 0308 	add.w	r3, r7, #8
 80129ec:	4618      	mov	r0, r3
 80129ee:	f7f1 f81e 	bl	8003a2e <osMutexCreate>
 80129f2:	4602      	mov	r2, r0
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d102      	bne.n	8012a06 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8012a00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012a04:	e000      	b.n	8012a08 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3710      	adds	r7, #16
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b082      	sub	sp, #8
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7f1 f81d 	bl	8003a60 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8012a26:	bf00      	nop
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b082      	sub	sp, #8
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f1 f85e 	bl	8003afc <osMutexRelease>
}
 8012a40:	bf00      	nop
 8012a42:	3708      	adds	r7, #8
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}

08012a48 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b08c      	sub	sp, #48	@ 0x30
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012a56:	f107 0314 	add.w	r3, r7, #20
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]
 8012a5e:	605a      	str	r2, [r3, #4]
 8012a60:	609a      	str	r2, [r3, #8]
 8012a62:	60da      	str	r2, [r3, #12]
 8012a64:	611a      	str	r2, [r3, #16]
 8012a66:	615a      	str	r2, [r3, #20]
 8012a68:	619a      	str	r2, [r3, #24]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	617b      	str	r3, [r7, #20]
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	61bb      	str	r3, [r7, #24]
 8012a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a74:	b21b      	sxth	r3, r3
 8012a76:	83bb      	strh	r3, [r7, #28]
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012a7c:	f107 0314 	add.w	r3, r7, #20
 8012a80:	6879      	ldr	r1, [r7, #4]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f7f0 ff73 	bl	800396e <osThreadCreate>
 8012a88:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012a8a:	4618      	mov	r0, r3
 8012a8c:	3730      	adds	r7, #48	@ 0x30
 8012a8e:	46bd      	mov	sp, r7
 8012a90:	bd80      	pop	{r7, pc}
	...

08012a94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012a98:	4b04      	ldr	r3, [pc, #16]	@ (8012aac <sys_arch_protect+0x18>)
 8012a9a:	681b      	ldr	r3, [r3, #0]
 8012a9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7f0 ffdd 	bl	8003a60 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012aa6:	2301      	movs	r3, #1
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	bd80      	pop	{r7, pc}
 8012aac:	2000821c 	.word	0x2000821c

08012ab0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012ab8:	4b04      	ldr	r3, [pc, #16]	@ (8012acc <sys_arch_unprotect+0x1c>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7f1 f81d 	bl	8003afc <osMutexRelease>
}
 8012ac2:	bf00      	nop
 8012ac4:	3708      	adds	r7, #8
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	2000821c 	.word	0x2000821c

08012ad0 <rand>:
 8012ad0:	4b16      	ldr	r3, [pc, #88]	@ (8012b2c <rand+0x5c>)
 8012ad2:	b510      	push	{r4, lr}
 8012ad4:	681c      	ldr	r4, [r3, #0]
 8012ad6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012ad8:	b9b3      	cbnz	r3, 8012b08 <rand+0x38>
 8012ada:	2018      	movs	r0, #24
 8012adc:	f000 fabc 	bl	8013058 <malloc>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	6320      	str	r0, [r4, #48]	@ 0x30
 8012ae4:	b920      	cbnz	r0, 8012af0 <rand+0x20>
 8012ae6:	2152      	movs	r1, #82	@ 0x52
 8012ae8:	4b11      	ldr	r3, [pc, #68]	@ (8012b30 <rand+0x60>)
 8012aea:	4812      	ldr	r0, [pc, #72]	@ (8012b34 <rand+0x64>)
 8012aec:	f000 fa4e 	bl	8012f8c <__assert_func>
 8012af0:	4911      	ldr	r1, [pc, #68]	@ (8012b38 <rand+0x68>)
 8012af2:	4b12      	ldr	r3, [pc, #72]	@ (8012b3c <rand+0x6c>)
 8012af4:	e9c0 1300 	strd	r1, r3, [r0]
 8012af8:	4b11      	ldr	r3, [pc, #68]	@ (8012b40 <rand+0x70>)
 8012afa:	2100      	movs	r1, #0
 8012afc:	6083      	str	r3, [r0, #8]
 8012afe:	230b      	movs	r3, #11
 8012b00:	8183      	strh	r3, [r0, #12]
 8012b02:	2001      	movs	r0, #1
 8012b04:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012b08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012b0a:	480e      	ldr	r0, [pc, #56]	@ (8012b44 <rand+0x74>)
 8012b0c:	690b      	ldr	r3, [r1, #16]
 8012b0e:	694c      	ldr	r4, [r1, #20]
 8012b10:	4358      	muls	r0, r3
 8012b12:	4a0d      	ldr	r2, [pc, #52]	@ (8012b48 <rand+0x78>)
 8012b14:	fb02 0004 	mla	r0, r2, r4, r0
 8012b18:	fba3 3202 	umull	r3, r2, r3, r2
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	eb40 0002 	adc.w	r0, r0, r2
 8012b22:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012b26:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012b2a:	bd10      	pop	{r4, pc}
 8012b2c:	20000028 	.word	0x20000028
 8012b30:	080178d4 	.word	0x080178d4
 8012b34:	080178eb 	.word	0x080178eb
 8012b38:	abcd330e 	.word	0xabcd330e
 8012b3c:	e66d1234 	.word	0xe66d1234
 8012b40:	0005deec 	.word	0x0005deec
 8012b44:	5851f42d 	.word	0x5851f42d
 8012b48:	4c957f2d 	.word	0x4c957f2d

08012b4c <std>:
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	b510      	push	{r4, lr}
 8012b50:	4604      	mov	r4, r0
 8012b52:	e9c0 3300 	strd	r3, r3, [r0]
 8012b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b5a:	6083      	str	r3, [r0, #8]
 8012b5c:	8181      	strh	r1, [r0, #12]
 8012b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b60:	81c2      	strh	r2, [r0, #14]
 8012b62:	6183      	str	r3, [r0, #24]
 8012b64:	4619      	mov	r1, r3
 8012b66:	2208      	movs	r2, #8
 8012b68:	305c      	adds	r0, #92	@ 0x5c
 8012b6a:	f000 f916 	bl	8012d9a <memset>
 8012b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba4 <std+0x58>)
 8012b70:	6224      	str	r4, [r4, #32]
 8012b72:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b74:	4b0c      	ldr	r3, [pc, #48]	@ (8012ba8 <std+0x5c>)
 8012b76:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b78:	4b0c      	ldr	r3, [pc, #48]	@ (8012bac <std+0x60>)
 8012b7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8012bb0 <std+0x64>)
 8012b7e:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b80:	4b0c      	ldr	r3, [pc, #48]	@ (8012bb4 <std+0x68>)
 8012b82:	429c      	cmp	r4, r3
 8012b84:	d006      	beq.n	8012b94 <std+0x48>
 8012b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b8a:	4294      	cmp	r4, r2
 8012b8c:	d002      	beq.n	8012b94 <std+0x48>
 8012b8e:	33d0      	adds	r3, #208	@ 0xd0
 8012b90:	429c      	cmp	r4, r3
 8012b92:	d105      	bne.n	8012ba0 <std+0x54>
 8012b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b9c:	f000 b9e4 	b.w	8012f68 <__retarget_lock_init_recursive>
 8012ba0:	bd10      	pop	{r4, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08012cf5 	.word	0x08012cf5
 8012ba8:	08012d17 	.word	0x08012d17
 8012bac:	08012d4f 	.word	0x08012d4f
 8012bb0:	08012d73 	.word	0x08012d73
 8012bb4:	20008220 	.word	0x20008220

08012bb8 <stdio_exit_handler>:
 8012bb8:	4a02      	ldr	r2, [pc, #8]	@ (8012bc4 <stdio_exit_handler+0xc>)
 8012bba:	4903      	ldr	r1, [pc, #12]	@ (8012bc8 <stdio_exit_handler+0x10>)
 8012bbc:	4803      	ldr	r0, [pc, #12]	@ (8012bcc <stdio_exit_handler+0x14>)
 8012bbe:	f000 b869 	b.w	8012c94 <_fwalk_sglue>
 8012bc2:	bf00      	nop
 8012bc4:	2000001c 	.word	0x2000001c
 8012bc8:	08013869 	.word	0x08013869
 8012bcc:	2000002c 	.word	0x2000002c

08012bd0 <cleanup_stdio>:
 8012bd0:	6841      	ldr	r1, [r0, #4]
 8012bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8012c04 <cleanup_stdio+0x34>)
 8012bd4:	b510      	push	{r4, lr}
 8012bd6:	4299      	cmp	r1, r3
 8012bd8:	4604      	mov	r4, r0
 8012bda:	d001      	beq.n	8012be0 <cleanup_stdio+0x10>
 8012bdc:	f000 fe44 	bl	8013868 <_fflush_r>
 8012be0:	68a1      	ldr	r1, [r4, #8]
 8012be2:	4b09      	ldr	r3, [pc, #36]	@ (8012c08 <cleanup_stdio+0x38>)
 8012be4:	4299      	cmp	r1, r3
 8012be6:	d002      	beq.n	8012bee <cleanup_stdio+0x1e>
 8012be8:	4620      	mov	r0, r4
 8012bea:	f000 fe3d 	bl	8013868 <_fflush_r>
 8012bee:	68e1      	ldr	r1, [r4, #12]
 8012bf0:	4b06      	ldr	r3, [pc, #24]	@ (8012c0c <cleanup_stdio+0x3c>)
 8012bf2:	4299      	cmp	r1, r3
 8012bf4:	d004      	beq.n	8012c00 <cleanup_stdio+0x30>
 8012bf6:	4620      	mov	r0, r4
 8012bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfc:	f000 be34 	b.w	8013868 <_fflush_r>
 8012c00:	bd10      	pop	{r4, pc}
 8012c02:	bf00      	nop
 8012c04:	20008220 	.word	0x20008220
 8012c08:	20008288 	.word	0x20008288
 8012c0c:	200082f0 	.word	0x200082f0

08012c10 <global_stdio_init.part.0>:
 8012c10:	b510      	push	{r4, lr}
 8012c12:	4b0b      	ldr	r3, [pc, #44]	@ (8012c40 <global_stdio_init.part.0+0x30>)
 8012c14:	4c0b      	ldr	r4, [pc, #44]	@ (8012c44 <global_stdio_init.part.0+0x34>)
 8012c16:	4a0c      	ldr	r2, [pc, #48]	@ (8012c48 <global_stdio_init.part.0+0x38>)
 8012c18:	4620      	mov	r0, r4
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	2104      	movs	r1, #4
 8012c1e:	2200      	movs	r2, #0
 8012c20:	f7ff ff94 	bl	8012b4c <std>
 8012c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012c28:	2201      	movs	r2, #1
 8012c2a:	2109      	movs	r1, #9
 8012c2c:	f7ff ff8e 	bl	8012b4c <std>
 8012c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012c34:	2202      	movs	r2, #2
 8012c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c3a:	2112      	movs	r1, #18
 8012c3c:	f7ff bf86 	b.w	8012b4c <std>
 8012c40:	20008358 	.word	0x20008358
 8012c44:	20008220 	.word	0x20008220
 8012c48:	08012bb9 	.word	0x08012bb9

08012c4c <__sfp_lock_acquire>:
 8012c4c:	4801      	ldr	r0, [pc, #4]	@ (8012c54 <__sfp_lock_acquire+0x8>)
 8012c4e:	f000 b98c 	b.w	8012f6a <__retarget_lock_acquire_recursive>
 8012c52:	bf00      	nop
 8012c54:	20008361 	.word	0x20008361

08012c58 <__sfp_lock_release>:
 8012c58:	4801      	ldr	r0, [pc, #4]	@ (8012c60 <__sfp_lock_release+0x8>)
 8012c5a:	f000 b987 	b.w	8012f6c <__retarget_lock_release_recursive>
 8012c5e:	bf00      	nop
 8012c60:	20008361 	.word	0x20008361

08012c64 <__sinit>:
 8012c64:	b510      	push	{r4, lr}
 8012c66:	4604      	mov	r4, r0
 8012c68:	f7ff fff0 	bl	8012c4c <__sfp_lock_acquire>
 8012c6c:	6a23      	ldr	r3, [r4, #32]
 8012c6e:	b11b      	cbz	r3, 8012c78 <__sinit+0x14>
 8012c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c74:	f7ff bff0 	b.w	8012c58 <__sfp_lock_release>
 8012c78:	4b04      	ldr	r3, [pc, #16]	@ (8012c8c <__sinit+0x28>)
 8012c7a:	6223      	str	r3, [r4, #32]
 8012c7c:	4b04      	ldr	r3, [pc, #16]	@ (8012c90 <__sinit+0x2c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d1f5      	bne.n	8012c70 <__sinit+0xc>
 8012c84:	f7ff ffc4 	bl	8012c10 <global_stdio_init.part.0>
 8012c88:	e7f2      	b.n	8012c70 <__sinit+0xc>
 8012c8a:	bf00      	nop
 8012c8c:	08012bd1 	.word	0x08012bd1
 8012c90:	20008358 	.word	0x20008358

08012c94 <_fwalk_sglue>:
 8012c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c98:	4607      	mov	r7, r0
 8012c9a:	4688      	mov	r8, r1
 8012c9c:	4614      	mov	r4, r2
 8012c9e:	2600      	movs	r6, #0
 8012ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8012ca8:	d505      	bpl.n	8012cb6 <_fwalk_sglue+0x22>
 8012caa:	6824      	ldr	r4, [r4, #0]
 8012cac:	2c00      	cmp	r4, #0
 8012cae:	d1f7      	bne.n	8012ca0 <_fwalk_sglue+0xc>
 8012cb0:	4630      	mov	r0, r6
 8012cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012cb6:	89ab      	ldrh	r3, [r5, #12]
 8012cb8:	2b01      	cmp	r3, #1
 8012cba:	d907      	bls.n	8012ccc <_fwalk_sglue+0x38>
 8012cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	d003      	beq.n	8012ccc <_fwalk_sglue+0x38>
 8012cc4:	4629      	mov	r1, r5
 8012cc6:	4638      	mov	r0, r7
 8012cc8:	47c0      	blx	r8
 8012cca:	4306      	orrs	r6, r0
 8012ccc:	3568      	adds	r5, #104	@ 0x68
 8012cce:	e7e9      	b.n	8012ca4 <_fwalk_sglue+0x10>

08012cd0 <iprintf>:
 8012cd0:	b40f      	push	{r0, r1, r2, r3}
 8012cd2:	b507      	push	{r0, r1, r2, lr}
 8012cd4:	4906      	ldr	r1, [pc, #24]	@ (8012cf0 <iprintf+0x20>)
 8012cd6:	ab04      	add	r3, sp, #16
 8012cd8:	6808      	ldr	r0, [r1, #0]
 8012cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cde:	6881      	ldr	r1, [r0, #8]
 8012ce0:	9301      	str	r3, [sp, #4]
 8012ce2:	f000 fa97 	bl	8013214 <_vfiprintf_r>
 8012ce6:	b003      	add	sp, #12
 8012ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cec:	b004      	add	sp, #16
 8012cee:	4770      	bx	lr
 8012cf0:	20000028 	.word	0x20000028

08012cf4 <__sread>:
 8012cf4:	b510      	push	{r4, lr}
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cfc:	f000 f8ec 	bl	8012ed8 <_read_r>
 8012d00:	2800      	cmp	r0, #0
 8012d02:	bfab      	itete	ge
 8012d04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012d06:	89a3      	ldrhlt	r3, [r4, #12]
 8012d08:	181b      	addge	r3, r3, r0
 8012d0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012d0e:	bfac      	ite	ge
 8012d10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012d12:	81a3      	strhlt	r3, [r4, #12]
 8012d14:	bd10      	pop	{r4, pc}

08012d16 <__swrite>:
 8012d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d1a:	461f      	mov	r7, r3
 8012d1c:	898b      	ldrh	r3, [r1, #12]
 8012d1e:	4605      	mov	r5, r0
 8012d20:	05db      	lsls	r3, r3, #23
 8012d22:	460c      	mov	r4, r1
 8012d24:	4616      	mov	r6, r2
 8012d26:	d505      	bpl.n	8012d34 <__swrite+0x1e>
 8012d28:	2302      	movs	r3, #2
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d30:	f000 f8c0 	bl	8012eb4 <_lseek_r>
 8012d34:	89a3      	ldrh	r3, [r4, #12]
 8012d36:	4632      	mov	r2, r6
 8012d38:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d3c:	81a3      	strh	r3, [r4, #12]
 8012d3e:	4628      	mov	r0, r5
 8012d40:	463b      	mov	r3, r7
 8012d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4a:	f000 b8d7 	b.w	8012efc <_write_r>

08012d4e <__sseek>:
 8012d4e:	b510      	push	{r4, lr}
 8012d50:	460c      	mov	r4, r1
 8012d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d56:	f000 f8ad 	bl	8012eb4 <_lseek_r>
 8012d5a:	1c43      	adds	r3, r0, #1
 8012d5c:	89a3      	ldrh	r3, [r4, #12]
 8012d5e:	bf15      	itete	ne
 8012d60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d6a:	81a3      	strheq	r3, [r4, #12]
 8012d6c:	bf18      	it	ne
 8012d6e:	81a3      	strhne	r3, [r4, #12]
 8012d70:	bd10      	pop	{r4, pc}

08012d72 <__sclose>:
 8012d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d76:	f000 b837 	b.w	8012de8 <_close_r>

08012d7a <memcmp>:
 8012d7a:	b510      	push	{r4, lr}
 8012d7c:	3901      	subs	r1, #1
 8012d7e:	4402      	add	r2, r0
 8012d80:	4290      	cmp	r0, r2
 8012d82:	d101      	bne.n	8012d88 <memcmp+0xe>
 8012d84:	2000      	movs	r0, #0
 8012d86:	e005      	b.n	8012d94 <memcmp+0x1a>
 8012d88:	7803      	ldrb	r3, [r0, #0]
 8012d8a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d8e:	42a3      	cmp	r3, r4
 8012d90:	d001      	beq.n	8012d96 <memcmp+0x1c>
 8012d92:	1b18      	subs	r0, r3, r4
 8012d94:	bd10      	pop	{r4, pc}
 8012d96:	3001      	adds	r0, #1
 8012d98:	e7f2      	b.n	8012d80 <memcmp+0x6>

08012d9a <memset>:
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	4402      	add	r2, r0
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d100      	bne.n	8012da4 <memset+0xa>
 8012da2:	4770      	bx	lr
 8012da4:	f803 1b01 	strb.w	r1, [r3], #1
 8012da8:	e7f9      	b.n	8012d9e <memset+0x4>

08012daa <strchr>:
 8012daa:	4603      	mov	r3, r0
 8012dac:	b2c9      	uxtb	r1, r1
 8012dae:	4618      	mov	r0, r3
 8012db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012db4:	b112      	cbz	r2, 8012dbc <strchr+0x12>
 8012db6:	428a      	cmp	r2, r1
 8012db8:	d1f9      	bne.n	8012dae <strchr+0x4>
 8012dba:	4770      	bx	lr
 8012dbc:	2900      	cmp	r1, #0
 8012dbe:	bf18      	it	ne
 8012dc0:	2000      	movne	r0, #0
 8012dc2:	4770      	bx	lr

08012dc4 <strncmp>:
 8012dc4:	b510      	push	{r4, lr}
 8012dc6:	b16a      	cbz	r2, 8012de4 <strncmp+0x20>
 8012dc8:	3901      	subs	r1, #1
 8012dca:	1884      	adds	r4, r0, r2
 8012dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dd0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d103      	bne.n	8012de0 <strncmp+0x1c>
 8012dd8:	42a0      	cmp	r0, r4
 8012dda:	d001      	beq.n	8012de0 <strncmp+0x1c>
 8012ddc:	2a00      	cmp	r2, #0
 8012dde:	d1f5      	bne.n	8012dcc <strncmp+0x8>
 8012de0:	1ad0      	subs	r0, r2, r3
 8012de2:	bd10      	pop	{r4, pc}
 8012de4:	4610      	mov	r0, r2
 8012de6:	e7fc      	b.n	8012de2 <strncmp+0x1e>

08012de8 <_close_r>:
 8012de8:	b538      	push	{r3, r4, r5, lr}
 8012dea:	2300      	movs	r3, #0
 8012dec:	4d05      	ldr	r5, [pc, #20]	@ (8012e04 <_close_r+0x1c>)
 8012dee:	4604      	mov	r4, r0
 8012df0:	4608      	mov	r0, r1
 8012df2:	602b      	str	r3, [r5, #0]
 8012df4:	f7ed ff5c 	bl	8000cb0 <_close>
 8012df8:	1c43      	adds	r3, r0, #1
 8012dfa:	d102      	bne.n	8012e02 <_close_r+0x1a>
 8012dfc:	682b      	ldr	r3, [r5, #0]
 8012dfe:	b103      	cbz	r3, 8012e02 <_close_r+0x1a>
 8012e00:	6023      	str	r3, [r4, #0]
 8012e02:	bd38      	pop	{r3, r4, r5, pc}
 8012e04:	2000835c 	.word	0x2000835c

08012e08 <_reclaim_reent>:
 8012e08:	4b29      	ldr	r3, [pc, #164]	@ (8012eb0 <_reclaim_reent+0xa8>)
 8012e0a:	b570      	push	{r4, r5, r6, lr}
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	4604      	mov	r4, r0
 8012e10:	4283      	cmp	r3, r0
 8012e12:	d04b      	beq.n	8012eac <_reclaim_reent+0xa4>
 8012e14:	69c3      	ldr	r3, [r0, #28]
 8012e16:	b1ab      	cbz	r3, 8012e44 <_reclaim_reent+0x3c>
 8012e18:	68db      	ldr	r3, [r3, #12]
 8012e1a:	b16b      	cbz	r3, 8012e38 <_reclaim_reent+0x30>
 8012e1c:	2500      	movs	r5, #0
 8012e1e:	69e3      	ldr	r3, [r4, #28]
 8012e20:	68db      	ldr	r3, [r3, #12]
 8012e22:	5959      	ldr	r1, [r3, r5]
 8012e24:	2900      	cmp	r1, #0
 8012e26:	d13b      	bne.n	8012ea0 <_reclaim_reent+0x98>
 8012e28:	3504      	adds	r5, #4
 8012e2a:	2d80      	cmp	r5, #128	@ 0x80
 8012e2c:	d1f7      	bne.n	8012e1e <_reclaim_reent+0x16>
 8012e2e:	69e3      	ldr	r3, [r4, #28]
 8012e30:	4620      	mov	r0, r4
 8012e32:	68d9      	ldr	r1, [r3, #12]
 8012e34:	f000 f8c8 	bl	8012fc8 <_free_r>
 8012e38:	69e3      	ldr	r3, [r4, #28]
 8012e3a:	6819      	ldr	r1, [r3, #0]
 8012e3c:	b111      	cbz	r1, 8012e44 <_reclaim_reent+0x3c>
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f000 f8c2 	bl	8012fc8 <_free_r>
 8012e44:	6961      	ldr	r1, [r4, #20]
 8012e46:	b111      	cbz	r1, 8012e4e <_reclaim_reent+0x46>
 8012e48:	4620      	mov	r0, r4
 8012e4a:	f000 f8bd 	bl	8012fc8 <_free_r>
 8012e4e:	69e1      	ldr	r1, [r4, #28]
 8012e50:	b111      	cbz	r1, 8012e58 <_reclaim_reent+0x50>
 8012e52:	4620      	mov	r0, r4
 8012e54:	f000 f8b8 	bl	8012fc8 <_free_r>
 8012e58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012e5a:	b111      	cbz	r1, 8012e62 <_reclaim_reent+0x5a>
 8012e5c:	4620      	mov	r0, r4
 8012e5e:	f000 f8b3 	bl	8012fc8 <_free_r>
 8012e62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e64:	b111      	cbz	r1, 8012e6c <_reclaim_reent+0x64>
 8012e66:	4620      	mov	r0, r4
 8012e68:	f000 f8ae 	bl	8012fc8 <_free_r>
 8012e6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012e6e:	b111      	cbz	r1, 8012e76 <_reclaim_reent+0x6e>
 8012e70:	4620      	mov	r0, r4
 8012e72:	f000 f8a9 	bl	8012fc8 <_free_r>
 8012e76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012e78:	b111      	cbz	r1, 8012e80 <_reclaim_reent+0x78>
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f000 f8a4 	bl	8012fc8 <_free_r>
 8012e80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012e82:	b111      	cbz	r1, 8012e8a <_reclaim_reent+0x82>
 8012e84:	4620      	mov	r0, r4
 8012e86:	f000 f89f 	bl	8012fc8 <_free_r>
 8012e8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012e8c:	b111      	cbz	r1, 8012e94 <_reclaim_reent+0x8c>
 8012e8e:	4620      	mov	r0, r4
 8012e90:	f000 f89a 	bl	8012fc8 <_free_r>
 8012e94:	6a23      	ldr	r3, [r4, #32]
 8012e96:	b14b      	cbz	r3, 8012eac <_reclaim_reent+0xa4>
 8012e98:	4620      	mov	r0, r4
 8012e9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e9e:	4718      	bx	r3
 8012ea0:	680e      	ldr	r6, [r1, #0]
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f000 f890 	bl	8012fc8 <_free_r>
 8012ea8:	4631      	mov	r1, r6
 8012eaa:	e7bb      	b.n	8012e24 <_reclaim_reent+0x1c>
 8012eac:	bd70      	pop	{r4, r5, r6, pc}
 8012eae:	bf00      	nop
 8012eb0:	20000028 	.word	0x20000028

08012eb4 <_lseek_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4604      	mov	r4, r0
 8012eb8:	4608      	mov	r0, r1
 8012eba:	4611      	mov	r1, r2
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	4d05      	ldr	r5, [pc, #20]	@ (8012ed4 <_lseek_r+0x20>)
 8012ec0:	602a      	str	r2, [r5, #0]
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	f7ed ff18 	bl	8000cf8 <_lseek>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_lseek_r+0x1e>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_lseek_r+0x1e>
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	2000835c 	.word	0x2000835c

08012ed8 <_read_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4604      	mov	r4, r0
 8012edc:	4608      	mov	r0, r1
 8012ede:	4611      	mov	r1, r2
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	4d05      	ldr	r5, [pc, #20]	@ (8012ef8 <_read_r+0x20>)
 8012ee4:	602a      	str	r2, [r5, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f7ed fea9 	bl	8000c3e <_read>
 8012eec:	1c43      	adds	r3, r0, #1
 8012eee:	d102      	bne.n	8012ef6 <_read_r+0x1e>
 8012ef0:	682b      	ldr	r3, [r5, #0]
 8012ef2:	b103      	cbz	r3, 8012ef6 <_read_r+0x1e>
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	bd38      	pop	{r3, r4, r5, pc}
 8012ef8:	2000835c 	.word	0x2000835c

08012efc <_write_r>:
 8012efc:	b538      	push	{r3, r4, r5, lr}
 8012efe:	4604      	mov	r4, r0
 8012f00:	4608      	mov	r0, r1
 8012f02:	4611      	mov	r1, r2
 8012f04:	2200      	movs	r2, #0
 8012f06:	4d05      	ldr	r5, [pc, #20]	@ (8012f1c <_write_r+0x20>)
 8012f08:	602a      	str	r2, [r5, #0]
 8012f0a:	461a      	mov	r2, r3
 8012f0c:	f7ed feb4 	bl	8000c78 <_write>
 8012f10:	1c43      	adds	r3, r0, #1
 8012f12:	d102      	bne.n	8012f1a <_write_r+0x1e>
 8012f14:	682b      	ldr	r3, [r5, #0]
 8012f16:	b103      	cbz	r3, 8012f1a <_write_r+0x1e>
 8012f18:	6023      	str	r3, [r4, #0]
 8012f1a:	bd38      	pop	{r3, r4, r5, pc}
 8012f1c:	2000835c 	.word	0x2000835c

08012f20 <__libc_init_array>:
 8012f20:	b570      	push	{r4, r5, r6, lr}
 8012f22:	2600      	movs	r6, #0
 8012f24:	4d0c      	ldr	r5, [pc, #48]	@ (8012f58 <__libc_init_array+0x38>)
 8012f26:	4c0d      	ldr	r4, [pc, #52]	@ (8012f5c <__libc_init_array+0x3c>)
 8012f28:	1b64      	subs	r4, r4, r5
 8012f2a:	10a4      	asrs	r4, r4, #2
 8012f2c:	42a6      	cmp	r6, r4
 8012f2e:	d109      	bne.n	8012f44 <__libc_init_array+0x24>
 8012f30:	f000 fe54 	bl	8013bdc <_init>
 8012f34:	2600      	movs	r6, #0
 8012f36:	4d0a      	ldr	r5, [pc, #40]	@ (8012f60 <__libc_init_array+0x40>)
 8012f38:	4c0a      	ldr	r4, [pc, #40]	@ (8012f64 <__libc_init_array+0x44>)
 8012f3a:	1b64      	subs	r4, r4, r5
 8012f3c:	10a4      	asrs	r4, r4, #2
 8012f3e:	42a6      	cmp	r6, r4
 8012f40:	d105      	bne.n	8012f4e <__libc_init_array+0x2e>
 8012f42:	bd70      	pop	{r4, r5, r6, pc}
 8012f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f48:	4798      	blx	r3
 8012f4a:	3601      	adds	r6, #1
 8012f4c:	e7ee      	b.n	8012f2c <__libc_init_array+0xc>
 8012f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f52:	4798      	blx	r3
 8012f54:	3601      	adds	r6, #1
 8012f56:	e7f2      	b.n	8012f3e <__libc_init_array+0x1e>
 8012f58:	080179bc 	.word	0x080179bc
 8012f5c:	080179bc 	.word	0x080179bc
 8012f60:	080179bc 	.word	0x080179bc
 8012f64:	080179c0 	.word	0x080179c0

08012f68 <__retarget_lock_init_recursive>:
 8012f68:	4770      	bx	lr

08012f6a <__retarget_lock_acquire_recursive>:
 8012f6a:	4770      	bx	lr

08012f6c <__retarget_lock_release_recursive>:
 8012f6c:	4770      	bx	lr

08012f6e <memcpy>:
 8012f6e:	440a      	add	r2, r1
 8012f70:	4291      	cmp	r1, r2
 8012f72:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012f76:	d100      	bne.n	8012f7a <memcpy+0xc>
 8012f78:	4770      	bx	lr
 8012f7a:	b510      	push	{r4, lr}
 8012f7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f80:	4291      	cmp	r1, r2
 8012f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f86:	d1f9      	bne.n	8012f7c <memcpy+0xe>
 8012f88:	bd10      	pop	{r4, pc}
	...

08012f8c <__assert_func>:
 8012f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f8e:	4614      	mov	r4, r2
 8012f90:	461a      	mov	r2, r3
 8012f92:	4b09      	ldr	r3, [pc, #36]	@ (8012fb8 <__assert_func+0x2c>)
 8012f94:	4605      	mov	r5, r0
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	68d8      	ldr	r0, [r3, #12]
 8012f9a:	b954      	cbnz	r4, 8012fb2 <__assert_func+0x26>
 8012f9c:	4b07      	ldr	r3, [pc, #28]	@ (8012fbc <__assert_func+0x30>)
 8012f9e:	461c      	mov	r4, r3
 8012fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012fa4:	9100      	str	r1, [sp, #0]
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	4905      	ldr	r1, [pc, #20]	@ (8012fc0 <__assert_func+0x34>)
 8012faa:	f000 fc85 	bl	80138b8 <fiprintf>
 8012fae:	f000 fd47 	bl	8013a40 <abort>
 8012fb2:	4b04      	ldr	r3, [pc, #16]	@ (8012fc4 <__assert_func+0x38>)
 8012fb4:	e7f4      	b.n	8012fa0 <__assert_func+0x14>
 8012fb6:	bf00      	nop
 8012fb8:	20000028 	.word	0x20000028
 8012fbc:	0801797e 	.word	0x0801797e
 8012fc0:	08017950 	.word	0x08017950
 8012fc4:	08017943 	.word	0x08017943

08012fc8 <_free_r>:
 8012fc8:	b538      	push	{r3, r4, r5, lr}
 8012fca:	4605      	mov	r5, r0
 8012fcc:	2900      	cmp	r1, #0
 8012fce:	d040      	beq.n	8013052 <_free_r+0x8a>
 8012fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fd4:	1f0c      	subs	r4, r1, #4
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	bfb8      	it	lt
 8012fda:	18e4      	addlt	r4, r4, r3
 8012fdc:	f000 f8e6 	bl	80131ac <__malloc_lock>
 8012fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8013054 <_free_r+0x8c>)
 8012fe2:	6813      	ldr	r3, [r2, #0]
 8012fe4:	b933      	cbnz	r3, 8012ff4 <_free_r+0x2c>
 8012fe6:	6063      	str	r3, [r4, #4]
 8012fe8:	6014      	str	r4, [r2, #0]
 8012fea:	4628      	mov	r0, r5
 8012fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ff0:	f000 b8e2 	b.w	80131b8 <__malloc_unlock>
 8012ff4:	42a3      	cmp	r3, r4
 8012ff6:	d908      	bls.n	801300a <_free_r+0x42>
 8012ff8:	6820      	ldr	r0, [r4, #0]
 8012ffa:	1821      	adds	r1, r4, r0
 8012ffc:	428b      	cmp	r3, r1
 8012ffe:	bf01      	itttt	eq
 8013000:	6819      	ldreq	r1, [r3, #0]
 8013002:	685b      	ldreq	r3, [r3, #4]
 8013004:	1809      	addeq	r1, r1, r0
 8013006:	6021      	streq	r1, [r4, #0]
 8013008:	e7ed      	b.n	8012fe6 <_free_r+0x1e>
 801300a:	461a      	mov	r2, r3
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	b10b      	cbz	r3, 8013014 <_free_r+0x4c>
 8013010:	42a3      	cmp	r3, r4
 8013012:	d9fa      	bls.n	801300a <_free_r+0x42>
 8013014:	6811      	ldr	r1, [r2, #0]
 8013016:	1850      	adds	r0, r2, r1
 8013018:	42a0      	cmp	r0, r4
 801301a:	d10b      	bne.n	8013034 <_free_r+0x6c>
 801301c:	6820      	ldr	r0, [r4, #0]
 801301e:	4401      	add	r1, r0
 8013020:	1850      	adds	r0, r2, r1
 8013022:	4283      	cmp	r3, r0
 8013024:	6011      	str	r1, [r2, #0]
 8013026:	d1e0      	bne.n	8012fea <_free_r+0x22>
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	4408      	add	r0, r1
 801302e:	6010      	str	r0, [r2, #0]
 8013030:	6053      	str	r3, [r2, #4]
 8013032:	e7da      	b.n	8012fea <_free_r+0x22>
 8013034:	d902      	bls.n	801303c <_free_r+0x74>
 8013036:	230c      	movs	r3, #12
 8013038:	602b      	str	r3, [r5, #0]
 801303a:	e7d6      	b.n	8012fea <_free_r+0x22>
 801303c:	6820      	ldr	r0, [r4, #0]
 801303e:	1821      	adds	r1, r4, r0
 8013040:	428b      	cmp	r3, r1
 8013042:	bf01      	itttt	eq
 8013044:	6819      	ldreq	r1, [r3, #0]
 8013046:	685b      	ldreq	r3, [r3, #4]
 8013048:	1809      	addeq	r1, r1, r0
 801304a:	6021      	streq	r1, [r4, #0]
 801304c:	6063      	str	r3, [r4, #4]
 801304e:	6054      	str	r4, [r2, #4]
 8013050:	e7cb      	b.n	8012fea <_free_r+0x22>
 8013052:	bd38      	pop	{r3, r4, r5, pc}
 8013054:	20008368 	.word	0x20008368

08013058 <malloc>:
 8013058:	4b02      	ldr	r3, [pc, #8]	@ (8013064 <malloc+0xc>)
 801305a:	4601      	mov	r1, r0
 801305c:	6818      	ldr	r0, [r3, #0]
 801305e:	f000 b825 	b.w	80130ac <_malloc_r>
 8013062:	bf00      	nop
 8013064:	20000028 	.word	0x20000028

08013068 <sbrk_aligned>:
 8013068:	b570      	push	{r4, r5, r6, lr}
 801306a:	4e0f      	ldr	r6, [pc, #60]	@ (80130a8 <sbrk_aligned+0x40>)
 801306c:	460c      	mov	r4, r1
 801306e:	6831      	ldr	r1, [r6, #0]
 8013070:	4605      	mov	r5, r0
 8013072:	b911      	cbnz	r1, 801307a <sbrk_aligned+0x12>
 8013074:	f000 fcc6 	bl	8013a04 <_sbrk_r>
 8013078:	6030      	str	r0, [r6, #0]
 801307a:	4621      	mov	r1, r4
 801307c:	4628      	mov	r0, r5
 801307e:	f000 fcc1 	bl	8013a04 <_sbrk_r>
 8013082:	1c43      	adds	r3, r0, #1
 8013084:	d103      	bne.n	801308e <sbrk_aligned+0x26>
 8013086:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801308a:	4620      	mov	r0, r4
 801308c:	bd70      	pop	{r4, r5, r6, pc}
 801308e:	1cc4      	adds	r4, r0, #3
 8013090:	f024 0403 	bic.w	r4, r4, #3
 8013094:	42a0      	cmp	r0, r4
 8013096:	d0f8      	beq.n	801308a <sbrk_aligned+0x22>
 8013098:	1a21      	subs	r1, r4, r0
 801309a:	4628      	mov	r0, r5
 801309c:	f000 fcb2 	bl	8013a04 <_sbrk_r>
 80130a0:	3001      	adds	r0, #1
 80130a2:	d1f2      	bne.n	801308a <sbrk_aligned+0x22>
 80130a4:	e7ef      	b.n	8013086 <sbrk_aligned+0x1e>
 80130a6:	bf00      	nop
 80130a8:	20008364 	.word	0x20008364

080130ac <_malloc_r>:
 80130ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b0:	1ccd      	adds	r5, r1, #3
 80130b2:	f025 0503 	bic.w	r5, r5, #3
 80130b6:	3508      	adds	r5, #8
 80130b8:	2d0c      	cmp	r5, #12
 80130ba:	bf38      	it	cc
 80130bc:	250c      	movcc	r5, #12
 80130be:	2d00      	cmp	r5, #0
 80130c0:	4606      	mov	r6, r0
 80130c2:	db01      	blt.n	80130c8 <_malloc_r+0x1c>
 80130c4:	42a9      	cmp	r1, r5
 80130c6:	d904      	bls.n	80130d2 <_malloc_r+0x26>
 80130c8:	230c      	movs	r3, #12
 80130ca:	6033      	str	r3, [r6, #0]
 80130cc:	2000      	movs	r0, #0
 80130ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80131a8 <_malloc_r+0xfc>
 80130d6:	f000 f869 	bl	80131ac <__malloc_lock>
 80130da:	f8d8 3000 	ldr.w	r3, [r8]
 80130de:	461c      	mov	r4, r3
 80130e0:	bb44      	cbnz	r4, 8013134 <_malloc_r+0x88>
 80130e2:	4629      	mov	r1, r5
 80130e4:	4630      	mov	r0, r6
 80130e6:	f7ff ffbf 	bl	8013068 <sbrk_aligned>
 80130ea:	1c43      	adds	r3, r0, #1
 80130ec:	4604      	mov	r4, r0
 80130ee:	d158      	bne.n	80131a2 <_malloc_r+0xf6>
 80130f0:	f8d8 4000 	ldr.w	r4, [r8]
 80130f4:	4627      	mov	r7, r4
 80130f6:	2f00      	cmp	r7, #0
 80130f8:	d143      	bne.n	8013182 <_malloc_r+0xd6>
 80130fa:	2c00      	cmp	r4, #0
 80130fc:	d04b      	beq.n	8013196 <_malloc_r+0xea>
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	4639      	mov	r1, r7
 8013102:	4630      	mov	r0, r6
 8013104:	eb04 0903 	add.w	r9, r4, r3
 8013108:	f000 fc7c 	bl	8013a04 <_sbrk_r>
 801310c:	4581      	cmp	r9, r0
 801310e:	d142      	bne.n	8013196 <_malloc_r+0xea>
 8013110:	6821      	ldr	r1, [r4, #0]
 8013112:	4630      	mov	r0, r6
 8013114:	1a6d      	subs	r5, r5, r1
 8013116:	4629      	mov	r1, r5
 8013118:	f7ff ffa6 	bl	8013068 <sbrk_aligned>
 801311c:	3001      	adds	r0, #1
 801311e:	d03a      	beq.n	8013196 <_malloc_r+0xea>
 8013120:	6823      	ldr	r3, [r4, #0]
 8013122:	442b      	add	r3, r5
 8013124:	6023      	str	r3, [r4, #0]
 8013126:	f8d8 3000 	ldr.w	r3, [r8]
 801312a:	685a      	ldr	r2, [r3, #4]
 801312c:	bb62      	cbnz	r2, 8013188 <_malloc_r+0xdc>
 801312e:	f8c8 7000 	str.w	r7, [r8]
 8013132:	e00f      	b.n	8013154 <_malloc_r+0xa8>
 8013134:	6822      	ldr	r2, [r4, #0]
 8013136:	1b52      	subs	r2, r2, r5
 8013138:	d420      	bmi.n	801317c <_malloc_r+0xd0>
 801313a:	2a0b      	cmp	r2, #11
 801313c:	d917      	bls.n	801316e <_malloc_r+0xc2>
 801313e:	1961      	adds	r1, r4, r5
 8013140:	42a3      	cmp	r3, r4
 8013142:	6025      	str	r5, [r4, #0]
 8013144:	bf18      	it	ne
 8013146:	6059      	strne	r1, [r3, #4]
 8013148:	6863      	ldr	r3, [r4, #4]
 801314a:	bf08      	it	eq
 801314c:	f8c8 1000 	streq.w	r1, [r8]
 8013150:	5162      	str	r2, [r4, r5]
 8013152:	604b      	str	r3, [r1, #4]
 8013154:	4630      	mov	r0, r6
 8013156:	f000 f82f 	bl	80131b8 <__malloc_unlock>
 801315a:	f104 000b 	add.w	r0, r4, #11
 801315e:	1d23      	adds	r3, r4, #4
 8013160:	f020 0007 	bic.w	r0, r0, #7
 8013164:	1ac2      	subs	r2, r0, r3
 8013166:	bf1c      	itt	ne
 8013168:	1a1b      	subne	r3, r3, r0
 801316a:	50a3      	strne	r3, [r4, r2]
 801316c:	e7af      	b.n	80130ce <_malloc_r+0x22>
 801316e:	6862      	ldr	r2, [r4, #4]
 8013170:	42a3      	cmp	r3, r4
 8013172:	bf0c      	ite	eq
 8013174:	f8c8 2000 	streq.w	r2, [r8]
 8013178:	605a      	strne	r2, [r3, #4]
 801317a:	e7eb      	b.n	8013154 <_malloc_r+0xa8>
 801317c:	4623      	mov	r3, r4
 801317e:	6864      	ldr	r4, [r4, #4]
 8013180:	e7ae      	b.n	80130e0 <_malloc_r+0x34>
 8013182:	463c      	mov	r4, r7
 8013184:	687f      	ldr	r7, [r7, #4]
 8013186:	e7b6      	b.n	80130f6 <_malloc_r+0x4a>
 8013188:	461a      	mov	r2, r3
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	42a3      	cmp	r3, r4
 801318e:	d1fb      	bne.n	8013188 <_malloc_r+0xdc>
 8013190:	2300      	movs	r3, #0
 8013192:	6053      	str	r3, [r2, #4]
 8013194:	e7de      	b.n	8013154 <_malloc_r+0xa8>
 8013196:	230c      	movs	r3, #12
 8013198:	4630      	mov	r0, r6
 801319a:	6033      	str	r3, [r6, #0]
 801319c:	f000 f80c 	bl	80131b8 <__malloc_unlock>
 80131a0:	e794      	b.n	80130cc <_malloc_r+0x20>
 80131a2:	6005      	str	r5, [r0, #0]
 80131a4:	e7d6      	b.n	8013154 <_malloc_r+0xa8>
 80131a6:	bf00      	nop
 80131a8:	20008368 	.word	0x20008368

080131ac <__malloc_lock>:
 80131ac:	4801      	ldr	r0, [pc, #4]	@ (80131b4 <__malloc_lock+0x8>)
 80131ae:	f7ff bedc 	b.w	8012f6a <__retarget_lock_acquire_recursive>
 80131b2:	bf00      	nop
 80131b4:	20008360 	.word	0x20008360

080131b8 <__malloc_unlock>:
 80131b8:	4801      	ldr	r0, [pc, #4]	@ (80131c0 <__malloc_unlock+0x8>)
 80131ba:	f7ff bed7 	b.w	8012f6c <__retarget_lock_release_recursive>
 80131be:	bf00      	nop
 80131c0:	20008360 	.word	0x20008360

080131c4 <__sfputc_r>:
 80131c4:	6893      	ldr	r3, [r2, #8]
 80131c6:	b410      	push	{r4}
 80131c8:	3b01      	subs	r3, #1
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	6093      	str	r3, [r2, #8]
 80131ce:	da07      	bge.n	80131e0 <__sfputc_r+0x1c>
 80131d0:	6994      	ldr	r4, [r2, #24]
 80131d2:	42a3      	cmp	r3, r4
 80131d4:	db01      	blt.n	80131da <__sfputc_r+0x16>
 80131d6:	290a      	cmp	r1, #10
 80131d8:	d102      	bne.n	80131e0 <__sfputc_r+0x1c>
 80131da:	bc10      	pop	{r4}
 80131dc:	f000 bb7e 	b.w	80138dc <__swbuf_r>
 80131e0:	6813      	ldr	r3, [r2, #0]
 80131e2:	1c58      	adds	r0, r3, #1
 80131e4:	6010      	str	r0, [r2, #0]
 80131e6:	7019      	strb	r1, [r3, #0]
 80131e8:	4608      	mov	r0, r1
 80131ea:	bc10      	pop	{r4}
 80131ec:	4770      	bx	lr

080131ee <__sfputs_r>:
 80131ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f0:	4606      	mov	r6, r0
 80131f2:	460f      	mov	r7, r1
 80131f4:	4614      	mov	r4, r2
 80131f6:	18d5      	adds	r5, r2, r3
 80131f8:	42ac      	cmp	r4, r5
 80131fa:	d101      	bne.n	8013200 <__sfputs_r+0x12>
 80131fc:	2000      	movs	r0, #0
 80131fe:	e007      	b.n	8013210 <__sfputs_r+0x22>
 8013200:	463a      	mov	r2, r7
 8013202:	4630      	mov	r0, r6
 8013204:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013208:	f7ff ffdc 	bl	80131c4 <__sfputc_r>
 801320c:	1c43      	adds	r3, r0, #1
 801320e:	d1f3      	bne.n	80131f8 <__sfputs_r+0xa>
 8013210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013214 <_vfiprintf_r>:
 8013214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013218:	460d      	mov	r5, r1
 801321a:	4614      	mov	r4, r2
 801321c:	4698      	mov	r8, r3
 801321e:	4606      	mov	r6, r0
 8013220:	b09d      	sub	sp, #116	@ 0x74
 8013222:	b118      	cbz	r0, 801322c <_vfiprintf_r+0x18>
 8013224:	6a03      	ldr	r3, [r0, #32]
 8013226:	b90b      	cbnz	r3, 801322c <_vfiprintf_r+0x18>
 8013228:	f7ff fd1c 	bl	8012c64 <__sinit>
 801322c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801322e:	07d9      	lsls	r1, r3, #31
 8013230:	d405      	bmi.n	801323e <_vfiprintf_r+0x2a>
 8013232:	89ab      	ldrh	r3, [r5, #12]
 8013234:	059a      	lsls	r2, r3, #22
 8013236:	d402      	bmi.n	801323e <_vfiprintf_r+0x2a>
 8013238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801323a:	f7ff fe96 	bl	8012f6a <__retarget_lock_acquire_recursive>
 801323e:	89ab      	ldrh	r3, [r5, #12]
 8013240:	071b      	lsls	r3, r3, #28
 8013242:	d501      	bpl.n	8013248 <_vfiprintf_r+0x34>
 8013244:	692b      	ldr	r3, [r5, #16]
 8013246:	b99b      	cbnz	r3, 8013270 <_vfiprintf_r+0x5c>
 8013248:	4629      	mov	r1, r5
 801324a:	4630      	mov	r0, r6
 801324c:	f000 fb84 	bl	8013958 <__swsetup_r>
 8013250:	b170      	cbz	r0, 8013270 <_vfiprintf_r+0x5c>
 8013252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013254:	07dc      	lsls	r4, r3, #31
 8013256:	d504      	bpl.n	8013262 <_vfiprintf_r+0x4e>
 8013258:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801325c:	b01d      	add	sp, #116	@ 0x74
 801325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013262:	89ab      	ldrh	r3, [r5, #12]
 8013264:	0598      	lsls	r0, r3, #22
 8013266:	d4f7      	bmi.n	8013258 <_vfiprintf_r+0x44>
 8013268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801326a:	f7ff fe7f 	bl	8012f6c <__retarget_lock_release_recursive>
 801326e:	e7f3      	b.n	8013258 <_vfiprintf_r+0x44>
 8013270:	2300      	movs	r3, #0
 8013272:	9309      	str	r3, [sp, #36]	@ 0x24
 8013274:	2320      	movs	r3, #32
 8013276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801327a:	2330      	movs	r3, #48	@ 0x30
 801327c:	f04f 0901 	mov.w	r9, #1
 8013280:	f8cd 800c 	str.w	r8, [sp, #12]
 8013284:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8013430 <_vfiprintf_r+0x21c>
 8013288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801328c:	4623      	mov	r3, r4
 801328e:	469a      	mov	sl, r3
 8013290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013294:	b10a      	cbz	r2, 801329a <_vfiprintf_r+0x86>
 8013296:	2a25      	cmp	r2, #37	@ 0x25
 8013298:	d1f9      	bne.n	801328e <_vfiprintf_r+0x7a>
 801329a:	ebba 0b04 	subs.w	fp, sl, r4
 801329e:	d00b      	beq.n	80132b8 <_vfiprintf_r+0xa4>
 80132a0:	465b      	mov	r3, fp
 80132a2:	4622      	mov	r2, r4
 80132a4:	4629      	mov	r1, r5
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7ff ffa1 	bl	80131ee <__sfputs_r>
 80132ac:	3001      	adds	r0, #1
 80132ae:	f000 80a7 	beq.w	8013400 <_vfiprintf_r+0x1ec>
 80132b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132b4:	445a      	add	r2, fp
 80132b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80132b8:	f89a 3000 	ldrb.w	r3, [sl]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 809f 	beq.w	8013400 <_vfiprintf_r+0x1ec>
 80132c2:	2300      	movs	r3, #0
 80132c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80132c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132cc:	f10a 0a01 	add.w	sl, sl, #1
 80132d0:	9304      	str	r3, [sp, #16]
 80132d2:	9307      	str	r3, [sp, #28]
 80132d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80132d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80132da:	4654      	mov	r4, sl
 80132dc:	2205      	movs	r2, #5
 80132de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132e2:	4853      	ldr	r0, [pc, #332]	@ (8013430 <_vfiprintf_r+0x21c>)
 80132e4:	f000 fb9e 	bl	8013a24 <memchr>
 80132e8:	9a04      	ldr	r2, [sp, #16]
 80132ea:	b9d8      	cbnz	r0, 8013324 <_vfiprintf_r+0x110>
 80132ec:	06d1      	lsls	r1, r2, #27
 80132ee:	bf44      	itt	mi
 80132f0:	2320      	movmi	r3, #32
 80132f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132f6:	0713      	lsls	r3, r2, #28
 80132f8:	bf44      	itt	mi
 80132fa:	232b      	movmi	r3, #43	@ 0x2b
 80132fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013300:	f89a 3000 	ldrb.w	r3, [sl]
 8013304:	2b2a      	cmp	r3, #42	@ 0x2a
 8013306:	d015      	beq.n	8013334 <_vfiprintf_r+0x120>
 8013308:	4654      	mov	r4, sl
 801330a:	2000      	movs	r0, #0
 801330c:	f04f 0c0a 	mov.w	ip, #10
 8013310:	9a07      	ldr	r2, [sp, #28]
 8013312:	4621      	mov	r1, r4
 8013314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013318:	3b30      	subs	r3, #48	@ 0x30
 801331a:	2b09      	cmp	r3, #9
 801331c:	d94b      	bls.n	80133b6 <_vfiprintf_r+0x1a2>
 801331e:	b1b0      	cbz	r0, 801334e <_vfiprintf_r+0x13a>
 8013320:	9207      	str	r2, [sp, #28]
 8013322:	e014      	b.n	801334e <_vfiprintf_r+0x13a>
 8013324:	eba0 0308 	sub.w	r3, r0, r8
 8013328:	fa09 f303 	lsl.w	r3, r9, r3
 801332c:	4313      	orrs	r3, r2
 801332e:	46a2      	mov	sl, r4
 8013330:	9304      	str	r3, [sp, #16]
 8013332:	e7d2      	b.n	80132da <_vfiprintf_r+0xc6>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	1d19      	adds	r1, r3, #4
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	9103      	str	r1, [sp, #12]
 801333c:	2b00      	cmp	r3, #0
 801333e:	bfbb      	ittet	lt
 8013340:	425b      	neglt	r3, r3
 8013342:	f042 0202 	orrlt.w	r2, r2, #2
 8013346:	9307      	strge	r3, [sp, #28]
 8013348:	9307      	strlt	r3, [sp, #28]
 801334a:	bfb8      	it	lt
 801334c:	9204      	strlt	r2, [sp, #16]
 801334e:	7823      	ldrb	r3, [r4, #0]
 8013350:	2b2e      	cmp	r3, #46	@ 0x2e
 8013352:	d10a      	bne.n	801336a <_vfiprintf_r+0x156>
 8013354:	7863      	ldrb	r3, [r4, #1]
 8013356:	2b2a      	cmp	r3, #42	@ 0x2a
 8013358:	d132      	bne.n	80133c0 <_vfiprintf_r+0x1ac>
 801335a:	9b03      	ldr	r3, [sp, #12]
 801335c:	3402      	adds	r4, #2
 801335e:	1d1a      	adds	r2, r3, #4
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	9203      	str	r2, [sp, #12]
 8013364:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013368:	9305      	str	r3, [sp, #20]
 801336a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8013434 <_vfiprintf_r+0x220>
 801336e:	2203      	movs	r2, #3
 8013370:	4650      	mov	r0, sl
 8013372:	7821      	ldrb	r1, [r4, #0]
 8013374:	f000 fb56 	bl	8013a24 <memchr>
 8013378:	b138      	cbz	r0, 801338a <_vfiprintf_r+0x176>
 801337a:	2240      	movs	r2, #64	@ 0x40
 801337c:	9b04      	ldr	r3, [sp, #16]
 801337e:	eba0 000a 	sub.w	r0, r0, sl
 8013382:	4082      	lsls	r2, r0
 8013384:	4313      	orrs	r3, r2
 8013386:	3401      	adds	r4, #1
 8013388:	9304      	str	r3, [sp, #16]
 801338a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801338e:	2206      	movs	r2, #6
 8013390:	4829      	ldr	r0, [pc, #164]	@ (8013438 <_vfiprintf_r+0x224>)
 8013392:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013396:	f000 fb45 	bl	8013a24 <memchr>
 801339a:	2800      	cmp	r0, #0
 801339c:	d03f      	beq.n	801341e <_vfiprintf_r+0x20a>
 801339e:	4b27      	ldr	r3, [pc, #156]	@ (801343c <_vfiprintf_r+0x228>)
 80133a0:	bb1b      	cbnz	r3, 80133ea <_vfiprintf_r+0x1d6>
 80133a2:	9b03      	ldr	r3, [sp, #12]
 80133a4:	3307      	adds	r3, #7
 80133a6:	f023 0307 	bic.w	r3, r3, #7
 80133aa:	3308      	adds	r3, #8
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133b0:	443b      	add	r3, r7
 80133b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80133b4:	e76a      	b.n	801328c <_vfiprintf_r+0x78>
 80133b6:	460c      	mov	r4, r1
 80133b8:	2001      	movs	r0, #1
 80133ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80133be:	e7a8      	b.n	8013312 <_vfiprintf_r+0xfe>
 80133c0:	2300      	movs	r3, #0
 80133c2:	f04f 0c0a 	mov.w	ip, #10
 80133c6:	4619      	mov	r1, r3
 80133c8:	3401      	adds	r4, #1
 80133ca:	9305      	str	r3, [sp, #20]
 80133cc:	4620      	mov	r0, r4
 80133ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133d2:	3a30      	subs	r2, #48	@ 0x30
 80133d4:	2a09      	cmp	r2, #9
 80133d6:	d903      	bls.n	80133e0 <_vfiprintf_r+0x1cc>
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d0c6      	beq.n	801336a <_vfiprintf_r+0x156>
 80133dc:	9105      	str	r1, [sp, #20]
 80133de:	e7c4      	b.n	801336a <_vfiprintf_r+0x156>
 80133e0:	4604      	mov	r4, r0
 80133e2:	2301      	movs	r3, #1
 80133e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80133e8:	e7f0      	b.n	80133cc <_vfiprintf_r+0x1b8>
 80133ea:	ab03      	add	r3, sp, #12
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	462a      	mov	r2, r5
 80133f0:	4630      	mov	r0, r6
 80133f2:	4b13      	ldr	r3, [pc, #76]	@ (8013440 <_vfiprintf_r+0x22c>)
 80133f4:	a904      	add	r1, sp, #16
 80133f6:	f3af 8000 	nop.w
 80133fa:	4607      	mov	r7, r0
 80133fc:	1c78      	adds	r0, r7, #1
 80133fe:	d1d6      	bne.n	80133ae <_vfiprintf_r+0x19a>
 8013400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013402:	07d9      	lsls	r1, r3, #31
 8013404:	d405      	bmi.n	8013412 <_vfiprintf_r+0x1fe>
 8013406:	89ab      	ldrh	r3, [r5, #12]
 8013408:	059a      	lsls	r2, r3, #22
 801340a:	d402      	bmi.n	8013412 <_vfiprintf_r+0x1fe>
 801340c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801340e:	f7ff fdad 	bl	8012f6c <__retarget_lock_release_recursive>
 8013412:	89ab      	ldrh	r3, [r5, #12]
 8013414:	065b      	lsls	r3, r3, #25
 8013416:	f53f af1f 	bmi.w	8013258 <_vfiprintf_r+0x44>
 801341a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801341c:	e71e      	b.n	801325c <_vfiprintf_r+0x48>
 801341e:	ab03      	add	r3, sp, #12
 8013420:	9300      	str	r3, [sp, #0]
 8013422:	462a      	mov	r2, r5
 8013424:	4630      	mov	r0, r6
 8013426:	4b06      	ldr	r3, [pc, #24]	@ (8013440 <_vfiprintf_r+0x22c>)
 8013428:	a904      	add	r1, sp, #16
 801342a:	f000 f87d 	bl	8013528 <_printf_i>
 801342e:	e7e4      	b.n	80133fa <_vfiprintf_r+0x1e6>
 8013430:	0801797f 	.word	0x0801797f
 8013434:	08017985 	.word	0x08017985
 8013438:	08017989 	.word	0x08017989
 801343c:	00000000 	.word	0x00000000
 8013440:	080131ef 	.word	0x080131ef

08013444 <_printf_common>:
 8013444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013448:	4616      	mov	r6, r2
 801344a:	4698      	mov	r8, r3
 801344c:	688a      	ldr	r2, [r1, #8]
 801344e:	690b      	ldr	r3, [r1, #16]
 8013450:	4607      	mov	r7, r0
 8013452:	4293      	cmp	r3, r2
 8013454:	bfb8      	it	lt
 8013456:	4613      	movlt	r3, r2
 8013458:	6033      	str	r3, [r6, #0]
 801345a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801345e:	460c      	mov	r4, r1
 8013460:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013464:	b10a      	cbz	r2, 801346a <_printf_common+0x26>
 8013466:	3301      	adds	r3, #1
 8013468:	6033      	str	r3, [r6, #0]
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	0699      	lsls	r1, r3, #26
 801346e:	bf42      	ittt	mi
 8013470:	6833      	ldrmi	r3, [r6, #0]
 8013472:	3302      	addmi	r3, #2
 8013474:	6033      	strmi	r3, [r6, #0]
 8013476:	6825      	ldr	r5, [r4, #0]
 8013478:	f015 0506 	ands.w	r5, r5, #6
 801347c:	d106      	bne.n	801348c <_printf_common+0x48>
 801347e:	f104 0a19 	add.w	sl, r4, #25
 8013482:	68e3      	ldr	r3, [r4, #12]
 8013484:	6832      	ldr	r2, [r6, #0]
 8013486:	1a9b      	subs	r3, r3, r2
 8013488:	42ab      	cmp	r3, r5
 801348a:	dc2b      	bgt.n	80134e4 <_printf_common+0xa0>
 801348c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013490:	6822      	ldr	r2, [r4, #0]
 8013492:	3b00      	subs	r3, #0
 8013494:	bf18      	it	ne
 8013496:	2301      	movne	r3, #1
 8013498:	0692      	lsls	r2, r2, #26
 801349a:	d430      	bmi.n	80134fe <_printf_common+0xba>
 801349c:	4641      	mov	r1, r8
 801349e:	4638      	mov	r0, r7
 80134a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80134a4:	47c8      	blx	r9
 80134a6:	3001      	adds	r0, #1
 80134a8:	d023      	beq.n	80134f2 <_printf_common+0xae>
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	6922      	ldr	r2, [r4, #16]
 80134ae:	f003 0306 	and.w	r3, r3, #6
 80134b2:	2b04      	cmp	r3, #4
 80134b4:	bf14      	ite	ne
 80134b6:	2500      	movne	r5, #0
 80134b8:	6833      	ldreq	r3, [r6, #0]
 80134ba:	f04f 0600 	mov.w	r6, #0
 80134be:	bf08      	it	eq
 80134c0:	68e5      	ldreq	r5, [r4, #12]
 80134c2:	f104 041a 	add.w	r4, r4, #26
 80134c6:	bf08      	it	eq
 80134c8:	1aed      	subeq	r5, r5, r3
 80134ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80134ce:	bf08      	it	eq
 80134d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134d4:	4293      	cmp	r3, r2
 80134d6:	bfc4      	itt	gt
 80134d8:	1a9b      	subgt	r3, r3, r2
 80134da:	18ed      	addgt	r5, r5, r3
 80134dc:	42b5      	cmp	r5, r6
 80134de:	d11a      	bne.n	8013516 <_printf_common+0xd2>
 80134e0:	2000      	movs	r0, #0
 80134e2:	e008      	b.n	80134f6 <_printf_common+0xb2>
 80134e4:	2301      	movs	r3, #1
 80134e6:	4652      	mov	r2, sl
 80134e8:	4641      	mov	r1, r8
 80134ea:	4638      	mov	r0, r7
 80134ec:	47c8      	blx	r9
 80134ee:	3001      	adds	r0, #1
 80134f0:	d103      	bne.n	80134fa <_printf_common+0xb6>
 80134f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134fa:	3501      	adds	r5, #1
 80134fc:	e7c1      	b.n	8013482 <_printf_common+0x3e>
 80134fe:	2030      	movs	r0, #48	@ 0x30
 8013500:	18e1      	adds	r1, r4, r3
 8013502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013506:	1c5a      	adds	r2, r3, #1
 8013508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801350c:	4422      	add	r2, r4
 801350e:	3302      	adds	r3, #2
 8013510:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013514:	e7c2      	b.n	801349c <_printf_common+0x58>
 8013516:	2301      	movs	r3, #1
 8013518:	4622      	mov	r2, r4
 801351a:	4641      	mov	r1, r8
 801351c:	4638      	mov	r0, r7
 801351e:	47c8      	blx	r9
 8013520:	3001      	adds	r0, #1
 8013522:	d0e6      	beq.n	80134f2 <_printf_common+0xae>
 8013524:	3601      	adds	r6, #1
 8013526:	e7d9      	b.n	80134dc <_printf_common+0x98>

08013528 <_printf_i>:
 8013528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801352c:	7e0f      	ldrb	r7, [r1, #24]
 801352e:	4691      	mov	r9, r2
 8013530:	2f78      	cmp	r7, #120	@ 0x78
 8013532:	4680      	mov	r8, r0
 8013534:	460c      	mov	r4, r1
 8013536:	469a      	mov	sl, r3
 8013538:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801353a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801353e:	d807      	bhi.n	8013550 <_printf_i+0x28>
 8013540:	2f62      	cmp	r7, #98	@ 0x62
 8013542:	d80a      	bhi.n	801355a <_printf_i+0x32>
 8013544:	2f00      	cmp	r7, #0
 8013546:	f000 80d3 	beq.w	80136f0 <_printf_i+0x1c8>
 801354a:	2f58      	cmp	r7, #88	@ 0x58
 801354c:	f000 80ba 	beq.w	80136c4 <_printf_i+0x19c>
 8013550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013558:	e03a      	b.n	80135d0 <_printf_i+0xa8>
 801355a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801355e:	2b15      	cmp	r3, #21
 8013560:	d8f6      	bhi.n	8013550 <_printf_i+0x28>
 8013562:	a101      	add	r1, pc, #4	@ (adr r1, 8013568 <_printf_i+0x40>)
 8013564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013568:	080135c1 	.word	0x080135c1
 801356c:	080135d5 	.word	0x080135d5
 8013570:	08013551 	.word	0x08013551
 8013574:	08013551 	.word	0x08013551
 8013578:	08013551 	.word	0x08013551
 801357c:	08013551 	.word	0x08013551
 8013580:	080135d5 	.word	0x080135d5
 8013584:	08013551 	.word	0x08013551
 8013588:	08013551 	.word	0x08013551
 801358c:	08013551 	.word	0x08013551
 8013590:	08013551 	.word	0x08013551
 8013594:	080136d7 	.word	0x080136d7
 8013598:	080135ff 	.word	0x080135ff
 801359c:	08013691 	.word	0x08013691
 80135a0:	08013551 	.word	0x08013551
 80135a4:	08013551 	.word	0x08013551
 80135a8:	080136f9 	.word	0x080136f9
 80135ac:	08013551 	.word	0x08013551
 80135b0:	080135ff 	.word	0x080135ff
 80135b4:	08013551 	.word	0x08013551
 80135b8:	08013551 	.word	0x08013551
 80135bc:	08013699 	.word	0x08013699
 80135c0:	6833      	ldr	r3, [r6, #0]
 80135c2:	1d1a      	adds	r2, r3, #4
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	6032      	str	r2, [r6, #0]
 80135c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80135cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80135d0:	2301      	movs	r3, #1
 80135d2:	e09e      	b.n	8013712 <_printf_i+0x1ea>
 80135d4:	6833      	ldr	r3, [r6, #0]
 80135d6:	6820      	ldr	r0, [r4, #0]
 80135d8:	1d19      	adds	r1, r3, #4
 80135da:	6031      	str	r1, [r6, #0]
 80135dc:	0606      	lsls	r6, r0, #24
 80135de:	d501      	bpl.n	80135e4 <_printf_i+0xbc>
 80135e0:	681d      	ldr	r5, [r3, #0]
 80135e2:	e003      	b.n	80135ec <_printf_i+0xc4>
 80135e4:	0645      	lsls	r5, r0, #25
 80135e6:	d5fb      	bpl.n	80135e0 <_printf_i+0xb8>
 80135e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80135ec:	2d00      	cmp	r5, #0
 80135ee:	da03      	bge.n	80135f8 <_printf_i+0xd0>
 80135f0:	232d      	movs	r3, #45	@ 0x2d
 80135f2:	426d      	negs	r5, r5
 80135f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135f8:	230a      	movs	r3, #10
 80135fa:	4859      	ldr	r0, [pc, #356]	@ (8013760 <_printf_i+0x238>)
 80135fc:	e011      	b.n	8013622 <_printf_i+0xfa>
 80135fe:	6821      	ldr	r1, [r4, #0]
 8013600:	6833      	ldr	r3, [r6, #0]
 8013602:	0608      	lsls	r0, r1, #24
 8013604:	f853 5b04 	ldr.w	r5, [r3], #4
 8013608:	d402      	bmi.n	8013610 <_printf_i+0xe8>
 801360a:	0649      	lsls	r1, r1, #25
 801360c:	bf48      	it	mi
 801360e:	b2ad      	uxthmi	r5, r5
 8013610:	2f6f      	cmp	r7, #111	@ 0x6f
 8013612:	6033      	str	r3, [r6, #0]
 8013614:	bf14      	ite	ne
 8013616:	230a      	movne	r3, #10
 8013618:	2308      	moveq	r3, #8
 801361a:	4851      	ldr	r0, [pc, #324]	@ (8013760 <_printf_i+0x238>)
 801361c:	2100      	movs	r1, #0
 801361e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013622:	6866      	ldr	r6, [r4, #4]
 8013624:	2e00      	cmp	r6, #0
 8013626:	bfa8      	it	ge
 8013628:	6821      	ldrge	r1, [r4, #0]
 801362a:	60a6      	str	r6, [r4, #8]
 801362c:	bfa4      	itt	ge
 801362e:	f021 0104 	bicge.w	r1, r1, #4
 8013632:	6021      	strge	r1, [r4, #0]
 8013634:	b90d      	cbnz	r5, 801363a <_printf_i+0x112>
 8013636:	2e00      	cmp	r6, #0
 8013638:	d04b      	beq.n	80136d2 <_printf_i+0x1aa>
 801363a:	4616      	mov	r6, r2
 801363c:	fbb5 f1f3 	udiv	r1, r5, r3
 8013640:	fb03 5711 	mls	r7, r3, r1, r5
 8013644:	5dc7      	ldrb	r7, [r0, r7]
 8013646:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801364a:	462f      	mov	r7, r5
 801364c:	42bb      	cmp	r3, r7
 801364e:	460d      	mov	r5, r1
 8013650:	d9f4      	bls.n	801363c <_printf_i+0x114>
 8013652:	2b08      	cmp	r3, #8
 8013654:	d10b      	bne.n	801366e <_printf_i+0x146>
 8013656:	6823      	ldr	r3, [r4, #0]
 8013658:	07df      	lsls	r7, r3, #31
 801365a:	d508      	bpl.n	801366e <_printf_i+0x146>
 801365c:	6923      	ldr	r3, [r4, #16]
 801365e:	6861      	ldr	r1, [r4, #4]
 8013660:	4299      	cmp	r1, r3
 8013662:	bfde      	ittt	le
 8013664:	2330      	movle	r3, #48	@ 0x30
 8013666:	f806 3c01 	strble.w	r3, [r6, #-1]
 801366a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801366e:	1b92      	subs	r2, r2, r6
 8013670:	6122      	str	r2, [r4, #16]
 8013672:	464b      	mov	r3, r9
 8013674:	4621      	mov	r1, r4
 8013676:	4640      	mov	r0, r8
 8013678:	f8cd a000 	str.w	sl, [sp]
 801367c:	aa03      	add	r2, sp, #12
 801367e:	f7ff fee1 	bl	8013444 <_printf_common>
 8013682:	3001      	adds	r0, #1
 8013684:	d14a      	bne.n	801371c <_printf_i+0x1f4>
 8013686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801368a:	b004      	add	sp, #16
 801368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013690:	6823      	ldr	r3, [r4, #0]
 8013692:	f043 0320 	orr.w	r3, r3, #32
 8013696:	6023      	str	r3, [r4, #0]
 8013698:	2778      	movs	r7, #120	@ 0x78
 801369a:	4832      	ldr	r0, [pc, #200]	@ (8013764 <_printf_i+0x23c>)
 801369c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80136a0:	6823      	ldr	r3, [r4, #0]
 80136a2:	6831      	ldr	r1, [r6, #0]
 80136a4:	061f      	lsls	r7, r3, #24
 80136a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80136aa:	d402      	bmi.n	80136b2 <_printf_i+0x18a>
 80136ac:	065f      	lsls	r7, r3, #25
 80136ae:	bf48      	it	mi
 80136b0:	b2ad      	uxthmi	r5, r5
 80136b2:	6031      	str	r1, [r6, #0]
 80136b4:	07d9      	lsls	r1, r3, #31
 80136b6:	bf44      	itt	mi
 80136b8:	f043 0320 	orrmi.w	r3, r3, #32
 80136bc:	6023      	strmi	r3, [r4, #0]
 80136be:	b11d      	cbz	r5, 80136c8 <_printf_i+0x1a0>
 80136c0:	2310      	movs	r3, #16
 80136c2:	e7ab      	b.n	801361c <_printf_i+0xf4>
 80136c4:	4826      	ldr	r0, [pc, #152]	@ (8013760 <_printf_i+0x238>)
 80136c6:	e7e9      	b.n	801369c <_printf_i+0x174>
 80136c8:	6823      	ldr	r3, [r4, #0]
 80136ca:	f023 0320 	bic.w	r3, r3, #32
 80136ce:	6023      	str	r3, [r4, #0]
 80136d0:	e7f6      	b.n	80136c0 <_printf_i+0x198>
 80136d2:	4616      	mov	r6, r2
 80136d4:	e7bd      	b.n	8013652 <_printf_i+0x12a>
 80136d6:	6833      	ldr	r3, [r6, #0]
 80136d8:	6825      	ldr	r5, [r4, #0]
 80136da:	1d18      	adds	r0, r3, #4
 80136dc:	6961      	ldr	r1, [r4, #20]
 80136de:	6030      	str	r0, [r6, #0]
 80136e0:	062e      	lsls	r6, r5, #24
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	d501      	bpl.n	80136ea <_printf_i+0x1c2>
 80136e6:	6019      	str	r1, [r3, #0]
 80136e8:	e002      	b.n	80136f0 <_printf_i+0x1c8>
 80136ea:	0668      	lsls	r0, r5, #25
 80136ec:	d5fb      	bpl.n	80136e6 <_printf_i+0x1be>
 80136ee:	8019      	strh	r1, [r3, #0]
 80136f0:	2300      	movs	r3, #0
 80136f2:	4616      	mov	r6, r2
 80136f4:	6123      	str	r3, [r4, #16]
 80136f6:	e7bc      	b.n	8013672 <_printf_i+0x14a>
 80136f8:	6833      	ldr	r3, [r6, #0]
 80136fa:	2100      	movs	r1, #0
 80136fc:	1d1a      	adds	r2, r3, #4
 80136fe:	6032      	str	r2, [r6, #0]
 8013700:	681e      	ldr	r6, [r3, #0]
 8013702:	6862      	ldr	r2, [r4, #4]
 8013704:	4630      	mov	r0, r6
 8013706:	f000 f98d 	bl	8013a24 <memchr>
 801370a:	b108      	cbz	r0, 8013710 <_printf_i+0x1e8>
 801370c:	1b80      	subs	r0, r0, r6
 801370e:	6060      	str	r0, [r4, #4]
 8013710:	6863      	ldr	r3, [r4, #4]
 8013712:	6123      	str	r3, [r4, #16]
 8013714:	2300      	movs	r3, #0
 8013716:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801371a:	e7aa      	b.n	8013672 <_printf_i+0x14a>
 801371c:	4632      	mov	r2, r6
 801371e:	4649      	mov	r1, r9
 8013720:	4640      	mov	r0, r8
 8013722:	6923      	ldr	r3, [r4, #16]
 8013724:	47d0      	blx	sl
 8013726:	3001      	adds	r0, #1
 8013728:	d0ad      	beq.n	8013686 <_printf_i+0x15e>
 801372a:	6823      	ldr	r3, [r4, #0]
 801372c:	079b      	lsls	r3, r3, #30
 801372e:	d413      	bmi.n	8013758 <_printf_i+0x230>
 8013730:	68e0      	ldr	r0, [r4, #12]
 8013732:	9b03      	ldr	r3, [sp, #12]
 8013734:	4298      	cmp	r0, r3
 8013736:	bfb8      	it	lt
 8013738:	4618      	movlt	r0, r3
 801373a:	e7a6      	b.n	801368a <_printf_i+0x162>
 801373c:	2301      	movs	r3, #1
 801373e:	4632      	mov	r2, r6
 8013740:	4649      	mov	r1, r9
 8013742:	4640      	mov	r0, r8
 8013744:	47d0      	blx	sl
 8013746:	3001      	adds	r0, #1
 8013748:	d09d      	beq.n	8013686 <_printf_i+0x15e>
 801374a:	3501      	adds	r5, #1
 801374c:	68e3      	ldr	r3, [r4, #12]
 801374e:	9903      	ldr	r1, [sp, #12]
 8013750:	1a5b      	subs	r3, r3, r1
 8013752:	42ab      	cmp	r3, r5
 8013754:	dcf2      	bgt.n	801373c <_printf_i+0x214>
 8013756:	e7eb      	b.n	8013730 <_printf_i+0x208>
 8013758:	2500      	movs	r5, #0
 801375a:	f104 0619 	add.w	r6, r4, #25
 801375e:	e7f5      	b.n	801374c <_printf_i+0x224>
 8013760:	08017990 	.word	0x08017990
 8013764:	080179a1 	.word	0x080179a1

08013768 <__sflush_r>:
 8013768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801376c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801376e:	0716      	lsls	r6, r2, #28
 8013770:	4605      	mov	r5, r0
 8013772:	460c      	mov	r4, r1
 8013774:	d454      	bmi.n	8013820 <__sflush_r+0xb8>
 8013776:	684b      	ldr	r3, [r1, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	dc02      	bgt.n	8013782 <__sflush_r+0x1a>
 801377c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801377e:	2b00      	cmp	r3, #0
 8013780:	dd48      	ble.n	8013814 <__sflush_r+0xac>
 8013782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013784:	2e00      	cmp	r6, #0
 8013786:	d045      	beq.n	8013814 <__sflush_r+0xac>
 8013788:	2300      	movs	r3, #0
 801378a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801378e:	682f      	ldr	r7, [r5, #0]
 8013790:	6a21      	ldr	r1, [r4, #32]
 8013792:	602b      	str	r3, [r5, #0]
 8013794:	d030      	beq.n	80137f8 <__sflush_r+0x90>
 8013796:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013798:	89a3      	ldrh	r3, [r4, #12]
 801379a:	0759      	lsls	r1, r3, #29
 801379c:	d505      	bpl.n	80137aa <__sflush_r+0x42>
 801379e:	6863      	ldr	r3, [r4, #4]
 80137a0:	1ad2      	subs	r2, r2, r3
 80137a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80137a4:	b10b      	cbz	r3, 80137aa <__sflush_r+0x42>
 80137a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80137a8:	1ad2      	subs	r2, r2, r3
 80137aa:	2300      	movs	r3, #0
 80137ac:	4628      	mov	r0, r5
 80137ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80137b0:	6a21      	ldr	r1, [r4, #32]
 80137b2:	47b0      	blx	r6
 80137b4:	1c43      	adds	r3, r0, #1
 80137b6:	89a3      	ldrh	r3, [r4, #12]
 80137b8:	d106      	bne.n	80137c8 <__sflush_r+0x60>
 80137ba:	6829      	ldr	r1, [r5, #0]
 80137bc:	291d      	cmp	r1, #29
 80137be:	d82b      	bhi.n	8013818 <__sflush_r+0xb0>
 80137c0:	4a28      	ldr	r2, [pc, #160]	@ (8013864 <__sflush_r+0xfc>)
 80137c2:	410a      	asrs	r2, r1
 80137c4:	07d6      	lsls	r6, r2, #31
 80137c6:	d427      	bmi.n	8013818 <__sflush_r+0xb0>
 80137c8:	2200      	movs	r2, #0
 80137ca:	6062      	str	r2, [r4, #4]
 80137cc:	6922      	ldr	r2, [r4, #16]
 80137ce:	04d9      	lsls	r1, r3, #19
 80137d0:	6022      	str	r2, [r4, #0]
 80137d2:	d504      	bpl.n	80137de <__sflush_r+0x76>
 80137d4:	1c42      	adds	r2, r0, #1
 80137d6:	d101      	bne.n	80137dc <__sflush_r+0x74>
 80137d8:	682b      	ldr	r3, [r5, #0]
 80137da:	b903      	cbnz	r3, 80137de <__sflush_r+0x76>
 80137dc:	6560      	str	r0, [r4, #84]	@ 0x54
 80137de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137e0:	602f      	str	r7, [r5, #0]
 80137e2:	b1b9      	cbz	r1, 8013814 <__sflush_r+0xac>
 80137e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137e8:	4299      	cmp	r1, r3
 80137ea:	d002      	beq.n	80137f2 <__sflush_r+0x8a>
 80137ec:	4628      	mov	r0, r5
 80137ee:	f7ff fbeb 	bl	8012fc8 <_free_r>
 80137f2:	2300      	movs	r3, #0
 80137f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80137f6:	e00d      	b.n	8013814 <__sflush_r+0xac>
 80137f8:	2301      	movs	r3, #1
 80137fa:	4628      	mov	r0, r5
 80137fc:	47b0      	blx	r6
 80137fe:	4602      	mov	r2, r0
 8013800:	1c50      	adds	r0, r2, #1
 8013802:	d1c9      	bne.n	8013798 <__sflush_r+0x30>
 8013804:	682b      	ldr	r3, [r5, #0]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0c6      	beq.n	8013798 <__sflush_r+0x30>
 801380a:	2b1d      	cmp	r3, #29
 801380c:	d001      	beq.n	8013812 <__sflush_r+0xaa>
 801380e:	2b16      	cmp	r3, #22
 8013810:	d11d      	bne.n	801384e <__sflush_r+0xe6>
 8013812:	602f      	str	r7, [r5, #0]
 8013814:	2000      	movs	r0, #0
 8013816:	e021      	b.n	801385c <__sflush_r+0xf4>
 8013818:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801381c:	b21b      	sxth	r3, r3
 801381e:	e01a      	b.n	8013856 <__sflush_r+0xee>
 8013820:	690f      	ldr	r7, [r1, #16]
 8013822:	2f00      	cmp	r7, #0
 8013824:	d0f6      	beq.n	8013814 <__sflush_r+0xac>
 8013826:	0793      	lsls	r3, r2, #30
 8013828:	bf18      	it	ne
 801382a:	2300      	movne	r3, #0
 801382c:	680e      	ldr	r6, [r1, #0]
 801382e:	bf08      	it	eq
 8013830:	694b      	ldreq	r3, [r1, #20]
 8013832:	1bf6      	subs	r6, r6, r7
 8013834:	600f      	str	r7, [r1, #0]
 8013836:	608b      	str	r3, [r1, #8]
 8013838:	2e00      	cmp	r6, #0
 801383a:	ddeb      	ble.n	8013814 <__sflush_r+0xac>
 801383c:	4633      	mov	r3, r6
 801383e:	463a      	mov	r2, r7
 8013840:	4628      	mov	r0, r5
 8013842:	6a21      	ldr	r1, [r4, #32]
 8013844:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8013848:	47e0      	blx	ip
 801384a:	2800      	cmp	r0, #0
 801384c:	dc07      	bgt.n	801385e <__sflush_r+0xf6>
 801384e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801385a:	81a3      	strh	r3, [r4, #12]
 801385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801385e:	4407      	add	r7, r0
 8013860:	1a36      	subs	r6, r6, r0
 8013862:	e7e9      	b.n	8013838 <__sflush_r+0xd0>
 8013864:	dfbffffe 	.word	0xdfbffffe

08013868 <_fflush_r>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	690b      	ldr	r3, [r1, #16]
 801386c:	4605      	mov	r5, r0
 801386e:	460c      	mov	r4, r1
 8013870:	b913      	cbnz	r3, 8013878 <_fflush_r+0x10>
 8013872:	2500      	movs	r5, #0
 8013874:	4628      	mov	r0, r5
 8013876:	bd38      	pop	{r3, r4, r5, pc}
 8013878:	b118      	cbz	r0, 8013882 <_fflush_r+0x1a>
 801387a:	6a03      	ldr	r3, [r0, #32]
 801387c:	b90b      	cbnz	r3, 8013882 <_fflush_r+0x1a>
 801387e:	f7ff f9f1 	bl	8012c64 <__sinit>
 8013882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d0f3      	beq.n	8013872 <_fflush_r+0xa>
 801388a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801388c:	07d0      	lsls	r0, r2, #31
 801388e:	d404      	bmi.n	801389a <_fflush_r+0x32>
 8013890:	0599      	lsls	r1, r3, #22
 8013892:	d402      	bmi.n	801389a <_fflush_r+0x32>
 8013894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013896:	f7ff fb68 	bl	8012f6a <__retarget_lock_acquire_recursive>
 801389a:	4628      	mov	r0, r5
 801389c:	4621      	mov	r1, r4
 801389e:	f7ff ff63 	bl	8013768 <__sflush_r>
 80138a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80138a4:	4605      	mov	r5, r0
 80138a6:	07da      	lsls	r2, r3, #31
 80138a8:	d4e4      	bmi.n	8013874 <_fflush_r+0xc>
 80138aa:	89a3      	ldrh	r3, [r4, #12]
 80138ac:	059b      	lsls	r3, r3, #22
 80138ae:	d4e1      	bmi.n	8013874 <_fflush_r+0xc>
 80138b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80138b2:	f7ff fb5b 	bl	8012f6c <__retarget_lock_release_recursive>
 80138b6:	e7dd      	b.n	8013874 <_fflush_r+0xc>

080138b8 <fiprintf>:
 80138b8:	b40e      	push	{r1, r2, r3}
 80138ba:	b503      	push	{r0, r1, lr}
 80138bc:	4601      	mov	r1, r0
 80138be:	ab03      	add	r3, sp, #12
 80138c0:	4805      	ldr	r0, [pc, #20]	@ (80138d8 <fiprintf+0x20>)
 80138c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80138c6:	6800      	ldr	r0, [r0, #0]
 80138c8:	9301      	str	r3, [sp, #4]
 80138ca:	f7ff fca3 	bl	8013214 <_vfiprintf_r>
 80138ce:	b002      	add	sp, #8
 80138d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80138d4:	b003      	add	sp, #12
 80138d6:	4770      	bx	lr
 80138d8:	20000028 	.word	0x20000028

080138dc <__swbuf_r>:
 80138dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138de:	460e      	mov	r6, r1
 80138e0:	4614      	mov	r4, r2
 80138e2:	4605      	mov	r5, r0
 80138e4:	b118      	cbz	r0, 80138ee <__swbuf_r+0x12>
 80138e6:	6a03      	ldr	r3, [r0, #32]
 80138e8:	b90b      	cbnz	r3, 80138ee <__swbuf_r+0x12>
 80138ea:	f7ff f9bb 	bl	8012c64 <__sinit>
 80138ee:	69a3      	ldr	r3, [r4, #24]
 80138f0:	60a3      	str	r3, [r4, #8]
 80138f2:	89a3      	ldrh	r3, [r4, #12]
 80138f4:	071a      	lsls	r2, r3, #28
 80138f6:	d501      	bpl.n	80138fc <__swbuf_r+0x20>
 80138f8:	6923      	ldr	r3, [r4, #16]
 80138fa:	b943      	cbnz	r3, 801390e <__swbuf_r+0x32>
 80138fc:	4621      	mov	r1, r4
 80138fe:	4628      	mov	r0, r5
 8013900:	f000 f82a 	bl	8013958 <__swsetup_r>
 8013904:	b118      	cbz	r0, 801390e <__swbuf_r+0x32>
 8013906:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801390a:	4638      	mov	r0, r7
 801390c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801390e:	6823      	ldr	r3, [r4, #0]
 8013910:	6922      	ldr	r2, [r4, #16]
 8013912:	b2f6      	uxtb	r6, r6
 8013914:	1a98      	subs	r0, r3, r2
 8013916:	6963      	ldr	r3, [r4, #20]
 8013918:	4637      	mov	r7, r6
 801391a:	4283      	cmp	r3, r0
 801391c:	dc05      	bgt.n	801392a <__swbuf_r+0x4e>
 801391e:	4621      	mov	r1, r4
 8013920:	4628      	mov	r0, r5
 8013922:	f7ff ffa1 	bl	8013868 <_fflush_r>
 8013926:	2800      	cmp	r0, #0
 8013928:	d1ed      	bne.n	8013906 <__swbuf_r+0x2a>
 801392a:	68a3      	ldr	r3, [r4, #8]
 801392c:	3b01      	subs	r3, #1
 801392e:	60a3      	str	r3, [r4, #8]
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	1c5a      	adds	r2, r3, #1
 8013934:	6022      	str	r2, [r4, #0]
 8013936:	701e      	strb	r6, [r3, #0]
 8013938:	6962      	ldr	r2, [r4, #20]
 801393a:	1c43      	adds	r3, r0, #1
 801393c:	429a      	cmp	r2, r3
 801393e:	d004      	beq.n	801394a <__swbuf_r+0x6e>
 8013940:	89a3      	ldrh	r3, [r4, #12]
 8013942:	07db      	lsls	r3, r3, #31
 8013944:	d5e1      	bpl.n	801390a <__swbuf_r+0x2e>
 8013946:	2e0a      	cmp	r6, #10
 8013948:	d1df      	bne.n	801390a <__swbuf_r+0x2e>
 801394a:	4621      	mov	r1, r4
 801394c:	4628      	mov	r0, r5
 801394e:	f7ff ff8b 	bl	8013868 <_fflush_r>
 8013952:	2800      	cmp	r0, #0
 8013954:	d0d9      	beq.n	801390a <__swbuf_r+0x2e>
 8013956:	e7d6      	b.n	8013906 <__swbuf_r+0x2a>

08013958 <__swsetup_r>:
 8013958:	b538      	push	{r3, r4, r5, lr}
 801395a:	4b29      	ldr	r3, [pc, #164]	@ (8013a00 <__swsetup_r+0xa8>)
 801395c:	4605      	mov	r5, r0
 801395e:	6818      	ldr	r0, [r3, #0]
 8013960:	460c      	mov	r4, r1
 8013962:	b118      	cbz	r0, 801396c <__swsetup_r+0x14>
 8013964:	6a03      	ldr	r3, [r0, #32]
 8013966:	b90b      	cbnz	r3, 801396c <__swsetup_r+0x14>
 8013968:	f7ff f97c 	bl	8012c64 <__sinit>
 801396c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013970:	0719      	lsls	r1, r3, #28
 8013972:	d422      	bmi.n	80139ba <__swsetup_r+0x62>
 8013974:	06da      	lsls	r2, r3, #27
 8013976:	d407      	bmi.n	8013988 <__swsetup_r+0x30>
 8013978:	2209      	movs	r2, #9
 801397a:	602a      	str	r2, [r5, #0]
 801397c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013984:	81a3      	strh	r3, [r4, #12]
 8013986:	e033      	b.n	80139f0 <__swsetup_r+0x98>
 8013988:	0758      	lsls	r0, r3, #29
 801398a:	d512      	bpl.n	80139b2 <__swsetup_r+0x5a>
 801398c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801398e:	b141      	cbz	r1, 80139a2 <__swsetup_r+0x4a>
 8013990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013994:	4299      	cmp	r1, r3
 8013996:	d002      	beq.n	801399e <__swsetup_r+0x46>
 8013998:	4628      	mov	r0, r5
 801399a:	f7ff fb15 	bl	8012fc8 <_free_r>
 801399e:	2300      	movs	r3, #0
 80139a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80139a2:	89a3      	ldrh	r3, [r4, #12]
 80139a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80139a8:	81a3      	strh	r3, [r4, #12]
 80139aa:	2300      	movs	r3, #0
 80139ac:	6063      	str	r3, [r4, #4]
 80139ae:	6923      	ldr	r3, [r4, #16]
 80139b0:	6023      	str	r3, [r4, #0]
 80139b2:	89a3      	ldrh	r3, [r4, #12]
 80139b4:	f043 0308 	orr.w	r3, r3, #8
 80139b8:	81a3      	strh	r3, [r4, #12]
 80139ba:	6923      	ldr	r3, [r4, #16]
 80139bc:	b94b      	cbnz	r3, 80139d2 <__swsetup_r+0x7a>
 80139be:	89a3      	ldrh	r3, [r4, #12]
 80139c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80139c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80139c8:	d003      	beq.n	80139d2 <__swsetup_r+0x7a>
 80139ca:	4621      	mov	r1, r4
 80139cc:	4628      	mov	r0, r5
 80139ce:	f000 f863 	bl	8013a98 <__smakebuf_r>
 80139d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80139d6:	f013 0201 	ands.w	r2, r3, #1
 80139da:	d00a      	beq.n	80139f2 <__swsetup_r+0x9a>
 80139dc:	2200      	movs	r2, #0
 80139de:	60a2      	str	r2, [r4, #8]
 80139e0:	6962      	ldr	r2, [r4, #20]
 80139e2:	4252      	negs	r2, r2
 80139e4:	61a2      	str	r2, [r4, #24]
 80139e6:	6922      	ldr	r2, [r4, #16]
 80139e8:	b942      	cbnz	r2, 80139fc <__swsetup_r+0xa4>
 80139ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80139ee:	d1c5      	bne.n	801397c <__swsetup_r+0x24>
 80139f0:	bd38      	pop	{r3, r4, r5, pc}
 80139f2:	0799      	lsls	r1, r3, #30
 80139f4:	bf58      	it	pl
 80139f6:	6962      	ldrpl	r2, [r4, #20]
 80139f8:	60a2      	str	r2, [r4, #8]
 80139fa:	e7f4      	b.n	80139e6 <__swsetup_r+0x8e>
 80139fc:	2000      	movs	r0, #0
 80139fe:	e7f7      	b.n	80139f0 <__swsetup_r+0x98>
 8013a00:	20000028 	.word	0x20000028

08013a04 <_sbrk_r>:
 8013a04:	b538      	push	{r3, r4, r5, lr}
 8013a06:	2300      	movs	r3, #0
 8013a08:	4d05      	ldr	r5, [pc, #20]	@ (8013a20 <_sbrk_r+0x1c>)
 8013a0a:	4604      	mov	r4, r0
 8013a0c:	4608      	mov	r0, r1
 8013a0e:	602b      	str	r3, [r5, #0]
 8013a10:	f7ed f97e 	bl	8000d10 <_sbrk>
 8013a14:	1c43      	adds	r3, r0, #1
 8013a16:	d102      	bne.n	8013a1e <_sbrk_r+0x1a>
 8013a18:	682b      	ldr	r3, [r5, #0]
 8013a1a:	b103      	cbz	r3, 8013a1e <_sbrk_r+0x1a>
 8013a1c:	6023      	str	r3, [r4, #0]
 8013a1e:	bd38      	pop	{r3, r4, r5, pc}
 8013a20:	2000835c 	.word	0x2000835c

08013a24 <memchr>:
 8013a24:	4603      	mov	r3, r0
 8013a26:	b510      	push	{r4, lr}
 8013a28:	b2c9      	uxtb	r1, r1
 8013a2a:	4402      	add	r2, r0
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	4618      	mov	r0, r3
 8013a30:	d101      	bne.n	8013a36 <memchr+0x12>
 8013a32:	2000      	movs	r0, #0
 8013a34:	e003      	b.n	8013a3e <memchr+0x1a>
 8013a36:	7804      	ldrb	r4, [r0, #0]
 8013a38:	3301      	adds	r3, #1
 8013a3a:	428c      	cmp	r4, r1
 8013a3c:	d1f6      	bne.n	8013a2c <memchr+0x8>
 8013a3e:	bd10      	pop	{r4, pc}

08013a40 <abort>:
 8013a40:	2006      	movs	r0, #6
 8013a42:	b508      	push	{r3, lr}
 8013a44:	f000 f88c 	bl	8013b60 <raise>
 8013a48:	2001      	movs	r0, #1
 8013a4a:	f7ed f8ed 	bl	8000c28 <_exit>

08013a4e <__swhatbuf_r>:
 8013a4e:	b570      	push	{r4, r5, r6, lr}
 8013a50:	460c      	mov	r4, r1
 8013a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a56:	4615      	mov	r5, r2
 8013a58:	2900      	cmp	r1, #0
 8013a5a:	461e      	mov	r6, r3
 8013a5c:	b096      	sub	sp, #88	@ 0x58
 8013a5e:	da0c      	bge.n	8013a7a <__swhatbuf_r+0x2c>
 8013a60:	89a3      	ldrh	r3, [r4, #12]
 8013a62:	2100      	movs	r1, #0
 8013a64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013a68:	bf14      	ite	ne
 8013a6a:	2340      	movne	r3, #64	@ 0x40
 8013a6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013a70:	2000      	movs	r0, #0
 8013a72:	6031      	str	r1, [r6, #0]
 8013a74:	602b      	str	r3, [r5, #0]
 8013a76:	b016      	add	sp, #88	@ 0x58
 8013a78:	bd70      	pop	{r4, r5, r6, pc}
 8013a7a:	466a      	mov	r2, sp
 8013a7c:	f000 f878 	bl	8013b70 <_fstat_r>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	dbed      	blt.n	8013a60 <__swhatbuf_r+0x12>
 8013a84:	9901      	ldr	r1, [sp, #4]
 8013a86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013a8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013a8e:	4259      	negs	r1, r3
 8013a90:	4159      	adcs	r1, r3
 8013a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a96:	e7eb      	b.n	8013a70 <__swhatbuf_r+0x22>

08013a98 <__smakebuf_r>:
 8013a98:	898b      	ldrh	r3, [r1, #12]
 8013a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a9c:	079d      	lsls	r5, r3, #30
 8013a9e:	4606      	mov	r6, r0
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	d507      	bpl.n	8013ab4 <__smakebuf_r+0x1c>
 8013aa4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013aa8:	6023      	str	r3, [r4, #0]
 8013aaa:	6123      	str	r3, [r4, #16]
 8013aac:	2301      	movs	r3, #1
 8013aae:	6163      	str	r3, [r4, #20]
 8013ab0:	b003      	add	sp, #12
 8013ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ab4:	466a      	mov	r2, sp
 8013ab6:	ab01      	add	r3, sp, #4
 8013ab8:	f7ff ffc9 	bl	8013a4e <__swhatbuf_r>
 8013abc:	9f00      	ldr	r7, [sp, #0]
 8013abe:	4605      	mov	r5, r0
 8013ac0:	4639      	mov	r1, r7
 8013ac2:	4630      	mov	r0, r6
 8013ac4:	f7ff faf2 	bl	80130ac <_malloc_r>
 8013ac8:	b948      	cbnz	r0, 8013ade <__smakebuf_r+0x46>
 8013aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ace:	059a      	lsls	r2, r3, #22
 8013ad0:	d4ee      	bmi.n	8013ab0 <__smakebuf_r+0x18>
 8013ad2:	f023 0303 	bic.w	r3, r3, #3
 8013ad6:	f043 0302 	orr.w	r3, r3, #2
 8013ada:	81a3      	strh	r3, [r4, #12]
 8013adc:	e7e2      	b.n	8013aa4 <__smakebuf_r+0xc>
 8013ade:	89a3      	ldrh	r3, [r4, #12]
 8013ae0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ae8:	81a3      	strh	r3, [r4, #12]
 8013aea:	9b01      	ldr	r3, [sp, #4]
 8013aec:	6020      	str	r0, [r4, #0]
 8013aee:	b15b      	cbz	r3, 8013b08 <__smakebuf_r+0x70>
 8013af0:	4630      	mov	r0, r6
 8013af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013af6:	f000 f84d 	bl	8013b94 <_isatty_r>
 8013afa:	b128      	cbz	r0, 8013b08 <__smakebuf_r+0x70>
 8013afc:	89a3      	ldrh	r3, [r4, #12]
 8013afe:	f023 0303 	bic.w	r3, r3, #3
 8013b02:	f043 0301 	orr.w	r3, r3, #1
 8013b06:	81a3      	strh	r3, [r4, #12]
 8013b08:	89a3      	ldrh	r3, [r4, #12]
 8013b0a:	431d      	orrs	r5, r3
 8013b0c:	81a5      	strh	r5, [r4, #12]
 8013b0e:	e7cf      	b.n	8013ab0 <__smakebuf_r+0x18>

08013b10 <_raise_r>:
 8013b10:	291f      	cmp	r1, #31
 8013b12:	b538      	push	{r3, r4, r5, lr}
 8013b14:	4605      	mov	r5, r0
 8013b16:	460c      	mov	r4, r1
 8013b18:	d904      	bls.n	8013b24 <_raise_r+0x14>
 8013b1a:	2316      	movs	r3, #22
 8013b1c:	6003      	str	r3, [r0, #0]
 8013b1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013b22:	bd38      	pop	{r3, r4, r5, pc}
 8013b24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b26:	b112      	cbz	r2, 8013b2e <_raise_r+0x1e>
 8013b28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b2c:	b94b      	cbnz	r3, 8013b42 <_raise_r+0x32>
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f000 f852 	bl	8013bd8 <_getpid_r>
 8013b34:	4622      	mov	r2, r4
 8013b36:	4601      	mov	r1, r0
 8013b38:	4628      	mov	r0, r5
 8013b3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b3e:	f000 b839 	b.w	8013bb4 <_kill_r>
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d00a      	beq.n	8013b5c <_raise_r+0x4c>
 8013b46:	1c59      	adds	r1, r3, #1
 8013b48:	d103      	bne.n	8013b52 <_raise_r+0x42>
 8013b4a:	2316      	movs	r3, #22
 8013b4c:	6003      	str	r3, [r0, #0]
 8013b4e:	2001      	movs	r0, #1
 8013b50:	e7e7      	b.n	8013b22 <_raise_r+0x12>
 8013b52:	2100      	movs	r1, #0
 8013b54:	4620      	mov	r0, r4
 8013b56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b5a:	4798      	blx	r3
 8013b5c:	2000      	movs	r0, #0
 8013b5e:	e7e0      	b.n	8013b22 <_raise_r+0x12>

08013b60 <raise>:
 8013b60:	4b02      	ldr	r3, [pc, #8]	@ (8013b6c <raise+0xc>)
 8013b62:	4601      	mov	r1, r0
 8013b64:	6818      	ldr	r0, [r3, #0]
 8013b66:	f7ff bfd3 	b.w	8013b10 <_raise_r>
 8013b6a:	bf00      	nop
 8013b6c:	20000028 	.word	0x20000028

08013b70 <_fstat_r>:
 8013b70:	b538      	push	{r3, r4, r5, lr}
 8013b72:	2300      	movs	r3, #0
 8013b74:	4d06      	ldr	r5, [pc, #24]	@ (8013b90 <_fstat_r+0x20>)
 8013b76:	4604      	mov	r4, r0
 8013b78:	4608      	mov	r0, r1
 8013b7a:	4611      	mov	r1, r2
 8013b7c:	602b      	str	r3, [r5, #0]
 8013b7e:	f7ed f8a2 	bl	8000cc6 <_fstat>
 8013b82:	1c43      	adds	r3, r0, #1
 8013b84:	d102      	bne.n	8013b8c <_fstat_r+0x1c>
 8013b86:	682b      	ldr	r3, [r5, #0]
 8013b88:	b103      	cbz	r3, 8013b8c <_fstat_r+0x1c>
 8013b8a:	6023      	str	r3, [r4, #0]
 8013b8c:	bd38      	pop	{r3, r4, r5, pc}
 8013b8e:	bf00      	nop
 8013b90:	2000835c 	.word	0x2000835c

08013b94 <_isatty_r>:
 8013b94:	b538      	push	{r3, r4, r5, lr}
 8013b96:	2300      	movs	r3, #0
 8013b98:	4d05      	ldr	r5, [pc, #20]	@ (8013bb0 <_isatty_r+0x1c>)
 8013b9a:	4604      	mov	r4, r0
 8013b9c:	4608      	mov	r0, r1
 8013b9e:	602b      	str	r3, [r5, #0]
 8013ba0:	f7ed f8a0 	bl	8000ce4 <_isatty>
 8013ba4:	1c43      	adds	r3, r0, #1
 8013ba6:	d102      	bne.n	8013bae <_isatty_r+0x1a>
 8013ba8:	682b      	ldr	r3, [r5, #0]
 8013baa:	b103      	cbz	r3, 8013bae <_isatty_r+0x1a>
 8013bac:	6023      	str	r3, [r4, #0]
 8013bae:	bd38      	pop	{r3, r4, r5, pc}
 8013bb0:	2000835c 	.word	0x2000835c

08013bb4 <_kill_r>:
 8013bb4:	b538      	push	{r3, r4, r5, lr}
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	4d06      	ldr	r5, [pc, #24]	@ (8013bd4 <_kill_r+0x20>)
 8013bba:	4604      	mov	r4, r0
 8013bbc:	4608      	mov	r0, r1
 8013bbe:	4611      	mov	r1, r2
 8013bc0:	602b      	str	r3, [r5, #0]
 8013bc2:	f7ed f81f 	bl	8000c04 <_kill>
 8013bc6:	1c43      	adds	r3, r0, #1
 8013bc8:	d102      	bne.n	8013bd0 <_kill_r+0x1c>
 8013bca:	682b      	ldr	r3, [r5, #0]
 8013bcc:	b103      	cbz	r3, 8013bd0 <_kill_r+0x1c>
 8013bce:	6023      	str	r3, [r4, #0]
 8013bd0:	bd38      	pop	{r3, r4, r5, pc}
 8013bd2:	bf00      	nop
 8013bd4:	2000835c 	.word	0x2000835c

08013bd8 <_getpid_r>:
 8013bd8:	f7ed b80c 	b.w	8000bf4 <_getpid>

08013bdc <_init>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	bf00      	nop
 8013be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013be2:	bc08      	pop	{r3}
 8013be4:	469e      	mov	lr, r3
 8013be6:	4770      	bx	lr

08013be8 <_fini>:
 8013be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bea:	bf00      	nop
 8013bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bee:	bc08      	pop	{r3}
 8013bf0:	469e      	mov	lr, r3
 8013bf2:	4770      	bx	lr
