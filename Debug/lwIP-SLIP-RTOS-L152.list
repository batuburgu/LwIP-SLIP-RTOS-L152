
lwIP-SLIP-RTOS-L152.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a74  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003dd0  08013bb4  08013bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017984  08017984  00019078  2**0
                  CONTENTS
  4 .ARM          00000008  08017984  08017984  00018984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801798c  0801798c  00019078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801798c  0801798c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017990  08017990  00018990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08017994  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e24  20000078  08017a0c  00019078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e9c  08017a0c  00019e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00019078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a67  00000000  00000000  000190a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007222  00000000  00000000  00040b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e48  00000000  00000000  00047d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d2  00000000  00000000  00049b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000264c5  00000000  00000000  0004b34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003082a  00000000  00000000  0007180f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aa3ed  00000000  00000000  000a2039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c426  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000083f0  00000000  00000000  0014c46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0015485c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08013b9c 	.word	0x08013b9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08013b9c 	.word	0x08013b9c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_uldivmod>:
 80001a4:	b953      	cbnz	r3, 80001bc <__aeabi_uldivmod+0x18>
 80001a6:	b94a      	cbnz	r2, 80001bc <__aeabi_uldivmod+0x18>
 80001a8:	2900      	cmp	r1, #0
 80001aa:	bf08      	it	eq
 80001ac:	2800      	cmpeq	r0, #0
 80001ae:	bf1c      	itt	ne
 80001b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001b8:	f000 b968 	b.w	800048c <__aeabi_idiv0>
 80001bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001c4:	f000 f806 	bl	80001d4 <__udivmoddi4>
 80001c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001d0:	b004      	add	sp, #16
 80001d2:	4770      	bx	lr

080001d4 <__udivmoddi4>:
 80001d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001d8:	9d08      	ldr	r5, [sp, #32]
 80001da:	460c      	mov	r4, r1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d14e      	bne.n	800027e <__udivmoddi4+0xaa>
 80001e0:	4694      	mov	ip, r2
 80001e2:	458c      	cmp	ip, r1
 80001e4:	4686      	mov	lr, r0
 80001e6:	fab2 f282 	clz	r2, r2
 80001ea:	d962      	bls.n	80002b2 <__udivmoddi4+0xde>
 80001ec:	b14a      	cbz	r2, 8000202 <__udivmoddi4+0x2e>
 80001ee:	f1c2 0320 	rsb	r3, r2, #32
 80001f2:	4091      	lsls	r1, r2
 80001f4:	fa20 f303 	lsr.w	r3, r0, r3
 80001f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80001fc:	4319      	orrs	r1, r3
 80001fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000202:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000206:	fbb1 f4f7 	udiv	r4, r1, r7
 800020a:	fb07 1114 	mls	r1, r7, r4, r1
 800020e:	fa1f f68c 	uxth.w	r6, ip
 8000212:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000216:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800021a:	fb04 f106 	mul.w	r1, r4, r6
 800021e:	4299      	cmp	r1, r3
 8000220:	d90a      	bls.n	8000238 <__udivmoddi4+0x64>
 8000222:	eb1c 0303 	adds.w	r3, ip, r3
 8000226:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800022a:	f080 8110 	bcs.w	800044e <__udivmoddi4+0x27a>
 800022e:	4299      	cmp	r1, r3
 8000230:	f240 810d 	bls.w	800044e <__udivmoddi4+0x27a>
 8000234:	3c02      	subs	r4, #2
 8000236:	4463      	add	r3, ip
 8000238:	1a59      	subs	r1, r3, r1
 800023a:	fbb1 f0f7 	udiv	r0, r1, r7
 800023e:	fb07 1110 	mls	r1, r7, r0, r1
 8000242:	fb00 f606 	mul.w	r6, r0, r6
 8000246:	fa1f f38e 	uxth.w	r3, lr
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	429e      	cmp	r6, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x94>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800025a:	f080 80fa 	bcs.w	8000452 <__udivmoddi4+0x27e>
 800025e:	429e      	cmp	r6, r3
 8000260:	f240 80f7 	bls.w	8000452 <__udivmoddi4+0x27e>
 8000264:	4463      	add	r3, ip
 8000266:	3802      	subs	r0, #2
 8000268:	2100      	movs	r1, #0
 800026a:	1b9b      	subs	r3, r3, r6
 800026c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000270:	b11d      	cbz	r5, 800027a <__udivmoddi4+0xa6>
 8000272:	40d3      	lsrs	r3, r2
 8000274:	2200      	movs	r2, #0
 8000276:	e9c5 3200 	strd	r3, r2, [r5]
 800027a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800027e:	428b      	cmp	r3, r1
 8000280:	d905      	bls.n	800028e <__udivmoddi4+0xba>
 8000282:	b10d      	cbz	r5, 8000288 <__udivmoddi4+0xb4>
 8000284:	e9c5 0100 	strd	r0, r1, [r5]
 8000288:	2100      	movs	r1, #0
 800028a:	4608      	mov	r0, r1
 800028c:	e7f5      	b.n	800027a <__udivmoddi4+0xa6>
 800028e:	fab3 f183 	clz	r1, r3
 8000292:	2900      	cmp	r1, #0
 8000294:	d146      	bne.n	8000324 <__udivmoddi4+0x150>
 8000296:	42a3      	cmp	r3, r4
 8000298:	d302      	bcc.n	80002a0 <__udivmoddi4+0xcc>
 800029a:	4290      	cmp	r0, r2
 800029c:	f0c0 80ee 	bcc.w	800047c <__udivmoddi4+0x2a8>
 80002a0:	1a86      	subs	r6, r0, r2
 80002a2:	eb64 0303 	sbc.w	r3, r4, r3
 80002a6:	2001      	movs	r0, #1
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	d0e6      	beq.n	800027a <__udivmoddi4+0xa6>
 80002ac:	e9c5 6300 	strd	r6, r3, [r5]
 80002b0:	e7e3      	b.n	800027a <__udivmoddi4+0xa6>
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	f040 808f 	bne.w	80003d6 <__udivmoddi4+0x202>
 80002b8:	eba1 040c 	sub.w	r4, r1, ip
 80002bc:	2101      	movs	r1, #1
 80002be:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002c2:	fa1f f78c 	uxth.w	r7, ip
 80002c6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ca:	fb08 4416 	mls	r4, r8, r6, r4
 80002ce:	fb07 f006 	mul.w	r0, r7, r6
 80002d2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002d6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002da:	4298      	cmp	r0, r3
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0x11c>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x11a>
 80002e8:	4298      	cmp	r0, r3
 80002ea:	f200 80cb 	bhi.w	8000484 <__udivmoddi4+0x2b0>
 80002ee:	4626      	mov	r6, r4
 80002f0:	1a1c      	subs	r4, r3, r0
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4410 	mls	r4, r8, r0, r4
 80002fa:	fb00 f707 	mul.w	r7, r0, r7
 80002fe:	fa1f f38e 	uxth.w	r3, lr
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	429f      	cmp	r7, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x148>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x146>
 8000314:	429f      	cmp	r7, r3
 8000316:	f200 80ae 	bhi.w	8000476 <__udivmoddi4+0x2a2>
 800031a:	4620      	mov	r0, r4
 800031c:	1bdb      	subs	r3, r3, r7
 800031e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000322:	e7a5      	b.n	8000270 <__udivmoddi4+0x9c>
 8000324:	f1c1 0720 	rsb	r7, r1, #32
 8000328:	408b      	lsls	r3, r1
 800032a:	fa22 fc07 	lsr.w	ip, r2, r7
 800032e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000332:	fa24 f607 	lsr.w	r6, r4, r7
 8000336:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800033a:	fbb6 f8f9 	udiv	r8, r6, r9
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	fb09 6618 	mls	r6, r9, r8, r6
 8000346:	fa20 f307 	lsr.w	r3, r0, r7
 800034a:	408c      	lsls	r4, r1
 800034c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000350:	fb08 f00e 	mul.w	r0, r8, lr
 8000354:	431c      	orrs	r4, r3
 8000356:	0c23      	lsrs	r3, r4, #16
 8000358:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800035c:	4298      	cmp	r0, r3
 800035e:	fa02 f201 	lsl.w	r2, r2, r1
 8000362:	d90a      	bls.n	800037a <__udivmoddi4+0x1a6>
 8000364:	eb1c 0303 	adds.w	r3, ip, r3
 8000368:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 800036c:	f080 8081 	bcs.w	8000472 <__udivmoddi4+0x29e>
 8000370:	4298      	cmp	r0, r3
 8000372:	d97e      	bls.n	8000472 <__udivmoddi4+0x29e>
 8000374:	f1a8 0802 	sub.w	r8, r8, #2
 8000378:	4463      	add	r3, ip
 800037a:	1a1e      	subs	r6, r3, r0
 800037c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000380:	fb09 6613 	mls	r6, r9, r3, r6
 8000384:	fb03 fe0e 	mul.w	lr, r3, lr
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800038e:	45a6      	cmp	lr, r4
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x1d0>
 8000392:	eb1c 0404 	adds.w	r4, ip, r4
 8000396:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800039a:	d266      	bcs.n	800046a <__udivmoddi4+0x296>
 800039c:	45a6      	cmp	lr, r4
 800039e:	d964      	bls.n	800046a <__udivmoddi4+0x296>
 80003a0:	3b02      	subs	r3, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003a8:	fba0 8302 	umull	r8, r3, r0, r2
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	429c      	cmp	r4, r3
 80003b2:	46c6      	mov	lr, r8
 80003b4:	461e      	mov	r6, r3
 80003b6:	d350      	bcc.n	800045a <__udivmoddi4+0x286>
 80003b8:	d04d      	beq.n	8000456 <__udivmoddi4+0x282>
 80003ba:	b155      	cbz	r5, 80003d2 <__udivmoddi4+0x1fe>
 80003bc:	ebba 030e 	subs.w	r3, sl, lr
 80003c0:	eb64 0406 	sbc.w	r4, r4, r6
 80003c4:	fa04 f707 	lsl.w	r7, r4, r7
 80003c8:	40cb      	lsrs	r3, r1
 80003ca:	431f      	orrs	r7, r3
 80003cc:	40cc      	lsrs	r4, r1
 80003ce:	e9c5 7400 	strd	r7, r4, [r5]
 80003d2:	2100      	movs	r1, #0
 80003d4:	e751      	b.n	800027a <__udivmoddi4+0xa6>
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ec:	fbb1 f0f8 	udiv	r0, r1, r8
 80003f0:	fb08 1110 	mls	r1, r8, r0, r1
 80003f4:	4094      	lsls	r4, r2
 80003f6:	431c      	orrs	r4, r3
 80003f8:	fa1f f78c 	uxth.w	r7, ip
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000402:	fb00 f107 	mul.w	r1, r0, r7
 8000406:	4299      	cmp	r1, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x248>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000412:	d22c      	bcs.n	800046e <__udivmoddi4+0x29a>
 8000414:	4299      	cmp	r1, r3
 8000416:	d92a      	bls.n	800046e <__udivmoddi4+0x29a>
 8000418:	3802      	subs	r0, #2
 800041a:	4463      	add	r3, ip
 800041c:	1a5b      	subs	r3, r3, r1
 800041e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000422:	fb08 3311 	mls	r3, r8, r1, r3
 8000426:	b2a4      	uxth	r4, r4
 8000428:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800042c:	fb01 f307 	mul.w	r3, r1, r7
 8000430:	42a3      	cmp	r3, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x272>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800043c:	d213      	bcs.n	8000466 <__udivmoddi4+0x292>
 800043e:	42a3      	cmp	r3, r4
 8000440:	d911      	bls.n	8000466 <__udivmoddi4+0x292>
 8000442:	3902      	subs	r1, #2
 8000444:	4464      	add	r4, ip
 8000446:	1ae4      	subs	r4, r4, r3
 8000448:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800044c:	e73b      	b.n	80002c6 <__udivmoddi4+0xf2>
 800044e:	4604      	mov	r4, r0
 8000450:	e6f2      	b.n	8000238 <__udivmoddi4+0x64>
 8000452:	4608      	mov	r0, r1
 8000454:	e708      	b.n	8000268 <__udivmoddi4+0x94>
 8000456:	45c2      	cmp	sl, r8
 8000458:	d2af      	bcs.n	80003ba <__udivmoddi4+0x1e6>
 800045a:	ebb8 0e02 	subs.w	lr, r8, r2
 800045e:	eb63 060c 	sbc.w	r6, r3, ip
 8000462:	3801      	subs	r0, #1
 8000464:	e7a9      	b.n	80003ba <__udivmoddi4+0x1e6>
 8000466:	4631      	mov	r1, r6
 8000468:	e7ed      	b.n	8000446 <__udivmoddi4+0x272>
 800046a:	4603      	mov	r3, r0
 800046c:	e79a      	b.n	80003a4 <__udivmoddi4+0x1d0>
 800046e:	4630      	mov	r0, r6
 8000470:	e7d4      	b.n	800041c <__udivmoddi4+0x248>
 8000472:	46b0      	mov	r8, r6
 8000474:	e781      	b.n	800037a <__udivmoddi4+0x1a6>
 8000476:	4463      	add	r3, ip
 8000478:	3802      	subs	r0, #2
 800047a:	e74f      	b.n	800031c <__udivmoddi4+0x148>
 800047c:	4606      	mov	r6, r0
 800047e:	4623      	mov	r3, r4
 8000480:	4608      	mov	r0, r1
 8000482:	e711      	b.n	80002a8 <__udivmoddi4+0xd4>
 8000484:	3e02      	subs	r6, #2
 8000486:	4463      	add	r3, ip
 8000488:	e732      	b.n	80002f0 <__udivmoddi4+0x11c>
 800048a:	bf00      	nop

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop

08000490 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	60f8      	str	r0, [r7, #12]
 8000498:	60b9      	str	r1, [r7, #8]
 800049a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4a06      	ldr	r2, [pc, #24]	@ (80004b8 <vApplicationGetIdleTaskMemory+0x28>)
 80004a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	4a05      	ldr	r2, [pc, #20]	@ (80004bc <vApplicationGetIdleTaskMemory+0x2c>)
 80004a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2280      	movs	r2, #128	@ 0x80
 80004ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	20000094 	.word	0x20000094
 80004bc:	20000134 	.word	0x20000134

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b08c      	sub	sp, #48	@ 0x30
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c6:	f000 fc6e 	bl	8000da6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ca:	f000 f83b 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 f8cf 	bl	8000670 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d2:	f000 f8af 	bl	8000634 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004d6:	f000 f883 	bl	80005e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 80004da:	2201      	movs	r2, #1
 80004dc:	4913      	ldr	r1, [pc, #76]	@ (800052c <main+0x6c>)
 80004de:	4814      	ldr	r0, [pc, #80]	@ (8000530 <main+0x70>)
 80004e0:	f002 f9c4 	bl	800286c <HAL_UART_Receive_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of UARTDataQueue */
  osMessageQDef(UARTDataQueue, 1024, uint8_t);
 80004e4:	4b13      	ldr	r3, [pc, #76]	@ (8000534 <main+0x74>)
 80004e6:	f107 0420 	add.w	r4, r7, #32
 80004ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  UARTDataQueueHandle = osMessageCreate(osMessageQ(UARTDataQueue), NULL);
 80004f0:	f107 0320 	add.w	r3, r7, #32
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fb1e 	bl	8003b38 <osMessageCreate>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <main+0x78>)
 8000500:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <main+0x7c>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	461d      	mov	r5, r3
 8000508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2100      	movs	r1, #0
 8000518:	4618      	mov	r0, r3
 800051a:	f003 fa10 	bl	800393e <osThreadCreate>
 800051e:	4603      	mov	r3, r0
 8000520:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <main+0x80>)
 8000522:	6013      	str	r3, [r2, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f003 f9f4 	bl	8003910 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000528:	bf00      	nop
 800052a:	e7fd      	b.n	8000528 <main+0x68>
 800052c:	20007942 	.word	0x20007942
 8000530:	20000334 	.word	0x20000334
 8000534:	08013bb4 	.word	0x08013bb4
 8000538:	200003c4 	.word	0x200003c4
 800053c:	08013bd0 	.word	0x08013bd0
 8000540:	200003c0 	.word	0x200003c0

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b092      	sub	sp, #72	@ 0x48
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2234      	movs	r2, #52	@ 0x34
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f012 fc01 	bl	8012d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000566:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <SystemClock_Config+0x98>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800056e:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <SystemClock_Config+0x98>)
 8000570:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000574:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000586:	2300      	movs	r3, #0
 8000588:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800058a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000590:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	4618      	mov	r0, r3
 800059c:	f001 f8f0 	bl	8001780 <HAL_RCC_OscConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005a6:	f000 f9ab 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005aa:	230f      	movs	r3, #15
 80005ac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ae:	2303      	movs	r3, #3
 80005b0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005be:	463b      	mov	r3, r7
 80005c0:	2101      	movs	r1, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fc0c 	bl	8001de0 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005ce:	f000 f997 	bl	8000900 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	3748      	adds	r7, #72	@ 0x48
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e4:	4b11      	ldr	r3, [pc, #68]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	@ (8000630 <MX_USART1_UART_Init+0x50>)
 80005e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 80005ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000604:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 8000606:	220c      	movs	r2, #12
 8000608:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060a:	4b08      	ldr	r3, [pc, #32]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 8000612:	2200      	movs	r2, #0
 8000614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	@ (800062c <MX_USART1_UART_Init+0x4c>)
 8000618:	f002 f8d8 	bl	80027cc <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000622:	f000 f96d 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000334 	.word	0x20000334
 8000630:	40013800 	.word	0x40013800

08000634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_DMA_Init+0x38>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <MX_DMA_Init+0x38>)
 8000640:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_DMA_Init+0x38>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2105      	movs	r1, #5
 8000656:	200e      	movs	r0, #14
 8000658:	f000 fc8f 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800065c:	200e      	movs	r0, #14
 800065e:	f000 fca8 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b08a      	sub	sp, #40	@ 0x28
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b32      	ldr	r3, [pc, #200]	@ (8000750 <MX_GPIO_Init+0xe0>)
 8000688:	69db      	ldr	r3, [r3, #28]
 800068a:	4a31      	ldr	r2, [pc, #196]	@ (8000750 <MX_GPIO_Init+0xe0>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	61d3      	str	r3, [r2, #28]
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <MX_GPIO_Init+0xe0>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b29      	ldr	r3, [pc, #164]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 0320 	and.w	r3, r3, #32
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b26      	ldr	r3, [pc, #152]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006b8:	69db      	ldr	r3, [r3, #28]
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	61d3      	str	r3, [r2, #28]
 80006c2:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b20      	ldr	r3, [pc, #128]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <MX_GPIO_Init+0xe0>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2120      	movs	r1, #32
 80006ea:	481a      	ldr	r0, [pc, #104]	@ (8000754 <MX_GPIO_Init+0xe4>)
 80006ec:	f001 f830 	bl	8001750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	4619      	mov	r1, r3
 8000706:	4814      	ldr	r0, [pc, #80]	@ (8000758 <MX_GPIO_Init+0xe8>)
 8000708:	f000 fe92 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800070c:	230c      	movs	r3, #12
 800070e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	2302      	movs	r3, #2
 8000712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800071c:	2307      	movs	r3, #7
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	4619      	mov	r1, r3
 8000726:	480b      	ldr	r0, [pc, #44]	@ (8000754 <MX_GPIO_Init+0xe4>)
 8000728:	f000 fe82 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800072c:	2320      	movs	r3, #32
 800072e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000730:	2301      	movs	r3, #1
 8000732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_GPIO_Init+0xe4>)
 8000744:	f000 fe74 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40020000 	.word	0x40020000
 8000758:	40020800 	.word	0x40020800

0800075c <udp_echoserver_init>:

/* USER CODE BEGIN 4 */
void udp_echoserver_init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;

   /* Create a new UDP control block  */
   upcb = udp_new();
 8000762:	f00f fce3 	bl	801012c <udp_new>
 8000766:	6078      	str	r0, [r7, #4]

   if (upcb)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d00f      	beq.n	800078e <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_CLIENT_PORT);
 800076e:	2207      	movs	r2, #7
 8000770:	4909      	ldr	r1, [pc, #36]	@ (8000798 <udp_echoserver_init+0x3c>)
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f00f fb9c 	bl	800feb0 <udp_bind>
 8000778:	4603      	mov	r3, r0
 800077a:	70fb      	strb	r3, [r7, #3]

      if(err == ERR_OK)
 800077c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d104      	bne.n	800078e <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8000784:	2200      	movs	r2, #0
 8000786:	4905      	ldr	r1, [pc, #20]	@ (800079c <udp_echoserver_init+0x40>)
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f00f fcaf 	bl	80100ec <udp_recv>
      }
   }
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	08017888 	.word	0x08017888
 800079c:	080007a1 	.word	0x080007a1

080007a0 <udp_echoserver_receive_callback>:

void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
 80007ac:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 80007ae:	2207      	movs	r2, #7
 80007b0:	6839      	ldr	r1, [r7, #0]
 80007b2:	68b8      	ldr	r0, [r7, #8]
 80007b4:	f00f fc04 	bl	800ffc0 <udp_connect>

  /* Tell the client that we have accepted it */
  udp_sendto(upcb, p, addr, port);
 80007b8:	8b3b      	ldrh	r3, [r7, #24]
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f00f f9a6 	bl	800fb10 <udp_sendto>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 80007c4:	68b8      	ldr	r0, [r7, #8]
 80007c6:	f00f fc69 	bl	801009c <udp_disconnect>

  /* Free the p buffer */
  pbuf_free(p);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f008 fb72 	bl	8008eb4 <pbuf_free>

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <tcp_echoserver_init>:

void tcp_echoserver_init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
    struct tcp_pcb *pcb;

    pcb = tcp_new();
 80007de:	f00a f98b 	bl	800aaf8 <tcp_new>
 80007e2:	6078      	str	r0, [r7, #4]
    if (pcb == NULL) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d011      	beq.n	800080e <tcp_echoserver_init+0x36>
        return;
    }

    if (tcp_bind(pcb, IP_ADDR_ANY, TCP_CLIENT_PORT) != ERR_OK) {
 80007ea:	2208      	movs	r2, #8
 80007ec:	490b      	ldr	r1, [pc, #44]	@ (800081c <tcp_echoserver_init+0x44>)
 80007ee:	6878      	ldr	r0, [r7, #4]
 80007f0:	f009 f8dc 	bl	80099ac <tcp_bind>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10b      	bne.n	8000812 <tcp_echoserver_init+0x3a>
        return;
    }

    pcb = tcp_listen(pcb);
 80007fa:	21ff      	movs	r1, #255	@ 0xff
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f009 f98d 	bl	8009b1c <tcp_listen_with_backlog>
 8000802:	6078      	str	r0, [r7, #4]

    tcp_accept(pcb, tcp_echo_accept);
 8000804:	4906      	ldr	r1, [pc, #24]	@ (8000820 <tcp_echoserver_init+0x48>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f00a fa02 	bl	800ac10 <tcp_accept>
 800080c:	e002      	b.n	8000814 <tcp_echoserver_init+0x3c>
        return;
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <tcp_echoserver_init+0x3c>
        return;
 8000812:	bf00      	nop
}
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	08017888 	.word	0x08017888
 8000820:	08000825 	.word	0x08000825

08000824 <tcp_echo_accept>:

err_t tcp_echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	4613      	mov	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
    tcp_recv(newpcb, tcp_echo_recv);
 8000832:	4904      	ldr	r1, [pc, #16]	@ (8000844 <tcp_echo_accept+0x20>)
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f00a f985 	bl	800ab44 <tcp_recv>
    return ERR_OK;
 800083a:	2300      	movs	r3, #0
}
 800083c:	4618      	mov	r0, r3
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	0800087f 	.word	0x0800087f

08000848 <tcp_echo_close>:

void tcp_echo_close(struct tcp_pcb *tpcb) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
    tcp_arg(tpcb, NULL);
 8000850:	2100      	movs	r1, #0
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f00a f966 	bl	800ab24 <tcp_arg>
    tcp_sent(tpcb, NULL);
 8000858:	2100      	movs	r1, #0
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f00a f994 	bl	800ab88 <tcp_sent>
    tcp_recv(tpcb, NULL);
 8000860:	2100      	movs	r1, #0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f00a f96e 	bl	800ab44 <tcp_recv>
    tcp_err(tpcb, NULL);
 8000868:	2100      	movs	r1, #0
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f00a f9ae 	bl	800abcc <tcp_err>
    tcp_close(tpcb);
 8000870:	6878      	ldr	r0, [r7, #4]
 8000872:	f008 ffa5 	bl	80097c0 <tcp_close>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <tcp_echo_recv>:

err_t tcp_echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err) {
 800087e:	b580      	push	{r7, lr}
 8000880:	b084      	sub	sp, #16
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
 800088a:	70fb      	strb	r3, [r7, #3]
    if (p == NULL) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d104      	bne.n	800089c <tcp_echo_recv+0x1e>
        tcp_echo_close(tpcb);
 8000892:	68b8      	ldr	r0, [r7, #8]
 8000894:	f7ff ffd8 	bl	8000848 <tcp_echo_close>
        return ERR_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	e00b      	b.n	80008b4 <tcp_echo_recv+0x36>
    }

    // Gelen veriyi geri gönder (Echo)
    tcp_write(tpcb, p->payload, p->len, TCP_WRITE_FLAG_COPY);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6859      	ldr	r1, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	895a      	ldrh	r2, [r3, #10]
 80008a4:	2301      	movs	r3, #1
 80008a6:	68b8      	ldr	r0, [r7, #8]
 80008a8:	f00d f874 	bl	800d994 <tcp_write>

    // Belleği temizle
    pbuf_free(p);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f008 fb01 	bl	8008eb4 <pbuf_free>

    return ERR_OK;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	MX_LWIP_Init();
 80008c4:	f002 fec4 	bl	8003650 <MX_LWIP_Init>
	udp_echoserver_init();
 80008c8:	f7ff ff48 	bl	800075c <udp_echoserver_init>
	tcp_echoserver_init();
 80008cc:	f7ff ff84 	bl	80007d8 <tcp_echoserver_init>
	httpd_init();
 80008d0:	f006 fdee 	bl	80074b0 <httpd_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f003 f87e 	bl	80039d6 <osDelay>
 80008da:	e7fb      	b.n	80008d4 <StartDefaultTask+0x18>

080008dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d101      	bne.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ee:	f000 fa73 	bl	8000dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40001000 	.word	0x40001000

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_MspInit+0x64>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000916:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_MspInit+0x64>)
 8000918:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091c:	6253      	str	r3, [r2, #36]	@ 0x24
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_MspInit+0x64>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000922:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_MspInit+0x64>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <HAL_MspInit+0x64>)
 8000930:	f043 0301 	orr.w	r3, r3, #1
 8000934:	6213      	str	r3, [r2, #32]
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_MspInit+0x64>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_MspInit+0x64>)
 8000944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000946:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_MspInit+0x64>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800094c:	6253      	str	r3, [r2, #36]	@ 0x24
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <HAL_MspInit+0x64>)
 8000950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	210f      	movs	r1, #15
 800095e:	f06f 0001 	mvn.w	r0, #1
 8000962:	f000 fb0a 	bl	8000f7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a2e      	ldr	r2, [pc, #184]	@ (8000a4c <HAL_UART_MspInit+0xd8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d156      	bne.n	8000a44 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	4b2e      	ldr	r3, [pc, #184]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6213      	str	r3, [r2, #32]
 80009a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a27      	ldr	r2, [pc, #156]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b25      	ldr	r3, [pc, #148]	@ (8000a50 <HAL_UART_MspInit+0xdc>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	481c      	ldr	r0, [pc, #112]	@ (8000a54 <HAL_UART_MspInit+0xe0>)
 80009e4:	f000 fd24 	bl	8001430 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	@ (8000a5c <HAL_UART_MspInit+0xe8>)
 80009ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009f0:	2210      	movs	r2, #16
 80009f2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f4:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009fa:	4b17      	ldr	r3, [pc, #92]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 80009fc:	2280      	movs	r2, #128	@ 0x80
 80009fe:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a00:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a18:	480f      	ldr	r0, [pc, #60]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a1a:	f000 fad9 	bl	8000fd0 <HAL_DMA_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000a24:	f7ff ff6c 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a2c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a58 <HAL_UART_MspInit+0xe4>)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	2025      	movs	r0, #37	@ 0x25
 8000a3a:	f000 fa9e 	bl	8000f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a3e:	2025      	movs	r0, #37	@ 0x25
 8000a40:	f000 fab7 	bl	8000fb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a44:	bf00      	nop
 8000a46:	3728      	adds	r7, #40	@ 0x28
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40013800 	.word	0x40013800
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	2000037c 	.word	0x2000037c
 8000a5c:	40026044 	.word	0x40026044

08000a60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08e      	sub	sp, #56	@ 0x38
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a76:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a7a:	4a31      	ldr	r2, [pc, #196]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a7c:	f043 0310 	orr.w	r3, r3, #16
 8000a80:	6253      	str	r3, [r2, #36]	@ 0x24
 8000a82:	4b2f      	ldr	r3, [pc, #188]	@ (8000b40 <HAL_InitTick+0xe0>)
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a8e:	f107 0210 	add.w	r2, r7, #16
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fc07 	bl	80022ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a9e:	6a3b      	ldr	r3, [r7, #32]
 8000aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d103      	bne.n	8000ab0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aa8:	f001 fbd8 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8000aac:	6378      	str	r0, [r7, #52]	@ 0x34
 8000aae:	e004      	b.n	8000aba <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ab0:	f001 fbd4 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000abc:	4a21      	ldr	r2, [pc, #132]	@ (8000b44 <HAL_InitTick+0xe4>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	0c9b      	lsrs	r3, r3, #18
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aca:	4a20      	ldr	r2, [pc, #128]	@ (8000b4c <HAL_InitTick+0xec>)
 8000acc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ad4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ada:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ae8:	4817      	ldr	r0, [pc, #92]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000aea:	f001 fc6f 	bl	80023cc <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d11b      	bne.n	8000b34 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000afc:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <HAL_InitTick+0xe8>)
 8000afe:	f001 fcad 	bl	800245c <HAL_TIM_Base_Start_IT>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d111      	bne.n	8000b34 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b10:	202b      	movs	r0, #43	@ 0x2b
 8000b12:	f000 fa4e 	bl	8000fb2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b0f      	cmp	r3, #15
 8000b1a:	d808      	bhi.n	8000b2e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	202b      	movs	r0, #43	@ 0x2b
 8000b22:	f000 fa2a 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <HAL_InitTick+0xf0>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
 8000b2c:	e002      	b.n	8000b34 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3738      	adds	r7, #56	@ 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	200003c8 	.word	0x200003c8
 8000b4c:	40001000 	.word	0x40001000
 8000b50:	20000004 	.word	0x20000004

08000b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <NMI_Handler+0x4>

08000b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	bf00      	nop
 8000b6a:	e7fd      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b8c:	4802      	ldr	r0, [pc, #8]	@ (8000b98 <DMA1_Channel4_IRQHandler+0x10>)
 8000b8e:	f000 fb71 	bl	8001274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000037c 	.word	0x2000037c

08000b9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ba0:	4802      	ldr	r0, [pc, #8]	@ (8000bac <USART1_IRQHandler+0x10>)
 8000ba2:	f001 ff05 	bl	80029b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000334 	.word	0x20000334

08000bb0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <TIM6_IRQHandler+0x10>)
 8000bb6:	f001 fca3 	bl	8002500 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200003c8 	.word	0x200003c8

08000bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return 1;
 8000bc8:	2301      	movs	r3, #1
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_kill>:

int _kill(int pid, int sig)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000bde:	4b05      	ldr	r3, [pc, #20]	@ (8000bf4 <_kill+0x20>)
 8000be0:	2216      	movs	r2, #22
 8000be2:	601a      	str	r2, [r3, #0]
  return -1;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20007e8c 	.word	0x20007e8c

08000bf8 <_exit>:

void _exit (int status)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffe5 	bl	8000bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c0a:	bf00      	nop
 8000c0c:	e7fd      	b.n	8000c0a <_exit+0x12>

08000c0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	e00a      	b.n	8000c36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c20:	f3af 8000 	nop.w
 8000c24:	4601      	mov	r1, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1c5a      	adds	r2, r3, #1
 8000c2a:	60ba      	str	r2, [r7, #8]
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	dbf0      	blt.n	8000c20 <_read+0x12>
  }

  return len;
 8000c3e:	687b      	ldr	r3, [r7, #4]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e009      	b.n	8000c6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1c5a      	adds	r2, r3, #1
 8000c5e:	60ba      	str	r2, [r7, #8]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
 8000c6e:	697a      	ldr	r2, [r7, #20]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	dbf1      	blt.n	8000c5a <_write+0x12>
  }
  return len;
 8000c76:	687b      	ldr	r3, [r7, #4]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3718      	adds	r7, #24
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_close>:

int _close(int file)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr

08000c96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ca6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <_isatty>:

int _isatty(int file)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cbc:	2301      	movs	r3, #1
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr

08000cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b087      	sub	sp, #28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	@ (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d205      	bcs.n	8000d1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <_sbrk+0x6c>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b09      	ldr	r3, [pc, #36]	@ (8000d44 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	371c      	adds	r7, #28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	20014000 	.word	0x20014000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000408 	.word	0x20000408
 8000d48:	20007ea0 	.word	0x20007ea0
 8000d4c:	20007e8c 	.word	0x20007e8c

08000d50 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff fff8 	bl	8000d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480b      	ldr	r0, [pc, #44]	@ (8000d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d62:	490c      	ldr	r1, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d64:	4a0c      	ldr	r2, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a09      	ldr	r2, [pc, #36]	@ (8000d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d78:	4c09      	ldr	r4, [pc, #36]	@ (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f012 f8ab 	bl	8012ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fb99 	bl	80004c0 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000d98:	08017994 	.word	0x08017994
  ldr r2, =_sbss
 8000d9c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000da0:	20007e9c 	.word	0x20007e9c

08000da4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_IRQHandler>

08000da6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	2300      	movs	r3, #0
 8000dae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 f8d7 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	200f      	movs	r0, #15
 8000db8:	f7ff fe52 	bl	8000a60 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	71fb      	strb	r3, [r7, #7]
 8000dc6:	e001      	b.n	8000dcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dc8:	f7ff fda0 	bl	800090c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <HAL_IncTick+0x1c>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b05      	ldr	r3, [pc, #20]	@ (8000df8 <HAL_IncTick+0x20>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a03      	ldr	r2, [pc, #12]	@ (8000df4 <HAL_IncTick+0x1c>)
 8000de8:	6013      	str	r3, [r2, #0]
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000040c 	.word	0x2000040c
 8000df8:	20000008 	.word	0x20000008

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b02      	ldr	r3, [pc, #8]	@ (8000e0c <HAL_GetTick+0x10>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	2000040c 	.word	0x2000040c

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	@ (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	db0b      	blt.n	8000e9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f003 021f 	and.w	r2, r3, #31
 8000e8c:	4906      	ldr	r1, [pc, #24]	@ (8000ea8 <__NVIC_EnableIRQ+0x34>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	2001      	movs	r0, #1
 8000e96:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100

08000eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
         );
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff4f 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff64 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ffb2 	bl	8000f00 <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff81 	bl	8000eac <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff57 	bl	8000e74 <__NVIC_EnableIRQ>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e059      	b.n	8001096 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80010a0 <HAL_DMA_Init+0xd0>)
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d80f      	bhi.n	800100e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80010a4 <HAL_DMA_Init+0xd4>)
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	@ (80010a8 <HAL_DMA_Init+0xd8>)
 8000ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	009a      	lsls	r2, r3, #2
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a28      	ldr	r2, [pc, #160]	@ (80010ac <HAL_DMA_Init+0xdc>)
 800100a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800100c:	e00e      	b.n	800102c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b26      	ldr	r3, [pc, #152]	@ (80010b0 <HAL_DMA_Init+0xe0>)
 8001016:	4413      	add	r3, r2
 8001018:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <HAL_DMA_Init+0xd8>)
 800101a:	fba2 2303 	umull	r2, r3, r2, r3
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	009a      	lsls	r2, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_DMA_Init+0xe4>)
 800102a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2202      	movs	r2, #2
 8001030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001046:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800105c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40026407 	.word	0x40026407
 80010a4:	bffd9ff8 	.word	0xbffd9ff8
 80010a8:	cccccccd 	.word	0xcccccccd
 80010ac:	40026000 	.word	0x40026000
 80010b0:	bffd9bf8 	.word	0xbffd9bf8
 80010b4:	40026400 	.word	0x40026400

080010b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d101      	bne.n	80010d8 <HAL_DMA_Start_IT+0x20>
 80010d4:	2302      	movs	r3, #2
 80010d6:	e04b      	b.n	8001170 <HAL_DMA_Start_IT+0xb8>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d13a      	bne.n	8001162 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2202      	movs	r2, #2
 80010f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2200      	movs	r2, #0
 80010f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f022 0201 	bic.w	r2, r2, #1
 8001108:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f000 f95e 	bl	80013d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111a:	2b00      	cmp	r3, #0
 800111c:	d008      	beq.n	8001130 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 020e 	orr.w	r2, r2, #14
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e00f      	b.n	8001150 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0204 	bic.w	r2, r2, #4
 800113e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 020a 	orr.w	r2, r2, #10
 800114e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e005      	b.n	800116e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800116a:	2302      	movs	r3, #2
 800116c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800116e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d008      	beq.n	80011a2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2204      	movs	r2, #4
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e022      	b.n	80011e8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 020e 	bic.w	r2, r2, #14
 80011b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0201 	bic.w	r2, r2, #1
 80011c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 021c 	and.w	r2, r3, #28
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011ce:	2101      	movs	r1, #1
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2201      	movs	r2, #1
 80011da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr

080011f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b084      	sub	sp, #16
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d005      	beq.n	8001216 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2204      	movs	r2, #4
 800120e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e029      	b.n	800126a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 020e 	bic.w	r2, r2, #14
 8001224:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f003 021c 	and.w	r2, r3, #28
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001242:	2101      	movs	r1, #1
 8001244:	fa01 f202 	lsl.w	r2, r1, r2
 8001248:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	4798      	blx	r3
    }
  }
  return status;
 800126a:	7bfb      	ldrb	r3, [r7, #15]
}
 800126c:	4618      	mov	r0, r3
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 031c 	and.w	r3, r3, #28
 8001294:	2204      	movs	r2, #4
 8001296:	409a      	lsls	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d026      	beq.n	80012ee <HAL_DMA_IRQHandler+0x7a>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d021      	beq.n	80012ee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0320 	and.w	r3, r3, #32
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d107      	bne.n	80012c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f022 0204 	bic.w	r2, r2, #4
 80012c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f003 021c 	and.w	r2, r3, #28
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012d4:	2104      	movs	r1, #4
 80012d6:	fa01 f202 	lsl.w	r2, r1, r2
 80012da:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d071      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80012ec:	e06c      	b.n	80013c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 031c 	and.w	r3, r3, #28
 80012f6:	2202      	movs	r2, #2
 80012f8:	409a      	lsls	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d02e      	beq.n	8001360 <HAL_DMA_IRQHandler+0xec>
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d029      	beq.n	8001360 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0320 	and.w	r3, r3, #32
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10b      	bne.n	8001332 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 020a 	bic.w	r2, r2, #10
 8001328:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 021c 	and.w	r2, r3, #28
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800133e:	2102      	movs	r1, #2
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	2b00      	cmp	r3, #0
 8001354:	d038      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800135e:	e033      	b.n	80013c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001364:	f003 031c 	and.w	r3, r3, #28
 8001368:	2208      	movs	r2, #8
 800136a:	409a      	lsls	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d02a      	beq.n	80013ca <HAL_DMA_IRQHandler+0x156>
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d025      	beq.n	80013ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 020e 	bic.w	r2, r2, #14
 800138c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 021c 	and.w	r2, r3, #28
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800139a:	2101      	movs	r1, #1
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
}
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	f003 021c 	and.w	r2, r3, #28
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ec:	2101      	movs	r1, #1
 80013ee:	fa01 f202 	lsl.w	r2, r1, r2
 80013f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b10      	cmp	r3, #16
 8001402:	d108      	bne.n	8001416 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68ba      	ldr	r2, [r7, #8]
 8001412:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001414:	e007      	b.n	8001426 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	60da      	str	r2, [r3, #12]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001446:	e160      	b.n	800170a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 8152 	beq.w	8001704 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	2b01      	cmp	r3, #1
 800146a:	d005      	beq.n	8001478 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001474:	2b02      	cmp	r3, #2
 8001476:	d130      	bne.n	80014da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4013      	ands	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014ae:	2201      	movs	r2, #1
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	f003 0201 	and.w	r2, r3, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d017      	beq.n	8001516 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d123      	bne.n	800156a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	08da      	lsrs	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	3208      	adds	r2, #8
 800152a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	220f      	movs	r2, #15
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	691a      	ldr	r2, [r3, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	08da      	lsrs	r2, r3, #3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3208      	adds	r2, #8
 8001564:	6939      	ldr	r1, [r7, #16]
 8001566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 0203 	and.w	r2, r3, #3
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80ac 	beq.w	8001704 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001728 <HAL_GPIO_Init+0x2f8>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001728 <HAL_GPIO_Init+0x2f8>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6213      	str	r3, [r2, #32]
 80015b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001728 <HAL_GPIO_Init+0x2f8>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80015c4:	4a59      	ldr	r2, [pc, #356]	@ (800172c <HAL_GPIO_Init+0x2fc>)
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	3302      	adds	r3, #2
 80015cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	220f      	movs	r2, #15
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a51      	ldr	r2, [pc, #324]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d025      	beq.n	800163c <HAL_GPIO_Init+0x20c>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a50      	ldr	r2, [pc, #320]	@ (8001734 <HAL_GPIO_Init+0x304>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d01f      	beq.n	8001638 <HAL_GPIO_Init+0x208>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x308>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d019      	beq.n	8001634 <HAL_GPIO_Init+0x204>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_GPIO_Init+0x30c>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x200>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_GPIO_Init+0x310>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1fc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_GPIO_Init+0x314>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1f8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a4b      	ldr	r2, [pc, #300]	@ (8001748 <HAL_GPIO_Init+0x318>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1f4>
 8001620:	2306      	movs	r3, #6
 8001622:	e00c      	b.n	800163e <HAL_GPIO_Init+0x20e>
 8001624:	2307      	movs	r3, #7
 8001626:	e00a      	b.n	800163e <HAL_GPIO_Init+0x20e>
 8001628:	2305      	movs	r3, #5
 800162a:	e008      	b.n	800163e <HAL_GPIO_Init+0x20e>
 800162c:	2304      	movs	r3, #4
 800162e:	e006      	b.n	800163e <HAL_GPIO_Init+0x20e>
 8001630:	2303      	movs	r3, #3
 8001632:	e004      	b.n	800163e <HAL_GPIO_Init+0x20e>
 8001634:	2302      	movs	r3, #2
 8001636:	e002      	b.n	800163e <HAL_GPIO_Init+0x20e>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <HAL_GPIO_Init+0x20e>
 800163c:	2300      	movs	r3, #0
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	f002 0203 	and.w	r2, r2, #3
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	4093      	lsls	r3, r2
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800164e:	4937      	ldr	r1, [pc, #220]	@ (800172c <HAL_GPIO_Init+0x2fc>)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3302      	adds	r3, #2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800165c:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_GPIO_Init+0x31c>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001680:	4a32      	ldr	r2, [pc, #200]	@ (800174c <HAL_GPIO_Init+0x31c>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <HAL_GPIO_Init+0x31c>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016aa:	4a28      	ldr	r2, [pc, #160]	@ (800174c <HAL_GPIO_Init+0x31c>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016b0:	4b26      	ldr	r3, [pc, #152]	@ (800174c <HAL_GPIO_Init+0x31c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016d4:	4a1d      	ldr	r2, [pc, #116]	@ (800174c <HAL_GPIO_Init+0x31c>)
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <HAL_GPIO_Init+0x31c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016fe:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_GPIO_Init+0x31c>)
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
 8001714:	2b00      	cmp	r3, #0
 8001716:	f47f ae97 	bne.w	8001448 <HAL_GPIO_Init+0x18>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800
 800172c:	40010000 	.word	0x40010000
 8001730:	40020000 	.word	0x40020000
 8001734:	40020400 	.word	0x40020400
 8001738:	40020800 	.word	0x40020800
 800173c:	40020c00 	.word	0x40020c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40021400 	.word	0x40021400
 8001748:	40021800 	.word	0x40021800
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	619a      	str	r2, [r3, #24]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e31d      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4b94      	ldr	r3, [pc, #592]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b91      	ldr	r3, [pc, #580]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d07b      	beq.n	80018aa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d006      	beq.n	80017c6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d10f      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c4:	d10b      	bne.n	80017de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c6:	4b87      	ldr	r3, [pc, #540]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d06a      	beq.n	80018a8 <HAL_RCC_OscConfig+0x128>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d166      	bne.n	80018a8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e2f7      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x74>
 80017e6:	4b7f      	ldr	r3, [pc, #508]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7e      	ldr	r2, [pc, #504]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e02d      	b.n	8001850 <HAL_RCC_OscConfig+0xd0>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d10c      	bne.n	8001816 <HAL_RCC_OscConfig+0x96>
 80017fc:	4b79      	ldr	r3, [pc, #484]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a78      	ldr	r2, [pc, #480]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001802:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	4b76      	ldr	r3, [pc, #472]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a75      	ldr	r2, [pc, #468]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800180e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e01c      	b.n	8001850 <HAL_RCC_OscConfig+0xd0>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b05      	cmp	r3, #5
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0xb8>
 800181e:	4b71      	ldr	r3, [pc, #452]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a70      	ldr	r2, [pc, #448]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6d      	ldr	r2, [pc, #436]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xd0>
 8001838:	4b6a      	ldr	r3, [pc, #424]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a69      	ldr	r2, [pc, #420]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b67      	ldr	r3, [pc, #412]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a66      	ldr	r2, [pc, #408]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fad0 	bl	8000dfc <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff facc 	bl	8000dfc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	@ 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e2ad      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001872:	4b5c      	ldr	r3, [pc, #368]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xe0>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fabc 	bl	8000dfc <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fab8 	bl	8000dfc <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e299      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800189a:	4b52      	ldr	r3, [pc, #328]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x108>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d05a      	beq.n	800196c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x176>
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c8:	4b46      	ldr	r3, [pc, #280]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x160>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e276      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b40      	ldr	r3, [pc, #256]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	493d      	ldr	r1, [pc, #244]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f4:	e03a      	b.n	800196c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d020      	beq.n	8001940 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_RCC_OscConfig+0x268>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fa7a 	bl	8000dfc <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190c:	f7ff fa76 	bl	8000dfc <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e257      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	492a      	ldr	r1, [pc, #168]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
 800193e:	e015      	b.n	800196c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001940:	4b29      	ldr	r3, [pc, #164]	@ (80019e8 <HAL_RCC_OscConfig+0x268>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fa59 	bl	8000dfc <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194e:	f7ff fa55 	bl	8000dfc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e236      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001960:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f0      	bne.n	800194e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80b8 	beq.w	8001aea <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d170      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001988:	2b00      	cmp	r3, #0
 800198a:	d005      	beq.n	8001998 <HAL_RCC_OscConfig+0x218>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e21a      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d921      	bls.n	80019ec <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fcad 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e208      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4906      	ldr	r1, [pc, #24]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	061b      	lsls	r3, r3, #24
 80019dc:	4901      	ldr	r1, [pc, #4]	@ (80019e4 <HAL_RCC_OscConfig+0x264>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
 80019e2:	e020      	b.n	8001a26 <HAL_RCC_OscConfig+0x2a6>
 80019e4:	40023800 	.word	0x40023800
 80019e8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ec:	4b99      	ldr	r3, [pc, #612]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4996      	ldr	r1, [pc, #600]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019fe:	4b95      	ldr	r3, [pc, #596]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	4991      	ldr	r1, [pc, #580]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fc78 	bl	800230c <RCC_SetFlashLatencyFromMSIRange>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1d3      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	0b5b      	lsrs	r3, r3, #13
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a36:	4a87      	ldr	r2, [pc, #540]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a38:	6892      	ldr	r2, [r2, #8]
 8001a3a:	0912      	lsrs	r2, r2, #4
 8001a3c:	f002 020f 	and.w	r2, r2, #15
 8001a40:	4985      	ldr	r1, [pc, #532]	@ (8001c58 <HAL_RCC_OscConfig+0x4d8>)
 8001a42:	5c8a      	ldrb	r2, [r1, r2]
 8001a44:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a46:	4a85      	ldr	r2, [pc, #532]	@ (8001c5c <HAL_RCC_OscConfig+0x4dc>)
 8001a48:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a4a:	4b85      	ldr	r3, [pc, #532]	@ (8001c60 <HAL_RCC_OscConfig+0x4e0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f806 	bl	8000a60 <HAL_InitTick>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d045      	beq.n	8001aea <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	e1b5      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d029      	beq.n	8001abe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001c64 <HAL_RCC_OscConfig+0x4e4>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7ff f9c4 	bl	8000dfc <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a78:	f7ff f9c0 	bl	8000dfc <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e1a1      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a8a:	4b72      	ldr	r3, [pc, #456]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a96:	4b6f      	ldr	r3, [pc, #444]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	496c      	ldr	r1, [pc, #432]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	4967      	ldr	r1, [pc, #412]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e015      	b.n	8001aea <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001abe:	4b69      	ldr	r3, [pc, #420]	@ (8001c64 <HAL_RCC_OscConfig+0x4e4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f99a 	bl	8000dfc <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001acc:	f7ff f996 	bl	8000dfc <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e177      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ade:	4b5d      	ldr	r3, [pc, #372]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d030      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d016      	beq.n	8001b2c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c68 <HAL_RCC_OscConfig+0x4e8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff f97a 	bl	8000dfc <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f976 	bl	8000dfc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e157      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x38c>
 8001b2a:	e015      	b.n	8001b58 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2c:	4b4e      	ldr	r3, [pc, #312]	@ (8001c68 <HAL_RCC_OscConfig+0x4e8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7ff f963 	bl	8000dfc <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b3a:	f7ff f95f 	bl	8000dfc <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e140      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b4c:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80b5 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	4b37      	ldr	r3, [pc, #220]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7a:	4a36      	ldr	r2, [pc, #216]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCC_OscConfig+0x4ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b33      	ldr	r3, [pc, #204]	@ (8001c6c <HAL_RCC_OscConfig+0x4ec>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <HAL_RCC_OscConfig+0x4ec>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f927 	bl	8000dfc <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f923 	bl	8000dfc <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b64      	cmp	r3, #100	@ 0x64
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e104      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b29      	ldr	r3, [pc, #164]	@ (8001c6c <HAL_RCC_OscConfig+0x4ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x466>
 8001bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001bde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be2:	6353      	str	r3, [r2, #52]	@ 0x34
 8001be4:	e02d      	b.n	8001c42 <HAL_RCC_OscConfig+0x4c2>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x488>
 8001bee:	4b19      	ldr	r3, [pc, #100]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bf2:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001bf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bf8:	6353      	str	r3, [r2, #52]	@ 0x34
 8001bfa:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfe:	4a15      	ldr	r2, [pc, #84]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c04:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c06:	e01c      	b.n	8001c42 <HAL_RCC_OscConfig+0x4c2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b05      	cmp	r3, #5
 8001c0e:	d10c      	bne.n	8001c2a <HAL_RCC_OscConfig+0x4aa>
 8001c10:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c14:	4a0f      	ldr	r2, [pc, #60]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c20:	4a0c      	ldr	r2, [pc, #48]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c26:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c28:	e00b      	b.n	8001c42 <HAL_RCC_OscConfig+0x4c2>
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2e:	4a09      	ldr	r2, [pc, #36]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c34:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3a:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <HAL_RCC_OscConfig+0x4d4>)
 8001c3c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c40:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d024      	beq.n	8001c94 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4a:	f7ff f8d7 	bl	8000dfc <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c50:	e019      	b.n	8001c86 <HAL_RCC_OscConfig+0x506>
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	08016964 	.word	0x08016964
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004
 8001c64:	42470020 	.word	0x42470020
 8001c68:	42470680 	.word	0x42470680
 8001c6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c70:	f7ff f8c4 	bl	8000dfc <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e0a3      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c86:	4b54      	ldr	r3, [pc, #336]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0ee      	beq.n	8001c70 <HAL_RCC_OscConfig+0x4f0>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff f8b2 	bl	8000dfc <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f8ae 	bl	8000dfc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e08d      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cb2:	4b49      	ldr	r3, [pc, #292]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ee      	bne.n	8001c9c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc4:	4b44      	ldr	r3, [pc, #272]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc8:	4a43      	ldr	r2, [pc, #268]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cce:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d079      	beq.n	8001dcc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b0c      	cmp	r3, #12
 8001cdc:	d056      	beq.n	8001d8c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d13b      	bne.n	8001d5e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <HAL_RCC_OscConfig+0x65c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f886 	bl	8000dfc <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f882 	bl	8000dfc <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e063      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d06:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d12:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d22:	4319      	orrs	r1, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	492b      	ldr	r1, [pc, #172]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <HAL_RCC_OscConfig+0x65c>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff f861 	bl	8000dfc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f85d 	bl	8000dfc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e03e      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d50:	4b21      	ldr	r3, [pc, #132]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x5be>
 8001d5c:	e036      	b.n	8001dcc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_RCC_OscConfig+0x65c>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d64:	f7ff f84a 	bl	8000dfc <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f846 	bl	8000dfc <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e027      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d7e:	4b16      	ldr	r3, [pc, #88]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5ec>
 8001d8a:	e01f      	b.n	8001dcc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01a      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <HAL_RCC_OscConfig+0x658>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10d      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d106      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3720      	adds	r7, #32
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	42470060 	.word	0x42470060

08001de0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e11a      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df4:	4b8f      	ldr	r3, [pc, #572]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d919      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d105      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x34>
 8001e08:	4b8a      	ldr	r3, [pc, #552]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a89      	ldr	r2, [pc, #548]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b87      	ldr	r3, [pc, #540]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f023 0201 	bic.w	r2, r3, #1
 8001e1c:	4985      	ldr	r1, [pc, #532]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e24:	4b83      	ldr	r3, [pc, #524]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e0f9      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e42:	4b7d      	ldr	r3, [pc, #500]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	497a      	ldr	r1, [pc, #488]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 808e 	beq.w	8001f7e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e6a:	4b73      	ldr	r3, [pc, #460]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d121      	bne.n	8001eba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e0d7      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e82:	4b6d      	ldr	r3, [pc, #436]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d115      	bne.n	8001eba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0cb      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9a:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0bf      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0b7      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eba:	4b5f      	ldr	r3, [pc, #380]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 0203 	bic.w	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	495c      	ldr	r1, [pc, #368]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ecc:	f7fe ff96 	bl	8000dfc <HAL_GetTick>
 8001ed0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d112      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe ff8e 	bl	8000dfc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e09b      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef2:	4b51      	ldr	r3, [pc, #324]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d1ee      	bne.n	8001edc <HAL_RCC_ClockConfig+0xfc>
 8001efe:	e03e      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b03      	cmp	r3, #3
 8001f06:	d112      	bne.n	8001f2e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	e00a      	b.n	8001f20 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0a:	f7fe ff77 	bl	8000dfc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e084      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f20:	4b45      	ldr	r3, [pc, #276]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 030c 	and.w	r3, r3, #12
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d1ee      	bne.n	8001f0a <HAL_RCC_ClockConfig+0x12a>
 8001f2c:	e027      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d11d      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7fe ff60 	bl	8000dfc <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e06d      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 030c 	and.w	r3, r3, #12
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d1ee      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x158>
 8001f5a:	e010      	b.n	8001f7e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe ff4e 	bl	8000dfc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e05b      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f72:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d219      	bcs.n	8001fc0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x1be>
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0201 	bic.w	r2, r3, #1
 8001fa6:	4923      	ldr	r1, [pc, #140]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCC_ClockConfig+0x254>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e034      	b.n	800202a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d008      	beq.n	8001fde <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4917      	ldr	r1, [pc, #92]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d009      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fea:	4b13      	ldr	r3, [pc, #76]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	490f      	ldr	r1, [pc, #60]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ffe:	f000 f823 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8002002:	4602      	mov	r2, r0
 8002004:	4b0c      	ldr	r3, [pc, #48]	@ (8002038 <HAL_RCC_ClockConfig+0x258>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	490b      	ldr	r1, [pc, #44]	@ (800203c <HAL_RCC_ClockConfig+0x25c>)
 8002010:	5ccb      	ldrb	r3, [r1, r3]
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_RCC_ClockConfig+0x260>)
 8002018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <HAL_RCC_ClockConfig+0x264>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fd1e 	bl	8000a60 <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	72fb      	strb	r3, [r7, #11]

  return status;
 8002028:	7afb      	ldrb	r3, [r7, #11]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	40023c00 	.word	0x40023c00
 8002038:	40023800 	.word	0x40023800
 800203c:	08016964 	.word	0x08016964
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800204c:	b092      	sub	sp, #72	@ 0x48
 800204e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002050:	4b79      	ldr	r3, [pc, #484]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002058:	f003 030c 	and.w	r3, r3, #12
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d00d      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x34>
 8002060:	2b0c      	cmp	r3, #12
 8002062:	f200 80d5 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002066:	2b04      	cmp	r3, #4
 8002068:	d002      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x28>
 800206a:	2b08      	cmp	r3, #8
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0x2e>
 800206e:	e0cf      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002070:	4b72      	ldr	r3, [pc, #456]	@ (800223c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8002074:	e0da      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002076:	4b72      	ldr	r3, [pc, #456]	@ (8002240 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002078:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800207a:	e0d7      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800207c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	f003 020f 	and.w	r2, r3, #15
 8002084:	4b6f      	ldr	r3, [pc, #444]	@ (8002244 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002086:	5c9b      	ldrb	r3, [r3, r2]
 8002088:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800208a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208c:	0d9b      	lsrs	r3, r3, #22
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	3301      	adds	r3, #1
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002096:	4b68      	ldr	r3, [pc, #416]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d05d      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a4:	2200      	movs	r2, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	4611      	mov	r1, r2
 80020aa:	4604      	mov	r4, r0
 80020ac:	460d      	mov	r5, r1
 80020ae:	4622      	mov	r2, r4
 80020b0:	462b      	mov	r3, r5
 80020b2:	f04f 0000 	mov.w	r0, #0
 80020b6:	f04f 0100 	mov.w	r1, #0
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020c0:	0150      	lsls	r0, r2, #5
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4621      	mov	r1, r4
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	6139      	str	r1, [r7, #16]
 80020cc:	4629      	mov	r1, r5
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020e0:	4659      	mov	r1, fp
 80020e2:	018b      	lsls	r3, r1, #6
 80020e4:	4651      	mov	r1, sl
 80020e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020ea:	4651      	mov	r1, sl
 80020ec:	018a      	lsls	r2, r1, #6
 80020ee:	46d4      	mov	ip, sl
 80020f0:	ebb2 080c 	subs.w	r8, r2, ip
 80020f4:	4659      	mov	r1, fp
 80020f6:	eb63 0901 	sbc.w	r9, r3, r1
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800210e:	4690      	mov	r8, r2
 8002110:	4699      	mov	r9, r3
 8002112:	4623      	mov	r3, r4
 8002114:	eb18 0303 	adds.w	r3, r8, r3
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	462b      	mov	r3, r5
 800211c:	eb49 0303 	adc.w	r3, r9, r3
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800212e:	4629      	mov	r1, r5
 8002130:	024b      	lsls	r3, r1, #9
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	4604      	mov	r4, r0
 8002138:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800213c:	4601      	mov	r1, r0
 800213e:	024a      	lsls	r2, r1, #9
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002146:	2200      	movs	r2, #0
 8002148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800214a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800214c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002150:	f7fe f828 	bl	80001a4 <__aeabi_uldivmod>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4613      	mov	r3, r2
 800215a:	647b      	str	r3, [r7, #68]	@ 0x44
 800215c:	e055      	b.n	800220a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800215e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002160:	2200      	movs	r2, #0
 8002162:	623b      	str	r3, [r7, #32]
 8002164:	627a      	str	r2, [r7, #36]	@ 0x24
 8002166:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800216a:	4642      	mov	r2, r8
 800216c:	464b      	mov	r3, r9
 800216e:	f04f 0000 	mov.w	r0, #0
 8002172:	f04f 0100 	mov.w	r1, #0
 8002176:	0159      	lsls	r1, r3, #5
 8002178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217c:	0150      	lsls	r0, r2, #5
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	46c4      	mov	ip, r8
 8002184:	ebb2 0a0c 	subs.w	sl, r2, ip
 8002188:	4640      	mov	r0, r8
 800218a:	4649      	mov	r1, r9
 800218c:	468c      	mov	ip, r1
 800218e:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800219e:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021a2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021a6:	ebb2 040a 	subs.w	r4, r2, sl
 80021aa:	eb63 050b 	sbc.w	r5, r3, fp
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	00eb      	lsls	r3, r5, #3
 80021b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021bc:	00e2      	lsls	r2, r4, #3
 80021be:	4614      	mov	r4, r2
 80021c0:	461d      	mov	r5, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	18e3      	adds	r3, r4, r3
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	460b      	mov	r3, r1
 80021ca:	eb45 0303 	adc.w	r3, r5, r3
 80021ce:	607b      	str	r3, [r7, #4]
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021dc:	4629      	mov	r1, r5
 80021de:	028b      	lsls	r3, r1, #10
 80021e0:	4620      	mov	r0, r4
 80021e2:	4629      	mov	r1, r5
 80021e4:	4604      	mov	r4, r0
 80021e6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80021ea:	4601      	mov	r1, r0
 80021ec:	028a      	lsls	r2, r1, #10
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f4:	2200      	movs	r2, #0
 80021f6:	61bb      	str	r3, [r7, #24]
 80021f8:	61fa      	str	r2, [r7, #28]
 80021fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021fe:	f7fd ffd1 	bl	80001a4 <__aeabi_uldivmod>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4613      	mov	r3, r2
 8002208:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800220a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800220e:	e00d      	b.n	800222c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002210:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0b5b      	lsrs	r3, r3, #13
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800221c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221e:	3301      	adds	r3, #1
 8002220:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800222a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800222c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800222e:	4618      	mov	r0, r3
 8002230:	3748      	adds	r7, #72	@ 0x48
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002238:	40023800 	.word	0x40023800
 800223c:	00f42400 	.word	0x00f42400
 8002240:	007a1200 	.word	0x007a1200
 8002244:	08016958 	.word	0x08016958

08002248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800224c:	4b02      	ldr	r3, [pc, #8]	@ (8002258 <HAL_RCC_GetHCLKFreq+0x10>)
 800224e:	681b      	ldr	r3, [r3, #0]
}
 8002250:	4618      	mov	r0, r3
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr
 8002258:	20000000 	.word	0x20000000

0800225c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002260:	f7ff fff2 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 8002264:	4602      	mov	r2, r0
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	4903      	ldr	r1, [pc, #12]	@ (8002280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002272:	5ccb      	ldrb	r3, [r1, r3]
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	08016974 	.word	0x08016974

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002288:	f7ff ffde 	bl	8002248 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4903      	ldr	r1, [pc, #12]	@ (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	08016974 	.word	0x08016974

080022ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	220f      	movs	r2, #15
 80022ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80022e0:	4b08      	ldr	r3, [pc, #32]	@ (8002304 <HAL_RCC_GetClockConfig+0x58>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	08db      	lsrs	r3, r3, #3
 80022e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_GetClockConfig+0x5c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0201 	and.w	r2, r3, #1
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	601a      	str	r2, [r3, #0]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40023800 	.word	0x40023800
 8002308:	40023c00 	.word	0x40023c00

0800230c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002318:	4b29      	ldr	r3, [pc, #164]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d12c      	bne.n	800237e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002324:	4b26      	ldr	r3, [pc, #152]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002330:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e016      	b.n	800236a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	4a1f      	ldr	r2, [pc, #124]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002346:	6253      	str	r3, [r2, #36]	@ 0x24
 8002348:	4b1d      	ldr	r3, [pc, #116]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002354:	4b1b      	ldr	r3, [pc, #108]	@ (80023c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800235c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800235e:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	4a17      	ldr	r2, [pc, #92]	@ (80023c0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002368:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8002370:	d105      	bne.n	800237e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002378:	d101      	bne.n	800237e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800237a:	2301      	movs	r3, #1
 800237c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d105      	bne.n	8002390 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002384:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 0201 	bic.w	r2, r3, #1
 8002398:	490b      	ldr	r1, [pc, #44]	@ (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d001      	beq.n	80023b2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000
 80023c8:	40023c00 	.word	0x40023c00

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e031      	b.n	8002442 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f829 	bl	800244a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 f968 	bl	80026e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr

0800245c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b01      	cmp	r3, #1
 800246e:	d001      	beq.n	8002474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e03a      	b.n	80024ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002494:	d00e      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a16      	ldr	r2, [pc, #88]	@ (80024f4 <HAL_TIM_Base_Start_IT+0x98>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d009      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a14      	ldr	r2, [pc, #80]	@ (80024f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_TIM_Base_Start_IT+0x58>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a13      	ldr	r2, [pc, #76]	@ (80024fc <HAL_TIM_Base_Start_IT+0xa0>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d111      	bne.n	80024d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d010      	beq.n	80024e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d6:	e007      	b.n	80024e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40010800 	.word	0x40010800

08002500 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8ad 	bl	80026aa <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f8a0 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8af 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0204 	mvn.w	r2, #4
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2202      	movs	r2, #2
 8002586:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f887 	bl	80026aa <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f87a 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f889 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0208 	mvn.w	r2, #8
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2204      	movs	r2, #4
 80025d2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f861 	bl	80026aa <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f854 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f863 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d020      	beq.n	8002648 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0210 	mvn.w	r2, #16
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2208      	movs	r2, #8
 800261e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f83b 	bl	80026aa <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f82e 	bl	8002698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f83d 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00c      	beq.n	800266c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0201 	mvn.w	r2, #1
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f938 	bl	80008dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f81f 	bl	80026ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002690:	bf00      	nop
 8002692:	3710      	adds	r7, #16
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr

080026ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b083      	sub	sp, #12
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f6:	d00f      	beq.n	8002718 <TIM_Base_SetConfig+0x38>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a2e      	ldr	r2, [pc, #184]	@ (80027b4 <TIM_Base_SetConfig+0xd4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00b      	beq.n	8002718 <TIM_Base_SetConfig+0x38>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <TIM_Base_SetConfig+0xd8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d007      	beq.n	8002718 <TIM_Base_SetConfig+0x38>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a2c      	ldr	r2, [pc, #176]	@ (80027bc <TIM_Base_SetConfig+0xdc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d003      	beq.n	8002718 <TIM_Base_SetConfig+0x38>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a2b      	ldr	r2, [pc, #172]	@ (80027c0 <TIM_Base_SetConfig+0xe0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d108      	bne.n	800272a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800271e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002730:	d017      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1f      	ldr	r2, [pc, #124]	@ (80027b4 <TIM_Base_SetConfig+0xd4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1e      	ldr	r2, [pc, #120]	@ (80027b8 <TIM_Base_SetConfig+0xd8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00f      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <TIM_Base_SetConfig+0xdc>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00b      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <TIM_Base_SetConfig+0xe0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <TIM_Base_SetConfig+0xe4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d003      	beq.n	8002762 <TIM_Base_SetConfig+0x82>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a1a      	ldr	r2, [pc, #104]	@ (80027c8 <TIM_Base_SetConfig+0xe8>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d108      	bne.n	8002774 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f043 0204 	orr.w	r2, r3, #4
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	601a      	str	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40010800 	.word	0x40010800
 80027c4:	40010c00 	.word	0x40010c00
 80027c8:	40011000 	.word	0x40011000

080027cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e042      	b.n	8002864 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f8be 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	@ 0x24
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 fe39 	bl	8003488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	4613      	mov	r3, r2
 8002878:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b20      	cmp	r3, #32
 8002884:	d112      	bne.n	80028ac <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <HAL_UART_Receive_IT+0x26>
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e00b      	b.n	80028ae <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	461a      	mov	r2, r3
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fbf7 	bl	8003096 <UART_Start_Receive_IT>
 80028a8:	4603      	mov	r3, r0
 80028aa:	e000      	b.n	80028ae <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	@ 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	4613      	mov	r3, r2
 80028c4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b20      	cmp	r3, #32
 80028d0:	d162      	bne.n	8002998 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <HAL_UART_Transmit_DMA+0x26>
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e05b      	b.n	800299a <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	88fa      	ldrh	r2, [r7, #6]
 80028f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	@ 0x21
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	4a27      	ldr	r2, [pc, #156]	@ (80029a4 <HAL_UART_Transmit_DMA+0xec>)
 8002908:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290e:	4a26      	ldr	r2, [pc, #152]	@ (80029a8 <HAL_UART_Transmit_DMA+0xf0>)
 8002910:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002916:	4a25      	ldr	r2, [pc, #148]	@ (80029ac <HAL_UART_Transmit_DMA+0xf4>)
 8002918:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291e:	2200      	movs	r2, #0
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800292c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3304      	adds	r3, #4
 8002936:	461a      	mov	r2, r3
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	f7fe fbbd 	bl	80010b8 <HAL_DMA_Start_IT>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2210      	movs	r2, #16
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e021      	b.n	800299a <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800295e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	617b      	str	r3, [r7, #20]
   return(result);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002976:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002980:	627a      	str	r2, [r7, #36]	@ 0x24
 8002982:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002984:	6a39      	ldr	r1, [r7, #32]
 8002986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002988:	e841 2300 	strex	r3, r2, [r1]
 800298c:	61fb      	str	r3, [r7, #28]
   return(result);
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e5      	bne.n	8002960 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	e000      	b.n	800299a <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
  }
}
 800299a:	4618      	mov	r0, r3
 800299c:	3730      	adds	r7, #48	@ 0x30
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	08002f4d 	.word	0x08002f4d
 80029a8:	08002fe7 	.word	0x08002fe7
 80029ac:	08003003 	.word	0x08003003

080029b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0ba      	sub	sp, #232	@ 0xe8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fa:	f003 0320 	and.w	r3, r3, #32
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <HAL_UART_IRQHandler+0x66>
 8002a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fc7b 	bl	800330a <UART_Receive_IT>
      return;
 8002a14:	e271      	b.n	8002efa <HAL_UART_IRQHandler+0x54a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80de 	beq.w	8002bdc <HAL_UART_IRQHandler+0x22c>
 8002a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d106      	bne.n	8002a3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80d1 	beq.w	8002bdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0xae>
 8002a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0201 	orr.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_UART_IRQHandler+0xd2>
 8002a6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7a:	f043 0202 	orr.w	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xf6>
 8002a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f043 0204 	orr.w	r2, r3, #4
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d011      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x126>
 8002ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	f043 0208 	orr.w	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 8208 	beq.w	8002ef0 <HAL_UART_IRQHandler+0x540>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_UART_IRQHandler+0x14e>
 8002aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fc06 	bl	800330a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b08:	2b40      	cmp	r3, #64	@ 0x40
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d103      	bne.n	8002b2a <HAL_UART_IRQHandler+0x17a>
 8002b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d04f      	beq.n	8002bca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fb13 	bl	8003156 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b3a:	2b40      	cmp	r3, #64	@ 0x40
 8002b3c:	d141      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3314      	adds	r3, #20
 8002b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b7a:	e841 2300 	strex	r3, r2, [r1]
 8002b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1d9      	bne.n	8002b3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d013      	beq.n	8002bba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b96:	4a89      	ldr	r2, [pc, #548]	@ (8002dbc <HAL_UART_IRQHandler+0x40c>)
 8002b98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fe fb27 	bl	80011f2 <HAL_DMA_Abort_IT>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bb8:	e00e      	b.n	8002bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9b2 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e00a      	b.n	8002bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f9ae 	bl	8002f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e006      	b.n	8002bd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9aa 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002bd6:	e18b      	b.n	8002ef0 <HAL_UART_IRQHandler+0x540>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	bf00      	nop
    return;
 8002bda:	e189      	b.n	8002ef0 <HAL_UART_IRQHandler+0x540>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	f040 8165 	bne.w	8002eb0 <HAL_UART_IRQHandler+0x500>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 815e 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x500>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8157 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x500>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c22:	2b40      	cmp	r3, #64	@ 0x40
 8002c24:	f040 80cc 	bne.w	8002dc0 <HAL_UART_IRQHandler+0x410>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a8 	beq.w	8002d8e <HAL_UART_IRQHandler+0x3de>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c46:	429a      	cmp	r2, r3
 8002c48:	f080 80a1 	bcs.w	8002d8e <HAL_UART_IRQHandler+0x3de>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	f000 8088 	beq.w	8002d70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	330c      	adds	r3, #12
 8002c66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c9c:	e841 2300 	strex	r3, r2, [r1]
 8002ca0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1d9      	bne.n	8002c60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	3314      	adds	r3, #20
 8002cb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cb6:	e853 3f00 	ldrex	r3, [r3]
 8002cba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3314      	adds	r3, #20
 8002ccc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cd0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cd8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cdc:	e841 2300 	strex	r3, r2, [r1]
 8002ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ce2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e1      	bne.n	8002cac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3314      	adds	r3, #20
 8002cee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d14:	e841 2300 	strex	r3, r2, [r1]
 8002d18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d1e3      	bne.n	8002ce8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	330c      	adds	r3, #12
 8002d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d40:	f023 0310 	bic.w	r3, r3, #16
 8002d44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	330c      	adds	r3, #12
 8002d4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d5a:	e841 2300 	strex	r3, r2, [r1]
 8002d5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1e3      	bne.n	8002d2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fa04 	bl	8001178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8d5 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d8c:	e0b2      	b.n	8002ef4 <HAL_UART_IRQHandler+0x544>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d96:	429a      	cmp	r2, r3
 8002d98:	f040 80ac 	bne.w	8002ef4 <HAL_UART_IRQHandler+0x544>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b20      	cmp	r3, #32
 8002da4:	f040 80a6 	bne.w	8002ef4 <HAL_UART_IRQHandler+0x544>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002db2:	4619      	mov	r1, r3
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f8be 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
      return;
 8002dba:	e09b      	b.n	8002ef4 <HAL_UART_IRQHandler+0x544>
 8002dbc:	0800321b 	.word	0x0800321b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 808e 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x548>
          && (nb_rx_data > 0U))
 8002ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8089 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x548>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	330c      	adds	r3, #12
 8002e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e3      	bne.n	8002de6 <HAL_UART_IRQHandler+0x436>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3314      	adds	r3, #20
 8002e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e42:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4a:	e841 2300 	strex	r3, r2, [r1]
 8002e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e3      	bne.n	8002e1e <HAL_UART_IRQHandler+0x46e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0310 	bic.w	r3, r3, #16
 8002e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	330c      	adds	r3, #12
 8002e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e88:	61fa      	str	r2, [r7, #28]
 8002e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8c:	69b9      	ldr	r1, [r7, #24]
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	e841 2300 	strex	r3, r2, [r1]
 8002e94:	617b      	str	r3, [r7, #20]
   return(result);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1e3      	bne.n	8002e64 <HAL_UART_IRQHandler+0x4b4>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f844 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002eae:	e023      	b.n	8002ef8 <HAL_UART_IRQHandler+0x548>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d009      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x520>
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_UART_IRQHandler+0x520>
  {
    UART_Transmit_IT(huart);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f9b7 	bl	800323c <UART_Transmit_IT>
    return;
 8002ece:	e014      	b.n	8002efa <HAL_UART_IRQHandler+0x54a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00e      	beq.n	8002efa <HAL_UART_IRQHandler+0x54a>
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d008      	beq.n	8002efa <HAL_UART_IRQHandler+0x54a>
  {
    UART_EndTransmit_IT(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9f6 	bl	80032da <UART_EndTransmit_IT>
    return;
 8002eee:	e004      	b.n	8002efa <HAL_UART_IRQHandler+0x54a>
    return;
 8002ef0:	bf00      	nop
 8002ef2:	e002      	b.n	8002efa <HAL_UART_IRQHandler+0x54a>
      return;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HAL_UART_IRQHandler+0x54a>
      return;
 8002ef8:	bf00      	nop
  }
}
 8002efa:	37e8      	adds	r7, #232	@ 0xe8
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b090      	sub	sp, #64	@ 0x40
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0320 	and.w	r3, r3, #32
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d137      	bne.n	8002fd8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3314      	adds	r3, #20
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	e853 3f00 	ldrex	r3, [r3]
 8002fb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	330c      	adds	r3, #12
 8002fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc2:	61fa      	str	r2, [r7, #28]
 8002fc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	617b      	str	r3, [r7, #20]
   return(result);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1e5      	bne.n	8002fa2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002fd6:	e002      	b.n	8002fde <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002fd8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002fda:	f7ff ff91 	bl	8002f00 <HAL_UART_TxCpltCallback>
}
 8002fde:	bf00      	nop
 8002fe0:	3740      	adds	r7, #64	@ 0x40
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7ff ff8c 	bl	8002f12 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003012:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b80      	cmp	r3, #128	@ 0x80
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b21      	cmp	r3, #33	@ 0x21
 8003034:	d108      	bne.n	8003048 <UART_DMAError+0x46>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2200      	movs	r2, #0
 8003040:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003042:	68b8      	ldr	r0, [r7, #8]
 8003044:	f000 f860 	bl	8003108 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003052:	2b40      	cmp	r3, #64	@ 0x40
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b22      	cmp	r3, #34	@ 0x22
 8003068:	d108      	bne.n	800307c <UART_DMAError+0x7a>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2200      	movs	r2, #0
 8003074:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003076:	68b8      	ldr	r0, [r7, #8]
 8003078:	f000 f86d 	bl	8003156 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003088:	68b8      	ldr	r0, [r7, #8]
 800308a:	f7ff ff4b 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800308e:	bf00      	nop
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	60f8      	str	r0, [r7, #12]
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	4613      	mov	r3, r2
 80030a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	88fa      	ldrh	r2, [r7, #6]
 80030b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2222      	movs	r2, #34	@ 0x22
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0220 	orr.w	r2, r2, #32
 80030fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr

08003108 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	@ 0x24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	61ba      	str	r2, [r7, #24]
 8003132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003134:	6979      	ldr	r1, [r7, #20]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	e841 2300 	strex	r3, r2, [r1]
 800313c:	613b      	str	r3, [r7, #16]
   return(result);
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1e5      	bne.n	8003110 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800314c:	bf00      	nop
 800314e:	3724      	adds	r7, #36	@ 0x24
 8003150:	46bd      	mov	sp, r7
 8003152:	bc80      	pop	{r7}
 8003154:	4770      	bx	lr

08003156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003156:	b480      	push	{r7}
 8003158:	b095      	sub	sp, #84	@ 0x54
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	330c      	adds	r3, #12
 8003164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003168:	e853 3f00 	ldrex	r3, [r3]
 800316c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800316e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800317e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003186:	e841 2300 	strex	r3, r2, [r1]
 800318a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800318c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1e5      	bne.n	800315e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3314      	adds	r3, #20
 8003198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	e853 3f00 	ldrex	r3, [r3]
 80031a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ba:	e841 2300 	strex	r3, r2, [r1]
 80031be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1e5      	bne.n	8003192 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d119      	bne.n	8003202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f023 0310 	bic.w	r3, r3, #16
 80031e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ee:	61ba      	str	r2, [r7, #24]
 80031f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	613b      	str	r3, [r7, #16]
   return(result);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003210:	bf00      	nop
 8003212:	3754      	adds	r7, #84	@ 0x54
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff fe78 	bl	8002f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b21      	cmp	r3, #33	@ 0x21
 800324e:	d13e      	bne.n	80032ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003258:	d114      	bne.n	8003284 <UART_Transmit_IT+0x48>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d110      	bne.n	8003284 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003276:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	1c9a      	adds	r2, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	621a      	str	r2, [r3, #32]
 8003282:	e008      	b.n	8003296 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	1c59      	adds	r1, r3, #1
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6211      	str	r1, [r2, #32]
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29b      	uxth	r3, r3
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4619      	mov	r1, r3
 80032a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fe00 	bl	8002f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b08c      	sub	sp, #48	@ 0x30
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003316:	2300      	movs	r3, #0
 8003318:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b22      	cmp	r3, #34	@ 0x22
 8003324:	f040 80aa 	bne.w	800347c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003330:	d115      	bne.n	800335e <UART_Receive_IT+0x54>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d111      	bne.n	800335e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b29b      	uxth	r3, r3
 8003348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334c:	b29a      	uxth	r2, r3
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	1c9a      	adds	r2, r3, #2
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
 800335c:	e024      	b.n	80033a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003362:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800336c:	d007      	beq.n	800337e <UART_Receive_IT+0x74>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <UART_Receive_IT+0x82>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d106      	bne.n	800338c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e008      	b.n	800339e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003398:	b2da      	uxtb	r2, r3
 800339a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4619      	mov	r1, r3
 80033b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d15d      	bne.n	8003478 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0220 	bic.w	r2, r2, #32
 80033ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0201 	bic.w	r2, r2, #1
 80033ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d135      	bne.n	800346e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	613b      	str	r3, [r7, #16]
   return(result);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	f023 0310 	bic.w	r3, r3, #16
 800341e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	330c      	adds	r3, #12
 8003426:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003428:	623a      	str	r2, [r7, #32]
 800342a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	69f9      	ldr	r1, [r7, #28]
 800342e:	6a3a      	ldr	r2, [r7, #32]
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	61bb      	str	r3, [r7, #24]
   return(result);
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e5      	bne.n	8003408 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b10      	cmp	r3, #16
 8003448:	d10a      	bne.n	8003460 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fd65 	bl	8002f36 <HAL_UARTEx_RxEventCallback>
 800346c:	e002      	b.n	8003474 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f00e ff5a 	bl	8012328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e002      	b.n	800347e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	e000      	b.n	800347e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800347c:	2302      	movs	r3, #2
  }
}
 800347e:	4618      	mov	r0, r3
 8003480:	3730      	adds	r7, #48	@ 0x30
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80034c8:	f023 030c 	bic.w	r3, r3, #12
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6812      	ldr	r2, [r2, #0]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	430b      	orrs	r3, r1
 80034d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699a      	ldr	r2, [r3, #24]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a55      	ldr	r2, [pc, #340]	@ (8003648 <UART_SetConfig+0x1c0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d103      	bne.n	80034fe <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034f6:	f7fe fec5 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	e002      	b.n	8003504 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034fe:	f7fe fead 	bl	800225c <HAL_RCC_GetPCLK1Freq>
 8003502:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800350c:	d14c      	bne.n	80035a8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	009a      	lsls	r2, r3, #2
 8003518:	441a      	add	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	4a49      	ldr	r2, [pc, #292]	@ (800364c <UART_SetConfig+0x1c4>)
 8003526:	fba2 2303 	umull	r2, r3, r2, r3
 800352a:	095b      	lsrs	r3, r3, #5
 800352c:	0119      	lsls	r1, r3, #4
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	009a      	lsls	r2, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4b41      	ldr	r3, [pc, #260]	@ (800364c <UART_SetConfig+0x1c4>)
 8003546:	fba3 0302 	umull	r0, r3, r3, r2
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	2064      	movs	r0, #100	@ 0x64
 800354e:	fb00 f303 	mul.w	r3, r0, r3
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	3332      	adds	r3, #50	@ 0x32
 8003558:	4a3c      	ldr	r2, [pc, #240]	@ (800364c <UART_SetConfig+0x1c4>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003566:	4419      	add	r1, r3
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	009a      	lsls	r2, r3, #2
 8003572:	441a      	add	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	fbb2 f2f3 	udiv	r2, r2, r3
 800357e:	4b33      	ldr	r3, [pc, #204]	@ (800364c <UART_SetConfig+0x1c4>)
 8003580:	fba3 0302 	umull	r0, r3, r3, r2
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	2064      	movs	r0, #100	@ 0x64
 8003588:	fb00 f303 	mul.w	r3, r0, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	3332      	adds	r3, #50	@ 0x32
 8003592:	4a2e      	ldr	r2, [pc, #184]	@ (800364c <UART_SetConfig+0x1c4>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	095b      	lsrs	r3, r3, #5
 800359a:	f003 0207 	and.w	r2, r3, #7
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	440a      	add	r2, r1
 80035a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035a6:	e04a      	b.n	800363e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4a23      	ldr	r2, [pc, #140]	@ (800364c <UART_SetConfig+0x1c4>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	0119      	lsls	r1, r3, #4
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	009a      	lsls	r2, r3, #2
 80035d2:	441a      	add	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	fbb2 f2f3 	udiv	r2, r2, r3
 80035de:	4b1b      	ldr	r3, [pc, #108]	@ (800364c <UART_SetConfig+0x1c4>)
 80035e0:	fba3 0302 	umull	r0, r3, r3, r2
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	2064      	movs	r0, #100	@ 0x64
 80035e8:	fb00 f303 	mul.w	r3, r0, r3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	3332      	adds	r3, #50	@ 0x32
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <UART_SetConfig+0x1c4>)
 80035f4:	fba2 2303 	umull	r2, r3, r2, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fe:	4419      	add	r1, r3
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	441a      	add	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	fbb2 f2f3 	udiv	r2, r2, r3
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <UART_SetConfig+0x1c4>)
 8003618:	fba3 0302 	umull	r0, r3, r3, r2
 800361c:	095b      	lsrs	r3, r3, #5
 800361e:	2064      	movs	r0, #100	@ 0x64
 8003620:	fb00 f303 	mul.w	r3, r0, r3
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	011b      	lsls	r3, r3, #4
 8003628:	3332      	adds	r3, #50	@ 0x32
 800362a:	4a08      	ldr	r2, [pc, #32]	@ (800364c <UART_SetConfig+0x1c4>)
 800362c:	fba2 2303 	umull	r2, r3, r2, r3
 8003630:	095b      	lsrs	r3, r3, #5
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	440a      	add	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40013800 	.word	0x40013800
 800364c:	51eb851f 	.word	0x51eb851f

08003650 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003656:	4b88      	ldr	r3, [pc, #544]	@ (8003878 <MX_LWIP_Init+0x228>)
 8003658:	22c0      	movs	r2, #192	@ 0xc0
 800365a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800365c:	4b86      	ldr	r3, [pc, #536]	@ (8003878 <MX_LWIP_Init+0x228>)
 800365e:	22a8      	movs	r2, #168	@ 0xa8
 8003660:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <MX_LWIP_Init+0x228>)
 8003664:	2200      	movs	r2, #0
 8003666:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 123;
 8003668:	4b83      	ldr	r3, [pc, #524]	@ (8003878 <MX_LWIP_Init+0x228>)
 800366a:	227b      	movs	r2, #123	@ 0x7b
 800366c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800366e:	4b83      	ldr	r3, [pc, #524]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003670:	22ff      	movs	r2, #255	@ 0xff
 8003672:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003674:	4b81      	ldr	r3, [pc, #516]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003676:	22ff      	movs	r2, #255	@ 0xff
 8003678:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800367a:	4b80      	ldr	r3, [pc, #512]	@ (800387c <MX_LWIP_Init+0x22c>)
 800367c:	22ff      	movs	r2, #255	@ 0xff
 800367e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003680:	4b7e      	ldr	r3, [pc, #504]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003682:	2200      	movs	r2, #0
 8003684:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003686:	4b7e      	ldr	r3, [pc, #504]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003688:	22c0      	movs	r2, #192	@ 0xc0
 800368a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800368c:	4b7c      	ldr	r3, [pc, #496]	@ (8003880 <MX_LWIP_Init+0x230>)
 800368e:	22a8      	movs	r2, #168	@ 0xa8
 8003690:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003692:	4b7b      	ldr	r3, [pc, #492]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003694:	2200      	movs	r2, #0
 8003696:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003698:	4b79      	ldr	r3, [pc, #484]	@ (8003880 <MX_LWIP_Init+0x230>)
 800369a:	2201      	movs	r2, #1
 800369c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800369e:	2100      	movs	r1, #0
 80036a0:	2000      	movs	r0, #0
 80036a2:	f003 f8c3 	bl	800682c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80036a6:	4b74      	ldr	r3, [pc, #464]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	061a      	lsls	r2, r3, #24
 80036ac:	4b72      	ldr	r3, [pc, #456]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	041b      	lsls	r3, r3, #16
 80036b2:	431a      	orrs	r2, r3
 80036b4:	4b70      	ldr	r3, [pc, #448]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036b6:	789b      	ldrb	r3, [r3, #2]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4313      	orrs	r3, r2
 80036bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036be:	78d2      	ldrb	r2, [r2, #3]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	061a      	lsls	r2, r3, #24
 80036c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	0619      	lsls	r1, r3, #24
 80036ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	041b      	lsls	r3, r3, #16
 80036d0:	4319      	orrs	r1, r3
 80036d2:	4b69      	ldr	r3, [pc, #420]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036d4:	789b      	ldrb	r3, [r3, #2]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	430b      	orrs	r3, r1
 80036da:	4967      	ldr	r1, [pc, #412]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036dc:	78c9      	ldrb	r1, [r1, #3]
 80036de:	430b      	orrs	r3, r1
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80036e6:	431a      	orrs	r2, r3
 80036e8:	4b63      	ldr	r3, [pc, #396]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	0619      	lsls	r1, r3, #24
 80036ee:	4b62      	ldr	r3, [pc, #392]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	041b      	lsls	r3, r3, #16
 80036f4:	4319      	orrs	r1, r3
 80036f6:	4b60      	ldr	r3, [pc, #384]	@ (8003878 <MX_LWIP_Init+0x228>)
 80036f8:	789b      	ldrb	r3, [r3, #2]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	430b      	orrs	r3, r1
 80036fe:	495e      	ldr	r1, [pc, #376]	@ (8003878 <MX_LWIP_Init+0x228>)
 8003700:	78c9      	ldrb	r1, [r1, #3]
 8003702:	430b      	orrs	r3, r1
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800370a:	431a      	orrs	r2, r3
 800370c:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <MX_LWIP_Init+0x228>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	0619      	lsls	r1, r3, #24
 8003712:	4b59      	ldr	r3, [pc, #356]	@ (8003878 <MX_LWIP_Init+0x228>)
 8003714:	785b      	ldrb	r3, [r3, #1]
 8003716:	041b      	lsls	r3, r3, #16
 8003718:	4319      	orrs	r1, r3
 800371a:	4b57      	ldr	r3, [pc, #348]	@ (8003878 <MX_LWIP_Init+0x228>)
 800371c:	789b      	ldrb	r3, [r3, #2]
 800371e:	021b      	lsls	r3, r3, #8
 8003720:	430b      	orrs	r3, r1
 8003722:	4955      	ldr	r1, [pc, #340]	@ (8003878 <MX_LWIP_Init+0x228>)
 8003724:	78c9      	ldrb	r1, [r1, #3]
 8003726:	430b      	orrs	r3, r1
 8003728:	0e1b      	lsrs	r3, r3, #24
 800372a:	4313      	orrs	r3, r2
 800372c:	4a55      	ldr	r2, [pc, #340]	@ (8003884 <MX_LWIP_Init+0x234>)
 800372e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003730:	4b52      	ldr	r3, [pc, #328]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	061a      	lsls	r2, r3, #24
 8003736:	4b51      	ldr	r3, [pc, #324]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003738:	785b      	ldrb	r3, [r3, #1]
 800373a:	041b      	lsls	r3, r3, #16
 800373c:	431a      	orrs	r2, r3
 800373e:	4b4f      	ldr	r3, [pc, #316]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003740:	789b      	ldrb	r3, [r3, #2]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	4313      	orrs	r3, r2
 8003746:	4a4d      	ldr	r2, [pc, #308]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003748:	78d2      	ldrb	r2, [r2, #3]
 800374a:	4313      	orrs	r3, r2
 800374c:	061a      	lsls	r2, r3, #24
 800374e:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	0619      	lsls	r1, r3, #24
 8003754:	4b49      	ldr	r3, [pc, #292]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003756:	785b      	ldrb	r3, [r3, #1]
 8003758:	041b      	lsls	r3, r3, #16
 800375a:	4319      	orrs	r1, r3
 800375c:	4b47      	ldr	r3, [pc, #284]	@ (800387c <MX_LWIP_Init+0x22c>)
 800375e:	789b      	ldrb	r3, [r3, #2]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	430b      	orrs	r3, r1
 8003764:	4945      	ldr	r1, [pc, #276]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003766:	78c9      	ldrb	r1, [r1, #3]
 8003768:	430b      	orrs	r3, r1
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003770:	431a      	orrs	r2, r3
 8003772:	4b42      	ldr	r3, [pc, #264]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	0619      	lsls	r1, r3, #24
 8003778:	4b40      	ldr	r3, [pc, #256]	@ (800387c <MX_LWIP_Init+0x22c>)
 800377a:	785b      	ldrb	r3, [r3, #1]
 800377c:	041b      	lsls	r3, r3, #16
 800377e:	4319      	orrs	r1, r3
 8003780:	4b3e      	ldr	r3, [pc, #248]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003782:	789b      	ldrb	r3, [r3, #2]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	430b      	orrs	r3, r1
 8003788:	493c      	ldr	r1, [pc, #240]	@ (800387c <MX_LWIP_Init+0x22c>)
 800378a:	78c9      	ldrb	r1, [r1, #3]
 800378c:	430b      	orrs	r3, r1
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003794:	431a      	orrs	r2, r3
 8003796:	4b39      	ldr	r3, [pc, #228]	@ (800387c <MX_LWIP_Init+0x22c>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	0619      	lsls	r1, r3, #24
 800379c:	4b37      	ldr	r3, [pc, #220]	@ (800387c <MX_LWIP_Init+0x22c>)
 800379e:	785b      	ldrb	r3, [r3, #1]
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	4319      	orrs	r1, r3
 80037a4:	4b35      	ldr	r3, [pc, #212]	@ (800387c <MX_LWIP_Init+0x22c>)
 80037a6:	789b      	ldrb	r3, [r3, #2]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	430b      	orrs	r3, r1
 80037ac:	4933      	ldr	r1, [pc, #204]	@ (800387c <MX_LWIP_Init+0x22c>)
 80037ae:	78c9      	ldrb	r1, [r1, #3]
 80037b0:	430b      	orrs	r3, r1
 80037b2:	0e1b      	lsrs	r3, r3, #24
 80037b4:	4313      	orrs	r3, r2
 80037b6:	4a34      	ldr	r2, [pc, #208]	@ (8003888 <MX_LWIP_Init+0x238>)
 80037b8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80037ba:	4b31      	ldr	r3, [pc, #196]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	061a      	lsls	r2, r3, #24
 80037c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037c2:	785b      	ldrb	r3, [r3, #1]
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037ca:	789b      	ldrb	r3, [r3, #2]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	4313      	orrs	r3, r2
 80037d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037d2:	78d2      	ldrb	r2, [r2, #3]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	061a      	lsls	r2, r3, #24
 80037d8:	4b29      	ldr	r3, [pc, #164]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	0619      	lsls	r1, r3, #24
 80037de:	4b28      	ldr	r3, [pc, #160]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	041b      	lsls	r3, r3, #16
 80037e4:	4319      	orrs	r1, r3
 80037e6:	4b26      	ldr	r3, [pc, #152]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037e8:	789b      	ldrb	r3, [r3, #2]
 80037ea:	021b      	lsls	r3, r3, #8
 80037ec:	430b      	orrs	r3, r1
 80037ee:	4924      	ldr	r1, [pc, #144]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037f0:	78c9      	ldrb	r1, [r1, #3]
 80037f2:	430b      	orrs	r3, r1
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037fa:	431a      	orrs	r2, r3
 80037fc:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <MX_LWIP_Init+0x230>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	0619      	lsls	r1, r3, #24
 8003802:	4b1f      	ldr	r3, [pc, #124]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	041b      	lsls	r3, r3, #16
 8003808:	4319      	orrs	r1, r3
 800380a:	4b1d      	ldr	r3, [pc, #116]	@ (8003880 <MX_LWIP_Init+0x230>)
 800380c:	789b      	ldrb	r3, [r3, #2]
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	430b      	orrs	r3, r1
 8003812:	491b      	ldr	r1, [pc, #108]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003814:	78c9      	ldrb	r1, [r1, #3]
 8003816:	430b      	orrs	r3, r1
 8003818:	0a1b      	lsrs	r3, r3, #8
 800381a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800381e:	431a      	orrs	r2, r3
 8003820:	4b17      	ldr	r3, [pc, #92]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	0619      	lsls	r1, r3, #24
 8003826:	4b16      	ldr	r3, [pc, #88]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003828:	785b      	ldrb	r3, [r3, #1]
 800382a:	041b      	lsls	r3, r3, #16
 800382c:	4319      	orrs	r1, r3
 800382e:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003830:	789b      	ldrb	r3, [r3, #2]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	430b      	orrs	r3, r1
 8003836:	4912      	ldr	r1, [pc, #72]	@ (8003880 <MX_LWIP_Init+0x230>)
 8003838:	78c9      	ldrb	r1, [r1, #3]
 800383a:	430b      	orrs	r3, r1
 800383c:	0e1b      	lsrs	r3, r3, #24
 800383e:	4313      	orrs	r3, r2
 8003840:	4a12      	ldr	r2, [pc, #72]	@ (800388c <MX_LWIP_Init+0x23c>)
 8003842:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &slipif_init, &tcpip_input);
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <MX_LWIP_Init+0x240>)
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <MX_LWIP_Init+0x244>)
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	2300      	movs	r3, #0
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <MX_LWIP_Init+0x23c>)
 8003852:	4a0d      	ldr	r2, [pc, #52]	@ (8003888 <MX_LWIP_Init+0x238>)
 8003854:	490b      	ldr	r1, [pc, #44]	@ (8003884 <MX_LWIP_Init+0x234>)
 8003856:	4810      	ldr	r0, [pc, #64]	@ (8003898 <MX_LWIP_Init+0x248>)
 8003858:	f004 fd24 	bl	80082a4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800385c:	480e      	ldr	r0, [pc, #56]	@ (8003898 <MX_LWIP_Init+0x248>)
 800385e:	f004 fed1 	bl	8008604 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003862:	480d      	ldr	r0, [pc, #52]	@ (8003898 <MX_LWIP_Init+0x248>)
 8003864:	f004 fedc 	bl	8008620 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003868:	490c      	ldr	r1, [pc, #48]	@ (800389c <MX_LWIP_Init+0x24c>)
 800386a:	480b      	ldr	r0, [pc, #44]	@ (8003898 <MX_LWIP_Init+0x248>)
 800386c:	f004 ff78 	bl	8008760 <netif_set_link_callback>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000450 	.word	0x20000450
 800387c:	20000454 	.word	0x20000454
 8003880:	20000458 	.word	0x20000458
 8003884:	20000444 	.word	0x20000444
 8003888:	20000448 	.word	0x20000448
 800388c:	2000044c 	.word	0x2000044c
 8003890:	08006769 	.word	0x08006769
 8003894:	08012789 	.word	0x08012789
 8003898:	20000410 	.word	0x20000410
 800389c:	080038a1 	.word	0x080038a1

080038a0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <sys_now>:

/* USER CODE END 0 */


u32_t sys_now(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80038b6:	f7fd faa1 	bl	8000dfc <HAL_GetTick>
 80038ba:	4603      	mov	r3, r0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}

080038c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038d2:	2b84      	cmp	r3, #132	@ 0x84
 80038d4:	d005      	beq.n	80038e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4413      	add	r3, r2
 80038de:	3303      	adds	r3, #3
 80038e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038e2:	68fb      	ldr	r3, [r7, #12]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f4:	f3ef 8305 	mrs	r3, IPSR
 80038f8:	607b      	str	r3, [r7, #4]
  return(result);
 80038fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003914:	f001 fbd4 	bl	80050c0 <vTaskStartScheduler>
  
  return osOK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	bd80      	pop	{r7, pc}

0800391e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8003922:	f7ff ffe4 	bl	80038ee <inHandlerMode>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800392c:	f001 fcec 	bl	8005308 <xTaskGetTickCountFromISR>
 8003930:	4603      	mov	r3, r0
 8003932:	e002      	b.n	800393a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003934:	f001 fcda 	bl	80052ec <xTaskGetTickCount>
 8003938:	4603      	mov	r3, r0
  }
}
 800393a:	4618      	mov	r0, r3
 800393c:	bd80      	pop	{r7, pc}

0800393e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800393e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003940:	b089      	sub	sp, #36	@ 0x24
 8003942:	af04      	add	r7, sp, #16
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <osThreadCreate+0x54>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685c      	ldr	r4, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691e      	ldr	r6, [r3, #16]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff ffa8 	bl	80038c0 <makeFreeRtosPriority>
 8003970:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800397a:	9202      	str	r2, [sp, #8]
 800397c:	9301      	str	r3, [sp, #4]
 800397e:	9100      	str	r1, [sp, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	4632      	mov	r2, r6
 8003984:	4629      	mov	r1, r5
 8003986:	4620      	mov	r0, r4
 8003988:	f001 f9bd 	bl	8004d06 <xTaskCreateStatic>
 800398c:	4603      	mov	r3, r0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e01c      	b.n	80039cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685c      	ldr	r4, [r3, #4]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800399e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff8a 	bl	80038c0 <makeFreeRtosPriority>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	9200      	str	r2, [sp, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	4632      	mov	r2, r6
 80039ba:	4629      	mov	r1, r5
 80039bc:	4620      	mov	r0, r4
 80039be:	f001 fa01 	bl	8004dc4 <xTaskCreate>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d001      	beq.n	80039cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <osDelay+0x16>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	e000      	b.n	80039ee <osDelay+0x18>
 80039ec:	2301      	movs	r3, #1
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 fb30 	bl	8005054 <vTaskDelay>
  
  return osOK;
 80039f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	2001      	movs	r0, #1
 8003a16:	f000 fb91 	bl	800413c <xQueueCreateMutexStatic>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	e003      	b.n	8003a26 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f000 fb74 	bl	800410c <xQueueCreateMutex>
 8003a24:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
	...

08003a30 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <osMutexWait+0x18>
    return osErrorParameter;
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	e03a      	b.n	8003abe <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a52:	d103      	bne.n	8003a5c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e009      	b.n	8003a70 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <osMutexWait+0x40>
      ticks = 1;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8003a70:	f7ff ff3d 	bl	80038ee <inHandlerMode>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d017      	beq.n	8003aaa <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003a7a:	f107 0308 	add.w	r3, r7, #8
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2100      	movs	r1, #0
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 ff96 	bl	80049b4 <xQueueReceiveFromISR>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <osMutexWait+0x62>
      return osErrorOS;
 8003a8e:	23ff      	movs	r3, #255	@ 0xff
 8003a90:	e015      	b.n	8003abe <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d011      	beq.n	8003abc <osMutexWait+0x8c>
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <osMutexWait+0x98>)
 8003a9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	e008      	b.n	8003abc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fe71 	bl	8004794 <xQueueSemaphoreTake>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d001      	beq.n	8003abc <osMutexWait+0x8c>
    return osErrorOS;
 8003ab8:	23ff      	movs	r3, #255	@ 0xff
 8003aba:	e000      	b.n	8003abe <osMutexWait+0x8e>
  }
  
  return osOK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8003adc:	f7ff ff07 	bl	80038ee <inHandlerMode>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8003ae6:	f107 0308 	add.w	r3, r7, #8
 8003aea:	4619      	mov	r1, r3
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fcde 	bl	80044ae <xQueueGiveFromISR>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d001      	beq.n	8003afc <osMutexRelease+0x30>
      return osErrorOS;
 8003af8:	23ff      	movs	r3, #255	@ 0xff
 8003afa:	e017      	b.n	8003b2c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d013      	beq.n	8003b2a <osMutexRelease+0x5e>
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <osMutexRelease+0x68>)
 8003b04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	e00a      	b.n	8003b2a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8003b14:	2300      	movs	r3, #0
 8003b16:	2200      	movs	r2, #0
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fb2a 	bl	8004174 <xQueueGenericSend>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8003b26:	23ff      	movs	r3, #255	@ 0xff
 8003b28:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	e000ed04 	.word	0xe000ed04

08003b38 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d011      	beq.n	8003b6e <osMessageCreate+0x36>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00d      	beq.n	8003b6e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6818      	ldr	r0, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6859      	ldr	r1, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68db      	ldr	r3, [r3, #12]
 8003b62:	2400      	movs	r4, #0
 8003b64:	9400      	str	r4, [sp, #0]
 8003b66:	f000 f9dd 	bl	8003f24 <xQueueGenericCreateStatic>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	e008      	b.n	8003b80 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6818      	ldr	r0, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f000 fa4f 	bl	800401c <xQueueGenericCreate>
 8003b7e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd90      	pop	{r4, r7, pc}

08003b88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <osMessagePut+0x1e>
    ticks = 1;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003ba6:	f7ff fea2 	bl	80038ee <inHandlerMode>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d018      	beq.n	8003be2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003bb0:	f107 0210 	add.w	r2, r7, #16
 8003bb4:	f107 0108 	add.w	r1, r7, #8
 8003bb8:	2300      	movs	r3, #0
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fbdc 	bl	8004378 <xQueueGenericSendFromISR>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <osMessagePut+0x42>
      return osErrorOS;
 8003bc6:	23ff      	movs	r3, #255	@ 0xff
 8003bc8:	e018      	b.n	8003bfc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d014      	beq.n	8003bfa <osMessagePut+0x72>
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <osMessagePut+0x7c>)
 8003bd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	e00b      	b.n	8003bfa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003be2:	f107 0108 	add.w	r1, r7, #8
 8003be6:	2300      	movs	r3, #0
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fac2 	bl	8004174 <xQueueGenericSend>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d001      	beq.n	8003bfa <osMessagePut+0x72>
      return osErrorOS;
 8003bf6:	23ff      	movs	r3, #255	@ 0xff
 8003bf8:	e000      	b.n	8003bfc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b08b      	sub	sp, #44	@ 0x2c
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003c22:	2380      	movs	r3, #128	@ 0x80
 8003c24:	617b      	str	r3, [r7, #20]
    return event;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	461c      	mov	r4, r3
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c36:	e054      	b.n	8003ce2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c46:	d103      	bne.n	8003c50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	e009      	b.n	8003c64 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d006      	beq.n	8003c64 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <osMessageGet+0x5c>
      ticks = 1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003c64:	f7ff fe43 	bl	80038ee <inHandlerMode>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d01c      	beq.n	8003ca8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003c6e:	f107 0220 	add.w	r2, r7, #32
 8003c72:	f107 0314 	add.w	r3, r7, #20
 8003c76:	3304      	adds	r3, #4
 8003c78:	4619      	mov	r1, r3
 8003c7a:	68b8      	ldr	r0, [r7, #8]
 8003c7c:	f000 fe9a 	bl	80049b4 <xQueueReceiveFromISR>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d102      	bne.n	8003c8c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003c86:	2310      	movs	r3, #16
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e001      	b.n	8003c90 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d01d      	beq.n	8003cd2 <osMessageGet+0xca>
 8003c96:	4b15      	ldr	r3, [pc, #84]	@ (8003cec <osMessageGet+0xe4>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e014      	b.n	8003cd2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	3304      	adds	r3, #4
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	68b8      	ldr	r0, [r7, #8]
 8003cb4:	f000 fc8c 	bl	80045d0 <xQueueReceive>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d102      	bne.n	8003cc4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003cbe:	2310      	movs	r3, #16
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e006      	b.n	8003cd2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <osMessageGet+0xc6>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <osMessageGet+0xc8>
 8003cce:	2340      	movs	r3, #64	@ 0x40
 8003cd0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	461c      	mov	r4, r3
 8003cd6:	f107 0314 	add.w	r3, r7, #20
 8003cda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003cde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	372c      	adds	r7, #44	@ 0x2c
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd90      	pop	{r4, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	e000ed04 	.word	0xe000ed04

08003cf0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 0208 	add.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f103 0208 	add.w	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f103 0208 	add.w	r2, r3, #8
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr

08003d46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr

08003d8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003da2:	d103      	bne.n	8003dac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	e00c      	b.n	8003dc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3308      	adds	r3, #8
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e002      	b.n	8003dba <vListInsert+0x2e>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d2f6      	bcs.n	8003db4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	601a      	str	r2, [r3, #0]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6892      	ldr	r2, [r2, #8]
 8003e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6852      	ldr	r2, [r2, #4]
 8003e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d103      	bne.n	8003e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	1e5a      	subs	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc80      	pop	{r7}
 8003e4c:	4770      	bx	lr
	...

08003e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e76:	bf00      	nop
 8003e78:	bf00      	nop
 8003e7a:	e7fd      	b.n	8003e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e7c:	f002 f89e 	bl	8005fbc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	441a      	add	r2, r3
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eac:	3b01      	subs	r3, #1
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	22ff      	movs	r2, #255	@ 0xff
 8003ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	22ff      	movs	r2, #255	@ 0xff
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01a      	beq.n	8003f10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3310      	adds	r3, #16
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 fb6a 	bl	80055b8 <xTaskRemoveFromEventList>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d012      	beq.n	8003f10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <xQueueGenericReset+0xd0>)
 8003eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	e009      	b.n	8003f10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3310      	adds	r3, #16
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff fef5 	bl	8003cf0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3324      	adds	r3, #36	@ 0x24
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fef0 	bl	8003cf0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f10:	f002 f884 	bl	800601c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f14:	2301      	movs	r3, #1
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	e000ed04 	.word	0xe000ed04

08003f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	@ 0x38
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10b      	bne.n	8003f50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	e7fd      	b.n	8003f6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <xQueueGenericCreateStatic+0x56>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <xQueueGenericCreateStatic+0x5a>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <xQueueGenericCreateStatic+0x5c>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	623b      	str	r3, [r7, #32]
}
 8003f96:	bf00      	nop
 8003f98:	bf00      	nop
 8003f9a:	e7fd      	b.n	8003f98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d102      	bne.n	8003fa8 <xQueueGenericCreateStatic+0x84>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <xQueueGenericCreateStatic+0x88>
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <xQueueGenericCreateStatic+0x8a>
 8003fac:	2300      	movs	r3, #0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10b      	bne.n	8003fca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	61fb      	str	r3, [r7, #28]
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop
 8003fc8:	e7fd      	b.n	8003fc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fca:	2348      	movs	r3, #72	@ 0x48
 8003fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b48      	cmp	r3, #72	@ 0x48
 8003fd2:	d00b      	beq.n	8003fec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61bb      	str	r3, [r7, #24]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ffe:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f844 	bl	800409a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004014:	4618      	mov	r0, r3
 8004016:	3730      	adds	r7, #48	@ 0x30
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	@ 0x28
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	4613      	mov	r3, r2
 8004028:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10b      	bne.n	8004048 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	613b      	str	r3, [r7, #16]
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e004      	b.n	800405e <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	fb02 f303 	mul.w	r3, r2, r3
 800405c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3348      	adds	r3, #72	@ 0x48
 8004062:	4618      	mov	r0, r3
 8004064:	f002 f8ac 	bl	80061c0 <pvPortMalloc>
 8004068:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00f      	beq.n	8004090 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	3348      	adds	r3, #72	@ 0x48
 8004074:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800407e:	79fa      	ldrb	r2, [r7, #7]
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	4613      	mov	r3, r2
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f805 	bl	800409a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004090:	69bb      	ldr	r3, [r7, #24]
	}
 8004092:	4618      	mov	r0, r3
 8004094:	3720      	adds	r7, #32
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	60f8      	str	r0, [r7, #12]
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	607a      	str	r2, [r7, #4]
 80040a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e002      	b.n	80040bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040c8:	2101      	movs	r1, #1
 80040ca:	69b8      	ldr	r0, [r7, #24]
 80040cc:	f7ff fec0 	bl	8003e50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00e      	beq.n	8004104 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80040f8:	2300      	movs	r3, #0
 80040fa:	2200      	movs	r2, #0
 80040fc:	2100      	movs	r1, #0
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f838 	bl	8004174 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004116:	2301      	movs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
 800411a:	2300      	movs	r3, #0
 800411c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	461a      	mov	r2, r3
 8004122:	6939      	ldr	r1, [r7, #16]
 8004124:	6978      	ldr	r0, [r7, #20]
 8004126:	f7ff ff79 	bl	800401c <xQueueGenericCreate>
 800412a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ffd3 	bl	80040d8 <prvInitialiseMutex>

		return pxNewQueue;
 8004132:	68fb      	ldr	r3, [r7, #12]
	}
 8004134:	4618      	mov	r0, r3
 8004136:	3718      	adds	r7, #24
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800413c:	b580      	push	{r7, lr}
 800413e:	b088      	sub	sp, #32
 8004140:	af02      	add	r7, sp, #8
 8004142:	4603      	mov	r3, r0
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	2300      	movs	r3, #0
 800414e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	9300      	str	r3, [sp, #0]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	6939      	ldr	r1, [r7, #16]
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f7ff fee2 	bl	8003f24 <xQueueGenericCreateStatic>
 8004160:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f7ff ffb8 	bl	80040d8 <prvInitialiseMutex>

		return pxNewQueue;
 8004168:	68fb      	ldr	r3, [r7, #12]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08e      	sub	sp, #56	@ 0x38
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800418a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <xQueueGenericSend+0x34>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041a2:	bf00      	nop
 80041a4:	bf00      	nop
 80041a6:	e7fd      	b.n	80041a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <xQueueGenericSend+0x42>
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueGenericSend+0x46>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueGenericSend+0x48>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xQueueGenericSend+0x64>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d103      	bne.n	80041e6 <xQueueGenericSend+0x72>
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <xQueueGenericSend+0x76>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <xQueueGenericSend+0x78>
 80041ea:	2300      	movs	r3, #0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d10b      	bne.n	8004208 <xQueueGenericSend+0x94>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	623b      	str	r3, [r7, #32]
}
 8004202:	bf00      	nop
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004208:	f001 fba0 	bl	800594c <xTaskGetSchedulerState>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d102      	bne.n	8004218 <xQueueGenericSend+0xa4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <xQueueGenericSend+0xa8>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <xQueueGenericSend+0xaa>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <xQueueGenericSend+0xc6>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	61fb      	str	r3, [r7, #28]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423a:	f001 febf 	bl	8005fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xQueueGenericSend+0xdc>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d129      	bne.n	80042a4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004256:	f000 fc46 	bl	8004ae6 <prvCopyDataToQueue>
 800425a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	3324      	adds	r3, #36	@ 0x24
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f9a5 	bl	80055b8 <xTaskRemoveFromEventList>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004274:	4b3f      	ldr	r3, [pc, #252]	@ (8004374 <xQueueGenericSend+0x200>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	e00a      	b.n	800429c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800428c:	4b39      	ldr	r3, [pc, #228]	@ (8004374 <xQueueGenericSend+0x200>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800429c:	f001 febe 	bl	800601c <vPortExitCritical>
				return pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e063      	b.n	800436c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042aa:	f001 feb7 	bl	800601c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e05c      	b.n	800436c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 f9df 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c2:	2301      	movs	r3, #1
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c6:	f001 fea9 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ca:	f000 ff63 	bl	8005194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ce:	f001 fe75 	bl	8005fbc <vPortEnterCritical>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042de:	d103      	bne.n	80042e8 <xQueueGenericSend+0x174>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x18a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042fe:	f001 fe8d 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004302:	1d3a      	adds	r2, r7, #4
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f9ce 	bl	80056ac <xTaskCheckForTimeOut>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d124      	bne.n	8004360 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004316:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004318:	f000 fcdd 	bl	8004cd6 <prvIsQueueFull>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	3310      	adds	r3, #16
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f001 f91e 	bl	800556c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004330:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004332:	f000 fc68 	bl	8004c06 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004336:	f000 ff3b 	bl	80051b0 <xTaskResumeAll>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f af7c 	bne.w	800423a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004342:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <xQueueGenericSend+0x200>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	e772      	b.n	800423a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004356:	f000 fc56 	bl	8004c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435a:	f000 ff29 	bl	80051b0 <xTaskResumeAll>
 800435e:	e76c      	b.n	800423a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004360:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004362:	f000 fc50 	bl	8004c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004366:	f000 ff23 	bl	80051b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436a:	2300      	movs	r3, #0
		}
	}
}
 800436c:	4618      	mov	r0, r3
 800436e:	3738      	adds	r7, #56	@ 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	@ 0x38
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800438a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	e7fd      	b.n	80043a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d103      	bne.n	80043b6 <xQueueGenericSendFromISR+0x3e>
 80043ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <xQueueGenericSendFromISR+0x42>
 80043b6:	2301      	movs	r3, #1
 80043b8:	e000      	b.n	80043bc <xQueueGenericSendFromISR+0x44>
 80043ba:	2300      	movs	r3, #0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	623b      	str	r3, [r7, #32]
}
 80043d2:	bf00      	nop
 80043d4:	bf00      	nop
 80043d6:	e7fd      	b.n	80043d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d103      	bne.n	80043e6 <xQueueGenericSendFromISR+0x6e>
 80043de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <xQueueGenericSendFromISR+0x72>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericSendFromISR+0x74>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10b      	bne.n	8004408 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	61fb      	str	r3, [r7, #28]
}
 8004402:	bf00      	nop
 8004404:	bf00      	nop
 8004406:	e7fd      	b.n	8004404 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004408:	f001 fe9a 	bl	8006140 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800440c:	f3ef 8211 	mrs	r2, BASEPRI
 8004410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	61ba      	str	r2, [r7, #24]
 8004422:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004424:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	429a      	cmp	r2, r3
 8004432:	d302      	bcc.n	800443a <xQueueGenericSendFromISR+0xc2>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d12c      	bne.n	8004494 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004444:	683a      	ldr	r2, [r7, #0]
 8004446:	68b9      	ldr	r1, [r7, #8]
 8004448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800444a:	f000 fb4c 	bl	8004ae6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800444e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004456:	d112      	bne.n	800447e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800445c:	2b00      	cmp	r3, #0
 800445e:	d016      	beq.n	800448e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	3324      	adds	r3, #36	@ 0x24
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f8a7 	bl	80055b8 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00e      	beq.n	800448e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00b      	beq.n	800448e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e007      	b.n	800448e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800447e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004482:	3301      	adds	r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	b25a      	sxtb	r2, r3
 8004488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800448e:	2301      	movs	r3, #1
 8004490:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004492:	e001      	b.n	8004498 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004494:	2300      	movs	r3, #0
 8004496:	637b      	str	r3, [r7, #52]	@ 0x34
 8004498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3738      	adds	r7, #56	@ 0x38
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08e      	sub	sp, #56	@ 0x38
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10b      	bne.n	80044da <xQueueGiveFromISR+0x2c>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	623b      	str	r3, [r7, #32]
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	e7fd      	b.n	80044d6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00b      	beq.n	80044fa <xQueueGiveFromISR+0x4c>
	__asm volatile
 80044e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e6:	f383 8811 	msr	BASEPRI, r3
 80044ea:	f3bf 8f6f 	isb	sy
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	61fb      	str	r3, [r7, #28]
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop
 80044f8:	e7fd      	b.n	80044f6 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <xQueueGiveFromISR+0x5c>
 8004502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueGiveFromISR+0x60>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueGiveFromISR+0x62>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10b      	bne.n	800452c <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61bb      	str	r3, [r7, #24]
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	e7fd      	b.n	8004528 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800452c:	f001 fe08 	bl	8006140 <vPortValidateInterruptPriority>
	__asm volatile
 8004530:	f3ef 8211 	mrs	r2, BASEPRI
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	617a      	str	r2, [r7, #20]
 8004546:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004548:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004558:	429a      	cmp	r2, r3
 800455a:	d22b      	bcs.n	80045b4 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800456c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800456e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004572:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004576:	d112      	bne.n	800459e <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	2b00      	cmp	r3, #0
 800457e:	d016      	beq.n	80045ae <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	3324      	adds	r3, #36	@ 0x24
 8004584:	4618      	mov	r0, r3
 8004586:	f001 f817 	bl	80055b8 <xTaskRemoveFromEventList>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2201      	movs	r2, #1
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	e007      	b.n	80045ae <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800459e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	b25a      	sxtb	r2, r3
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80045ae:	2301      	movs	r3, #1
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b2:	e001      	b.n	80045b8 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f383 8811 	msr	BASEPRI, r3
}
 80045c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3738      	adds	r7, #56	@ 0x38
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
	...

080045d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08c      	sub	sp, #48	@ 0x30
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80045dc:	2300      	movs	r3, #0
 80045de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80045e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <xQueueReceive+0x32>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	623b      	str	r3, [r7, #32]
}
 80045fc:	bf00      	nop
 80045fe:	bf00      	nop
 8004600:	e7fd      	b.n	80045fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <xQueueReceive+0x40>
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <xQueueReceive+0x44>
 8004610:	2301      	movs	r3, #1
 8004612:	e000      	b.n	8004616 <xQueueReceive+0x46>
 8004614:	2300      	movs	r3, #0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10b      	bne.n	8004632 <xQueueReceive+0x62>
	__asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	61fb      	str	r3, [r7, #28]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004632:	f001 f98b 	bl	800594c <xTaskGetSchedulerState>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <xQueueReceive+0x72>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <xQueueReceive+0x76>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueReceive+0x78>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10b      	bne.n	8004664 <xQueueReceive+0x94>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	61bb      	str	r3, [r7, #24]
}
 800465e:	bf00      	nop
 8004660:	bf00      	nop
 8004662:	e7fd      	b.n	8004660 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004664:	f001 fcaa 	bl	8005fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d01f      	beq.n	80046b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004678:	f000 fa9f 	bl	8004bba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800467c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467e:	1e5a      	subs	r2, r3, #1
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00f      	beq.n	80046ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	3310      	adds	r3, #16
 8004690:	4618      	mov	r0, r3
 8004692:	f000 ff91 	bl	80055b8 <xTaskRemoveFromEventList>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d007      	beq.n	80046ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800469c:	4b3c      	ldr	r3, [pc, #240]	@ (8004790 <xQueueReceive+0x1c0>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046ac:	f001 fcb6 	bl	800601c <vPortExitCritical>
				return pdPASS;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e069      	b.n	8004788 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80046ba:	f001 fcaf 	bl	800601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80046be:	2300      	movs	r3, #0
 80046c0:	e062      	b.n	8004788 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 ffd7 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046d2:	2301      	movs	r3, #1
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046d6:	f001 fca1 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046da:	f000 fd5b 	bl	8005194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046de:	f001 fc6d 	bl	8005fbc <vPortEnterCritical>
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046e8:	b25b      	sxtb	r3, r3
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046ee:	d103      	bne.n	80046f8 <xQueueReceive+0x128>
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046fe:	b25b      	sxtb	r3, r3
 8004700:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004704:	d103      	bne.n	800470e <xQueueReceive+0x13e>
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800470e:	f001 fc85 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004712:	1d3a      	adds	r2, r7, #4
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f000 ffc6 	bl	80056ac <xTaskCheckForTimeOut>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d123      	bne.n	800476e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004726:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004728:	f000 fabf 	bl	8004caa <prvIsQueueEmpty>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d017      	beq.n	8004762 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	3324      	adds	r3, #36	@ 0x24
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	4611      	mov	r1, r2
 800473a:	4618      	mov	r0, r3
 800473c:	f000 ff16 	bl	800556c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004742:	f000 fa60 	bl	8004c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004746:	f000 fd33 	bl	80051b0 <xTaskResumeAll>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d189      	bne.n	8004664 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004750:	4b0f      	ldr	r3, [pc, #60]	@ (8004790 <xQueueReceive+0x1c0>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	e780      	b.n	8004664 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004764:	f000 fa4f 	bl	8004c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004768:	f000 fd22 	bl	80051b0 <xTaskResumeAll>
 800476c:	e77a      	b.n	8004664 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800476e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004770:	f000 fa49 	bl	8004c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004774:	f000 fd1c 	bl	80051b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800477a:	f000 fa96 	bl	8004caa <prvIsQueueEmpty>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	f43f af6f 	beq.w	8004664 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004786:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004788:	4618      	mov	r0, r3
 800478a:	3730      	adds	r7, #48	@ 0x30
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	e000ed04 	.word	0xe000ed04

08004794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b08e      	sub	sp, #56	@ 0x38
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80047a6:	2300      	movs	r3, #0
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	623b      	str	r3, [r7, #32]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80047c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	61fb      	str	r3, [r7, #28]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047e8:	f001 f8b0 	bl	800594c <xTaskGetSchedulerState>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d102      	bne.n	80047f8 <xQueueSemaphoreTake+0x64>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <xQueueSemaphoreTake+0x68>
 80047f8:	2301      	movs	r3, #1
 80047fa:	e000      	b.n	80047fe <xQueueSemaphoreTake+0x6a>
 80047fc:	2300      	movs	r3, #0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	61bb      	str	r3, [r7, #24]
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	e7fd      	b.n	8004816 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800481a:	f001 fbcf 	bl	8005fbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800481e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004822:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004826:	2b00      	cmp	r3, #0
 8004828:	d024      	beq.n	8004874 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	1e5a      	subs	r2, r3, #1
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800483a:	f001 fa55 	bl	8005ce8 <pvTaskIncrementMutexHeldCount>
 800483e:	4602      	mov	r2, r0
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00f      	beq.n	800486c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800484c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484e:	3310      	adds	r3, #16
 8004850:	4618      	mov	r0, r3
 8004852:	f000 feb1 	bl	80055b8 <xTaskRemoveFromEventList>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d007      	beq.n	800486c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800485c:	4b54      	ldr	r3, [pc, #336]	@ (80049b0 <xQueueSemaphoreTake+0x21c>)
 800485e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800486c:	f001 fbd6 	bl	800601c <vPortExitCritical>
				return pdPASS;
 8004870:	2301      	movs	r3, #1
 8004872:	e098      	b.n	80049a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d112      	bne.n	80048a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00b      	beq.n	8004898 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004884:	f383 8811 	msr	BASEPRI, r3
 8004888:	f3bf 8f6f 	isb	sy
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	617b      	str	r3, [r7, #20]
}
 8004892:	bf00      	nop
 8004894:	bf00      	nop
 8004896:	e7fd      	b.n	8004894 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004898:	f001 fbc0 	bl	800601c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800489c:	2300      	movs	r3, #0
 800489e:	e082      	b.n	80049a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048a6:	f107 030c 	add.w	r3, r7, #12
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fee8 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048b0:	2301      	movs	r3, #1
 80048b2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048b4:	f001 fbb2 	bl	800601c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048b8:	f000 fc6c 	bl	8005194 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048bc:	f001 fb7e 	bl	8005fbc <vPortEnterCritical>
 80048c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048c6:	b25b      	sxtb	r3, r3
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048cc:	d103      	bne.n	80048d6 <xQueueSemaphoreTake+0x142>
 80048ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048dc:	b25b      	sxtb	r3, r3
 80048de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048e2:	d103      	bne.n	80048ec <xQueueSemaphoreTake+0x158>
 80048e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048ec:	f001 fb96 	bl	800601c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048f0:	463a      	mov	r2, r7
 80048f2:	f107 030c 	add.w	r3, r7, #12
 80048f6:	4611      	mov	r1, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f000 fed7 	bl	80056ac <xTaskCheckForTimeOut>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d132      	bne.n	800496a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004904:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004906:	f000 f9d0 	bl	8004caa <prvIsQueueEmpty>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d026      	beq.n	800495e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004918:	f001 fb50 	bl	8005fbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800491c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 f831 	bl	8005988 <xTaskPriorityInherit>
 8004926:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004928:	f001 fb78 	bl	800601c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800492c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800492e:	3324      	adds	r3, #36	@ 0x24
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	4611      	mov	r1, r2
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fe19 	bl	800556c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800493a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800493c:	f000 f963 	bl	8004c06 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004940:	f000 fc36 	bl	80051b0 <xTaskResumeAll>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f47f af67 	bne.w	800481a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800494c:	4b18      	ldr	r3, [pc, #96]	@ (80049b0 <xQueueSemaphoreTake+0x21c>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	f3bf 8f6f 	isb	sy
 800495c:	e75d      	b.n	800481a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800495e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004960:	f000 f951 	bl	8004c06 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004964:	f000 fc24 	bl	80051b0 <xTaskResumeAll>
 8004968:	e757      	b.n	800481a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800496a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800496c:	f000 f94b 	bl	8004c06 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004970:	f000 fc1e 	bl	80051b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004974:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004976:	f000 f998 	bl	8004caa <prvIsQueueEmpty>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	f43f af4c 	beq.w	800481a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004988:	f001 fb18 	bl	8005fbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800498c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800498e:	f000 f893 	bl	8004ab8 <prvGetDisinheritPriorityAfterTimeout>
 8004992:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f902 	bl	8005ba4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80049a0:	f001 fb3c 	bl	800601c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80049a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3738      	adds	r7, #56	@ 0x38
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	@ 0x38
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80049c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d10b      	bne.n	80049e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80049ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	623b      	str	r3, [r7, #32]
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	e7fd      	b.n	80049de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d103      	bne.n	80049f0 <xQueueReceiveFromISR+0x3c>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <xQueueReceiveFromISR+0x40>
 80049f0:	2301      	movs	r3, #1
 80049f2:	e000      	b.n	80049f6 <xQueueReceiveFromISR+0x42>
 80049f4:	2300      	movs	r3, #0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10b      	bne.n	8004a12 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	61fb      	str	r3, [r7, #28]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a12:	f001 fb95 	bl	8006140 <vPortValidateInterruptPriority>
	__asm volatile
 8004a16:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	61ba      	str	r2, [r7, #24]
 8004a2c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a2e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a36:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d02f      	beq.n	8004a9e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a48:	68b9      	ldr	r1, [r7, #8]
 8004a4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a4c:	f000 f8b5 	bl	8004bba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a56:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004a58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a60:	d112      	bne.n	8004a88 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6c:	3310      	adds	r3, #16
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fda2 	bl	80055b8 <xTaskRemoveFromEventList>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00e      	beq.n	8004a98 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e007      	b.n	8004a98 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	b25a      	sxtb	r2, r3
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9c:	e001      	b.n	8004aa2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f383 8811 	msr	BASEPRI, r3
}
 8004aac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3738      	adds	r7, #56	@ 0x38
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d006      	beq.n	8004ad6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1c3 0307 	rsb	r3, r3, #7
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e001      	b.n	8004ada <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004ada:	68fb      	ldr	r3, [r7, #12]
	}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bc80      	pop	{r7}
 8004ae4:	4770      	bx	lr

08004ae6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60f8      	str	r0, [r7, #12]
 8004aee:	60b9      	str	r1, [r7, #8]
 8004af0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10d      	bne.n	8004b20 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d14d      	bne.n	8004ba8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 ffbf 	bl	8005a94 <xTaskPriorityDisinherit>
 8004b16:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	605a      	str	r2, [r3, #4]
 8004b1e:	e043      	b.n	8004ba8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d119      	bne.n	8004b5a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6898      	ldr	r0, [r3, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	461a      	mov	r2, r3
 8004b30:	68b9      	ldr	r1, [r7, #8]
 8004b32:	f00e f9fc 	bl	8012f2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d32b      	bcc.n	8004ba8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
 8004b58:	e026      	b.n	8004ba8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68d8      	ldr	r0, [r3, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	461a      	mov	r2, r3
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	f00e f9e2 	bl	8012f2e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	425b      	negs	r3, r3
 8004b74:	441a      	add	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d207      	bcs.n	8004b96 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	425b      	negs	r3, r3
 8004b90:	441a      	add	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d105      	bne.n	8004ba8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004bb0:	697b      	ldr	r3, [r7, #20]
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
 8004bc2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d018      	beq.n	8004bfe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68da      	ldr	r2, [r3, #12]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	441a      	add	r2, r3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d303      	bcc.n	8004bee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68d9      	ldr	r1, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	6838      	ldr	r0, [r7, #0]
 8004bfa:	f00e f998 	bl	8012f2e <memcpy>
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c0e:	f001 f9d5 	bl	8005fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c18:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c1a:	e011      	b.n	8004c40 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d012      	beq.n	8004c4a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3324      	adds	r3, #36	@ 0x24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 fcc5 	bl	80055b8 <xTaskRemoveFromEventList>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c34:	f000 fd9e 	bl	8005774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	dce9      	bgt.n	8004c1c <prvUnlockQueue+0x16>
 8004c48:	e000      	b.n	8004c4c <prvUnlockQueue+0x46>
					break;
 8004c4a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	22ff      	movs	r2, #255	@ 0xff
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004c54:	f001 f9e2 	bl	800601c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c58:	f001 f9b0 	bl	8005fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c62:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c64:	e011      	b.n	8004c8a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d012      	beq.n	8004c94 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3310      	adds	r3, #16
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fca0 	bl	80055b8 <xTaskRemoveFromEventList>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c7e:	f000 fd79 	bl	8005774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c82:	7bbb      	ldrb	r3, [r7, #14]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	dce9      	bgt.n	8004c66 <prvUnlockQueue+0x60>
 8004c92:	e000      	b.n	8004c96 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c94:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	22ff      	movs	r2, #255	@ 0xff
 8004c9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004c9e:	f001 f9bd 	bl	800601c <vPortExitCritical>
}
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cb2:	f001 f983 	bl	8005fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e001      	b.n	8004cc8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cc8:	f001 f9a8 	bl	800601c <vPortExitCritical>

	return xReturn;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004cde:	f001 f96d 	bl	8005fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d102      	bne.n	8004cf4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e001      	b.n	8004cf8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 f990 	bl	800601c <vPortExitCritical>

	return xReturn;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08e      	sub	sp, #56	@ 0x38
 8004d0a:	af04      	add	r7, sp, #16
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
 8004d12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	623b      	str	r3, [r7, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	61fb      	str	r3, [r7, #28]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d50:	23a0      	movs	r3, #160	@ 0xa0
 8004d52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	2ba0      	cmp	r3, #160	@ 0xa0
 8004d58:	d00b      	beq.n	8004d72 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	61bb      	str	r3, [r7, #24]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01e      	beq.n	8004db6 <xTaskCreateStatic+0xb0>
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01b      	beq.n	8004db6 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d90:	2300      	movs	r3, #0
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	9302      	str	r3, [sp, #8]
 8004d98:	f107 0314 	add.w	r3, r7, #20
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f851 	bl	8004e50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004db0:	f000 f8e6 	bl	8004f80 <prvAddNewTaskToReadyList>
 8004db4:	e001      	b.n	8004dba <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dba:	697b      	ldr	r3, [r7, #20]
	}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3728      	adds	r7, #40	@ 0x28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	@ 0x30
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd4:	88fb      	ldrh	r3, [r7, #6]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f9f1 	bl	80061c0 <pvPortMalloc>
 8004dde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00e      	beq.n	8004e04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004de6:	20a0      	movs	r0, #160	@ 0xa0
 8004de8:	f001 f9ea 	bl	80061c0 <pvPortMalloc>
 8004dec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dfa:	e005      	b.n	8004e08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dfc:	6978      	ldr	r0, [r7, #20]
 8004dfe:	f001 faa7 	bl	8006350 <vPortFree>
 8004e02:	e001      	b.n	8004e08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d017      	beq.n	8004e3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9303      	str	r3, [sp, #12]
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	9302      	str	r3, [sp, #8]
 8004e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f80f 	bl	8004e50 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e32:	69f8      	ldr	r0, [r7, #28]
 8004e34:	f000 f8a4 	bl	8004f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	e002      	b.n	8004e44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e44:	69bb      	ldr	r3, [r7, #24]
	}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
	...

08004e50 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f023 0307 	bic.w	r3, r3, #7
 8004e76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00b      	beq.n	8004e9a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	617b      	str	r3, [r7, #20]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e012      	b.n	8004ec6 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	7819      	ldrb	r1, [r3, #0]
 8004ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	3334      	adds	r3, #52	@ 0x34
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	4413      	add	r3, r2
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d006      	beq.n	8004ece <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	61fb      	str	r3, [r7, #28]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	2b0f      	cmp	r3, #15
 8004eca:	d9e9      	bls.n	8004ea0 <prvInitialiseNewTask+0x50>
 8004ecc:	e000      	b.n	8004ed0 <prvInitialiseNewTask+0x80>
		{
			break;
 8004ece:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d901      	bls.n	8004ee2 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ede:	2306      	movs	r3, #6
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	3304      	adds	r3, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fe ff18 	bl	8003d2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f00:	3318      	adds	r3, #24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe ff13 	bl	8003d2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f10:	f1c3 0207 	rsb	r2, r3, #7
 8004f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f30:	334c      	adds	r3, #76	@ 0x4c
 8004f32:	224c      	movs	r2, #76	@ 0x4c
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f00d ff0f 	bl	8012d5a <memset>
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f74 <prvInitialiseNewTask+0x124>)
 8004f40:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f44:	4a0c      	ldr	r2, [pc, #48]	@ (8004f78 <prvInitialiseNewTask+0x128>)
 8004f46:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f7c <prvInitialiseNewTask+0x12c>)
 8004f4c:	659a      	str	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	68f9      	ldr	r1, [r7, #12]
 8004f52:	69b8      	ldr	r0, [r7, #24]
 8004f54:	f000 ff42 	bl	8005ddc <pxPortInitialiseStack>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f5c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f6a:	bf00      	nop
 8004f6c:	3720      	adds	r7, #32
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20007d50 	.word	0x20007d50
 8004f78:	20007db8 	.word	0x20007db8
 8004f7c:	20007e20 	.word	0x20007e20

08004f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f88:	f001 f818 	bl	8005fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8005038 <prvAddNewTaskToReadyList+0xb8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3301      	adds	r3, #1
 8004f92:	4a29      	ldr	r2, [pc, #164]	@ (8005038 <prvAddNewTaskToReadyList+0xb8>)
 8004f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f96:	4b29      	ldr	r3, [pc, #164]	@ (800503c <prvAddNewTaskToReadyList+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f9e:	4a27      	ldr	r2, [pc, #156]	@ (800503c <prvAddNewTaskToReadyList+0xbc>)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fa4:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <prvAddNewTaskToReadyList+0xb8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d110      	bne.n	8004fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fac:	f000 fc06 	bl	80057bc <prvInitialiseTaskLists>
 8004fb0:	e00d      	b.n	8004fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fb2:	4b23      	ldr	r3, [pc, #140]	@ (8005040 <prvAddNewTaskToReadyList+0xc0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fba:	4b20      	ldr	r3, [pc, #128]	@ (800503c <prvAddNewTaskToReadyList+0xbc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d802      	bhi.n	8004fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800503c <prvAddNewTaskToReadyList+0xbc>)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fce:	4b1d      	ldr	r3, [pc, #116]	@ (8005044 <prvAddNewTaskToReadyList+0xc4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8005044 <prvAddNewTaskToReadyList+0xc4>)
 8004fd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	2201      	movs	r2, #1
 8004fde:	409a      	lsls	r2, r3
 8004fe0:	4b19      	ldr	r3, [pc, #100]	@ (8005048 <prvAddNewTaskToReadyList+0xc8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	4a18      	ldr	r2, [pc, #96]	@ (8005048 <prvAddNewTaskToReadyList+0xc8>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4a15      	ldr	r2, [pc, #84]	@ (800504c <prvAddNewTaskToReadyList+0xcc>)
 8004ff8:	441a      	add	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7fe fea0 	bl	8003d46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005006:	f001 f809 	bl	800601c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <prvAddNewTaskToReadyList+0xc0>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00e      	beq.n	8005030 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <prvAddNewTaskToReadyList+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <prvAddNewTaskToReadyList+0xd0>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	2000055c 	.word	0x2000055c
 800503c:	2000045c 	.word	0x2000045c
 8005040:	20000568 	.word	0x20000568
 8005044:	20000578 	.word	0x20000578
 8005048:	20000564 	.word	0x20000564
 800504c:	20000460 	.word	0x20000460
 8005050:	e000ed04 	.word	0xe000ed04

08005054 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005066:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <vTaskDelay+0x64>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vTaskDelay+0x32>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	60bb      	str	r3, [r7, #8]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005086:	f000 f885 	bl	8005194 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800508a:	2100      	movs	r1, #0
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fe3f 	bl	8005d10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005092:	f000 f88d 	bl	80051b0 <xTaskResumeAll>
 8005096:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d107      	bne.n	80050ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800509e:	4b07      	ldr	r3, [pc, #28]	@ (80050bc <vTaskDelay+0x68>)
 80050a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000584 	.word	0x20000584
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08a      	sub	sp, #40	@ 0x28
 80050c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050ce:	463a      	mov	r2, r7
 80050d0:	1d39      	adds	r1, r7, #4
 80050d2:	f107 0308 	add.w	r3, r7, #8
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb f9da 	bl	8000490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050dc:	6839      	ldr	r1, [r7, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	9202      	str	r2, [sp, #8]
 80050e4:	9301      	str	r3, [sp, #4]
 80050e6:	2300      	movs	r3, #0
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	460a      	mov	r2, r1
 80050ee:	4921      	ldr	r1, [pc, #132]	@ (8005174 <vTaskStartScheduler+0xb4>)
 80050f0:	4821      	ldr	r0, [pc, #132]	@ (8005178 <vTaskStartScheduler+0xb8>)
 80050f2:	f7ff fe08 	bl	8004d06 <xTaskCreateStatic>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a20      	ldr	r2, [pc, #128]	@ (800517c <vTaskStartScheduler+0xbc>)
 80050fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050fc:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <vTaskStartScheduler+0xbc>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e001      	b.n	800510e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d11b      	bne.n	800514c <vTaskStartScheduler+0x8c>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
}
 8005126:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005128:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <vTaskStartScheduler+0xc0>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	334c      	adds	r3, #76	@ 0x4c
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <vTaskStartScheduler+0xc4>)
 8005130:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005132:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <vTaskStartScheduler+0xc8>)
 8005134:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005138:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800513a:	4b14      	ldr	r3, [pc, #80]	@ (800518c <vTaskStartScheduler+0xcc>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005140:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <vTaskStartScheduler+0xd0>)
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005146:	f000 fec7 	bl	8005ed8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800514a:	e00f      	b.n	800516c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005152:	d10b      	bne.n	800516c <vTaskStartScheduler+0xac>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60fb      	str	r3, [r7, #12]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <vTaskStartScheduler+0xa8>
}
 800516c:	bf00      	nop
 800516e:	3718      	adds	r7, #24
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	08013bec 	.word	0x08013bec
 8005178:	0800578d 	.word	0x0800578d
 800517c:	20000580 	.word	0x20000580
 8005180:	2000045c 	.word	0x2000045c
 8005184:	20000028 	.word	0x20000028
 8005188:	2000057c 	.word	0x2000057c
 800518c:	20000568 	.word	0x20000568
 8005190:	20000560 	.word	0x20000560

08005194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005198:	4b04      	ldr	r3, [pc, #16]	@ (80051ac <vTaskSuspendAll+0x18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3301      	adds	r3, #1
 800519e:	4a03      	ldr	r2, [pc, #12]	@ (80051ac <vTaskSuspendAll+0x18>)
 80051a0:	6013      	str	r3, [r2, #0]
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000584 	.word	0x20000584

080051b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051be:	4b42      	ldr	r3, [pc, #264]	@ (80052c8 <xTaskResumeAll+0x118>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10b      	bne.n	80051de <xTaskResumeAll+0x2e>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	603b      	str	r3, [r7, #0]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051de:	f000 feed 	bl	8005fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051e2:	4b39      	ldr	r3, [pc, #228]	@ (80052c8 <xTaskResumeAll+0x118>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4a37      	ldr	r2, [pc, #220]	@ (80052c8 <xTaskResumeAll+0x118>)
 80051ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051ec:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <xTaskResumeAll+0x118>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d161      	bne.n	80052b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051f4:	4b35      	ldr	r3, [pc, #212]	@ (80052cc <xTaskResumeAll+0x11c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d05d      	beq.n	80052b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051fc:	e02e      	b.n	800525c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80051fe:	4b34      	ldr	r3, [pc, #208]	@ (80052d0 <xTaskResumeAll+0x120>)
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	3318      	adds	r3, #24
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fdf6 	bl	8003dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3304      	adds	r3, #4
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe fdf1 	bl	8003dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800521e:	2201      	movs	r2, #1
 8005220:	409a      	lsls	r2, r3
 8005222:	4b2c      	ldr	r3, [pc, #176]	@ (80052d4 <xTaskResumeAll+0x124>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	4a2a      	ldr	r2, [pc, #168]	@ (80052d4 <xTaskResumeAll+0x124>)
 800522a:	6013      	str	r3, [r2, #0]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005230:	4613      	mov	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	4413      	add	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4a27      	ldr	r2, [pc, #156]	@ (80052d8 <xTaskResumeAll+0x128>)
 800523a:	441a      	add	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe fd7f 	bl	8003d46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	4b23      	ldr	r3, [pc, #140]	@ (80052dc <xTaskResumeAll+0x12c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005256:	4b22      	ldr	r3, [pc, #136]	@ (80052e0 <xTaskResumeAll+0x130>)
 8005258:	2201      	movs	r2, #1
 800525a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525c:	4b1c      	ldr	r3, [pc, #112]	@ (80052d0 <xTaskResumeAll+0x120>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1cc      	bne.n	80051fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800526a:	f000 fb4b 	bl	8005904 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800526e:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <xTaskResumeAll+0x134>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d010      	beq.n	800529c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800527a:	f000 f857 	bl	800532c <xTaskIncrementTick>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005284:	4b16      	ldr	r3, [pc, #88]	@ (80052e0 <xTaskResumeAll+0x130>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3b01      	subs	r3, #1
 800528e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f1      	bne.n	800527a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005296:	4b13      	ldr	r3, [pc, #76]	@ (80052e4 <xTaskResumeAll+0x134>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800529c:	4b10      	ldr	r3, [pc, #64]	@ (80052e0 <xTaskResumeAll+0x130>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d009      	beq.n	80052b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052a4:	2301      	movs	r3, #1
 80052a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052a8:	4b0f      	ldr	r3, [pc, #60]	@ (80052e8 <xTaskResumeAll+0x138>)
 80052aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052b8:	f000 feb0 	bl	800601c <vPortExitCritical>

	return xAlreadyYielded;
 80052bc:	68bb      	ldr	r3, [r7, #8]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000584 	.word	0x20000584
 80052cc:	2000055c 	.word	0x2000055c
 80052d0:	2000051c 	.word	0x2000051c
 80052d4:	20000564 	.word	0x20000564
 80052d8:	20000460 	.word	0x20000460
 80052dc:	2000045c 	.word	0x2000045c
 80052e0:	20000570 	.word	0x20000570
 80052e4:	2000056c 	.word	0x2000056c
 80052e8:	e000ed04 	.word	0xe000ed04

080052ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052f2:	4b04      	ldr	r3, [pc, #16]	@ (8005304 <xTaskGetTickCount+0x18>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052f8:	687b      	ldr	r3, [r7, #4]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr
 8005304:	20000560 	.word	0x20000560

08005308 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800530e:	f000 ff17 	bl	8006140 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005312:	2300      	movs	r3, #0
 8005314:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005316:	4b04      	ldr	r3, [pc, #16]	@ (8005328 <xTaskGetTickCountFromISR+0x20>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800531c:	683b      	ldr	r3, [r7, #0]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000560 	.word	0x20000560

0800532c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005332:	2300      	movs	r3, #0
 8005334:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005336:	4b51      	ldr	r3, [pc, #324]	@ (800547c <xTaskIncrementTick+0x150>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	f040 808e 	bne.w	800545c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005340:	4b4f      	ldr	r3, [pc, #316]	@ (8005480 <xTaskIncrementTick+0x154>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	3301      	adds	r3, #1
 8005346:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005348:	4a4d      	ldr	r2, [pc, #308]	@ (8005480 <xTaskIncrementTick+0x154>)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d121      	bne.n	8005398 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005354:	4b4b      	ldr	r3, [pc, #300]	@ (8005484 <xTaskIncrementTick+0x158>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00b      	beq.n	8005376 <xTaskIncrementTick+0x4a>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	603b      	str	r3, [r7, #0]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <xTaskIncrementTick+0x46>
 8005376:	4b43      	ldr	r3, [pc, #268]	@ (8005484 <xTaskIncrementTick+0x158>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	4b42      	ldr	r3, [pc, #264]	@ (8005488 <xTaskIncrementTick+0x15c>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a40      	ldr	r2, [pc, #256]	@ (8005484 <xTaskIncrementTick+0x158>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4a40      	ldr	r2, [pc, #256]	@ (8005488 <xTaskIncrementTick+0x15c>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b40      	ldr	r3, [pc, #256]	@ (800548c <xTaskIncrementTick+0x160>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3301      	adds	r3, #1
 8005390:	4a3e      	ldr	r2, [pc, #248]	@ (800548c <xTaskIncrementTick+0x160>)
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	f000 fab6 	bl	8005904 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005398:	4b3d      	ldr	r3, [pc, #244]	@ (8005490 <xTaskIncrementTick+0x164>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d34d      	bcc.n	800543e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <xTaskIncrementTick+0x158>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <xTaskIncrementTick+0x84>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <xTaskIncrementTick+0x86>
 80053b0:	2300      	movs	r3, #0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b6:	4b36      	ldr	r3, [pc, #216]	@ (8005490 <xTaskIncrementTick+0x164>)
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053bc:	601a      	str	r2, [r3, #0]
					break;
 80053be:	e03e      	b.n	800543e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053c0:	4b30      	ldr	r3, [pc, #192]	@ (8005484 <xTaskIncrementTick+0x158>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d203      	bcs.n	80053e0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053d8:	4a2d      	ldr	r2, [pc, #180]	@ (8005490 <xTaskIncrementTick+0x164>)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6013      	str	r3, [r2, #0]
						break;
 80053de:	e02e      	b.n	800543e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fe fd09 	bl	8003dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	3318      	adds	r3, #24
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fd00 	bl	8003dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	2201      	movs	r2, #1
 8005402:	409a      	lsls	r2, r3
 8005404:	4b23      	ldr	r3, [pc, #140]	@ (8005494 <xTaskIncrementTick+0x168>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4313      	orrs	r3, r2
 800540a:	4a22      	ldr	r2, [pc, #136]	@ (8005494 <xTaskIncrementTick+0x168>)
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a1f      	ldr	r2, [pc, #124]	@ (8005498 <xTaskIncrementTick+0x16c>)
 800541c:	441a      	add	r2, r3
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	3304      	adds	r3, #4
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7fe fc8e 	bl	8003d46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542e:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <xTaskIncrementTick+0x170>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005434:	429a      	cmp	r2, r3
 8005436:	d3b4      	bcc.n	80053a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800543c:	e7b1      	b.n	80053a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800543e:	4b17      	ldr	r3, [pc, #92]	@ (800549c <xTaskIncrementTick+0x170>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005444:	4914      	ldr	r1, [pc, #80]	@ (8005498 <xTaskIncrementTick+0x16c>)
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d907      	bls.n	8005466 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005456:	2301      	movs	r3, #1
 8005458:	617b      	str	r3, [r7, #20]
 800545a:	e004      	b.n	8005466 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800545c:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <xTaskIncrementTick+0x174>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	3301      	adds	r3, #1
 8005462:	4a0f      	ldr	r2, [pc, #60]	@ (80054a0 <xTaskIncrementTick+0x174>)
 8005464:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <xTaskIncrementTick+0x178>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800546e:	2301      	movs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005472:	697b      	ldr	r3, [r7, #20]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20000584 	.word	0x20000584
 8005480:	20000560 	.word	0x20000560
 8005484:	20000514 	.word	0x20000514
 8005488:	20000518 	.word	0x20000518
 800548c:	20000574 	.word	0x20000574
 8005490:	2000057c 	.word	0x2000057c
 8005494:	20000564 	.word	0x20000564
 8005498:	20000460 	.word	0x20000460
 800549c:	2000045c 	.word	0x2000045c
 80054a0:	2000056c 	.word	0x2000056c
 80054a4:	20000570 	.word	0x20000570

080054a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054a8:	b480      	push	{r7}
 80054aa:	b087      	sub	sp, #28
 80054ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054ae:	4b29      	ldr	r3, [pc, #164]	@ (8005554 <vTaskSwitchContext+0xac>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054b6:	4b28      	ldr	r3, [pc, #160]	@ (8005558 <vTaskSwitchContext+0xb0>)
 80054b8:	2201      	movs	r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054bc:	e045      	b.n	800554a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80054be:	4b26      	ldr	r3, [pc, #152]	@ (8005558 <vTaskSwitchContext+0xb0>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054c4:	4b25      	ldr	r3, [pc, #148]	@ (800555c <vTaskSwitchContext+0xb4>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	fab3 f383 	clz	r3, r3
 80054d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80054d2:	7afb      	ldrb	r3, [r7, #11]
 80054d4:	f1c3 031f 	rsb	r3, r3, #31
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	4921      	ldr	r1, [pc, #132]	@ (8005560 <vTaskSwitchContext+0xb8>)
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10b      	bne.n	8005506 <vTaskSwitchContext+0x5e>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	607b      	str	r3, [r7, #4]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <vTaskSwitchContext+0x5a>
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4a13      	ldr	r2, [pc, #76]	@ (8005560 <vTaskSwitchContext+0xb8>)
 8005512:	4413      	add	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	3308      	adds	r3, #8
 8005528:	429a      	cmp	r2, r3
 800552a:	d104      	bne.n	8005536 <vTaskSwitchContext+0x8e>
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	605a      	str	r2, [r3, #4]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a09      	ldr	r2, [pc, #36]	@ (8005564 <vTaskSwitchContext+0xbc>)
 800553e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005540:	4b08      	ldr	r3, [pc, #32]	@ (8005564 <vTaskSwitchContext+0xbc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	334c      	adds	r3, #76	@ 0x4c
 8005546:	4a08      	ldr	r2, [pc, #32]	@ (8005568 <vTaskSwitchContext+0xc0>)
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	20000584 	.word	0x20000584
 8005558:	20000570 	.word	0x20000570
 800555c:	20000564 	.word	0x20000564
 8005560:	20000460 	.word	0x20000460
 8005564:	2000045c 	.word	0x2000045c
 8005568:	20000028 	.word	0x20000028

0800556c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10b      	bne.n	8005594 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	60fb      	str	r3, [r7, #12]
}
 800558e:	bf00      	nop
 8005590:	bf00      	nop
 8005592:	e7fd      	b.n	8005590 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005594:	4b07      	ldr	r3, [pc, #28]	@ (80055b4 <vTaskPlaceOnEventList+0x48>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3318      	adds	r3, #24
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fe fbf5 	bl	8003d8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055a2:	2101      	movs	r1, #1
 80055a4:	6838      	ldr	r0, [r7, #0]
 80055a6:	f000 fbb3 	bl	8005d10 <prvAddCurrentTaskToDelayedList>
}
 80055aa:	bf00      	nop
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	2000045c 	.word	0x2000045c

080055b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60fb      	str	r3, [r7, #12]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3318      	adds	r3, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fc06 	bl	8003dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <xTaskRemoveFromEventList+0xb0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11c      	bne.n	8005632 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fbfd 	bl	8003dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005606:	2201      	movs	r2, #1
 8005608:	409a      	lsls	r2, r3
 800560a:	4b18      	ldr	r3, [pc, #96]	@ (800566c <xTaskRemoveFromEventList+0xb4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	4a16      	ldr	r2, [pc, #88]	@ (800566c <xTaskRemoveFromEventList+0xb4>)
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a13      	ldr	r2, [pc, #76]	@ (8005670 <xTaskRemoveFromEventList+0xb8>)
 8005622:	441a      	add	r2, r3
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fe fb8b 	bl	8003d46 <vListInsertEnd>
 8005630:	e005      	b.n	800563e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3318      	adds	r3, #24
 8005636:	4619      	mov	r1, r3
 8005638:	480e      	ldr	r0, [pc, #56]	@ (8005674 <xTaskRemoveFromEventList+0xbc>)
 800563a:	f7fe fb84 	bl	8003d46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <xTaskRemoveFromEventList+0xc0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d905      	bls.n	8005658 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800564c:	2301      	movs	r3, #1
 800564e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <xTaskRemoveFromEventList+0xc4>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	e001      	b.n	800565c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005658:	2300      	movs	r3, #0
 800565a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800565c:	697b      	ldr	r3, [r7, #20]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000584 	.word	0x20000584
 800566c:	20000564 	.word	0x20000564
 8005670:	20000460 	.word	0x20000460
 8005674:	2000051c 	.word	0x2000051c
 8005678:	2000045c 	.word	0x2000045c
 800567c:	20000570 	.word	0x20000570

08005680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <vTaskInternalSetTimeOutState+0x24>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <vTaskInternalSetTimeOutState+0x28>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000574 	.word	0x20000574
 80056a8:	20000560 	.word	0x20000560

080056ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60fb      	str	r3, [r7, #12]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056f2:	f000 fc63 	bl	8005fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <xTaskCheckForTimeOut+0xc0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800570e:	d102      	bne.n	8005716 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e023      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <xTaskCheckForTimeOut+0xc4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d007      	beq.n	8005732 <xTaskCheckForTimeOut+0x86>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e015      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	d20b      	bcs.n	8005754 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff99 	bl	8005680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e004      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f000 fc5d 	bl	800601c <vPortExitCritical>

	return xReturn;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000560 	.word	0x20000560
 8005770:	20000574 	.word	0x20000574

08005774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <vTaskMissedYield+0x14>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20000570 	.word	0x20000570

0800578c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005794:	f000 f852 	bl	800583c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <prvIdleTask+0x28>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d9f9      	bls.n	8005794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <prvIdleTask+0x2c>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b0:	e7f0      	b.n	8005794 <prvIdleTask+0x8>
 80057b2:	bf00      	nop
 80057b4:	20000460 	.word	0x20000460
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	e00c      	b.n	80057e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <prvInitialiseTaskLists+0x60>)
 80057d4:	4413      	add	r3, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fa8a 	bl	8003cf0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3301      	adds	r3, #1
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b06      	cmp	r3, #6
 80057e6:	d9ef      	bls.n	80057c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e8:	480d      	ldr	r0, [pc, #52]	@ (8005820 <prvInitialiseTaskLists+0x64>)
 80057ea:	f7fe fa81 	bl	8003cf0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ee:	480d      	ldr	r0, [pc, #52]	@ (8005824 <prvInitialiseTaskLists+0x68>)
 80057f0:	f7fe fa7e 	bl	8003cf0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f4:	480c      	ldr	r0, [pc, #48]	@ (8005828 <prvInitialiseTaskLists+0x6c>)
 80057f6:	f7fe fa7b 	bl	8003cf0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057fa:	480c      	ldr	r0, [pc, #48]	@ (800582c <prvInitialiseTaskLists+0x70>)
 80057fc:	f7fe fa78 	bl	8003cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005800:	480b      	ldr	r0, [pc, #44]	@ (8005830 <prvInitialiseTaskLists+0x74>)
 8005802:	f7fe fa75 	bl	8003cf0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <prvInitialiseTaskLists+0x78>)
 8005808:	4a05      	ldr	r2, [pc, #20]	@ (8005820 <prvInitialiseTaskLists+0x64>)
 800580a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <prvInitialiseTaskLists+0x7c>)
 800580e:	4a05      	ldr	r2, [pc, #20]	@ (8005824 <prvInitialiseTaskLists+0x68>)
 8005810:	601a      	str	r2, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000460 	.word	0x20000460
 8005820:	200004ec 	.word	0x200004ec
 8005824:	20000500 	.word	0x20000500
 8005828:	2000051c 	.word	0x2000051c
 800582c:	20000530 	.word	0x20000530
 8005830:	20000548 	.word	0x20000548
 8005834:	20000514 	.word	0x20000514
 8005838:	20000518 	.word	0x20000518

0800583c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005842:	e019      	b.n	8005878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005844:	f000 fbba 	bl	8005fbc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005848:	4b10      	ldr	r3, [pc, #64]	@ (800588c <prvCheckTasksWaitingTermination+0x50>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fad1 	bl	8003dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <prvCheckTasksWaitingTermination+0x54>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	4a0b      	ldr	r2, [pc, #44]	@ (8005890 <prvCheckTasksWaitingTermination+0x54>)
 8005862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	4a0a      	ldr	r2, [pc, #40]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 800586c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800586e:	f000 fbd5 	bl	800601c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f810 	bl	8005898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e1      	bne.n	8005844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000530 	.word	0x20000530
 8005890:	2000055c 	.word	0x2000055c
 8005894:	20000544 	.word	0x20000544

08005898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	334c      	adds	r3, #76	@ 0x4c
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00d fa8f 	bl	8012dc8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d108      	bne.n	80058c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fd49 	bl	8006350 <vPortFree>
				vPortFree( pxTCB );
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fd46 	bl	8006350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058c4:	e019      	b.n	80058fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d103      	bne.n	80058d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fd3d 	bl	8006350 <vPortFree>
	}
 80058d6:	e010      	b.n	80058fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d00b      	beq.n	80058fa <prvDeleteTCB+0x62>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	60fb      	str	r3, [r7, #12]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <prvDeleteTCB+0x5e>
	}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800590a:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <prvResetNextTaskUnblockTime+0x40>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <prvResetNextTaskUnblockTime+0x14>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <prvResetNextTaskUnblockTime+0x16>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <prvResetNextTaskUnblockTime+0x44>)
 8005920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005924:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005926:	e008      	b.n	800593a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005928:	4b06      	ldr	r3, [pc, #24]	@ (8005944 <prvResetNextTaskUnblockTime+0x40>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	4a04      	ldr	r2, [pc, #16]	@ (8005948 <prvResetNextTaskUnblockTime+0x44>)
 8005938:	6013      	str	r3, [r2, #0]
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	20000514 	.word	0x20000514
 8005948:	2000057c 	.word	0x2000057c

0800594c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005952:	4b0b      	ldr	r3, [pc, #44]	@ (8005980 <xTaskGetSchedulerState+0x34>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800595a:	2301      	movs	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	e008      	b.n	8005972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005960:	4b08      	ldr	r3, [pc, #32]	@ (8005984 <xTaskGetSchedulerState+0x38>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005968:	2302      	movs	r3, #2
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	e001      	b.n	8005972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005972:	687b      	ldr	r3, [r7, #4]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	bc80      	pop	{r7}
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	20000568 	.word	0x20000568
 8005984:	20000584 	.word	0x20000584

08005988 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d06e      	beq.n	8005a7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a2:	4b39      	ldr	r3, [pc, #228]	@ (8005a88 <xTaskPriorityInherit+0x100>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d25e      	bcs.n	8005a6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db06      	blt.n	80059c2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059b4:	4b34      	ldr	r3, [pc, #208]	@ (8005a88 <xTaskPriorityInherit+0x100>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	f1c3 0207 	rsb	r2, r3, #7
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6959      	ldr	r1, [r3, #20]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a8c <xTaskPriorityInherit+0x104>)
 80059d4:	4413      	add	r3, r2
 80059d6:	4299      	cmp	r1, r3
 80059d8:	d101      	bne.n	80059de <xTaskPriorityInherit+0x56>
 80059da:	2301      	movs	r3, #1
 80059dc:	e000      	b.n	80059e0 <xTaskPriorityInherit+0x58>
 80059de:	2300      	movs	r3, #0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d03a      	beq.n	8005a5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	3304      	adds	r3, #4
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fe fa07 	bl	8003dfc <uxListRemove>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d115      	bne.n	8005a20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f8:	4924      	ldr	r1, [pc, #144]	@ (8005a8c <xTaskPriorityInherit+0x104>)
 80059fa:	4613      	mov	r3, r2
 80059fc:	009b      	lsls	r3, r3, #2
 80059fe:	4413      	add	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	440b      	add	r3, r1
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <xTaskPriorityInherit+0x98>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0e:	2201      	movs	r2, #1
 8005a10:	fa02 f303 	lsl.w	r3, r2, r3
 8005a14:	43da      	mvns	r2, r3
 8005a16:	4b1e      	ldr	r3, [pc, #120]	@ (8005a90 <xTaskPriorityInherit+0x108>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a90 <xTaskPriorityInherit+0x108>)
 8005a1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a20:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <xTaskPriorityInherit+0x100>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2e:	2201      	movs	r2, #1
 8005a30:	409a      	lsls	r2, r3
 8005a32:	4b17      	ldr	r3, [pc, #92]	@ (8005a90 <xTaskPriorityInherit+0x108>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <xTaskPriorityInherit+0x108>)
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4a10      	ldr	r2, [pc, #64]	@ (8005a8c <xTaskPriorityInherit+0x104>)
 8005a4a:	441a      	add	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4619      	mov	r1, r3
 8005a52:	4610      	mov	r0, r2
 8005a54:	f7fe f977 	bl	8003d46 <vListInsertEnd>
 8005a58:	e004      	b.n	8005a64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <xTaskPriorityInherit+0x100>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a64:	2301      	movs	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	e008      	b.n	8005a7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a6e:	4b06      	ldr	r3, [pc, #24]	@ (8005a88 <xTaskPriorityInherit+0x100>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d201      	bcs.n	8005a7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
	}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2000045c 	.word	0x2000045c
 8005a8c:	20000460 	.word	0x20000460
 8005a90:	20000564 	.word	0x20000564

08005a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d070      	beq.n	8005b8c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8005b98 <xTaskPriorityDisinherit+0x104>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d00b      	beq.n	8005acc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	60fb      	str	r3, [r7, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	bf00      	nop
 8005aca:	e7fd      	b.n	8005ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	60bb      	str	r3, [r7, #8]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af0:	1e5a      	subs	r2, r3, #1
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d044      	beq.n	8005b8c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d140      	bne.n	8005b8c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe f974 	bl	8003dfc <uxListRemove>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d115      	bne.n	8005b46 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1e:	491f      	ldr	r1, [pc, #124]	@ (8005b9c <xTaskPriorityDisinherit+0x108>)
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskPriorityDisinherit+0xb2>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	2201      	movs	r2, #1
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	4b18      	ldr	r3, [pc, #96]	@ (8005ba0 <xTaskPriorityDisinherit+0x10c>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4013      	ands	r3, r2
 8005b42:	4a17      	ldr	r2, [pc, #92]	@ (8005ba0 <xTaskPriorityDisinherit+0x10c>)
 8005b44:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b52:	f1c3 0207 	rsb	r2, r3, #7
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <xTaskPriorityDisinherit+0x10c>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba0 <xTaskPriorityDisinherit+0x10c>)
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	4a08      	ldr	r2, [pc, #32]	@ (8005b9c <xTaskPriorityDisinherit+0x108>)
 8005b7a:	441a      	add	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fe f8df 	bl	8003d46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b8c:	697b      	ldr	r3, [r7, #20]
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	2000045c 	.word	0x2000045c
 8005b9c:	20000460 	.word	0x20000460
 8005ba0:	20000564 	.word	0x20000564

08005ba4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 808a 	beq.w	8005cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8005bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bca:	f383 8811 	msr	BASEPRI, r3
 8005bce:	f3bf 8f6f 	isb	sy
 8005bd2:	f3bf 8f4f 	dsb	sy
 8005bd6:	60fb      	str	r3, [r7, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d902      	bls.n	8005bee <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	e002      	b.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d069      	beq.n	8005cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d164      	bne.n	8005cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c08:	4b34      	ldr	r3, [pc, #208]	@ (8005cdc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69ba      	ldr	r2, [r7, #24]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d10b      	bne.n	8005c2a <vTaskPriorityDisinheritAfterTimeout+0x86>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60bb      	str	r3, [r7, #8]
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	69fa      	ldr	r2, [r7, #28]
 8005c34:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db04      	blt.n	8005c48 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	f1c3 0207 	rsb	r2, r3, #7
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	6959      	ldr	r1, [r3, #20]
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4a22      	ldr	r2, [pc, #136]	@ (8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c58:	4413      	add	r3, r2
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	d101      	bne.n	8005c62 <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8005c62:	2300      	movs	r3, #0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d034      	beq.n	8005cd2 <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe f8c5 	bl	8003dfc <uxListRemove>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d115      	bne.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7c:	4918      	ldr	r1, [pc, #96]	@ (8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005c7e:	4613      	mov	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	2201      	movs	r2, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	43da      	mvns	r2, r3
 8005c9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	4a10      	ldr	r2, [pc, #64]	@ (8005ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005ca2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce4 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a07      	ldr	r2, [pc, #28]	@ (8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe f83a 	bl	8003d46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cd2:	bf00      	nop
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	2000045c 	.word	0x2000045c
 8005ce0:	20000460 	.word	0x20000460
 8005ce4:	20000564 	.word	0x20000564

08005ce8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cec:	4b07      	ldr	r3, [pc, #28]	@ (8005d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005cf4:	4b05      	ldr	r3, [pc, #20]	@ (8005d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cfa:	3201      	adds	r2, #1
 8005cfc:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	@ (8005d0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005d00:	681b      	ldr	r3, [r3, #0]
	}
 8005d02:	4618      	mov	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bc80      	pop	{r7}
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2000045c 	.word	0x2000045c

08005d10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d1a:	4b29      	ldr	r3, [pc, #164]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d20:	4b28      	ldr	r3, [pc, #160]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3304      	adds	r3, #4
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fe f868 	bl	8003dfc <uxListRemove>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10b      	bne.n	8005d4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005d32:	4b24      	ldr	r3, [pc, #144]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d38:	2201      	movs	r2, #1
 8005d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3e:	43da      	mvns	r2, r3
 8005d40:	4b21      	ldr	r3, [pc, #132]	@ (8005dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4013      	ands	r3, r2
 8005d46:	4a20      	ldr	r2, [pc, #128]	@ (8005dc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d50:	d10a      	bne.n	8005d68 <prvAddCurrentTaskToDelayedList+0x58>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d58:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	4619      	mov	r1, r3
 8005d60:	481a      	ldr	r0, [pc, #104]	@ (8005dcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d62:	f7fd fff0 	bl	8003d46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d66:	e026      	b.n	8005db6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d70:	4b14      	ldr	r3, [pc, #80]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d209      	bcs.n	8005d94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d80:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	f7fd fffd 	bl	8003d8c <vListInsert>
}
 8005d92:	e010      	b.n	8005db6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d94:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fd fff3 	bl	8003d8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005da6:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d202      	bcs.n	8005db6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005db0:	4a09      	ldr	r2, [pc, #36]	@ (8005dd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6013      	str	r3, [r2, #0]
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000560 	.word	0x20000560
 8005dc4:	2000045c 	.word	0x2000045c
 8005dc8:	20000564 	.word	0x20000564
 8005dcc:	20000548 	.word	0x20000548
 8005dd0:	20000518 	.word	0x20000518
 8005dd4:	20000514 	.word	0x20000514
 8005dd8:	2000057c 	.word	0x2000057c

08005ddc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3b04      	subs	r3, #4
 8005dec:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005df4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	3b04      	subs	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 0201 	bic.w	r2, r3, #1
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3b04      	subs	r3, #4
 8005e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e0c:	4a08      	ldr	r2, [pc, #32]	@ (8005e30 <pxPortInitialiseStack+0x54>)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b14      	subs	r3, #20
 8005e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b20      	subs	r3, #32
 8005e22:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr
 8005e30:	08005e35 	.word	0x08005e35

08005e34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e3e:	4b12      	ldr	r3, [pc, #72]	@ (8005e88 <prvTaskExitError+0x54>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e46:	d00b      	beq.n	8005e60 <prvTaskExitError+0x2c>
	__asm volatile
 8005e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	60fb      	str	r3, [r7, #12]
}
 8005e5a:	bf00      	nop
 8005e5c:	bf00      	nop
 8005e5e:	e7fd      	b.n	8005e5c <prvTaskExitError+0x28>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	60bb      	str	r3, [r7, #8]
}
 8005e72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e74:	bf00      	nop
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0fc      	beq.n	8005e76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e7c:	bf00      	nop
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr
 8005e88:	2000000c 	.word	0x2000000c
 8005e8c:	00000000 	.word	0x00000000

08005e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e90:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <pxCurrentTCBConst2>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e9a:	f380 8809 	msr	PSP, r0
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	f04e 0e0d 	orr.w	lr, lr, #13
 8005eae:	4770      	bx	lr

08005eb0 <pxCurrentTCBConst2>:
 8005eb0:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005eb8:	4806      	ldr	r0, [pc, #24]	@ (8005ed4 <prvPortStartFirstTask+0x1c>)
 8005eba:	6800      	ldr	r0, [r0, #0]
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f380 8808 	msr	MSP, r0
 8005ec2:	b662      	cpsie	i
 8005ec4:	b661      	cpsie	f
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	df00      	svc	0
 8005ed0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005ed2:	bf00      	nop
 8005ed4:	e000ed08 	.word	0xe000ed08

08005ed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ede:	4b32      	ldr	r3, [pc, #200]	@ (8005fa8 <xPortStartScheduler+0xd0>)
 8005ee0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	22ff      	movs	r2, #255	@ 0xff
 8005eee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ef8:	78fb      	ldrb	r3, [r7, #3]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	4b2a      	ldr	r3, [pc, #168]	@ (8005fac <xPortStartScheduler+0xd4>)
 8005f04:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f06:	4b2a      	ldr	r3, [pc, #168]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f08:	2207      	movs	r2, #7
 8005f0a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f0c:	e009      	b.n	8005f22 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f0e:	4b28      	ldr	r3, [pc, #160]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	4a26      	ldr	r2, [pc, #152]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f16:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f22:	78fb      	ldrb	r3, [r7, #3]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b80      	cmp	r3, #128	@ 0x80
 8005f2c:	d0ef      	beq.n	8005f0e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d00b      	beq.n	8005f52 <xPortStartScheduler+0x7a>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	60bb      	str	r3, [r7, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f52:	4b17      	ldr	r3, [pc, #92]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f5c:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f64:	4a12      	ldr	r2, [pc, #72]	@ (8005fb0 <xPortStartScheduler+0xd8>)
 8005f66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f70:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <xPortStartScheduler+0xdc>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a0f      	ldr	r2, [pc, #60]	@ (8005fb4 <xPortStartScheduler+0xdc>)
 8005f76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005fb4 <xPortStartScheduler+0xdc>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb4 <xPortStartScheduler+0xdc>)
 8005f82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f88:	f000 f8b8 	bl	80060fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <xPortStartScheduler+0xe0>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f92:	f7ff ff91 	bl	8005eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f96:	f7ff fa87 	bl	80054a8 <vTaskSwitchContext>
	prvTaskExitError();
 8005f9a:	f7ff ff4b 	bl	8005e34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	e000e400 	.word	0xe000e400
 8005fac:	20000588 	.word	0x20000588
 8005fb0:	2000058c 	.word	0x2000058c
 8005fb4:	e000ed20 	.word	0xe000ed20
 8005fb8:	2000000c 	.word	0x2000000c

08005fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	607b      	str	r3, [r7, #4]
}
 8005fd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8006014 <vPortEnterCritical+0x58>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <vPortEnterCritical+0x58>)
 8005fde:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8006014 <vPortEnterCritical+0x58>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d110      	bne.n	800600a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8006018 <vPortEnterCritical+0x5c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00b      	beq.n	800600a <vPortEnterCritical+0x4e>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	603b      	str	r3, [r7, #0]
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	e7fd      	b.n	8006006 <vPortEnterCritical+0x4a>
	}
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	2000000c 	.word	0x2000000c
 8006018:	e000ed04 	.word	0xe000ed04

0800601c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <vPortExitCritical+0x50>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <vPortExitCritical+0x26>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
 800603e:	bf00      	nop
 8006040:	e7fd      	b.n	800603e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006042:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <vPortExitCritical+0x50>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3b01      	subs	r3, #1
 8006048:	4a08      	ldr	r2, [pc, #32]	@ (800606c <vPortExitCritical+0x50>)
 800604a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800604c:	4b07      	ldr	r3, [pc, #28]	@ (800606c <vPortExitCritical+0x50>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d105      	bne.n	8006060 <vPortExitCritical+0x44>
 8006054:	2300      	movs	r3, #0
 8006056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	f383 8811 	msr	BASEPRI, r3
}
 800605e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	bc80      	pop	{r7}
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	2000000c 	.word	0x2000000c

08006070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006070:	f3ef 8009 	mrs	r0, PSP
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	4b0d      	ldr	r3, [pc, #52]	@ (80060b0 <pxCurrentTCBConst>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006080:	6010      	str	r0, [r2, #0]
 8006082:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006086:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800608a:	f380 8811 	msr	BASEPRI, r0
 800608e:	f7ff fa0b 	bl	80054a8 <vTaskSwitchContext>
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8811 	msr	BASEPRI, r0
 800609a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	6808      	ldr	r0, [r1, #0]
 80060a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80060a6:	f380 8809 	msr	PSP, r0
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	4770      	bx	lr

080060b0 <pxCurrentTCBConst>:
 80060b0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80060b4:	bf00      	nop
 80060b6:	bf00      	nop

080060b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	607b      	str	r3, [r7, #4]
}
 80060d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f7ff f92b 	bl	800532c <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80060dc:	4b06      	ldr	r3, [pc, #24]	@ (80060f8 <SysTick_Handler+0x40>)
 80060de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	2300      	movs	r3, #0
 80060e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f383 8811 	msr	BASEPRI, r3
}
 80060ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006100:	4b0a      	ldr	r3, [pc, #40]	@ (800612c <vPortSetupTimerInterrupt+0x30>)
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006106:	4b0a      	ldr	r3, [pc, #40]	@ (8006130 <vPortSetupTimerInterrupt+0x34>)
 8006108:	2200      	movs	r2, #0
 800610a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800610c:	4b09      	ldr	r3, [pc, #36]	@ (8006134 <vPortSetupTimerInterrupt+0x38>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <vPortSetupTimerInterrupt+0x3c>)
 8006112:	fba2 2303 	umull	r2, r3, r2, r3
 8006116:	099b      	lsrs	r3, r3, #6
 8006118:	4a08      	ldr	r2, [pc, #32]	@ (800613c <vPortSetupTimerInterrupt+0x40>)
 800611a:	3b01      	subs	r3, #1
 800611c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800611e:	4b03      	ldr	r3, [pc, #12]	@ (800612c <vPortSetupTimerInterrupt+0x30>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	46bd      	mov	sp, r7
 8006128:	bc80      	pop	{r7}
 800612a:	4770      	bx	lr
 800612c:	e000e010 	.word	0xe000e010
 8006130:	e000e018 	.word	0xe000e018
 8006134:	20000000 	.word	0x20000000
 8006138:	10624dd3 	.word	0x10624dd3
 800613c:	e000e014 	.word	0xe000e014

08006140 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006146:	f3ef 8305 	mrs	r3, IPSR
 800614a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2b0f      	cmp	r3, #15
 8006150:	d915      	bls.n	800617e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006152:	4a17      	ldr	r2, [pc, #92]	@ (80061b0 <vPortValidateInterruptPriority+0x70>)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800615c:	4b15      	ldr	r3, [pc, #84]	@ (80061b4 <vPortValidateInterruptPriority+0x74>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	7afa      	ldrb	r2, [r7, #11]
 8006162:	429a      	cmp	r2, r3
 8006164:	d20b      	bcs.n	800617e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	607b      	str	r3, [r7, #4]
}
 8006178:	bf00      	nop
 800617a:	bf00      	nop
 800617c:	e7fd      	b.n	800617a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800617e:	4b0e      	ldr	r3, [pc, #56]	@ (80061b8 <vPortValidateInterruptPriority+0x78>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006186:	4b0d      	ldr	r3, [pc, #52]	@ (80061bc <vPortValidateInterruptPriority+0x7c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d90b      	bls.n	80061a6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	603b      	str	r3, [r7, #0]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <vPortValidateInterruptPriority+0x62>
	}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	e000e3f0 	.word	0xe000e3f0
 80061b4:	20000588 	.word	0x20000588
 80061b8:	e000ed0c 	.word	0xe000ed0c
 80061bc:	2000058c 	.word	0x2000058c

080061c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b08a      	sub	sp, #40	@ 0x28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80061cc:	f7fe ffe2 	bl	8005194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80061d0:	4b5a      	ldr	r3, [pc, #360]	@ (800633c <pvPortMalloc+0x17c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80061d8:	f000 f916 	bl	8006408 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80061dc:	4b58      	ldr	r3, [pc, #352]	@ (8006340 <pvPortMalloc+0x180>)
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f040 8090 	bne.w	800630a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01e      	beq.n	800622e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80061f0:	2208      	movs	r2, #8
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f003 0307 	and.w	r3, r3, #7
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d015      	beq.n	800622e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f023 0307 	bic.w	r3, r3, #7
 8006208:	3308      	adds	r3, #8
 800620a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <pvPortMalloc+0x6e>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	617b      	str	r3, [r7, #20]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d06a      	beq.n	800630a <pvPortMalloc+0x14a>
 8006234:	4b43      	ldr	r3, [pc, #268]	@ (8006344 <pvPortMalloc+0x184>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	429a      	cmp	r2, r3
 800623c:	d865      	bhi.n	800630a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800623e:	4b42      	ldr	r3, [pc, #264]	@ (8006348 <pvPortMalloc+0x188>)
 8006240:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006242:	4b41      	ldr	r3, [pc, #260]	@ (8006348 <pvPortMalloc+0x188>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006248:	e004      	b.n	8006254 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800624c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	429a      	cmp	r2, r3
 800625c:	d903      	bls.n	8006266 <pvPortMalloc+0xa6>
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f1      	bne.n	800624a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006266:	4b35      	ldr	r3, [pc, #212]	@ (800633c <pvPortMalloc+0x17c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800626c:	429a      	cmp	r2, r3
 800626e:	d04c      	beq.n	800630a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006270:	6a3b      	ldr	r3, [r7, #32]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2208      	movs	r2, #8
 8006276:	4413      	add	r3, r2
 8006278:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	6a3b      	ldr	r3, [r7, #32]
 8006280:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	2308      	movs	r3, #8
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	429a      	cmp	r2, r3
 8006290:	d920      	bls.n	80062d4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00b      	beq.n	80062bc <pvPortMalloc+0xfc>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	613b      	str	r3, [r7, #16]
}
 80062b6:	bf00      	nop
 80062b8:	bf00      	nop
 80062ba:	e7fd      	b.n	80062b8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	1ad2      	subs	r2, r2, r3
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80062ce:	69b8      	ldr	r0, [r7, #24]
 80062d0:	f000 f8fc 	bl	80064cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <pvPortMalloc+0x184>)
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	4a19      	ldr	r2, [pc, #100]	@ (8006344 <pvPortMalloc+0x184>)
 80062e0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80062e2:	4b18      	ldr	r3, [pc, #96]	@ (8006344 <pvPortMalloc+0x184>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b19      	ldr	r3, [pc, #100]	@ (800634c <pvPortMalloc+0x18c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d203      	bcs.n	80062f6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80062ee:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <pvPortMalloc+0x184>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a16      	ldr	r2, [pc, #88]	@ (800634c <pvPortMalloc+0x18c>)
 80062f4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	4b11      	ldr	r3, [pc, #68]	@ (8006340 <pvPortMalloc+0x180>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	431a      	orrs	r2, r3
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800630a:	f7fe ff51 	bl	80051b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	2b00      	cmp	r3, #0
 8006316:	d00b      	beq.n	8006330 <pvPortMalloc+0x170>
	__asm volatile
 8006318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	60fb      	str	r3, [r7, #12]
}
 800632a:	bf00      	nop
 800632c:	bf00      	nop
 800632e:	e7fd      	b.n	800632c <pvPortMalloc+0x16c>
	return pvReturn;
 8006330:	69fb      	ldr	r3, [r7, #28]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	@ 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20004288 	.word	0x20004288
 8006340:	20004294 	.word	0x20004294
 8006344:	2000428c 	.word	0x2000428c
 8006348:	20004280 	.word	0x20004280
 800634c:	20004290 	.word	0x20004290

08006350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d04a      	beq.n	80063f8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006362:	2308      	movs	r3, #8
 8006364:	425b      	negs	r3, r3
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	685a      	ldr	r2, [r3, #4]
 8006374:	4b22      	ldr	r3, [pc, #136]	@ (8006400 <vPortFree+0xb0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4013      	ands	r3, r2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <vPortFree+0x46>
	__asm volatile
 800637e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006382:	f383 8811 	msr	BASEPRI, r3
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	f3bf 8f4f 	dsb	sy
 800638e:	60fb      	str	r3, [r7, #12]
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	e7fd      	b.n	8006392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00b      	beq.n	80063b6 <vPortFree+0x66>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60bb      	str	r3, [r7, #8]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4b11      	ldr	r3, [pc, #68]	@ (8006400 <vPortFree+0xb0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4013      	ands	r3, r2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d019      	beq.n	80063f8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d115      	bne.n	80063f8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006400 <vPortFree+0xb0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80063dc:	f7fe feda 	bl	8005194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	685a      	ldr	r2, [r3, #4]
 80063e4:	4b07      	ldr	r3, [pc, #28]	@ (8006404 <vPortFree+0xb4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4413      	add	r3, r2
 80063ea:	4a06      	ldr	r2, [pc, #24]	@ (8006404 <vPortFree+0xb4>)
 80063ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80063ee:	6938      	ldr	r0, [r7, #16]
 80063f0:	f000 f86c 	bl	80064cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80063f4:	f7fe fedc 	bl	80051b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063f8:	bf00      	nop
 80063fa:	3718      	adds	r7, #24
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20004294 	.word	0x20004294
 8006404:	2000428c 	.word	0x2000428c

08006408 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800640e:	f643 43f0 	movw	r3, #15600	@ 0x3cf0
 8006412:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006414:	4b27      	ldr	r3, [pc, #156]	@ (80064b4 <prvHeapInit+0xac>)
 8006416:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	3307      	adds	r3, #7
 8006426:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f023 0307 	bic.w	r3, r3, #7
 800642e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	4a1f      	ldr	r2, [pc, #124]	@ (80064b4 <prvHeapInit+0xac>)
 8006438:	4413      	add	r3, r2
 800643a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006440:	4a1d      	ldr	r2, [pc, #116]	@ (80064b8 <prvHeapInit+0xb0>)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006446:	4b1c      	ldr	r3, [pc, #112]	@ (80064b8 <prvHeapInit+0xb0>)
 8006448:	2200      	movs	r2, #0
 800644a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	4413      	add	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006454:	2208      	movs	r2, #8
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	1a9b      	subs	r3, r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0307 	bic.w	r3, r3, #7
 8006462:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4a15      	ldr	r2, [pc, #84]	@ (80064bc <prvHeapInit+0xb4>)
 8006468:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800646a:	4b14      	ldr	r3, [pc, #80]	@ (80064bc <prvHeapInit+0xb4>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <prvHeapInit+0xb4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	1ad2      	subs	r2, r2, r3
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006488:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <prvHeapInit+0xb4>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	4a0a      	ldr	r2, [pc, #40]	@ (80064c0 <prvHeapInit+0xb8>)
 8006496:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	4a09      	ldr	r2, [pc, #36]	@ (80064c4 <prvHeapInit+0xbc>)
 800649e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064a0:	4b09      	ldr	r3, [pc, #36]	@ (80064c8 <prvHeapInit+0xc0>)
 80064a2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064a6:	601a      	str	r2, [r3, #0]
}
 80064a8:	bf00      	nop
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	20000590 	.word	0x20000590
 80064b8:	20004280 	.word	0x20004280
 80064bc:	20004288 	.word	0x20004288
 80064c0:	20004290 	.word	0x20004290
 80064c4:	2000428c 	.word	0x2000428c
 80064c8:	20004294 	.word	0x20004294

080064cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064d4:	4b27      	ldr	r3, [pc, #156]	@ (8006574 <prvInsertBlockIntoFreeList+0xa8>)
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	e002      	b.n	80064e0 <prvInsertBlockIntoFreeList+0x14>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d8f7      	bhi.n	80064da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d108      	bne.n	800650e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685a      	ldr	r2, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	441a      	add	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	441a      	add	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d118      	bne.n	8006554 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <prvInsertBlockIntoFreeList+0xac>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d00d      	beq.n	800654a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	441a      	add	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e008      	b.n	800655c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800654a:	4b0b      	ldr	r3, [pc, #44]	@ (8006578 <prvInsertBlockIntoFreeList+0xac>)
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e003      	b.n	800655c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d002      	beq.n	800656a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	bc80      	pop	{r7}
 8006572:	4770      	bx	lr
 8006574:	20004280 	.word	0x20004280
 8006578:	20004288 	.word	0x20004288

0800657c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8006586:	f009 f8c9 	bl	800f71c <sys_timeouts_sleeptime>
 800658a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006592:	d10b      	bne.n	80065ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8006594:	4813      	ldr	r0, [pc, #76]	@ (80065e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8006596:	f00c fa2a 	bl	80129ee <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800659a:	2200      	movs	r2, #0
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f00c f99c 	bl	80128dc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80065a4:	480f      	ldr	r0, [pc, #60]	@ (80065e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80065a6:	f00c fa13 	bl	80129d0 <sys_mutex_lock>
    return;
 80065aa:	e018      	b.n	80065de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80065b2:	f009 f879 	bl	800f6a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80065b6:	e7e6      	b.n	8006586 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80065b8:	480a      	ldr	r0, [pc, #40]	@ (80065e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80065ba:	f00c fa18 	bl	80129ee <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f00c f98a 	bl	80128dc <sys_arch_mbox_fetch>
 80065c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80065ca:	4806      	ldr	r0, [pc, #24]	@ (80065e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80065cc:	f00c fa00 	bl	80129d0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d6:	d102      	bne.n	80065de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80065d8:	f009 f866 	bl	800f6a8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80065dc:	e7d3      	b.n	8006586 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	200042a4 	.word	0x200042a4

080065e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80065f0:	4810      	ldr	r0, [pc, #64]	@ (8006634 <tcpip_thread+0x4c>)
 80065f2:	f00c f9ed 	bl	80129d0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80065f6:	4b10      	ldr	r3, [pc, #64]	@ (8006638 <tcpip_thread+0x50>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d005      	beq.n	800660a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80065fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <tcpip_thread+0x50>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a0e      	ldr	r2, [pc, #56]	@ (800663c <tcpip_thread+0x54>)
 8006604:	6812      	ldr	r2, [r2, #0]
 8006606:	4610      	mov	r0, r2
 8006608:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800660a:	f107 030c 	add.w	r3, r7, #12
 800660e:	4619      	mov	r1, r3
 8006610:	480b      	ldr	r0, [pc, #44]	@ (8006640 <tcpip_thread+0x58>)
 8006612:	f7ff ffb3 	bl	800657c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d106      	bne.n	800662a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800661c:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <tcpip_thread+0x5c>)
 800661e:	2291      	movs	r2, #145	@ 0x91
 8006620:	4909      	ldr	r1, [pc, #36]	@ (8006648 <tcpip_thread+0x60>)
 8006622:	480a      	ldr	r0, [pc, #40]	@ (800664c <tcpip_thread+0x64>)
 8006624:	f00c fb34 	bl	8012c90 <iprintf>
      continue;
 8006628:	e003      	b.n	8006632 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 f80f 	bl	8006650 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8006632:	e7ea      	b.n	800660a <tcpip_thread+0x22>
 8006634:	200042a4 	.word	0x200042a4
 8006638:	20004298 	.word	0x20004298
 800663c:	2000429c 	.word	0x2000429c
 8006640:	200042a0 	.word	0x200042a0
 8006644:	08013bf4 	.word	0x08013bf4
 8006648:	08013c24 	.word	0x08013c24
 800664c:	08013c44 	.word	0x08013c44

08006650 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d026      	beq.n	80066ae <tcpip_thread_handle_msg+0x5e>
 8006660:	2b02      	cmp	r3, #2
 8006662:	dc2b      	bgt.n	80066bc <tcpip_thread_handle_msg+0x6c>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <tcpip_thread_handle_msg+0x1e>
 8006668:	2b01      	cmp	r3, #1
 800666a:	d015      	beq.n	8006698 <tcpip_thread_handle_msg+0x48>
 800666c:	e026      	b.n	80066bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6850      	ldr	r0, [r2, #4]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6892      	ldr	r2, [r2, #8]
 800667a:	4611      	mov	r1, r2
 800667c:	4798      	blx	r3
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f002 fc13 	bl	8008eb4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	2009      	movs	r0, #9
 8006692:	f001 fdd7 	bl	8008244 <memp_free>
      break;
 8006696:	e018      	b.n	80066ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6892      	ldr	r2, [r2, #8]
 80066a0:	4610      	mov	r0, r2
 80066a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80066a4:	6879      	ldr	r1, [r7, #4]
 80066a6:	2008      	movs	r0, #8
 80066a8:	f001 fdcc 	bl	8008244 <memp_free>
      break;
 80066ac:	e00d      	b.n	80066ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	6892      	ldr	r2, [r2, #8]
 80066b6:	4610      	mov	r0, r2
 80066b8:	4798      	blx	r3
      break;
 80066ba:	e006      	b.n	80066ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80066bc:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <tcpip_thread_handle_msg+0x84>)
 80066be:	22cf      	movs	r2, #207	@ 0xcf
 80066c0:	4905      	ldr	r1, [pc, #20]	@ (80066d8 <tcpip_thread_handle_msg+0x88>)
 80066c2:	4806      	ldr	r0, [pc, #24]	@ (80066dc <tcpip_thread_handle_msg+0x8c>)
 80066c4:	f00c fae4 	bl	8012c90 <iprintf>
      break;
 80066c8:	bf00      	nop
  }
}
 80066ca:	bf00      	nop
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	08013bf4 	.word	0x08013bf4
 80066d8:	08013c24 	.word	0x08013c24
 80066dc:	08013c44 	.word	0x08013c44

080066e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80066ec:	481a      	ldr	r0, [pc, #104]	@ (8006758 <tcpip_inpkt+0x78>)
 80066ee:	f00c f934 	bl	801295a <sys_mbox_valid>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <tcpip_inpkt+0x24>
 80066f8:	4b18      	ldr	r3, [pc, #96]	@ (800675c <tcpip_inpkt+0x7c>)
 80066fa:	22fc      	movs	r2, #252	@ 0xfc
 80066fc:	4918      	ldr	r1, [pc, #96]	@ (8006760 <tcpip_inpkt+0x80>)
 80066fe:	4819      	ldr	r0, [pc, #100]	@ (8006764 <tcpip_inpkt+0x84>)
 8006700:	f00c fac6 	bl	8012c90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006704:	2009      	movs	r0, #9
 8006706:	f001 fd4b 	bl	80081a0 <memp_malloc>
 800670a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006716:	e01a      	b.n	800674e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2200      	movs	r2, #0
 800671c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006730:	6979      	ldr	r1, [r7, #20]
 8006732:	4809      	ldr	r0, [pc, #36]	@ (8006758 <tcpip_inpkt+0x78>)
 8006734:	f00c f8b8 	bl	80128a8 <sys_mbox_trypost>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d006      	beq.n	800674c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800673e:	6979      	ldr	r1, [r7, #20]
 8006740:	2009      	movs	r0, #9
 8006742:	f001 fd7f 	bl	8008244 <memp_free>
    return ERR_MEM;
 8006746:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800674a:	e000      	b.n	800674e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800674c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200042a0 	.word	0x200042a0
 800675c:	08013bf4 	.word	0x08013bf4
 8006760:	08013c6c 	.word	0x08013c6c
 8006764:	08013c44 	.word	0x08013c44

08006768 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006778:	f003 0318 	and.w	r3, r3, #24
 800677c:	2b00      	cmp	r3, #0
 800677e:	d006      	beq.n	800678e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8006780:	4a08      	ldr	r2, [pc, #32]	@ (80067a4 <tcpip_input+0x3c>)
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ffab 	bl	80066e0 <tcpip_inpkt>
 800678a:	4603      	mov	r3, r0
 800678c:	e005      	b.n	800679a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800678e:	4a06      	ldr	r2, [pc, #24]	@ (80067a8 <tcpip_input+0x40>)
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff ffa4 	bl	80066e0 <tcpip_inpkt>
 8006798:	4603      	mov	r3, r0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	080120c5 	.word	0x080120c5
 80067a8:	08010ee5 	.word	0x08010ee5

080067ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80067b6:	4819      	ldr	r0, [pc, #100]	@ (800681c <tcpip_try_callback+0x70>)
 80067b8:	f00c f8cf 	bl	801295a <sys_mbox_valid>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d106      	bne.n	80067d0 <tcpip_try_callback+0x24>
 80067c2:	4b17      	ldr	r3, [pc, #92]	@ (8006820 <tcpip_try_callback+0x74>)
 80067c4:	f240 125d 	movw	r2, #349	@ 0x15d
 80067c8:	4916      	ldr	r1, [pc, #88]	@ (8006824 <tcpip_try_callback+0x78>)
 80067ca:	4817      	ldr	r0, [pc, #92]	@ (8006828 <tcpip_try_callback+0x7c>)
 80067cc:	f00c fa60 	bl	8012c90 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80067d0:	2008      	movs	r0, #8
 80067d2:	f001 fce5 	bl	80081a0 <memp_malloc>
 80067d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d102      	bne.n	80067e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80067de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067e2:	e017      	b.n	8006814 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	4808      	ldr	r0, [pc, #32]	@ (800681c <tcpip_try_callback+0x70>)
 80067fa:	f00c f855 	bl	80128a8 <sys_mbox_trypost>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8006804:	68f9      	ldr	r1, [r7, #12]
 8006806:	2008      	movs	r0, #8
 8006808:	f001 fd1c 	bl	8008244 <memp_free>
    return ERR_MEM;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006810:	e000      	b.n	8006814 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	200042a0 	.word	0x200042a0
 8006820:	08013bf4 	.word	0x08013bf4
 8006824:	08013c6c 	.word	0x08013c6c
 8006828:	08013c44 	.word	0x08013c44

0800682c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  lwip_init();
 8006836:	f001 f835 	bl	80078a4 <lwip_init>

  tcpip_init_done = initfunc;
 800683a:	4a17      	ldr	r2, [pc, #92]	@ (8006898 <tcpip_init+0x6c>)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8006840:	4a16      	ldr	r2, [pc, #88]	@ (800689c <tcpip_init+0x70>)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006846:	2106      	movs	r1, #6
 8006848:	4815      	ldr	r0, [pc, #84]	@ (80068a0 <tcpip_init+0x74>)
 800684a:	f00c f80b 	bl	8012864 <sys_mbox_new>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006854:	4b13      	ldr	r3, [pc, #76]	@ (80068a4 <tcpip_init+0x78>)
 8006856:	f240 2261 	movw	r2, #609	@ 0x261
 800685a:	4913      	ldr	r1, [pc, #76]	@ (80068a8 <tcpip_init+0x7c>)
 800685c:	4813      	ldr	r0, [pc, #76]	@ (80068ac <tcpip_init+0x80>)
 800685e:	f00c fa17 	bl	8012c90 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006862:	4813      	ldr	r0, [pc, #76]	@ (80068b0 <tcpip_init+0x84>)
 8006864:	f00c f898 	bl	8012998 <sys_mutex_new>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d006      	beq.n	800687c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <tcpip_init+0x78>)
 8006870:	f240 2265 	movw	r2, #613	@ 0x265
 8006874:	490f      	ldr	r1, [pc, #60]	@ (80068b4 <tcpip_init+0x88>)
 8006876:	480d      	ldr	r0, [pc, #52]	@ (80068ac <tcpip_init+0x80>)
 8006878:	f00c fa0a 	bl	8012c90 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800687c:	2300      	movs	r3, #0
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006884:	2200      	movs	r2, #0
 8006886:	490c      	ldr	r1, [pc, #48]	@ (80068b8 <tcpip_init+0x8c>)
 8006888:	480c      	ldr	r0, [pc, #48]	@ (80068bc <tcpip_init+0x90>)
 800688a:	f00c f8bd 	bl	8012a08 <sys_thread_new>
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20004298 	.word	0x20004298
 800689c:	2000429c 	.word	0x2000429c
 80068a0:	200042a0 	.word	0x200042a0
 80068a4:	08013bf4 	.word	0x08013bf4
 80068a8:	08013c7c 	.word	0x08013c7c
 80068ac:	08013c44 	.word	0x08013c44
 80068b0:	200042a4 	.word	0x200042a4
 80068b4:	08013ca0 	.word	0x08013ca0
 80068b8:	080065e9 	.word	0x080065e9
 80068bc:	08013cc4 	.word	0x08013cc4

080068c0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <fs_open+0x16>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <fs_open+0x1c>
    return ERR_ARG;
 80068d6:	f06f 030f 	mvn.w	r3, #15
 80068da:	e028      	b.n	800692e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80068dc:	4b16      	ldr	r3, [pc, #88]	@ (8006938 <fs_open+0x78>)
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e020      	b.n	8006924 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	4619      	mov	r1, r3
 80068e8:	6838      	ldr	r0, [r7, #0]
 80068ea:	f7f9 fc49 	bl	8000180 <strcmp>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d114      	bne.n	800691e <fs_open+0x5e>
      file->data = (const char *)f->data;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	7c1a      	ldrb	r2, [r3, #16]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800691a:	2300      	movs	r3, #0
 800691c:	e007      	b.n	800692e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1db      	bne.n	80068e2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800692a:	f06f 0305 	mvn.w	r3, #5
}
 800692e:	4618      	mov	r0, r3
 8006930:	3710      	adds	r7, #16
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	0801773c 	.word	0x0801773c

0800693c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	bc80      	pop	{r7}
 800694c:	4770      	bx	lr

0800694e <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	1ad3      	subs	r3, r2, r3
}
 8006960:	4618      	mov	r0, r3
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	bc80      	pop	{r7}
 8006968:	4770      	bx	lr

0800696a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8006972:	222c      	movs	r2, #44	@ 0x2c
 8006974:	2100      	movs	r1, #0
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f00c f9ef 	bl	8012d5a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800698a:	202c      	movs	r0, #44	@ 0x2c
 800698c:	f001 fa86 	bl	8007e9c <mem_malloc>
 8006990:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <http_state_alloc+0x1a>
    http_state_init(ret);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7ff ffe6 	bl	800696a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800699e:	687b      	ldr	r3, [r7, #4]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d007      	beq.n	80069c8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff ffbd 	bl	800693c <fs_close>
    hs->handle = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d007      	beq.n	80069e0 <http_state_eof+0x38>
    pbuf_free(hs->req);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	4618      	mov	r0, r3
 80069d6:	f002 fa6d 	bl	8008eb4 <pbuf_free>
    hs->req = NULL;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 80069e0:	bf00      	nop
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d005      	beq.n	8006a02 <http_state_free+0x1a>
    http_state_eof(hs);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7ff ffd6 	bl	80069a8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f001 f8b3 	bl	8007b68 <mem_free>
  }
}
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
	...

08006a0c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <http_write+0x22>
 8006a20:	4b2c      	ldr	r3, [pc, #176]	@ (8006ad4 <http_write+0xc8>)
 8006a22:	f240 2219 	movw	r2, #537	@ 0x219
 8006a26:	492c      	ldr	r1, [pc, #176]	@ (8006ad8 <http_write+0xcc>)
 8006a28:	482c      	ldr	r0, [pc, #176]	@ (8006adc <http_write+0xd0>)
 8006a2a:	f00c f931 	bl	8012c90 <iprintf>
  len = *length;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8006a34:	8afb      	ldrh	r3, [r7, #22]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <http_write+0x32>
    return ERR_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e045      	b.n	8006aca <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006a44:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8006a46:	8aba      	ldrh	r2, [r7, #20]
 8006a48:	8afb      	ldrh	r3, [r7, #22]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d201      	bcs.n	8006a52 <http_write+0x46>
    len = max_len;
 8006a4e:	8abb      	ldrh	r3, [r7, #20]
 8006a50:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8006a5a:	8afa      	ldrh	r2, [r7, #22]
 8006a5c:	8abb      	ldrh	r3, [r7, #20]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d901      	bls.n	8006a66 <http_write+0x5a>
    len = max_len;
 8006a62:	8abb      	ldrh	r3, [r7, #20]
 8006a64:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8006a66:	78fb      	ldrb	r3, [r7, #3]
 8006a68:	8afa      	ldrh	r2, [r7, #22]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f006 ff91 	bl	800d994 <tcp_write>
 8006a72:	4603      	mov	r3, r0
 8006a74:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8006a76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a7e:	d10f      	bne.n	8006aa0 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8006a90:	2b08      	cmp	r3, #8
 8006a92:	d902      	bls.n	8006a9a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8006a94:	2301      	movs	r3, #1
 8006a96:	82fb      	strh	r3, [r7, #22]
 8006a98:	e002      	b.n	8006aa0 <http_write+0x94>
      } else {
        len /= 2;
 8006a9a:	8afb      	ldrh	r3, [r7, #22]
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8006aa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa8:	d102      	bne.n	8006ab0 <http_write+0xa4>
 8006aaa:	8afb      	ldrh	r3, [r7, #22]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d8da      	bhi.n	8006a66 <http_write+0x5a>

  if (err == ERR_OK) {
 8006ab0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d103      	bne.n	8006ac0 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	8afa      	ldrh	r2, [r7, #22]
 8006abc:	801a      	strh	r2, [r3, #0]
 8006abe:	e002      	b.n	8006ac6 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8006ac6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08013d14 	.word	0x08013d14
 8006ad8:	08013d4c 	.word	0x08013d4c
 8006adc:	08013d5c 	.word	0x08013d5c

08006ae0 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	4613      	mov	r3, r2
 8006aec:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f004 f817 	bl	800ab24 <tcp_arg>
  altcp_recv(pcb, NULL);
 8006af6:	2100      	movs	r1, #0
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f004 f823 	bl	800ab44 <tcp_recv>
  altcp_err(pcb, NULL);
 8006afe:	2100      	movs	r1, #0
 8006b00:	68f8      	ldr	r0, [r7, #12]
 8006b02:	f004 f863 	bl	800abcc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8006b06:	2200      	movs	r2, #0
 8006b08:	2100      	movs	r1, #0
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f004 f896 	bl	800ac3c <tcp_poll>
  altcp_sent(pcb, NULL);
 8006b10:	2100      	movs	r1, #0
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f004 f838 	bl	800ab88 <tcp_sent>
  if (hs != NULL) {
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d002      	beq.n	8006b24 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8006b1e:	68b8      	ldr	r0, [r7, #8]
 8006b20:	f7ff ff62 	bl	80069e8 <http_state_free>
  }

  if (abort_conn) {
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f002 ff32 	bl	8009994 <tcp_abort>
    return ERR_OK;
 8006b30:	2300      	movs	r3, #0
 8006b32:	e00f      	b.n	8006b54 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f002 fe43 	bl	80097c0 <tcp_close>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8006b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006b46:	2204      	movs	r2, #4
 8006b48:	4904      	ldr	r1, [pc, #16]	@ (8006b5c <http_close_or_abort_conn+0x7c>)
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f004 f876 	bl	800ac3c <tcp_poll>
  }
  return err;
 8006b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3718      	adds	r7, #24
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	08007223 	.word	0x08007223

08006b60 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	6839      	ldr	r1, [r7, #0]
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7ff ffb6 	bl	8006ae0 <http_close_or_abort_conn>
 8006b74:	4603      	mov	r3, r0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3708      	adds	r7, #8
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7ff ffe8 	bl	8006b60 <http_close_conn>
  }
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff ffe6 	bl	8006b7e <http_eof>
    return 0;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e016      	b.n	8006be4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7ff fec7 	bl	800694e <fs_bytes_left>
 8006bc0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc05      	bgt.n	8006bd4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff ffd7 	bl	8006b7e <http_eof>
    return 0;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	e007      	b.n	8006be4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8006bd4:	4b05      	ldr	r3, [pc, #20]	@ (8006bec <http_check_eof+0x54>)
 8006bd6:	f240 429d 	movw	r2, #1181	@ 0x49d
 8006bda:	4905      	ldr	r1, [pc, #20]	@ (8006bf0 <http_check_eof+0x58>)
 8006bdc:	4805      	ldr	r0, [pc, #20]	@ (8006bf4 <http_check_eof+0x5c>)
 8006bde:	f00c f857 	bl	8012c90 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8006be2:	2301      	movs	r3, #1
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	08013d14 	.word	0x08013d14
 8006bf0:	08013d84 	.word	0x08013d84
 8006bf4:	08013d5c 	.word	0x08013d5c

08006bf8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d803      	bhi.n	8006c1a <http_send_data_nonssi+0x22>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	e001      	b.n	8006c1e <http_send_data_nonssi+0x26>
 8006c1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c1e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	6999      	ldr	r1, [r3, #24]
 8006c24:	f107 020c 	add.w	r2, r7, #12
 8006c28:	2300      	movs	r3, #0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff feee 	bl	8006a0c <http_write>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8006c34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10d      	bne.n	8006c58 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	89ba      	ldrh	r2, [r7, #12]
 8006c46:	441a      	add	r2, r3
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	89ba      	ldrh	r2, [r7, #12]
 8006c52:	1a9a      	subs	r2, r3, r2
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  return data_to_send;
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <http_send+0x18>
    return 0;
 8006c76:	2300      	movs	r3, #0
 8006c78:	e025      	b.n	8006cc6 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8006c82:	6839      	ldr	r1, [r7, #0]
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f7ff ff87 	bl	8006b98 <http_check_eof>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <http_send+0x32>
      return 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	e018      	b.n	8006cc6 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7ff ffae 	bl	8006bf8 <http_send_data_nonssi>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10d      	bne.n	8006cc4 <http_send+0x62>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff fe4e 	bl	800694e <fs_bytes_left>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	dc05      	bgt.n	8006cc4 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8006cb8:	6839      	ldr	r1, [r7, #0]
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff ff5f 	bl	8006b7e <http_eof>
    return 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	4a1c      	ldr	r2, [pc, #112]	@ (8006d50 <http_get_404_file+0x80>)
 8006cde:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f7ff fde9 	bl	80068c0 <fs_open>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8006cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d024      	beq.n	8006d44 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	4a15      	ldr	r2, [pc, #84]	@ (8006d54 <http_get_404_file+0x84>)
 8006cfe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f7ff fdd9 	bl	80068c0 <fs_open>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8006d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d014      	beq.n	8006d44 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	4a0e      	ldr	r2, [pc, #56]	@ (8006d58 <http_get_404_file+0x88>)
 8006d1e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7ff fdc9 	bl	80068c0 <fs_open>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8006d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d004      	beq.n	8006d44 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
        return NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	e000      	b.n	8006d46 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8006d44:	687b      	ldr	r3, [r7, #4]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	08013dbc 	.word	0x08013dbc
 8006d54:	08013dc8 	.word	0x08013dc8
 8006d58:	08013dd4 	.word	0x08013dd4

08006d5c <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b08e      	sub	sp, #56	@ 0x38
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <http_parse_request+0x24>
 8006d72:	4b65      	ldr	r3, [pc, #404]	@ (8006f08 <http_parse_request+0x1ac>)
 8006d74:	f240 72ae 	movw	r2, #1966	@ 0x7ae
 8006d78:	4964      	ldr	r1, [pc, #400]	@ (8006f0c <http_parse_request+0x1b0>)
 8006d7a:	4865      	ldr	r0, [pc, #404]	@ (8006f10 <http_parse_request+0x1b4>)
 8006d7c:	f00b ff88 	bl	8012c90 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <http_parse_request+0x38>
 8006d86:	4b60      	ldr	r3, [pc, #384]	@ (8006f08 <http_parse_request+0x1ac>)
 8006d88:	f240 72af 	movw	r2, #1967	@ 0x7af
 8006d8c:	4961      	ldr	r1, [pc, #388]	@ (8006f14 <http_parse_request+0x1b8>)
 8006d8e:	4860      	ldr	r0, [pc, #384]	@ (8006f10 <http_parse_request+0x1b4>)
 8006d90:	f00b ff7e 	bl	8012c90 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <http_parse_request+0x48>
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8006da4:	f06f 0307 	mvn.w	r3, #7
 8006da8:	e0a9      	b.n	8006efe <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006db6:	621a      	str	r2, [r3, #32]
 8006db8:	e005      	b.n	8006dc6 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 f943 	bl	800904c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8006dc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dc8:	f002 f918 	bl	8008ffc <pbuf_ref>

  if (hs->req->next != NULL) {
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d012      	beq.n	8006dfc <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	891b      	ldrh	r3, [r3, #8]
 8006ddc:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8006de0:	4293      	cmp	r3, r2
 8006de2:	bf28      	it	cs
 8006de4:	4613      	movcs	r3, r2
 8006de6:	867b      	strh	r3, [r7, #50]	@ 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	6a18      	ldr	r0, [r3, #32]
 8006dec:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006dee:	2300      	movs	r3, #0
 8006df0:	4949      	ldr	r1, [pc, #292]	@ (8006f18 <http_parse_request+0x1bc>)
 8006df2:	f002 fa63 	bl	80092bc <pbuf_copy_partial>
    data = httpd_req_buf;
 8006df6:	4b48      	ldr	r3, [pc, #288]	@ (8006f18 <http_parse_request+0x1bc>)
 8006df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dfa:	e005      	b.n	8006e08 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	637b      	str	r3, [r7, #52]	@ 0x34
    data_len = p->len;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	895b      	ldrh	r3, [r3, #10]
 8006e06:	867b      	strh	r3, [r7, #50]	@ 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8006e08:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e0a:	2b06      	cmp	r3, #6
 8006e0c:	d962      	bls.n	8006ed4 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006e0e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006e10:	461a      	mov	r2, r3
 8006e12:	4942      	ldr	r1, [pc, #264]	@ (8006f1c <http_parse_request+0x1c0>)
 8006e14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e16:	f000 fb97 	bl	8007548 <lwip_strnstr>
 8006e1a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d058      	beq.n	8006ed4 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8006e26:	2204      	movs	r2, #4
 8006e28:	493d      	ldr	r1, [pc, #244]	@ (8006f20 <http_parse_request+0x1c4>)
 8006e2a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006e2c:	f00b ffaa 	bl	8012d84 <strncmp>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d116      	bne.n	8006e64 <http_parse_request+0x108>
        sp1 = data + 3;
 8006e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e38:	3303      	adds	r3, #3
 8006e3a:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	8b7a      	ldrh	r2, [r7, #26]
 8006e52:	4934      	ldr	r1, [pc, #208]	@ (8006f24 <http_parse_request+0x1c8>)
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 fb77 	bl	8007548 <lwip_strnstr>
 8006e5a:	62b8      	str	r0, [r7, #40]	@ 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8006e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d111      	bne.n	8006e86 <http_parse_request+0x12a>
 8006e62:	e006      	b.n	8006e72 <http_parse_request+0x116>
        data[4] = 0;
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	3304      	adds	r3, #4
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8006e6c:	f06f 030f 	mvn.w	r3, #15
 8006e70:	e045      	b.n	8006efe <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	8b7a      	ldrh	r2, [r7, #26]
 8006e78:	4928      	ldr	r1, [pc, #160]	@ (8006f1c <http_parse_request+0x1c0>)
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fb64 	bl	8007548 <lwip_strnstr>
 8006e80:	62b8      	str	r0, [r7, #40]	@ 0x28
        is_09 = 1;
 8006e82:	2301      	movs	r3, #1
 8006e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d01e      	beq.n	8006ed4 <http_parse_request+0x178>
 8006e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d91a      	bls.n	8006ed4 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8006e9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	4921      	ldr	r1, [pc, #132]	@ (8006f28 <http_parse_request+0x1cc>)
 8006ea4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ea6:	f000 fb4f 	bl	8007548 <lwip_strnstr>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d011      	beq.n	8006ed4 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8006ebc:	8b3b      	ldrh	r3, [r7, #24]
 8006ebe:	697a      	ldr	r2, [r7, #20]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8006ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec8:	6979      	ldr	r1, [r7, #20]
 8006eca:	68b8      	ldr	r0, [r7, #8]
 8006ecc:	f000 f82e 	bl	8006f2c <http_find_file>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	e014      	b.n	8006efe <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f002 f879 	bl	8008fd0 <pbuf_clen>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	891b      	ldrh	r3, [r3, #8]
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eec:	d205      	bcs.n	8006efa <http_parse_request+0x19e>
 8006eee:	8a7b      	ldrh	r3, [r7, #18]
 8006ef0:	2b05      	cmp	r3, #5
 8006ef2:	d802      	bhi.n	8006efa <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8006ef4:	f06f 0304 	mvn.w	r3, #4
 8006ef8:	e001      	b.n	8006efe <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8006efa:	f06f 030f 	mvn.w	r3, #15
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3738      	adds	r7, #56	@ 0x38
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	08013d14 	.word	0x08013d14
 8006f0c:	08013de0 	.word	0x08013de0
 8006f10:	08013d5c 	.word	0x08013d5c
 8006f14:	08013dec 	.word	0x08013dec
 8006f18:	200042a8 	.word	0x200042a8
 8006f1c:	08013df8 	.word	0x08013df8
 8006f20:	08013dfc 	.word	0x08013dfc
 8006f24:	08013e04 	.word	0x08013e04
 8006f28:	08013e08 	.word	0x08013e08

08006f2c <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b092      	sub	sp, #72	@ 0x48
 8006f30:	af02      	add	r7, sp, #8
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  char *params = NULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7f9 f923 	bl	8000194 <strlen>
 8006f4e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d06b      	beq.n	800702e <http_find_file+0x102>
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	4413      	add	r3, r2
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	2b2f      	cmp	r3, #47	@ 0x2f
 8006f62:	d164      	bne.n	800702e <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006f64:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006f66:	4a53      	ldr	r2, [pc, #332]	@ (80070b4 <http_find_file+0x188>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d102      	bne.n	8006f72 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d15d      	bne.n	800702e <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	3b01      	subs	r3, #1
 8006f76:	2b3f      	cmp	r3, #63	@ 0x3f
 8006f78:	bf28      	it	cs
 8006f7a:	233f      	movcs	r3, #63	@ 0x3f
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (copy_len > 0) {
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f88:	4619      	mov	r1, r3
 8006f8a:	484a      	ldr	r0, [pc, #296]	@ (80070b4 <http_find_file+0x188>)
 8006f8c:	f00b ffcf 	bl	8012f2e <memcpy>
      http_uri_buf[copy_len] = 0;
 8006f90:	4a48      	ldr	r2, [pc, #288]	@ (80070b4 <http_find_file+0x188>)
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	4413      	add	r3, r2
 8006f96:	2200      	movs	r2, #0
 8006f98:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9e:	e043      	b.n	8007028 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d028      	beq.n	8006ff8 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006fac:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01e      	beq.n	8006ff2 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006fb4:	4a40      	ldr	r2, [pc, #256]	@ (80070b8 <http_find_file+0x18c>)
 8006fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f7f9 f8e9 	bl	8000194 <strlen>
 8006fc2:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006fc4:	69fa      	ldr	r2, [r7, #28]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	bf28      	it	cs
 8006fcc:	4613      	movcs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	4a38      	ldr	r2, [pc, #224]	@ (80070b4 <http_find_file+0x188>)
 8006fd4:	1898      	adds	r0, r3, r2
 8006fd6:	4a38      	ldr	r2, [pc, #224]	@ (80070b8 <http_find_file+0x18c>)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fda:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	f00b ffa4 	bl	8012f2e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	4413      	add	r3, r2
 8006fec:	4a31      	ldr	r2, [pc, #196]	@ (80070b4 <http_find_file+0x188>)
 8006fee:	2100      	movs	r1, #0
 8006ff0:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8006ff2:	4b30      	ldr	r3, [pc, #192]	@ (80070b4 <http_find_file+0x188>)
 8006ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ff6:	e004      	b.n	8007002 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8006ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80070b8 <http_find_file+0x18c>)
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007000:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007006:	4618      	mov	r0, r3
 8007008:	f7ff fc5a 	bl	80068c0 <fs_open>
 800700c:	4603      	mov	r3, r0
 800700e:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8007010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <http_find_file+0xf6>
        uri = file_name;
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	63bb      	str	r3, [r7, #56]	@ 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8007020:	e005      	b.n	800702e <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8007022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007024:	3301      	adds	r3, #1
 8007026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800702a:	2b04      	cmp	r3, #4
 800702c:	d9b8      	bls.n	8006fa0 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d124      	bne.n	800707e <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	213f      	movs	r1, #63	@ 0x3f
 8007038:	4618      	mov	r0, r3
 800703a:	f00b fe96 	bl	8012d6a <strchr>
 800703e:	6378      	str	r0, [r7, #52]	@ 0x34
    if (params != NULL) {
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8007046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007048:	2200      	movs	r2, #0
 800704a:	701a      	strb	r2, [r3, #0]
      params++;
 800704c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800704e:	3301      	adds	r3, #1
 8007050:	637b      	str	r3, [r7, #52]	@ 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	4611      	mov	r1, r2
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fc31 	bl	80068c0 <fs_open>
 800705e:	4603      	mov	r3, r0
 8007060:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8007062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <http_find_file+0x144>
      file = &hs->file_handle;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800706e:	e006      	b.n	800707e <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	4619      	mov	r1, r3
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f7ff fe2a 	bl	8006cd0 <http_get_404_file>
 800707c:	63b8      	str	r0, [r7, #56]	@ 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8007084:	f107 0308 	add.w	r3, r7, #8
 8007088:	4619      	mov	r1, r3
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fe20 	bl	8006cd0 <http_get_404_file>
 8007090:	63b8      	str	r0, [r7, #56]	@ 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4613      	mov	r3, r2
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f809 	bl	80070bc <http_init_file>
 80070aa:	4603      	mov	r3, r0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3740      	adds	r7, #64	@ 0x40
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	200046a8 	.word	0x200046a8
 80070b8:	08017750 	.word	0x08017750

080070bc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d05c      	beq.n	800718a <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d106      	bne.n	80070e6 <http_init_file+0x2a>
 80070d8:	4b35      	ldr	r3, [pc, #212]	@ (80071b0 <http_init_file+0xf4>)
 80070da:	f640 120b 	movw	r2, #2315	@ 0x90b
 80070de:	4935      	ldr	r1, [pc, #212]	@ (80071b4 <http_init_file+0xf8>)
 80070e0:	4835      	ldr	r0, [pc, #212]	@ (80071b8 <http_init_file+0xfc>)
 80070e2:	f00b fdd5 	bl	8012c90 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da06      	bge.n	800710a <http_init_file+0x4e>
 80070fc:	4b2c      	ldr	r3, [pc, #176]	@ (80071b0 <http_init_file+0xf4>)
 80070fe:	f640 1234 	movw	r2, #2356	@ 0x934
 8007102:	492e      	ldr	r1, [pc, #184]	@ (80071bc <http_init_file+0x100>)
 8007104:	482c      	ldr	r0, [pc, #176]	@ (80071b8 <http_init_file+0xfc>)
 8007106:	f00b fdc3 	bl	8012c90 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	461a      	mov	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    hs->retries = 0;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	7c1b      	ldrb	r3, [r3, #16]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <http_init_file+0x7c>
 800712a:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <http_init_file+0xf4>)
 800712c:	f640 1243 	movw	r2, #2371	@ 0x943
 8007130:	4923      	ldr	r1, [pc, #140]	@ (80071c0 <http_init_file+0x104>)
 8007132:	4821      	ldr	r0, [pc, #132]	@ (80071b8 <http_init_file+0xfc>)
 8007134:	f00b fdac 	bl	8012c90 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d032      	beq.n	80071a4 <http_init_file+0xe8>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	7c1b      	ldrb	r3, [r3, #16]
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	2b00      	cmp	r3, #0
 800714a:	d02b      	beq.n	80071a4 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6998      	ldr	r0, [r3, #24]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	461a      	mov	r2, r3
 8007156:	491b      	ldr	r1, [pc, #108]	@ (80071c4 <http_init_file+0x108>)
 8007158:	f000 f9f6 	bl	8007548 <lwip_strnstr>
 800715c:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01f      	beq.n	80071a4 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	1d1a      	adds	r2, r3, #4
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	699a      	ldr	r2, [r3, #24]
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	441a      	add	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	1ad2      	subs	r2, r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	625a      	str	r2, [r3, #36]	@ 0x24
 8007188:	e00c      	b.n	80071a4 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	625a      	str	r2, [r3, #36]	@ 0x24
    hs->retries = 0;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop
 80071b0:	08013d14 	.word	0x08013d14
 80071b4:	08013e10 	.word	0x08013e10
 80071b8:	08013d5c 	.word	0x08013d5c
 80071bc:	08013e24 	.word	0x08013e24
 80071c0:	08013e44 	.word	0x08013e44
 80071c4:	08013e08 	.word	0x08013e08

080071c8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <http_err+0x1c>
    http_state_free(hs);
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f7ff fc02 	bl	80069e8 <http_state_free>
  }
}
 80071e4:	bf00      	nop
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d101      	bne.n	8007208 <http_sent+0x1c>
    return ERR_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e008      	b.n	800721a <http_sent+0x2e>
  }

  hs->retries = 0;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  http_send(pcb, hs);
 8007210:	6979      	ldr	r1, [r7, #20]
 8007212:	68b8      	ldr	r0, [r7, #8]
 8007214:	f7ff fd25 	bl	8006c62 <http_send>

  return ERR_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3718      	adds	r7, #24
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d107      	bne.n	8007246 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8007236:	2100      	movs	r1, #0
 8007238:	6838      	ldr	r0, [r7, #0]
 800723a:	f7ff fc91 	bl	8006b60 <http_close_conn>
 800723e:	4603      	mov	r3, r0
 8007240:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 8007242:	2300      	movs	r3, #0
 8007244:	e021      	b.n	800728a <http_poll+0x68>
  } else {
    hs->retries++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800724c:	3301      	adds	r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800725c:	2b04      	cmp	r3, #4
 800725e:	d105      	bne.n	800726c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8007260:	68f9      	ldr	r1, [r7, #12]
 8007262:	6838      	ldr	r0, [r7, #0]
 8007264:	f7ff fc7c 	bl	8006b60 <http_close_conn>
      return ERR_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e00e      	b.n	800728a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8007274:	68f9      	ldr	r1, [r7, #12]
 8007276:	6838      	ldr	r0, [r7, #0]
 8007278:	f7ff fcf3 	bl	8006c62 <http_send>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 8007282:	6838      	ldr	r0, [r7, #0]
 8007284:	f007 f970 	bl	800e568 <tcp_output>
      }
    }
  }

  return ERR_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
 80072a0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80072a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <http_recv+0x26>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <http_recv+0x26>
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d111      	bne.n	80072de <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d008      	beq.n	80072d2 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	891b      	ldrh	r3, [r3, #8]
 80072c4:	4619      	mov	r1, r3
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f002 fd3e 	bl	8009d48 <tcp_recved>
      pbuf_free(p);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f001 fdf1 	bl	8008eb4 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80072d2:	6979      	ldr	r1, [r7, #20]
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f7ff fc43 	bl	8006b60 <http_close_conn>
    return ERR_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	e055      	b.n	800738a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	891b      	ldrh	r3, [r3, #8]
 80072e2:	4619      	mov	r1, r3
 80072e4:	68b8      	ldr	r0, [r7, #8]
 80072e6:	f002 fd2f 	bl	8009d48 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d147      	bne.n	8007382 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	6979      	ldr	r1, [r7, #20]
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7ff fd30 	bl	8006d5c <http_parse_request>
 80072fc:	4603      	mov	r3, r0
 80072fe:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8007300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <http_recv+0xa0>
 8007308:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800730c:	f113 0f05 	cmn.w	r3, #5
 8007310:	d010      	beq.n	8007334 <http_recv+0xa0>
 8007312:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007316:	f113 0f10 	cmn.w	r3, #16
 800731a:	d00b      	beq.n	8007334 <http_recv+0xa0>
 800731c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007320:	f113 0f08 	cmn.w	r3, #8
 8007324:	d006      	beq.n	8007334 <http_recv+0xa0>
 8007326:	4b1b      	ldr	r3, [pc, #108]	@ (8007394 <http_recv+0x100>)
 8007328:	f640 2204 	movw	r2, #2564	@ 0xa04
 800732c:	491a      	ldr	r1, [pc, #104]	@ (8007398 <http_recv+0x104>)
 800732e:	481b      	ldr	r0, [pc, #108]	@ (800739c <http_recv+0x108>)
 8007330:	f00b fcae 	bl	8012c90 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8007334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007338:	f113 0f05 	cmn.w	r3, #5
 800733c:	d00b      	beq.n	8007356 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a1b      	ldr	r3, [r3, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d007      	beq.n	8007356 <http_recv+0xc2>
          pbuf_free(hs->req);
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4618      	mov	r0, r3
 800734c:	f001 fdb2 	bl	8008eb4 <pbuf_free>
          hs->req = NULL;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2200      	movs	r2, #0
 8007354:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 fdac 	bl	8008eb4 <pbuf_free>
      if (parsed == ERR_OK) {
 800735c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	68b8      	ldr	r0, [r7, #8]
 8007368:	f7ff fc7b 	bl	8006c62 <http_send>
 800736c:	e00c      	b.n	8007388 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800736e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007372:	f113 0f10 	cmn.w	r3, #16
 8007376:	d107      	bne.n	8007388 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8007378:	6979      	ldr	r1, [r7, #20]
 800737a:	68b8      	ldr	r0, [r7, #8]
 800737c:	f7ff fbf0 	bl	8006b60 <http_close_conn>
 8007380:	e002      	b.n	8007388 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fd96 	bl	8008eb4 <pbuf_free>
    }
  }
  return ERR_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08013d14 	.word	0x08013d14
 8007398:	08013e70 	.word	0x08013e70
 800739c:	08013d5c 	.word	0x08013d5c

080073a0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	4613      	mov	r3, r2
 80073ac:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80073ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <http_accept+0x1c>
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <http_accept+0x22>
    return ERR_VAL;
 80073bc:	f06f 0305 	mvn.w	r3, #5
 80073c0:	e025      	b.n	800740e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80073c2:	2101      	movs	r1, #1
 80073c4:	68b8      	ldr	r0, [r7, #8]
 80073c6:	f003 f9a5 	bl	800a714 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80073ca:	f7ff fadb 	bl	8006984 <http_state_alloc>
 80073ce:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80073d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073da:	e018      	b.n	800740e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	68ba      	ldr	r2, [r7, #8]
 80073e0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80073e2:	6979      	ldr	r1, [r7, #20]
 80073e4:	68b8      	ldr	r0, [r7, #8]
 80073e6:	f003 fb9d 	bl	800ab24 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80073ea:	490b      	ldr	r1, [pc, #44]	@ (8007418 <http_accept+0x78>)
 80073ec:	68b8      	ldr	r0, [r7, #8]
 80073ee:	f003 fba9 	bl	800ab44 <tcp_recv>
  altcp_err(pcb, http_err);
 80073f2:	490a      	ldr	r1, [pc, #40]	@ (800741c <http_accept+0x7c>)
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f003 fbe9 	bl	800abcc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80073fa:	2204      	movs	r2, #4
 80073fc:	4908      	ldr	r1, [pc, #32]	@ (8007420 <http_accept+0x80>)
 80073fe:	68b8      	ldr	r0, [r7, #8]
 8007400:	f003 fc1c 	bl	800ac3c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8007404:	4907      	ldr	r1, [pc, #28]	@ (8007424 <http_accept+0x84>)
 8007406:	68b8      	ldr	r0, [r7, #8]
 8007408:	f003 fbbe 	bl	800ab88 <tcp_sent>

  return ERR_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	08007295 	.word	0x08007295
 800741c:	080071c9 	.word	0x080071c9
 8007420:	08007223 	.word	0x08007223
 8007424:	080071ed 	.word	0x080071ed

08007428 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d029      	beq.n	800748e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800743a:	2101      	movs	r1, #1
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f003 f969 	bl	800a714 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	461a      	mov	r2, r3
 8007446:	4914      	ldr	r1, [pc, #80]	@ (8007498 <httpd_init_pcb+0x70>)
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 faaf 	bl	80099ac <tcp_bind>
 800744e:	4603      	mov	r3, r0
 8007450:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8007452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <httpd_init_pcb+0x40>
 800745a:	4b10      	ldr	r3, [pc, #64]	@ (800749c <httpd_init_pcb+0x74>)
 800745c:	f640 2257 	movw	r2, #2647	@ 0xa57
 8007460:	490f      	ldr	r1, [pc, #60]	@ (80074a0 <httpd_init_pcb+0x78>)
 8007462:	4810      	ldr	r0, [pc, #64]	@ (80074a4 <httpd_init_pcb+0x7c>)
 8007464:	f00b fc14 	bl	8012c90 <iprintf>
    pcb = altcp_listen(pcb);
 8007468:	21ff      	movs	r1, #255	@ 0xff
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f002 fb56 	bl	8009b1c <tcp_listen_with_backlog>
 8007470:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <httpd_init_pcb+0x5e>
 8007478:	4b08      	ldr	r3, [pc, #32]	@ (800749c <httpd_init_pcb+0x74>)
 800747a:	f640 2259 	movw	r2, #2649	@ 0xa59
 800747e:	490a      	ldr	r1, [pc, #40]	@ (80074a8 <httpd_init_pcb+0x80>)
 8007480:	4808      	ldr	r0, [pc, #32]	@ (80074a4 <httpd_init_pcb+0x7c>)
 8007482:	f00b fc05 	bl	8012c90 <iprintf>
    altcp_accept(pcb, http_accept);
 8007486:	4909      	ldr	r1, [pc, #36]	@ (80074ac <httpd_init_pcb+0x84>)
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f003 fbc1 	bl	800ac10 <tcp_accept>
  }
}
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08017888 	.word	0x08017888
 800749c:	08013d14 	.word	0x08013d14
 80074a0:	08013e9c 	.word	0x08013e9c
 80074a4:	08013d5c 	.word	0x08013d5c
 80074a8:	08013eb8 	.word	0x08013eb8
 80074ac:	080073a1 	.word	0x080073a1

080074b0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80074b6:	202e      	movs	r0, #46	@ 0x2e
 80074b8:	f003 fb26 	bl	800ab08 <tcp_new_ip_type>
 80074bc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d106      	bne.n	80074d2 <httpd_init+0x22>
 80074c4:	4b07      	ldr	r3, [pc, #28]	@ (80074e4 <httpd_init+0x34>)
 80074c6:	f640 2272 	movw	r2, #2674	@ 0xa72
 80074ca:	4907      	ldr	r1, [pc, #28]	@ (80074e8 <httpd_init+0x38>)
 80074cc:	4807      	ldr	r0, [pc, #28]	@ (80074ec <httpd_init+0x3c>)
 80074ce:	f00b fbdf 	bl	8012c90 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80074d2:	2150      	movs	r1, #80	@ 0x50
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff ffa7 	bl	8007428 <httpd_init_pcb>
}
 80074da:	bf00      	nop
 80074dc:	3708      	adds	r7, #8
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	08013d14 	.word	0x08013d14
 80074e8:	08013ed8 	.word	0x08013ed8
 80074ec:	08013d5c 	.word	0x08013d5c

080074f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	021b      	lsls	r3, r3, #8
 80074fe:	b21a      	sxth	r2, r3
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	b29b      	uxth	r3, r3
 8007506:	b21b      	sxth	r3, r3
 8007508:	4313      	orrs	r3, r2
 800750a:	b21b      	sxth	r3, r3
 800750c:	b29b      	uxth	r3, r3
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	bc80      	pop	{r7}
 8007516:	4770      	bx	lr

08007518 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	061a      	lsls	r2, r3, #24
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	0a1b      	lsrs	r3, r3, #8
 8007532:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0e1b      	lsrs	r3, r3, #24
 800753c:	4313      	orrs	r3, r2
}
 800753e:	4618      	mov	r0, r3
 8007540:	370c      	adds	r7, #12
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr

08007548 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8007554:	68b8      	ldr	r0, [r7, #8]
 8007556:	f7f8 fe1d 	bl	8000194 <strlen>
 800755a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	e022      	b.n	80075ac <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	e012      	b.n	8007592 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d109      	bne.n	800758c <lwip_strnstr+0x44>
 8007578:	693a      	ldr	r2, [r7, #16]
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	6978      	ldr	r0, [r7, #20]
 800757e:	f00b fc01 	bl	8012d84 <strncmp>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	e00f      	b.n	80075ac <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	3301      	adds	r3, #1
 8007590:	617b      	str	r3, [r7, #20]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d007      	beq.n	80075aa <lwip_strnstr+0x62>
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	441a      	add	r2, r3
 80075a0:	68f9      	ldr	r1, [r7, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	440b      	add	r3, r1
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d9e0      	bls.n	800756c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b089      	sub	sp, #36	@ 0x24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	f003 0301 	and.w	r3, r3, #1
 80075d0:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00d      	beq.n	80075f4 <lwip_standard_chksum+0x40>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	dd0a      	ble.n	80075f4 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	1c53      	adds	r3, r2, #1
 80075e2:	61fb      	str	r3, [r7, #28]
 80075e4:	f107 030e 	add.w	r3, r7, #14
 80075e8:	3301      	adds	r3, #1
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	701a      	strb	r2, [r3, #0]
    len--;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	3b01      	subs	r3, #1
 80075f2:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80075f8:	e00a      	b.n	8007610 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	61ba      	str	r2, [r7, #24]
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
    len -= 2;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	3b02      	subs	r3, #2
 800760e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2b01      	cmp	r3, #1
 8007614:	dcf1      	bgt.n	80075fa <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	dd04      	ble.n	8007626 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800761c:	f107 030e 	add.w	r3, r7, #14
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	7812      	ldrb	r2, [r2, #0]
 8007624:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8007626:	89fb      	ldrh	r3, [r7, #14]
 8007628:	461a      	mov	r2, r3
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	4413      	add	r3, r2
 800762e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	0c1a      	lsrs	r2, r3, #16
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	b29b      	uxth	r3, r3
 8007638:	4413      	add	r3, r2
 800763a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	0c1a      	lsrs	r2, r3, #16
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	b29b      	uxth	r3, r3
 8007644:	4413      	add	r3, r2
 8007646:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	021b      	lsls	r3, r3, #8
 8007652:	b29a      	uxth	r2, r3
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	b2db      	uxtb	r3, r3
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	b29b      	uxth	r3, r3
}
 8007662:	4618      	mov	r0, r3
 8007664:	3724      	adds	r7, #36	@ 0x24
 8007666:	46bd      	mov	sp, r7
 8007668:	bc80      	pop	{r7}
 800766a:	4770      	bx	lr

0800766c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	607b      	str	r3, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	72fb      	strb	r3, [r7, #11]
 800767a:	4613      	mov	r3, r2
 800767c:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	617b      	str	r3, [r7, #20]
 8007686:	e02b      	b.n	80076e0 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	895b      	ldrh	r3, [r3, #10]
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7ff ff8e 	bl	80075b4 <lwip_standard_chksum>
 8007698:	4603      	mov	r3, r0
 800769a:	461a      	mov	r2, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4413      	add	r3, r2
 80076a0:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	0c1a      	lsrs	r2, r3, #16
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	4413      	add	r3, r2
 80076ac:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	895b      	ldrh	r3, [r3, #10]
 80076b2:	f003 0301 	and.w	r3, r3, #1
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00e      	beq.n	80076da <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bf0c      	ite	eq
 80076c2:	2301      	moveq	r3, #1
 80076c4:	2300      	movne	r3, #0
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	0a1b      	lsrs	r3, r3, #8
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	4313      	orrs	r3, r2
 80076d8:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1d0      	bne.n	8007688 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4313      	orrs	r3, r2
 80076fa:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 80076fc:	7afb      	ldrb	r3, [r7, #11]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	4618      	mov	r0, r3
 8007702:	f7ff fef5 	bl	80074f0 <lwip_htons>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4413      	add	r3, r2
 800770e:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8007710:	893b      	ldrh	r3, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f7ff feec 	bl	80074f0 <lwip_htons>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4413      	add	r3, r2
 8007720:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	0c1a      	lsrs	r2, r3, #16
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	b29b      	uxth	r3, r3
 800772a:	4413      	add	r3, r2
 800772c:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	0c1a      	lsrs	r2, r3, #16
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	b29b      	uxth	r3, r3
 8007736:	4413      	add	r3, r2
 8007738:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	b29b      	uxth	r3, r3
 800773e:	43db      	mvns	r3, r3
 8007740:	b29b      	uxth	r3, r3
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	60f8      	str	r0, [r7, #12]
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	460b      	mov	r3, r1
 8007756:	72fb      	strb	r3, [r7, #11]
 8007758:	4613      	mov	r3, r2
 800775a:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	b29b      	uxth	r3, r3
 8007766:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4413      	add	r3, r2
 8007770:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8007772:	6a3b      	ldr	r3, [r7, #32]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	b29b      	uxth	r3, r3
 800777c:	693a      	ldr	r2, [r7, #16]
 800777e:	4413      	add	r3, r2
 8007780:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	0c1b      	lsrs	r3, r3, #16
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	0c1a      	lsrs	r2, r3, #16
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	b29b      	uxth	r3, r3
 8007794:	4413      	add	r3, r2
 8007796:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	0c1a      	lsrs	r2, r3, #16
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	4413      	add	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80077a4:	893a      	ldrh	r2, [r7, #8]
 80077a6:	7af9      	ldrb	r1, [r7, #11]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7ff ff5e 	bl	800766c <inet_cksum_pseudo_base>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af02      	add	r7, sp, #8
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	607b      	str	r3, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	72fb      	strb	r3, [r7, #11]
 80077c8:	4613      	mov	r3, r2
 80077ca:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80077cc:	893a      	ldrh	r2, [r7, #8]
 80077ce:	7af9      	ldrb	r1, [r7, #11]
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f7ff ffb7 	bl	800774a <inet_chksum_pseudo>
 80077dc:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80077f2:	887b      	ldrh	r3, [r7, #2]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7ff fedc 	bl	80075b4 <lwip_standard_chksum>
 80077fc:	4603      	mov	r3, r0
 80077fe:	43db      	mvns	r3, r3
 8007800:	b29b      	uxth	r3, r3
}
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	e02b      	b.n	8007878 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	895b      	ldrh	r3, [r3, #10]
 8007828:	4619      	mov	r1, r3
 800782a:	4610      	mov	r0, r2
 800782c:	f7ff fec2 	bl	80075b4 <lwip_standard_chksum>
 8007830:	4603      	mov	r3, r0
 8007832:	461a      	mov	r2, r3
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	4413      	add	r3, r2
 8007838:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	0c1a      	lsrs	r2, r3, #16
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	b29b      	uxth	r3, r3
 8007842:	4413      	add	r3, r2
 8007844:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	895b      	ldrh	r3, [r3, #10]
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2b00      	cmp	r3, #0
 8007858:	bf0c      	ite	eq
 800785a:	2301      	moveq	r3, #1
 800785c:	2300      	movne	r3, #0
 800785e:	b2db      	uxtb	r3, r3
 8007860:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	b29a      	uxth	r2, r3
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	0a1b      	lsrs	r3, r3, #8
 800786c:	b2db      	uxtb	r3, r3
 800786e:	4313      	orrs	r3, r2
 8007870:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d0      	bne.n	8007820 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	b29a      	uxth	r2, r3
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	0a1b      	lsrs	r3, r3, #8
 800788e:	b2db      	uxtb	r3, r3
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	b29b      	uxth	r3, r3
 8007898:	43db      	mvns	r3, r3
 800789a:	b29b      	uxth	r3, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80078ae:	f00b f865 	bl	801297c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80078b2:	f000 f8d1 	bl	8007a58 <mem_init>
  memp_init();
 80078b6:	f000 fc27 	bl	8008108 <memp_init>
  pbuf_init();
  netif_init();
 80078ba:	f000 fced 	bl	8008298 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80078be:	f007 ff65 	bl	800f78c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80078c2:	f001 fd6d 	bl	80093a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80078c6:	f007 fea7 	bl	800f618 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
	...

080078d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80078de:	4b04      	ldr	r3, [pc, #16]	@ (80078f0 <ptr_to_mem+0x1c>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	4413      	add	r3, r2
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bc80      	pop	{r7}
 80078ee:	4770      	bx	lr
 80078f0:	20004700 	.word	0x20004700

080078f4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80078fc:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <mem_to_ptr+0x1c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	b29b      	uxth	r3, r3
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	bc80      	pop	{r7}
 800790e:	4770      	bx	lr
 8007910:	20004700 	.word	0x20004700

08007914 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8007914:	b590      	push	{r4, r7, lr}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800791c:	4b45      	ldr	r3, [pc, #276]	@ (8007a34 <plug_holes+0x120>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d206      	bcs.n	8007934 <plug_holes+0x20>
 8007926:	4b44      	ldr	r3, [pc, #272]	@ (8007a38 <plug_holes+0x124>)
 8007928:	f240 12df 	movw	r2, #479	@ 0x1df
 800792c:	4943      	ldr	r1, [pc, #268]	@ (8007a3c <plug_holes+0x128>)
 800792e:	4844      	ldr	r0, [pc, #272]	@ (8007a40 <plug_holes+0x12c>)
 8007930:	f00b f9ae 	bl	8012c90 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007934:	4b43      	ldr	r3, [pc, #268]	@ (8007a44 <plug_holes+0x130>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	429a      	cmp	r2, r3
 800793c:	d306      	bcc.n	800794c <plug_holes+0x38>
 800793e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a38 <plug_holes+0x124>)
 8007940:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8007944:	4940      	ldr	r1, [pc, #256]	@ (8007a48 <plug_holes+0x134>)
 8007946:	483e      	ldr	r0, [pc, #248]	@ (8007a40 <plug_holes+0x12c>)
 8007948:	f00b f9a2 	bl	8012c90 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	791b      	ldrb	r3, [r3, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d006      	beq.n	8007962 <plug_holes+0x4e>
 8007954:	4b38      	ldr	r3, [pc, #224]	@ (8007a38 <plug_holes+0x124>)
 8007956:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800795a:	493c      	ldr	r1, [pc, #240]	@ (8007a4c <plug_holes+0x138>)
 800795c:	4838      	ldr	r0, [pc, #224]	@ (8007a40 <plug_holes+0x12c>)
 800795e:	f00b f997 	bl	8012c90 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800796a:	d906      	bls.n	800797a <plug_holes+0x66>
 800796c:	4b32      	ldr	r3, [pc, #200]	@ (8007a38 <plug_holes+0x124>)
 800796e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8007972:	4937      	ldr	r1, [pc, #220]	@ (8007a50 <plug_holes+0x13c>)
 8007974:	4832      	ldr	r0, [pc, #200]	@ (8007a40 <plug_holes+0x12c>)
 8007976:	f00b f98b 	bl	8012c90 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff ffa8 	bl	80078d4 <ptr_to_mem>
 8007984:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d024      	beq.n	80079d8 <plug_holes+0xc4>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d120      	bne.n	80079d8 <plug_holes+0xc4>
 8007996:	4b2b      	ldr	r3, [pc, #172]	@ (8007a44 <plug_holes+0x130>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	429a      	cmp	r2, r3
 800799e:	d01b      	beq.n	80079d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80079a0:	4b2c      	ldr	r3, [pc, #176]	@ (8007a54 <plug_holes+0x140>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d102      	bne.n	80079b0 <plug_holes+0x9c>
      lfree = mem;
 80079aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007a54 <plug_holes+0x140>)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	881a      	ldrh	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80079c0:	d00a      	beq.n	80079d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff ff84 	bl	80078d4 <ptr_to_mem>
 80079cc:	4604      	mov	r4, r0
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff ff90 	bl	80078f4 <mem_to_ptr>
 80079d4:	4603      	mov	r3, r0
 80079d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	885b      	ldrh	r3, [r3, #2]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff ff79 	bl	80078d4 <ptr_to_mem>
 80079e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d01f      	beq.n	8007a2c <plug_holes+0x118>
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	791b      	ldrb	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d11b      	bne.n	8007a2c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80079f4:	4b17      	ldr	r3, [pc, #92]	@ (8007a54 <plug_holes+0x140>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d102      	bne.n	8007a04 <plug_holes+0xf0>
      lfree = pmem;
 80079fe:	4a15      	ldr	r2, [pc, #84]	@ (8007a54 <plug_holes+0x140>)
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007a14:	d00a      	beq.n	8007a2c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff ff5a 	bl	80078d4 <ptr_to_mem>
 8007a20:	4604      	mov	r4, r0
 8007a22:	68b8      	ldr	r0, [r7, #8]
 8007a24:	f7ff ff66 	bl	80078f4 <mem_to_ptr>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd90      	pop	{r4, r7, pc}
 8007a34:	20004700 	.word	0x20004700
 8007a38:	08013ef4 	.word	0x08013ef4
 8007a3c:	08013f24 	.word	0x08013f24
 8007a40:	08013f3c 	.word	0x08013f3c
 8007a44:	20004704 	.word	0x20004704
 8007a48:	08013f64 	.word	0x08013f64
 8007a4c:	08013f80 	.word	0x08013f80
 8007a50:	08013f9c 	.word	0x08013f9c
 8007a54:	2000470c 	.word	0x2000470c

08007a58 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad4 <mem_init+0x7c>)
 8007a60:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007a64:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8007a66:	4b1b      	ldr	r3, [pc, #108]	@ (8007ad4 <mem_init+0x7c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007a72:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007a80:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8007a84:	f7ff ff26 	bl	80078d4 <ptr_to_mem>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4a13      	ldr	r2, [pc, #76]	@ (8007ad8 <mem_init+0x80>)
 8007a8c:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8007a8e:	4b12      	ldr	r3, [pc, #72]	@ (8007ad8 <mem_init+0x80>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2201      	movs	r2, #1
 8007a94:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007a96:	4b10      	ldr	r3, [pc, #64]	@ (8007ad8 <mem_init+0x80>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007a9e:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad8 <mem_init+0x80>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8007aa8:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <mem_init+0x7c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a0b      	ldr	r2, [pc, #44]	@ (8007adc <mem_init+0x84>)
 8007ab0:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007ab2:	480b      	ldr	r0, [pc, #44]	@ (8007ae0 <mem_init+0x88>)
 8007ab4:	f00a ff70 	bl	8012998 <sys_mutex_new>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d006      	beq.n	8007acc <mem_init+0x74>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007abe:	4b09      	ldr	r3, [pc, #36]	@ (8007ae4 <mem_init+0x8c>)
 8007ac0:	f240 221f 	movw	r2, #543	@ 0x21f
 8007ac4:	4908      	ldr	r1, [pc, #32]	@ (8007ae8 <mem_init+0x90>)
 8007ac6:	4809      	ldr	r0, [pc, #36]	@ (8007aec <mem_init+0x94>)
 8007ac8:	f00b f8e2 	bl	8012c90 <iprintf>
  }
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	20004700 	.word	0x20004700
 8007ad8:	20004704 	.word	0x20004704
 8007adc:	2000470c 	.word	0x2000470c
 8007ae0:	20004708 	.word	0x20004708
 8007ae4:	08013ef4 	.word	0x08013ef4
 8007ae8:	08013fc8 	.word	0x08013fc8
 8007aec:	08013f3c 	.word	0x08013f3c

08007af0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fefb 	bl	80078f4 <mem_to_ptr>
 8007afe:	4603      	mov	r3, r0
 8007b00:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fee4 	bl	80078d4 <ptr_to_mem>
 8007b0c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	885b      	ldrh	r3, [r3, #2]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fede 	bl	80078d4 <ptr_to_mem>
 8007b18:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b22:	d818      	bhi.n	8007b56 <mem_link_valid+0x66>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b2c:	d813      	bhi.n	8007b56 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007b32:	8afa      	ldrh	r2, [r7, #22]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d004      	beq.n	8007b42 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	8afa      	ldrh	r2, [r7, #22]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d109      	bne.n	8007b56 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007b42:	4b08      	ldr	r3, [pc, #32]	@ (8007b64 <mem_link_valid+0x74>)
 8007b44:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d006      	beq.n	8007b5a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	8afa      	ldrh	r2, [r7, #22]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d001      	beq.n	8007b5a <mem_link_valid+0x6a>
    return 0;
 8007b56:	2300      	movs	r3, #0
 8007b58:	e000      	b.n	8007b5c <mem_link_valid+0x6c>
  }
  return 1;
 8007b5a:	2301      	movs	r3, #1
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3718      	adds	r7, #24
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	20004704 	.word	0x20004704

08007b68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b088      	sub	sp, #32
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d070      	beq.n	8007c58 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00d      	beq.n	8007b9c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007b80:	4b37      	ldr	r3, [pc, #220]	@ (8007c60 <mem_free+0xf8>)
 8007b82:	f240 2273 	movw	r2, #627	@ 0x273
 8007b86:	4937      	ldr	r1, [pc, #220]	@ (8007c64 <mem_free+0xfc>)
 8007b88:	4837      	ldr	r0, [pc, #220]	@ (8007c68 <mem_free+0x100>)
 8007b8a:	f00b f881 	bl	8012c90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007b8e:	f00a ff61 	bl	8012a54 <sys_arch_protect>
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	68f8      	ldr	r0, [r7, #12]
 8007b96:	f00a ff6b 	bl	8012a70 <sys_arch_unprotect>
    return;
 8007b9a:	e05e      	b.n	8007c5a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3b08      	subs	r3, #8
 8007ba0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007ba2:	4b32      	ldr	r3, [pc, #200]	@ (8007c6c <mem_free+0x104>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69fa      	ldr	r2, [r7, #28]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d306      	bcc.n	8007bba <mem_free+0x52>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f103 020c 	add.w	r2, r3, #12
 8007bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007c70 <mem_free+0x108>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d90d      	bls.n	8007bd6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007bba:	4b29      	ldr	r3, [pc, #164]	@ (8007c60 <mem_free+0xf8>)
 8007bbc:	f240 227f 	movw	r2, #639	@ 0x27f
 8007bc0:	492c      	ldr	r1, [pc, #176]	@ (8007c74 <mem_free+0x10c>)
 8007bc2:	4829      	ldr	r0, [pc, #164]	@ (8007c68 <mem_free+0x100>)
 8007bc4:	f00b f864 	bl	8012c90 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007bc8:	f00a ff44 	bl	8012a54 <sys_arch_protect>
 8007bcc:	6138      	str	r0, [r7, #16]
 8007bce:	6938      	ldr	r0, [r7, #16]
 8007bd0:	f00a ff4e 	bl	8012a70 <sys_arch_unprotect>
    return;
 8007bd4:	e041      	b.n	8007c5a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007bd6:	4828      	ldr	r0, [pc, #160]	@ (8007c78 <mem_free+0x110>)
 8007bd8:	f00a fefa 	bl	80129d0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	791b      	ldrb	r3, [r3, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d110      	bne.n	8007c06 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007be4:	4b1e      	ldr	r3, [pc, #120]	@ (8007c60 <mem_free+0xf8>)
 8007be6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007bea:	4924      	ldr	r1, [pc, #144]	@ (8007c7c <mem_free+0x114>)
 8007bec:	481e      	ldr	r0, [pc, #120]	@ (8007c68 <mem_free+0x100>)
 8007bee:	f00b f84f 	bl	8012c90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007bf2:	4821      	ldr	r0, [pc, #132]	@ (8007c78 <mem_free+0x110>)
 8007bf4:	f00a fefb 	bl	80129ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007bf8:	f00a ff2c 	bl	8012a54 <sys_arch_protect>
 8007bfc:	6178      	str	r0, [r7, #20]
 8007bfe:	6978      	ldr	r0, [r7, #20]
 8007c00:	f00a ff36 	bl	8012a70 <sys_arch_unprotect>
    return;
 8007c04:	e029      	b.n	8007c5a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8007c06:	69f8      	ldr	r0, [r7, #28]
 8007c08:	f7ff ff72 	bl	8007af0 <mem_link_valid>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d110      	bne.n	8007c34 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007c12:	4b13      	ldr	r3, [pc, #76]	@ (8007c60 <mem_free+0xf8>)
 8007c14:	f240 2295 	movw	r2, #661	@ 0x295
 8007c18:	4919      	ldr	r1, [pc, #100]	@ (8007c80 <mem_free+0x118>)
 8007c1a:	4813      	ldr	r0, [pc, #76]	@ (8007c68 <mem_free+0x100>)
 8007c1c:	f00b f838 	bl	8012c90 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007c20:	4815      	ldr	r0, [pc, #84]	@ (8007c78 <mem_free+0x110>)
 8007c22:	f00a fee4 	bl	80129ee <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007c26:	f00a ff15 	bl	8012a54 <sys_arch_protect>
 8007c2a:	61b8      	str	r0, [r7, #24]
 8007c2c:	69b8      	ldr	r0, [r7, #24]
 8007c2e:	f00a ff1f 	bl	8012a70 <sys_arch_unprotect>
    return;
 8007c32:	e012      	b.n	8007c5a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	2200      	movs	r2, #0
 8007c38:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007c3a:	4b12      	ldr	r3, [pc, #72]	@ (8007c84 <mem_free+0x11c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d202      	bcs.n	8007c4a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007c44:	4a0f      	ldr	r2, [pc, #60]	@ (8007c84 <mem_free+0x11c>)
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007c4a:	69f8      	ldr	r0, [r7, #28]
 8007c4c:	f7ff fe62 	bl	8007914 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007c50:	4809      	ldr	r0, [pc, #36]	@ (8007c78 <mem_free+0x110>)
 8007c52:	f00a fecc 	bl	80129ee <sys_mutex_unlock>
 8007c56:	e000      	b.n	8007c5a <mem_free+0xf2>
    return;
 8007c58:	bf00      	nop
}
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	08013ef4 	.word	0x08013ef4
 8007c64:	08013fe4 	.word	0x08013fe4
 8007c68:	08013f3c 	.word	0x08013f3c
 8007c6c:	20004700 	.word	0x20004700
 8007c70:	20004704 	.word	0x20004704
 8007c74:	08014008 	.word	0x08014008
 8007c78:	20004708 	.word	0x20004708
 8007c7c:	08014024 	.word	0x08014024
 8007c80:	0801404c 	.word	0x0801404c
 8007c84:	2000470c 	.word	0x2000470c

08007c88 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007c94:	887b      	ldrh	r3, [r7, #2]
 8007c96:	3303      	adds	r3, #3
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007ca0:	8bfb      	ldrh	r3, [r7, #30]
 8007ca2:	2b0b      	cmp	r3, #11
 8007ca4:	d801      	bhi.n	8007caa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007caa:	8bfb      	ldrh	r3, [r7, #30]
 8007cac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007cb0:	d803      	bhi.n	8007cba <mem_trim+0x32>
 8007cb2:	8bfa      	ldrh	r2, [r7, #30]
 8007cb4:	887b      	ldrh	r3, [r7, #2]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d201      	bcs.n	8007cbe <mem_trim+0x36>
    return NULL;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	e0d8      	b.n	8007e70 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007cbe:	4b6e      	ldr	r3, [pc, #440]	@ (8007e78 <mem_trim+0x1f0>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d304      	bcc.n	8007cd2 <mem_trim+0x4a>
 8007cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8007e7c <mem_trim+0x1f4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	429a      	cmp	r2, r3
 8007cd0:	d306      	bcc.n	8007ce0 <mem_trim+0x58>
 8007cd2:	4b6b      	ldr	r3, [pc, #428]	@ (8007e80 <mem_trim+0x1f8>)
 8007cd4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8007cd8:	496a      	ldr	r1, [pc, #424]	@ (8007e84 <mem_trim+0x1fc>)
 8007cda:	486b      	ldr	r0, [pc, #428]	@ (8007e88 <mem_trim+0x200>)
 8007cdc:	f00a ffd8 	bl	8012c90 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007ce0:	4b65      	ldr	r3, [pc, #404]	@ (8007e78 <mem_trim+0x1f0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d304      	bcc.n	8007cf4 <mem_trim+0x6c>
 8007cea:	4b64      	ldr	r3, [pc, #400]	@ (8007e7c <mem_trim+0x1f4>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d307      	bcc.n	8007d04 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007cf4:	f00a feae 	bl	8012a54 <sys_arch_protect>
 8007cf8:	60b8      	str	r0, [r7, #8]
 8007cfa:	68b8      	ldr	r0, [r7, #8]
 8007cfc:	f00a feb8 	bl	8012a70 <sys_arch_unprotect>
    return rmem;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	e0b5      	b.n	8007e70 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	3b08      	subs	r3, #8
 8007d08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007d0a:	69b8      	ldr	r0, [r7, #24]
 8007d0c:	f7ff fdf2 	bl	80078f4 <mem_to_ptr>
 8007d10:	4603      	mov	r3, r0
 8007d12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	881a      	ldrh	r2, [r3, #0]
 8007d18:	8afb      	ldrh	r3, [r7, #22]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	3b08      	subs	r3, #8
 8007d20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007d22:	8bfa      	ldrh	r2, [r7, #30]
 8007d24:	8abb      	ldrh	r3, [r7, #20]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d906      	bls.n	8007d38 <mem_trim+0xb0>
 8007d2a:	4b55      	ldr	r3, [pc, #340]	@ (8007e80 <mem_trim+0x1f8>)
 8007d2c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007d30:	4956      	ldr	r1, [pc, #344]	@ (8007e8c <mem_trim+0x204>)
 8007d32:	4855      	ldr	r0, [pc, #340]	@ (8007e88 <mem_trim+0x200>)
 8007d34:	f00a ffac 	bl	8012c90 <iprintf>
  if (newsize > size) {
 8007d38:	8bfa      	ldrh	r2, [r7, #30]
 8007d3a:	8abb      	ldrh	r3, [r7, #20]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d901      	bls.n	8007d44 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	e095      	b.n	8007e70 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007d44:	8bfa      	ldrh	r2, [r7, #30]
 8007d46:	8abb      	ldrh	r3, [r7, #20]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d101      	bne.n	8007d50 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	e08f      	b.n	8007e70 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007d50:	484f      	ldr	r0, [pc, #316]	@ (8007e90 <mem_trim+0x208>)
 8007d52:	f00a fe3d 	bl	80129d0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff fdba 	bl	80078d4 <ptr_to_mem>
 8007d60:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d13f      	bne.n	8007dea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007d72:	d106      	bne.n	8007d82 <mem_trim+0xfa>
 8007d74:	4b42      	ldr	r3, [pc, #264]	@ (8007e80 <mem_trim+0x1f8>)
 8007d76:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007d7a:	4946      	ldr	r1, [pc, #280]	@ (8007e94 <mem_trim+0x20c>)
 8007d7c:	4842      	ldr	r0, [pc, #264]	@ (8007e88 <mem_trim+0x200>)
 8007d7e:	f00a ff87 	bl	8012c90 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007d88:	8afa      	ldrh	r2, [r7, #22]
 8007d8a:	8bfb      	ldrh	r3, [r7, #30]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3308      	adds	r3, #8
 8007d92:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007d94:	4b40      	ldr	r3, [pc, #256]	@ (8007e98 <mem_trim+0x210>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d106      	bne.n	8007dac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007d9e:	89fb      	ldrh	r3, [r7, #14]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fd97 	bl	80078d4 <ptr_to_mem>
 8007da6:	4603      	mov	r3, r0
 8007da8:	4a3b      	ldr	r2, [pc, #236]	@ (8007e98 <mem_trim+0x210>)
 8007daa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007dac:	89fb      	ldrh	r3, [r7, #14]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fd90 	bl	80078d4 <ptr_to_mem>
 8007db4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2200      	movs	r2, #0
 8007dba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	89ba      	ldrh	r2, [r7, #12]
 8007dc0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	8afa      	ldrh	r2, [r7, #22]
 8007dc6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	89fa      	ldrh	r2, [r7, #14]
 8007dcc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007dd6:	d047      	beq.n	8007e68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7ff fd79 	bl	80078d4 <ptr_to_mem>
 8007de2:	4602      	mov	r2, r0
 8007de4:	89fb      	ldrh	r3, [r7, #14]
 8007de6:	8053      	strh	r3, [r2, #2]
 8007de8:	e03e      	b.n	8007e68 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007dea:	8bfb      	ldrh	r3, [r7, #30]
 8007dec:	f103 0214 	add.w	r2, r3, #20
 8007df0:	8abb      	ldrh	r3, [r7, #20]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d838      	bhi.n	8007e68 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007df6:	8afa      	ldrh	r2, [r7, #22]
 8007df8:	8bfb      	ldrh	r3, [r7, #30]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	3308      	adds	r3, #8
 8007e00:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	881b      	ldrh	r3, [r3, #0]
 8007e06:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e0a:	d106      	bne.n	8007e1a <mem_trim+0x192>
 8007e0c:	4b1c      	ldr	r3, [pc, #112]	@ (8007e80 <mem_trim+0x1f8>)
 8007e0e:	f240 3216 	movw	r2, #790	@ 0x316
 8007e12:	4920      	ldr	r1, [pc, #128]	@ (8007e94 <mem_trim+0x20c>)
 8007e14:	481c      	ldr	r0, [pc, #112]	@ (8007e88 <mem_trim+0x200>)
 8007e16:	f00a ff3b 	bl	8012c90 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007e1a:	89fb      	ldrh	r3, [r7, #14]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff fd59 	bl	80078d4 <ptr_to_mem>
 8007e22:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007e24:	4b1c      	ldr	r3, [pc, #112]	@ (8007e98 <mem_trim+0x210>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	693a      	ldr	r2, [r7, #16]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d202      	bcs.n	8007e34 <mem_trim+0x1ac>
      lfree = mem2;
 8007e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8007e98 <mem_trim+0x210>)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	2200      	movs	r2, #0
 8007e38:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	881a      	ldrh	r2, [r3, #0]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	8afa      	ldrh	r2, [r7, #22]
 8007e46:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	89fa      	ldrh	r2, [r7, #14]
 8007e4c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007e56:	d007      	beq.n	8007e68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7ff fd39 	bl	80078d4 <ptr_to_mem>
 8007e62:	4602      	mov	r2, r0
 8007e64:	89fb      	ldrh	r3, [r7, #14]
 8007e66:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007e68:	4809      	ldr	r0, [pc, #36]	@ (8007e90 <mem_trim+0x208>)
 8007e6a:	f00a fdc0 	bl	80129ee <sys_mutex_unlock>
  return rmem;
 8007e6e:	687b      	ldr	r3, [r7, #4]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20004700 	.word	0x20004700
 8007e7c:	20004704 	.word	0x20004704
 8007e80:	08013ef4 	.word	0x08013ef4
 8007e84:	08014080 	.word	0x08014080
 8007e88:	08013f3c 	.word	0x08013f3c
 8007e8c:	08014098 	.word	0x08014098
 8007e90:	20004708 	.word	0x20004708
 8007e94:	080140b8 	.word	0x080140b8
 8007e98:	2000470c 	.word	0x2000470c

08007e9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007ea6:	88fb      	ldrh	r3, [r7, #6]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <mem_malloc+0x14>
    return NULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e0e2      	b.n	8008076 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007eb0:	88fb      	ldrh	r3, [r7, #6]
 8007eb2:	3303      	adds	r3, #3
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f023 0303 	bic.w	r3, r3, #3
 8007eba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007ebc:	8bbb      	ldrh	r3, [r7, #28]
 8007ebe:	2b0b      	cmp	r3, #11
 8007ec0:	d801      	bhi.n	8007ec6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007ec2:	230c      	movs	r3, #12
 8007ec4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007ec6:	8bbb      	ldrh	r3, [r7, #28]
 8007ec8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007ecc:	d803      	bhi.n	8007ed6 <mem_malloc+0x3a>
 8007ece:	8bba      	ldrh	r2, [r7, #28]
 8007ed0:	88fb      	ldrh	r3, [r7, #6]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d201      	bcs.n	8007eda <mem_malloc+0x3e>
    return NULL;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e0cd      	b.n	8008076 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007eda:	4869      	ldr	r0, [pc, #420]	@ (8008080 <mem_malloc+0x1e4>)
 8007edc:	f00a fd78 	bl	80129d0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ee0:	4b68      	ldr	r3, [pc, #416]	@ (8008084 <mem_malloc+0x1e8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff fd05 	bl	80078f4 <mem_to_ptr>
 8007eea:	4603      	mov	r3, r0
 8007eec:	83fb      	strh	r3, [r7, #30]
 8007eee:	e0b7      	b.n	8008060 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007ef0:	8bfb      	ldrh	r3, [r7, #30]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fcee 	bl	80078d4 <ptr_to_mem>
 8007ef8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	791b      	ldrb	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f040 80a7 	bne.w	8008052 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	8bfb      	ldrh	r3, [r7, #30]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f1a3 0208 	sub.w	r2, r3, #8
 8007f12:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007f14:	429a      	cmp	r2, r3
 8007f16:	f0c0 809c 	bcc.w	8008052 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	8bfb      	ldrh	r3, [r7, #30]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	f1a3 0208 	sub.w	r2, r3, #8
 8007f28:	8bbb      	ldrh	r3, [r7, #28]
 8007f2a:	3314      	adds	r3, #20
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d333      	bcc.n	8007f98 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007f30:	8bfa      	ldrh	r2, [r7, #30]
 8007f32:	8bbb      	ldrh	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3308      	adds	r3, #8
 8007f3a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007f3c:	8a7b      	ldrh	r3, [r7, #18]
 8007f3e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f42:	d106      	bne.n	8007f52 <mem_malloc+0xb6>
 8007f44:	4b50      	ldr	r3, [pc, #320]	@ (8008088 <mem_malloc+0x1ec>)
 8007f46:	f240 3287 	movw	r2, #903	@ 0x387
 8007f4a:	4950      	ldr	r1, [pc, #320]	@ (800808c <mem_malloc+0x1f0>)
 8007f4c:	4850      	ldr	r0, [pc, #320]	@ (8008090 <mem_malloc+0x1f4>)
 8007f4e:	f00a fe9f 	bl	8012c90 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007f52:	8a7b      	ldrh	r3, [r7, #18]
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7ff fcbd 	bl	80078d4 <ptr_to_mem>
 8007f5a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	881a      	ldrh	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8bfa      	ldrh	r2, [r7, #30]
 8007f6e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	8a7a      	ldrh	r2, [r7, #18]
 8007f74:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f84:	d00b      	beq.n	8007f9e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7ff fca2 	bl	80078d4 <ptr_to_mem>
 8007f90:	4602      	mov	r2, r0
 8007f92:	8a7b      	ldrh	r3, [r7, #18]
 8007f94:	8053      	strh	r3, [r2, #2]
 8007f96:	e002      	b.n	8007f9e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007f9e:	4b39      	ldr	r3, [pc, #228]	@ (8008084 <mem_malloc+0x1e8>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d127      	bne.n	8007ff8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007fa8:	4b36      	ldr	r3, [pc, #216]	@ (8008084 <mem_malloc+0x1e8>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007fae:	e005      	b.n	8007fbc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	881b      	ldrh	r3, [r3, #0]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fc8d 	bl	80078d4 <ptr_to_mem>
 8007fba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	791b      	ldrb	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d004      	beq.n	8007fce <mem_malloc+0x132>
 8007fc4:	4b33      	ldr	r3, [pc, #204]	@ (8008094 <mem_malloc+0x1f8>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d1f0      	bne.n	8007fb0 <mem_malloc+0x114>
          }
          lfree = cur;
 8007fce:	4a2d      	ldr	r2, [pc, #180]	@ (8008084 <mem_malloc+0x1e8>)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008084 <mem_malloc+0x1e8>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8008094 <mem_malloc+0x1f8>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d00b      	beq.n	8007ff8 <mem_malloc+0x15c>
 8007fe0:	4b28      	ldr	r3, [pc, #160]	@ (8008084 <mem_malloc+0x1e8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	791b      	ldrb	r3, [r3, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d006      	beq.n	8007ff8 <mem_malloc+0x15c>
 8007fea:	4b27      	ldr	r3, [pc, #156]	@ (8008088 <mem_malloc+0x1ec>)
 8007fec:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8007ff0:	4929      	ldr	r1, [pc, #164]	@ (8008098 <mem_malloc+0x1fc>)
 8007ff2:	4827      	ldr	r0, [pc, #156]	@ (8008090 <mem_malloc+0x1f4>)
 8007ff4:	f00a fe4c 	bl	8012c90 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007ff8:	4821      	ldr	r0, [pc, #132]	@ (8008080 <mem_malloc+0x1e4>)
 8007ffa:	f00a fcf8 	bl	80129ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007ffe:	8bba      	ldrh	r2, [r7, #28]
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	4413      	add	r3, r2
 8008004:	3308      	adds	r3, #8
 8008006:	4a23      	ldr	r2, [pc, #140]	@ (8008094 <mem_malloc+0x1f8>)
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	4293      	cmp	r3, r2
 800800c:	d906      	bls.n	800801c <mem_malloc+0x180>
 800800e:	4b1e      	ldr	r3, [pc, #120]	@ (8008088 <mem_malloc+0x1ec>)
 8008010:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8008014:	4921      	ldr	r1, [pc, #132]	@ (800809c <mem_malloc+0x200>)
 8008016:	481e      	ldr	r0, [pc, #120]	@ (8008090 <mem_malloc+0x1f4>)
 8008018:	f00a fe3a 	bl	8012c90 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <mem_malloc+0x198>
 8008026:	4b18      	ldr	r3, [pc, #96]	@ (8008088 <mem_malloc+0x1ec>)
 8008028:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800802c:	491c      	ldr	r1, [pc, #112]	@ (80080a0 <mem_malloc+0x204>)
 800802e:	4818      	ldr	r0, [pc, #96]	@ (8008090 <mem_malloc+0x1f4>)
 8008030:	f00a fe2e 	bl	8012c90 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d006      	beq.n	800804c <mem_malloc+0x1b0>
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <mem_malloc+0x1ec>)
 8008040:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8008044:	4917      	ldr	r1, [pc, #92]	@ (80080a4 <mem_malloc+0x208>)
 8008046:	4812      	ldr	r0, [pc, #72]	@ (8008090 <mem_malloc+0x1f4>)
 8008048:	f00a fe22 	bl	8012c90 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	3308      	adds	r3, #8
 8008050:	e011      	b.n	8008076 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008052:	8bfb      	ldrh	r3, [r7, #30]
 8008054:	4618      	mov	r0, r3
 8008056:	f7ff fc3d 	bl	80078d4 <ptr_to_mem>
 800805a:	4603      	mov	r3, r0
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008060:	8bfa      	ldrh	r2, [r7, #30]
 8008062:	8bbb      	ldrh	r3, [r7, #28]
 8008064:	f5c3 53a0 	rsb	r3, r3, #5120	@ 0x1400
 8008068:	429a      	cmp	r2, r3
 800806a:	f4ff af41 	bcc.w	8007ef0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800806e:	4804      	ldr	r0, [pc, #16]	@ (8008080 <mem_malloc+0x1e4>)
 8008070:	f00a fcbd 	bl	80129ee <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20004708 	.word	0x20004708
 8008084:	2000470c 	.word	0x2000470c
 8008088:	08013ef4 	.word	0x08013ef4
 800808c:	080140b8 	.word	0x080140b8
 8008090:	08013f3c 	.word	0x08013f3c
 8008094:	20004704 	.word	0x20004704
 8008098:	080140cc 	.word	0x080140cc
 800809c:	080140e8 	.word	0x080140e8
 80080a0:	08014118 	.word	0x08014118
 80080a4:	08014148 	.word	0x08014148

080080a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	3303      	adds	r3, #3
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]
 80080c8:	e011      	b.n	80080ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	4413      	add	r3, r2
 80080e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	3301      	adds	r3, #1
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	885b      	ldrh	r3, [r3, #2]
 80080f2:	461a      	mov	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4293      	cmp	r3, r2
 80080f8:	dbe7      	blt.n	80080ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80080fa:	bf00      	nop
 80080fc:	bf00      	nop
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	bc80      	pop	{r7}
 8008104:	4770      	bx	lr
	...

08008108 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800810e:	2300      	movs	r3, #0
 8008110:	80fb      	strh	r3, [r7, #6]
 8008112:	e009      	b.n	8008128 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	4a08      	ldr	r2, [pc, #32]	@ (8008138 <memp_init+0x30>)
 8008118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff ffc3 	bl	80080a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	3301      	adds	r3, #1
 8008126:	80fb      	strh	r3, [r7, #6]
 8008128:	88fb      	ldrh	r3, [r7, #6]
 800812a:	2b0c      	cmp	r3, #12
 800812c:	d9f2      	bls.n	8008114 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	08017814 	.word	0x08017814

0800813c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008144:	f00a fc86 	bl	8012a54 <sys_arch_protect>
 8008148:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d015      	beq.n	8008184 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f003 0303 	and.w	r3, r3, #3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <do_memp_malloc_pool+0x3e>
 800816c:	4b09      	ldr	r3, [pc, #36]	@ (8008194 <do_memp_malloc_pool+0x58>)
 800816e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8008172:	4909      	ldr	r1, [pc, #36]	@ (8008198 <do_memp_malloc_pool+0x5c>)
 8008174:	4809      	ldr	r0, [pc, #36]	@ (800819c <do_memp_malloc_pool+0x60>)
 8008176:	f00a fd8b 	bl	8012c90 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f00a fc78 	bl	8012a70 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	e003      	b.n	800818c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f00a fc73 	bl	8012a70 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	0801416c 	.word	0x0801416c
 8008198:	0801419c 	.word	0x0801419c
 800819c:	080141c0 	.word	0x080141c0

080081a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	4603      	mov	r3, r0
 80081a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	2b0c      	cmp	r3, #12
 80081ae:	d908      	bls.n	80081c2 <memp_malloc+0x22>
 80081b0:	4b0a      	ldr	r3, [pc, #40]	@ (80081dc <memp_malloc+0x3c>)
 80081b2:	f240 1257 	movw	r2, #343	@ 0x157
 80081b6:	490a      	ldr	r1, [pc, #40]	@ (80081e0 <memp_malloc+0x40>)
 80081b8:	480a      	ldr	r0, [pc, #40]	@ (80081e4 <memp_malloc+0x44>)
 80081ba:	f00a fd69 	bl	8012c90 <iprintf>
 80081be:	2300      	movs	r3, #0
 80081c0:	e008      	b.n	80081d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80081c2:	79fb      	ldrb	r3, [r7, #7]
 80081c4:	4a08      	ldr	r2, [pc, #32]	@ (80081e8 <memp_malloc+0x48>)
 80081c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ffb6 	bl	800813c <do_memp_malloc_pool>
 80081d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80081d2:	68fb      	ldr	r3, [r7, #12]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0801416c 	.word	0x0801416c
 80081e0:	080141fc 	.word	0x080141fc
 80081e4:	080141c0 	.word	0x080141c0
 80081e8:	08017814 	.word	0x08017814

080081ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <do_memp_free_pool+0x22>
 8008200:	4b0d      	ldr	r3, [pc, #52]	@ (8008238 <do_memp_free_pool+0x4c>)
 8008202:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8008206:	490d      	ldr	r1, [pc, #52]	@ (800823c <do_memp_free_pool+0x50>)
 8008208:	480d      	ldr	r0, [pc, #52]	@ (8008240 <do_memp_free_pool+0x54>)
 800820a:	f00a fd41 	bl	8012c90 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008212:	f00a fc1f 	bl	8012a54 <sys_arch_protect>
 8008216:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800822a:	68b8      	ldr	r0, [r7, #8]
 800822c:	f00a fc20 	bl	8012a70 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	0801416c 	.word	0x0801416c
 800823c:	0801421c 	.word	0x0801421c
 8008240:	080141c0 	.word	0x080141c0

08008244 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b0c      	cmp	r3, #12
 8008254:	d907      	bls.n	8008266 <memp_free+0x22>
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <memp_free+0x44>)
 8008258:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800825c:	490b      	ldr	r1, [pc, #44]	@ (800828c <memp_free+0x48>)
 800825e:	480c      	ldr	r0, [pc, #48]	@ (8008290 <memp_free+0x4c>)
 8008260:	f00a fd16 	bl	8012c90 <iprintf>
 8008264:	e00c      	b.n	8008280 <memp_free+0x3c>

  if (mem == NULL) {
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d008      	beq.n	800827e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	4a09      	ldr	r2, [pc, #36]	@ (8008294 <memp_free+0x50>)
 8008270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008274:	6839      	ldr	r1, [r7, #0]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff ffb8 	bl	80081ec <do_memp_free_pool>
 800827c:	e000      	b.n	8008280 <memp_free+0x3c>
    return;
 800827e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	0801416c 	.word	0x0801416c
 800828c:	0801423c 	.word	0x0801423c
 8008290:	080141c0 	.word	0x080141c0
 8008294:	08017814 	.word	0x08017814

08008298 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008298:	b480      	push	{r7}
 800829a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800829c:	bf00      	nop
 800829e:	46bd      	mov	sp, r7
 80082a0:	bc80      	pop	{r7}
 80082a2:	4770      	bx	lr

080082a4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
 80082b0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d108      	bne.n	80082ca <netif_add+0x26>
 80082b8:	4b57      	ldr	r3, [pc, #348]	@ (8008418 <netif_add+0x174>)
 80082ba:	f240 1227 	movw	r2, #295	@ 0x127
 80082be:	4957      	ldr	r1, [pc, #348]	@ (800841c <netif_add+0x178>)
 80082c0:	4857      	ldr	r0, [pc, #348]	@ (8008420 <netif_add+0x17c>)
 80082c2:	f00a fce5 	bl	8012c90 <iprintf>
 80082c6:	2300      	movs	r3, #0
 80082c8:	e0a2      	b.n	8008410 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80082ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d108      	bne.n	80082e2 <netif_add+0x3e>
 80082d0:	4b51      	ldr	r3, [pc, #324]	@ (8008418 <netif_add+0x174>)
 80082d2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80082d6:	4953      	ldr	r1, [pc, #332]	@ (8008424 <netif_add+0x180>)
 80082d8:	4851      	ldr	r0, [pc, #324]	@ (8008420 <netif_add+0x17c>)
 80082da:	f00a fcd9 	bl	8012c90 <iprintf>
 80082de:	2300      	movs	r3, #0
 80082e0:	e096      	b.n	8008410 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80082e8:	4b4f      	ldr	r3, [pc, #316]	@ (8008428 <netif_add+0x184>)
 80082ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80082f2:	4b4d      	ldr	r3, [pc, #308]	@ (8008428 <netif_add+0x184>)
 80082f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80082fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008428 <netif_add+0x184>)
 80082fe:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4a45      	ldr	r2, [pc, #276]	@ (800842c <netif_add+0x188>)
 8008316:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a3a      	ldr	r2, [r7, #32]
 8008330:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008332:	4b3f      	ldr	r3, [pc, #252]	@ (8008430 <netif_add+0x18c>)
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008340:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	68b9      	ldr	r1, [r7, #8]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f911 	bl	8008570 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <netif_add+0xba>
    return NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	e058      	b.n	8008410 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008364:	2bff      	cmp	r3, #255	@ 0xff
 8008366:	d103      	bne.n	8008370 <netif_add+0xcc>
        netif->num = 0;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8008370:	2300      	movs	r3, #0
 8008372:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008374:	4b2f      	ldr	r3, [pc, #188]	@ (8008434 <netif_add+0x190>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	e02b      	b.n	80083d4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d106      	bne.n	8008392 <netif_add+0xee>
 8008384:	4b24      	ldr	r3, [pc, #144]	@ (8008418 <netif_add+0x174>)
 8008386:	f240 128b 	movw	r2, #395	@ 0x18b
 800838a:	492b      	ldr	r1, [pc, #172]	@ (8008438 <netif_add+0x194>)
 800838c:	4824      	ldr	r0, [pc, #144]	@ (8008420 <netif_add+0x17c>)
 800838e:	f00a fc7f 	bl	8012c90 <iprintf>
        num_netifs++;
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	2bff      	cmp	r3, #255	@ 0xff
 800839c:	dd06      	ble.n	80083ac <netif_add+0x108>
 800839e:	4b1e      	ldr	r3, [pc, #120]	@ (8008418 <netif_add+0x174>)
 80083a0:	f240 128d 	movw	r2, #397	@ 0x18d
 80083a4:	4925      	ldr	r1, [pc, #148]	@ (800843c <netif_add+0x198>)
 80083a6:	481e      	ldr	r0, [pc, #120]	@ (8008420 <netif_add+0x17c>)
 80083a8:	f00a fc72 	bl	8012c90 <iprintf>
        if (netif2->num == netif->num) {
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d108      	bne.n	80083ce <netif_add+0x12a>
          netif->num++;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083c2:	3301      	adds	r3, #1
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 80083cc:	e005      	b.n	80083da <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1d0      	bne.n	800837c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1be      	bne.n	800835e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083e6:	2bfe      	cmp	r3, #254	@ 0xfe
 80083e8:	d103      	bne.n	80083f2 <netif_add+0x14e>
    netif_num = 0;
 80083ea:	4b11      	ldr	r3, [pc, #68]	@ (8008430 <netif_add+0x18c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	e006      	b.n	8008400 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083f8:	3301      	adds	r3, #1
 80083fa:	b2da      	uxtb	r2, r3
 80083fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <netif_add+0x18c>)
 80083fe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008400:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <netif_add+0x190>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008408:	4a0a      	ldr	r2, [pc, #40]	@ (8008434 <netif_add+0x190>)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800840e:	68fb      	ldr	r3, [r7, #12]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3718      	adds	r7, #24
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	08014258 	.word	0x08014258
 800841c:	080142ec 	.word	0x080142ec
 8008420:	080142a8 	.word	0x080142a8
 8008424:	08014308 	.word	0x08014308
 8008428:	08017888 	.word	0x08017888
 800842c:	08008781 	.word	0x08008781
 8008430:	200077e4 	.word	0x200077e4
 8008434:	200077dc 	.word	0x200077dc
 8008438:	0801432c 	.word	0x0801432c
 800843c:	08014340 	.word	0x08014340

08008440 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f002 fd9b 	bl	800af88 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f007 fe81 	bl	801015c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800845a:	bf00      	nop
 800845c:	3708      	adds	r7, #8
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <netif_do_set_ipaddr+0x20>
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <netif_do_set_ipaddr+0x88>)
 8008478:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800847c:	491c      	ldr	r1, [pc, #112]	@ (80084f0 <netif_do_set_ipaddr+0x8c>)
 800847e:	481d      	ldr	r0, [pc, #116]	@ (80084f4 <netif_do_set_ipaddr+0x90>)
 8008480:	f00a fc06 	bl	8012c90 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d106      	bne.n	8008498 <netif_do_set_ipaddr+0x34>
 800848a:	4b18      	ldr	r3, [pc, #96]	@ (80084ec <netif_do_set_ipaddr+0x88>)
 800848c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8008490:	4917      	ldr	r1, [pc, #92]	@ (80084f0 <netif_do_set_ipaddr+0x8c>)
 8008492:	4818      	ldr	r0, [pc, #96]	@ (80084f4 <netif_do_set_ipaddr+0x90>)
 8008494:	f00a fbfc 	bl	8012c90 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3304      	adds	r3, #4
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d01c      	beq.n	80084e0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3304      	adds	r3, #4
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80084b6:	f107 0314 	add.w	r3, r7, #20
 80084ba:	4619      	mov	r1, r3
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff ffbf 	bl	8008440 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <netif_do_set_ipaddr+0x6a>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	e000      	b.n	80084d0 <netif_do_set_ipaddr+0x6c>
 80084ce:	2300      	movs	r3, #0
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80084d4:	2101      	movs	r1, #1
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f8ce 	bl	8008678 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	08014258 	.word	0x08014258
 80084f0:	08014370 	.word	0x08014370
 80084f4:	080142a8 	.word	0x080142a8

080084f8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	3308      	adds	r3, #8
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d00a      	beq.n	8008528 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <netif_do_set_netmask+0x26>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	e000      	b.n	8008520 <netif_do_set_netmask+0x28>
 800851e:	2300      	movs	r3, #0
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	bc80      	pop	{r7}
 8008532:	4770      	bx	lr

08008534 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	330c      	adds	r3, #12
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	429a      	cmp	r2, r3
 800854c:	d00a      	beq.n	8008564 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <netif_do_set_gw+0x26>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	e000      	b.n	800855c <netif_do_set_gw+0x28>
 800855a:	2300      	movs	r3, #0
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008560:	2301      	movs	r3, #1
 8008562:	e000      	b.n	8008566 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	bc80      	pop	{r7}
 800856e:	4770      	bx	lr

08008570 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800857e:	2300      	movs	r3, #0
 8008580:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800858c:	4b1c      	ldr	r3, [pc, #112]	@ (8008600 <netif_set_addr+0x90>)
 800858e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d101      	bne.n	800859a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008596:	4b1a      	ldr	r3, [pc, #104]	@ (8008600 <netif_set_addr+0x90>)
 8008598:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d101      	bne.n	80085a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80085a0:	4b17      	ldr	r3, [pc, #92]	@ (8008600 <netif_set_addr+0x90>)
 80085a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <netif_set_addr+0x42>
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d101      	bne.n	80085b6 <netif_set_addr+0x46>
 80085b2:	2301      	movs	r3, #1
 80085b4:	e000      	b.n	80085b8 <netif_set_addr+0x48>
 80085b6:	2300      	movs	r3, #0
 80085b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d006      	beq.n	80085ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80085c0:	f107 0310 	add.w	r3, r7, #16
 80085c4:	461a      	mov	r2, r3
 80085c6:	68b9      	ldr	r1, [r7, #8]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff ff4b 	bl	8008464 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f7ff ff90 	bl	80084f8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff ffa9 	bl	8008534 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80085e8:	f107 0310 	add.w	r3, r7, #16
 80085ec:	461a      	mov	r2, r3
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f7ff ff37 	bl	8008464 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80085f6:	bf00      	nop
 80085f8:	3720      	adds	r7, #32
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	08017888 	.word	0x08017888

08008604 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800860c:	4a03      	ldr	r2, [pc, #12]	@ (800861c <netif_set_default+0x18>)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	bc80      	pop	{r7}
 800861a:	4770      	bx	lr
 800861c:	200077e0 	.word	0x200077e0

08008620 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d107      	bne.n	800863e <netif_set_up+0x1e>
 800862e:	4b0f      	ldr	r3, [pc, #60]	@ (800866c <netif_set_up+0x4c>)
 8008630:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8008634:	490e      	ldr	r1, [pc, #56]	@ (8008670 <netif_set_up+0x50>)
 8008636:	480f      	ldr	r0, [pc, #60]	@ (8008674 <netif_set_up+0x54>)
 8008638:	f00a fb2a 	bl	8012c90 <iprintf>
 800863c:	e013      	b.n	8008666 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10c      	bne.n	8008666 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	b2da      	uxtb	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800865e:	2103      	movs	r1, #3
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f809 	bl	8008678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	08014258 	.word	0x08014258
 8008670:	080143e0 	.word	0x080143e0
 8008674:	080142a8 	.word	0x080142a8

08008678 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	460b      	mov	r3, r1
 8008682:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <netif_issue_reports+0x20>
 800868a:	4b18      	ldr	r3, [pc, #96]	@ (80086ec <netif_issue_reports+0x74>)
 800868c:	f240 326d 	movw	r2, #877	@ 0x36d
 8008690:	4917      	ldr	r1, [pc, #92]	@ (80086f0 <netif_issue_reports+0x78>)
 8008692:	4818      	ldr	r0, [pc, #96]	@ (80086f4 <netif_issue_reports+0x7c>)
 8008694:	f00a fafc 	bl	8012c90 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01e      	beq.n	80086e4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086ac:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d017      	beq.n	80086e4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3304      	adds	r3, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d007      	beq.n	80086e6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f008 f99b 	bl	8010a18 <etharp_request>
 80086e2:	e000      	b.n	80086e6 <netif_issue_reports+0x6e>
    return;
 80086e4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80086e6:	3708      	adds	r7, #8
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	08014258 	.word	0x08014258
 80086f0:	080143fc 	.word	0x080143fc
 80086f4:	080142a8 	.word	0x080142a8

080086f8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d107      	bne.n	8008716 <netif_set_link_up+0x1e>
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <netif_set_link_up+0x5c>)
 8008708:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800870c:	4912      	ldr	r1, [pc, #72]	@ (8008758 <netif_set_link_up+0x60>)
 800870e:	4813      	ldr	r0, [pc, #76]	@ (800875c <netif_set_link_up+0x64>)
 8008710:	f00a fabe 	bl	8012c90 <iprintf>
 8008714:	e01b      	b.n	800874e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d114      	bne.n	800874e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800872a:	f043 0304 	orr.w	r3, r3, #4
 800872e:	b2da      	uxtb	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008736:	2103      	movs	r1, #3
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f7ff ff9d 	bl	8008678 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d003      	beq.n	800874e <netif_set_link_up+0x56>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69db      	ldr	r3, [r3, #28]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	08014258 	.word	0x08014258
 8008758:	08014440 	.word	0x08014440
 800875c:	080142a8 	.word	0x080142a8

08008760 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d002      	beq.n	8008776 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	61da      	str	r2, [r3, #28]
  }
}
 8008776:	bf00      	nop
 8008778:	370c      	adds	r7, #12
 800877a:	46bd      	mov	sp, r7
 800877c:	bc80      	pop	{r7}
 800877e:	4770      	bx	lr

08008780 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800878c:	f06f 030b 	mvn.w	r3, #11
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
	...

0800879c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d013      	beq.n	80087d4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80087ac:	4b0c      	ldr	r3, [pc, #48]	@ (80087e0 <netif_get_by_index+0x44>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60fb      	str	r3, [r7, #12]
 80087b2:	e00c      	b.n	80087ce <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80087ba:	3301      	adds	r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	79fa      	ldrb	r2, [r7, #7]
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d101      	bne.n	80087c8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	e006      	b.n	80087d6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	60fb      	str	r3, [r7, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1ef      	bne.n	80087b4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr
 80087e0:	200077dc 	.word	0x200077dc

080087e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b082      	sub	sp, #8
 80087e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80087ea:	f00a f933 	bl	8012a54 <sys_arch_protect>
 80087ee:	6038      	str	r0, [r7, #0]
 80087f0:	4b0d      	ldr	r3, [pc, #52]	@ (8008828 <pbuf_free_ooseq+0x44>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	701a      	strb	r2, [r3, #0]
 80087f6:	6838      	ldr	r0, [r7, #0]
 80087f8:	f00a f93a 	bl	8012a70 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80087fc:	4b0b      	ldr	r3, [pc, #44]	@ (800882c <pbuf_free_ooseq+0x48>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	e00a      	b.n	800881a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f002 fbf9 	bl	800b004 <tcp_free_ooseq>
      return;
 8008812:	e005      	b.n	8008820 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d1f1      	bne.n	8008804 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
 8008826:	bf00      	nop
 8008828:	200077e5 	.word	0x200077e5
 800882c:	200077f4 	.word	0x200077f4

08008830 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8008838:	f7ff ffd4 	bl	80087e4 <pbuf_free_ooseq>
}
 800883c:	bf00      	nop
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800884a:	f00a f903 	bl	8012a54 <sys_arch_protect>
 800884e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008850:	4b0f      	ldr	r3, [pc, #60]	@ (8008890 <pbuf_pool_is_empty+0x4c>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8008856:	4b0e      	ldr	r3, [pc, #56]	@ (8008890 <pbuf_pool_is_empty+0x4c>)
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f00a f907 	bl	8012a70 <sys_arch_unprotect>

  if (!queued) {
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10f      	bne.n	8008888 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8008868:	2100      	movs	r1, #0
 800886a:	480a      	ldr	r0, [pc, #40]	@ (8008894 <pbuf_pool_is_empty+0x50>)
 800886c:	f7fd ff9e 	bl	80067ac <tcpip_try_callback>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d008      	beq.n	8008888 <pbuf_pool_is_empty+0x44>
 8008876:	f00a f8ed 	bl	8012a54 <sys_arch_protect>
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	4b04      	ldr	r3, [pc, #16]	@ (8008890 <pbuf_pool_is_empty+0x4c>)
 800887e:	2200      	movs	r2, #0
 8008880:	701a      	strb	r2, [r3, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f00a f8f4 	bl	8012a70 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	200077e5 	.word	0x200077e5
 8008894:	08008831 	.word	0x08008831

08008898 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	4611      	mov	r1, r2
 80088a4:	461a      	mov	r2, r3
 80088a6:	460b      	mov	r3, r1
 80088a8:	80fb      	strh	r3, [r7, #6]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	88fa      	ldrh	r2, [r7, #6]
 80088be:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	88ba      	ldrh	r2, [r7, #4]
 80088c4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80088c6:	8b3b      	ldrh	r3, [r7, #24]
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	7f3a      	ldrb	r2, [r7, #28]
 80088d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	73da      	strb	r2, [r3, #15]
}
 80088e0:	bf00      	nop
 80088e2:	3714      	adds	r7, #20
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bc80      	pop	{r7}
 80088e8:	4770      	bx	lr
	...

080088ec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	@ 0x30
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	4603      	mov	r3, r0
 80088f4:	71fb      	strb	r3, [r7, #7]
 80088f6:	460b      	mov	r3, r1
 80088f8:	80bb      	strh	r3, [r7, #4]
 80088fa:	4613      	mov	r3, r2
 80088fc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80088fe:	79fb      	ldrb	r3, [r7, #7]
 8008900:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8008908:	d07f      	beq.n	8008a0a <pbuf_alloc+0x11e>
 800890a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800890e:	f300 80c8 	bgt.w	8008aa2 <pbuf_alloc+0x1b6>
 8008912:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8008916:	d010      	beq.n	800893a <pbuf_alloc+0x4e>
 8008918:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800891c:	f300 80c1 	bgt.w	8008aa2 <pbuf_alloc+0x1b6>
 8008920:	2b01      	cmp	r3, #1
 8008922:	d002      	beq.n	800892a <pbuf_alloc+0x3e>
 8008924:	2b41      	cmp	r3, #65	@ 0x41
 8008926:	f040 80bc 	bne.w	8008aa2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800892a:	887a      	ldrh	r2, [r7, #2]
 800892c:	88bb      	ldrh	r3, [r7, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	2000      	movs	r0, #0
 8008932:	f000 f8d1 	bl	8008ad8 <pbuf_alloc_reference>
 8008936:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8008938:	e0bd      	b.n	8008ab6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800893a:	2300      	movs	r3, #0
 800893c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8008942:	88bb      	ldrh	r3, [r7, #4]
 8008944:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008946:	200c      	movs	r0, #12
 8008948:	f7ff fc2a 	bl	80081a0 <memp_malloc>
 800894c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d109      	bne.n	8008968 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8008954:	f7ff ff76 	bl	8008844 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <pbuf_alloc+0x78>
            pbuf_free(p);
 800895e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008960:	f000 faa8 	bl	8008eb4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	e0a7      	b.n	8008ab8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008968:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800896a:	3303      	adds	r3, #3
 800896c:	b29b      	uxth	r3, r3
 800896e:	f023 0303 	bic.w	r3, r3, #3
 8008972:	b29b      	uxth	r3, r3
 8008974:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8008978:	b29b      	uxth	r3, r3
 800897a:	8b7a      	ldrh	r2, [r7, #26]
 800897c:	4293      	cmp	r3, r2
 800897e:	bf28      	it	cs
 8008980:	4613      	movcs	r3, r2
 8008982:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008984:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008986:	3310      	adds	r3, #16
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4413      	add	r3, r2
 800898c:	3303      	adds	r3, #3
 800898e:	f023 0303 	bic.w	r3, r3, #3
 8008992:	4618      	mov	r0, r3
 8008994:	89f9      	ldrh	r1, [r7, #14]
 8008996:	8b7a      	ldrh	r2, [r7, #26]
 8008998:	2300      	movs	r3, #0
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	460b      	mov	r3, r1
 80089a2:	4601      	mov	r1, r0
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f7ff ff77 	bl	8008898 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <pbuf_alloc+0xd8>
 80089b6:	4b42      	ldr	r3, [pc, #264]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 80089b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80089bc:	4941      	ldr	r1, [pc, #260]	@ (8008ac4 <pbuf_alloc+0x1d8>)
 80089be:	4842      	ldr	r0, [pc, #264]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 80089c0:	f00a f966 	bl	8012c90 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80089c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80089c6:	3303      	adds	r3, #3
 80089c8:	f023 0303 	bic.w	r3, r3, #3
 80089cc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80089d0:	d106      	bne.n	80089e0 <pbuf_alloc+0xf4>
 80089d2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 80089d4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80089d8:	493c      	ldr	r1, [pc, #240]	@ (8008acc <pbuf_alloc+0x1e0>)
 80089da:	483b      	ldr	r0, [pc, #236]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 80089dc:	f00a f958 	bl	8012c90 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80089e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d102      	bne.n	80089ec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80089ea:	e002      	b.n	80089f2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80089f6:	8b7a      	ldrh	r2, [r7, #26]
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80089fe:	2300      	movs	r3, #0
 8008a00:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8008a02:	8b7b      	ldrh	r3, [r7, #26]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d19e      	bne.n	8008946 <pbuf_alloc+0x5a>
      break;
 8008a08:	e055      	b.n	8008ab6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008a0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a0c:	3303      	adds	r3, #3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f023 0303 	bic.w	r3, r3, #3
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	88bb      	ldrh	r3, [r7, #4]
 8008a18:	3303      	adds	r3, #3
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	4413      	add	r3, r2
 8008a24:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008a26:	8b3b      	ldrh	r3, [r7, #24]
 8008a28:	3310      	adds	r3, #16
 8008a2a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a2c:	8b3a      	ldrh	r2, [r7, #24]
 8008a2e:	88bb      	ldrh	r3, [r7, #4]
 8008a30:	3303      	adds	r3, #3
 8008a32:	f023 0303 	bic.w	r3, r3, #3
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d306      	bcc.n	8008a48 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008a3a:	8afa      	ldrh	r2, [r7, #22]
 8008a3c:	88bb      	ldrh	r3, [r7, #4]
 8008a3e:	3303      	adds	r3, #3
 8008a40:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d201      	bcs.n	8008a4c <pbuf_alloc+0x160>
        return NULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	e035      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008a4c:	8afb      	ldrh	r3, [r7, #22]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7ff fa24 	bl	8007e9c <mem_malloc>
 8008a54:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8008a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d101      	bne.n	8008a60 <pbuf_alloc+0x174>
        return NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e02b      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008a60:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a62:	3310      	adds	r3, #16
 8008a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a66:	4413      	add	r3, r2
 8008a68:	3303      	adds	r3, #3
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	4618      	mov	r0, r3
 8008a70:	88b9      	ldrh	r1, [r7, #4]
 8008a72:	88ba      	ldrh	r2, [r7, #4]
 8008a74:	2300      	movs	r3, #0
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	887b      	ldrh	r3, [r7, #2]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	460b      	mov	r3, r1
 8008a7e:	4601      	mov	r1, r0
 8008a80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a82:	f7ff ff09 	bl	8008898 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d010      	beq.n	8008ab4 <pbuf_alloc+0x1c8>
 8008a92:	4b0b      	ldr	r3, [pc, #44]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 8008a94:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8008a98:	490d      	ldr	r1, [pc, #52]	@ (8008ad0 <pbuf_alloc+0x1e4>)
 8008a9a:	480b      	ldr	r0, [pc, #44]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 8008a9c:	f00a f8f8 	bl	8012c90 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008aa0:	e008      	b.n	8008ab4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008aa2:	4b07      	ldr	r3, [pc, #28]	@ (8008ac0 <pbuf_alloc+0x1d4>)
 8008aa4:	f240 1227 	movw	r2, #295	@ 0x127
 8008aa8:	490a      	ldr	r1, [pc, #40]	@ (8008ad4 <pbuf_alloc+0x1e8>)
 8008aaa:	4807      	ldr	r0, [pc, #28]	@ (8008ac8 <pbuf_alloc+0x1dc>)
 8008aac:	f00a f8f0 	bl	8012c90 <iprintf>
      return NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e001      	b.n	8008ab8 <pbuf_alloc+0x1cc>
      break;
 8008ab4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3728      	adds	r7, #40	@ 0x28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	08014488 	.word	0x08014488
 8008ac4:	080144b8 	.word	0x080144b8
 8008ac8:	080144e8 	.word	0x080144e8
 8008acc:	08014510 	.word	0x08014510
 8008ad0:	08014544 	.word	0x08014544
 8008ad4:	08014570 	.word	0x08014570

08008ad8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	807b      	strh	r3, [r7, #2]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008ae8:	883b      	ldrh	r3, [r7, #0]
 8008aea:	2b41      	cmp	r3, #65	@ 0x41
 8008aec:	d009      	beq.n	8008b02 <pbuf_alloc_reference+0x2a>
 8008aee:	883b      	ldrh	r3, [r7, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d006      	beq.n	8008b02 <pbuf_alloc_reference+0x2a>
 8008af4:	4b0f      	ldr	r3, [pc, #60]	@ (8008b34 <pbuf_alloc_reference+0x5c>)
 8008af6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008afa:	490f      	ldr	r1, [pc, #60]	@ (8008b38 <pbuf_alloc_reference+0x60>)
 8008afc:	480f      	ldr	r0, [pc, #60]	@ (8008b3c <pbuf_alloc_reference+0x64>)
 8008afe:	f00a f8c7 	bl	8012c90 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008b02:	200b      	movs	r0, #11
 8008b04:	f7ff fb4c 	bl	80081a0 <memp_malloc>
 8008b08:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	e00b      	b.n	8008b2c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008b14:	8879      	ldrh	r1, [r7, #2]
 8008b16:	887a      	ldrh	r2, [r7, #2]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9301      	str	r3, [sp, #4]
 8008b1c:	883b      	ldrh	r3, [r7, #0]
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	460b      	mov	r3, r1
 8008b22:	6879      	ldr	r1, [r7, #4]
 8008b24:	68f8      	ldr	r0, [r7, #12]
 8008b26:	f7ff feb7 	bl	8008898 <pbuf_init_alloced_pbuf>
  return p;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08014488 	.word	0x08014488
 8008b38:	0801458c 	.word	0x0801458c
 8008b3c:	080144e8 	.word	0x080144e8

08008b40 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	607b      	str	r3, [r7, #4]
 8008b48:	4603      	mov	r3, r0
 8008b4a:	73fb      	strb	r3, [r7, #15]
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	81bb      	strh	r3, [r7, #12]
 8008b50:	4613      	mov	r3, r2
 8008b52:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008b58:	8a7b      	ldrh	r3, [r7, #18]
 8008b5a:	3303      	adds	r3, #3
 8008b5c:	f023 0203 	bic.w	r2, r3, #3
 8008b60:	89bb      	ldrh	r3, [r7, #12]
 8008b62:	441a      	add	r2, r3
 8008b64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b66:	429a      	cmp	r2, r3
 8008b68:	d901      	bls.n	8008b6e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e018      	b.n	8008ba0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d007      	beq.n	8008b84 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008b74:	8a7b      	ldrh	r3, [r7, #18]
 8008b76:	3303      	adds	r3, #3
 8008b78:	f023 0303 	bic.w	r3, r3, #3
 8008b7c:	6a3a      	ldr	r2, [r7, #32]
 8008b7e:	4413      	add	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
 8008b82:	e001      	b.n	8008b88 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	89b9      	ldrh	r1, [r7, #12]
 8008b8c:	89ba      	ldrh	r2, [r7, #12]
 8008b8e:	2302      	movs	r3, #2
 8008b90:	9301      	str	r3, [sp, #4]
 8008b92:	897b      	ldrh	r3, [r7, #10]
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	460b      	mov	r3, r1
 8008b98:	6979      	ldr	r1, [r7, #20]
 8008b9a:	f7ff fe7d 	bl	8008898 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8008b9e:	687b      	ldr	r3, [r7, #4]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3718      	adds	r7, #24
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <pbuf_realloc+0x20>
 8008bba:	4b3a      	ldr	r3, [pc, #232]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008bbc:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008bc0:	4939      	ldr	r1, [pc, #228]	@ (8008ca8 <pbuf_realloc+0x100>)
 8008bc2:	483a      	ldr	r0, [pc, #232]	@ (8008cac <pbuf_realloc+0x104>)
 8008bc4:	f00a f864 	bl	8012c90 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	891b      	ldrh	r3, [r3, #8]
 8008bcc:	887a      	ldrh	r2, [r7, #2]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d263      	bcs.n	8008c9a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	891a      	ldrh	r2, [r3, #8]
 8008bd6:	887b      	ldrh	r3, [r7, #2]
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008bdc:	887b      	ldrh	r3, [r7, #2]
 8008bde:	817b      	strh	r3, [r7, #10]
  q = p;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008be4:	e018      	b.n	8008c18 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	895b      	ldrh	r3, [r3, #10]
 8008bea:	897a      	ldrh	r2, [r7, #10]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	891a      	ldrh	r2, [r3, #8]
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <pbuf_realloc+0x70>
 8008c0a:	4b26      	ldr	r3, [pc, #152]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008c0c:	f240 12af 	movw	r2, #431	@ 0x1af
 8008c10:	4927      	ldr	r1, [pc, #156]	@ (8008cb0 <pbuf_realloc+0x108>)
 8008c12:	4826      	ldr	r0, [pc, #152]	@ (8008cac <pbuf_realloc+0x104>)
 8008c14:	f00a f83c 	bl	8012c90 <iprintf>
  while (rem_len > q->len) {
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	895b      	ldrh	r3, [r3, #10]
 8008c1c:	897a      	ldrh	r2, [r7, #10]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d8e1      	bhi.n	8008be6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	7b1b      	ldrb	r3, [r3, #12]
 8008c26:	f003 030f 	and.w	r3, r3, #15
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d121      	bne.n	8008c72 <pbuf_realloc+0xca>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	895b      	ldrh	r3, [r3, #10]
 8008c32:	897a      	ldrh	r2, [r7, #10]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d01c      	beq.n	8008c72 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	7b5b      	ldrb	r3, [r3, #13]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d116      	bne.n	8008c72 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	897b      	ldrh	r3, [r7, #10]
 8008c50:	4413      	add	r3, r2
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f7ff f816 	bl	8007c88 <mem_trim>
 8008c5c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d106      	bne.n	8008c72 <pbuf_realloc+0xca>
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <pbuf_realloc+0xfc>)
 8008c66:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008c6a:	4912      	ldr	r1, [pc, #72]	@ (8008cb4 <pbuf_realloc+0x10c>)
 8008c6c:	480f      	ldr	r0, [pc, #60]	@ (8008cac <pbuf_realloc+0x104>)
 8008c6e:	f00a f80f 	bl	8012c90 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	897a      	ldrh	r2, [r7, #10]
 8008c76:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	895a      	ldrh	r2, [r3, #10]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d004      	beq.n	8008c92 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 f911 	bl	8008eb4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]
 8008c98:	e000      	b.n	8008c9c <pbuf_realloc+0xf4>
    return;
 8008c9a:	bf00      	nop

}
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	08014488 	.word	0x08014488
 8008ca8:	080145a0 	.word	0x080145a0
 8008cac:	080144e8 	.word	0x080144e8
 8008cb0:	080145b8 	.word	0x080145b8
 8008cb4:	080145d0 	.word	0x080145d0

08008cb8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d106      	bne.n	8008cda <pbuf_add_header_impl+0x22>
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d7c <pbuf_add_header_impl+0xc4>)
 8008cce:	f240 12df 	movw	r2, #479	@ 0x1df
 8008cd2:	492b      	ldr	r1, [pc, #172]	@ (8008d80 <pbuf_add_header_impl+0xc8>)
 8008cd4:	482b      	ldr	r0, [pc, #172]	@ (8008d84 <pbuf_add_header_impl+0xcc>)
 8008cd6:	f009 ffdb 	bl	8012c90 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d003      	beq.n	8008ce8 <pbuf_add_header_impl+0x30>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce6:	d301      	bcc.n	8008cec <pbuf_add_header_impl+0x34>
    return 1;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e043      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d101      	bne.n	8008cf6 <pbuf_add_header_impl+0x3e>
    return 0;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e03e      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	891a      	ldrh	r2, [r3, #8]
 8008cfe:	8a7b      	ldrh	r3, [r7, #18]
 8008d00:	4413      	add	r3, r2
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	8a7a      	ldrh	r2, [r7, #18]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d901      	bls.n	8008d0e <pbuf_add_header_impl+0x56>
    return 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e032      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	7b1b      	ldrb	r3, [r3, #12]
 8008d12:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008d14:	8a3b      	ldrh	r3, [r7, #16]
 8008d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00c      	beq.n	8008d38 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	425b      	negs	r3, r3
 8008d26:	4413      	add	r3, r2
 8008d28:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3310      	adds	r3, #16
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d20d      	bcs.n	8008d50 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e01d      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	425b      	negs	r3, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
 8008d4a:	e001      	b.n	8008d50 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e011      	b.n	8008d74 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	895a      	ldrh	r2, [r3, #10]
 8008d5a:	8a7b      	ldrh	r3, [r7, #18]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	891a      	ldrh	r2, [r3, #8]
 8008d68:	8a7b      	ldrh	r3, [r7, #18]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	811a      	strh	r2, [r3, #8]


  return 0;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	08014488 	.word	0x08014488
 8008d80:	080145ec 	.word	0x080145ec
 8008d84:	080144e8 	.word	0x080144e8

08008d88 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008d92:	2200      	movs	r2, #0
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff ff8e 	bl	8008cb8 <pbuf_add_header_impl>
 8008d9c:	4603      	mov	r3, r0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3708      	adds	r7, #8
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d106      	bne.n	8008dc6 <pbuf_remove_header+0x1e>
 8008db8:	4b20      	ldr	r3, [pc, #128]	@ (8008e3c <pbuf_remove_header+0x94>)
 8008dba:	f240 224b 	movw	r2, #587	@ 0x24b
 8008dbe:	4920      	ldr	r1, [pc, #128]	@ (8008e40 <pbuf_remove_header+0x98>)
 8008dc0:	4820      	ldr	r0, [pc, #128]	@ (8008e44 <pbuf_remove_header+0x9c>)
 8008dc2:	f009 ff65 	bl	8012c90 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <pbuf_remove_header+0x2c>
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dd2:	d301      	bcc.n	8008dd8 <pbuf_remove_header+0x30>
    return 1;
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e02c      	b.n	8008e32 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <pbuf_remove_header+0x3a>
    return 0;
 8008dde:	2300      	movs	r3, #0
 8008de0:	e027      	b.n	8008e32 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	895b      	ldrh	r3, [r3, #10]
 8008dea:	89fa      	ldrh	r2, [r7, #14]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d908      	bls.n	8008e02 <pbuf_remove_header+0x5a>
 8008df0:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <pbuf_remove_header+0x94>)
 8008df2:	f240 2255 	movw	r2, #597	@ 0x255
 8008df6:	4914      	ldr	r1, [pc, #80]	@ (8008e48 <pbuf_remove_header+0xa0>)
 8008df8:	4812      	ldr	r0, [pc, #72]	@ (8008e44 <pbuf_remove_header+0x9c>)
 8008dfa:	f009 ff49 	bl	8012c90 <iprintf>
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e017      	b.n	8008e32 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	441a      	add	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	895a      	ldrh	r2, [r3, #10]
 8008e18:	89fb      	ldrh	r3, [r7, #14]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	891a      	ldrh	r2, [r3, #8]
 8008e26:	89fb      	ldrh	r3, [r7, #14]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	08014488 	.word	0x08014488
 8008e40:	080145ec 	.word	0x080145ec
 8008e44:	080144e8 	.word	0x080144e8
 8008e48:	080145f8 	.word	0x080145f8

08008e4c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	460b      	mov	r3, r1
 8008e56:	807b      	strh	r3, [r7, #2]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008e5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da08      	bge.n	8008e76 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008e64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e68:	425b      	negs	r3, r3
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f7ff ff9b 	bl	8008da8 <pbuf_remove_header>
 8008e72:	4603      	mov	r3, r0
 8008e74:	e007      	b.n	8008e86 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008e76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e7a:	787a      	ldrb	r2, [r7, #1]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff1a 	bl	8008cb8 <pbuf_add_header_impl>
 8008e84:	4603      	mov	r3, r0
  }
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b082      	sub	sp, #8
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	460b      	mov	r3, r1
 8008e98:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008e9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7ff ffd2 	bl	8008e4c <pbuf_header_impl>
 8008ea8:	4603      	mov	r3, r0
}
 8008eaa:	4618      	mov	r0, r3
 8008eac:	3708      	adds	r7, #8
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}
	...

08008eb4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10b      	bne.n	8008eda <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <pbuf_free+0x22>
 8008ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fb8 <pbuf_free+0x104>)
 8008eca:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8008ece:	493b      	ldr	r1, [pc, #236]	@ (8008fbc <pbuf_free+0x108>)
 8008ed0:	483b      	ldr	r0, [pc, #236]	@ (8008fc0 <pbuf_free+0x10c>)
 8008ed2:	f009 fedd 	bl	8012c90 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	e069      	b.n	8008fae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008eda:	2300      	movs	r3, #0
 8008edc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008ede:	e062      	b.n	8008fa6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008ee0:	f009 fdb8 	bl	8012a54 <sys_arch_protect>
 8008ee4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7b9b      	ldrb	r3, [r3, #14]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d106      	bne.n	8008efc <pbuf_free+0x48>
 8008eee:	4b32      	ldr	r3, [pc, #200]	@ (8008fb8 <pbuf_free+0x104>)
 8008ef0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008ef4:	4933      	ldr	r1, [pc, #204]	@ (8008fc4 <pbuf_free+0x110>)
 8008ef6:	4832      	ldr	r0, [pc, #200]	@ (8008fc0 <pbuf_free+0x10c>)
 8008ef8:	f009 feca 	bl	8012c90 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7b9b      	ldrb	r3, [r3, #14]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	739a      	strb	r2, [r3, #14]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	7b9b      	ldrb	r3, [r3, #14]
 8008f0c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008f0e:	69b8      	ldr	r0, [r7, #24]
 8008f10:	f009 fdae 	bl	8012a70 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008f14:	7dfb      	ldrb	r3, [r7, #23]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d143      	bne.n	8008fa2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7b1b      	ldrb	r3, [r3, #12]
 8008f24:	f003 030f 	and.w	r3, r3, #15
 8008f28:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	7b5b      	ldrb	r3, [r3, #13]
 8008f2e:	f003 0302 	and.w	r3, r3, #2
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d106      	bne.n	8008f50 <pbuf_free+0x9c>
 8008f42:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb8 <pbuf_free+0x104>)
 8008f44:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008f48:	491f      	ldr	r1, [pc, #124]	@ (8008fc8 <pbuf_free+0x114>)
 8008f4a:	481d      	ldr	r0, [pc, #116]	@ (8008fc0 <pbuf_free+0x10c>)
 8008f4c:	f009 fea0 	bl	8012c90 <iprintf>
        pc->custom_free_function(p);
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
 8008f58:	e01d      	b.n	8008f96 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d104      	bne.n	8008f6a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	200c      	movs	r0, #12
 8008f64:	f7ff f96e 	bl	8008244 <memp_free>
 8008f68:	e015      	b.n	8008f96 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d104      	bne.n	8008f7a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008f70:	6879      	ldr	r1, [r7, #4]
 8008f72:	200b      	movs	r0, #11
 8008f74:	f7ff f966 	bl	8008244 <memp_free>
 8008f78:	e00d      	b.n	8008f96 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <pbuf_free+0xd4>
          mem_free(p);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7fe fdf1 	bl	8007b68 <mem_free>
 8008f86:	e006      	b.n	8008f96 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008f88:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <pbuf_free+0x104>)
 8008f8a:	f240 320f 	movw	r2, #783	@ 0x30f
 8008f8e:	490f      	ldr	r1, [pc, #60]	@ (8008fcc <pbuf_free+0x118>)
 8008f90:	480b      	ldr	r0, [pc, #44]	@ (8008fc0 <pbuf_free+0x10c>)
 8008f92:	f009 fe7d 	bl	8012c90 <iprintf>
        }
      }
      count++;
 8008f96:	7ffb      	ldrb	r3, [r7, #31]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	e001      	b.n	8008fa6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d199      	bne.n	8008ee0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3720      	adds	r7, #32
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	08014488 	.word	0x08014488
 8008fbc:	080145ec 	.word	0x080145ec
 8008fc0:	080144e8 	.word	0x080144e8
 8008fc4:	08014618 	.word	0x08014618
 8008fc8:	08014630 	.word	0x08014630
 8008fcc:	08014654 	.word	0x08014654

08008fd0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008fdc:	e005      	b.n	8008fea <pbuf_clen+0x1a>
    ++len;
 8008fde:	89fb      	ldrh	r3, [r7, #14]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1f6      	bne.n	8008fde <pbuf_clen+0xe>
  }
  return len;
 8008ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bc80      	pop	{r7}
 8008ffa:	4770      	bx	lr

08008ffc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d016      	beq.n	8009038 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800900a:	f009 fd23 	bl	8012a54 <sys_arch_protect>
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	7b9b      	ldrb	r3, [r3, #14]
 8009014:	3301      	adds	r3, #1
 8009016:	b2da      	uxtb	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	739a      	strb	r2, [r3, #14]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f009 fd27 	bl	8012a70 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7b9b      	ldrb	r3, [r3, #14]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <pbuf_ref+0x3c>
 800902a:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <pbuf_ref+0x44>)
 800902c:	f240 3242 	movw	r2, #834	@ 0x342
 8009030:	4904      	ldr	r1, [pc, #16]	@ (8009044 <pbuf_ref+0x48>)
 8009032:	4805      	ldr	r0, [pc, #20]	@ (8009048 <pbuf_ref+0x4c>)
 8009034:	f009 fe2c 	bl	8012c90 <iprintf>
  }
}
 8009038:	bf00      	nop
 800903a:	3710      	adds	r7, #16
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	08014488 	.word	0x08014488
 8009044:	08014668 	.word	0x08014668
 8009048:	080144e8 	.word	0x080144e8

0800904c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <pbuf_cat+0x16>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d107      	bne.n	8009072 <pbuf_cat+0x26>
 8009062:	4b20      	ldr	r3, [pc, #128]	@ (80090e4 <pbuf_cat+0x98>)
 8009064:	f240 3259 	movw	r2, #857	@ 0x359
 8009068:	491f      	ldr	r1, [pc, #124]	@ (80090e8 <pbuf_cat+0x9c>)
 800906a:	4820      	ldr	r0, [pc, #128]	@ (80090ec <pbuf_cat+0xa0>)
 800906c:	f009 fe10 	bl	8012c90 <iprintf>
 8009070:	e034      	b.n	80090dc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e00a      	b.n	800908e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	891a      	ldrh	r2, [r3, #8]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	891b      	ldrh	r3, [r3, #8]
 8009080:	4413      	add	r3, r2
 8009082:	b29a      	uxth	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f0      	bne.n	8009078 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	891a      	ldrh	r2, [r3, #8]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	895b      	ldrh	r3, [r3, #10]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d006      	beq.n	80090b0 <pbuf_cat+0x64>
 80090a2:	4b10      	ldr	r3, [pc, #64]	@ (80090e4 <pbuf_cat+0x98>)
 80090a4:	f240 3262 	movw	r2, #866	@ 0x362
 80090a8:	4911      	ldr	r1, [pc, #68]	@ (80090f0 <pbuf_cat+0xa4>)
 80090aa:	4810      	ldr	r0, [pc, #64]	@ (80090ec <pbuf_cat+0xa0>)
 80090ac:	f009 fdf0 	bl	8012c90 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <pbuf_cat+0x7a>
 80090b8:	4b0a      	ldr	r3, [pc, #40]	@ (80090e4 <pbuf_cat+0x98>)
 80090ba:	f240 3263 	movw	r2, #867	@ 0x363
 80090be:	490d      	ldr	r1, [pc, #52]	@ (80090f4 <pbuf_cat+0xa8>)
 80090c0:	480a      	ldr	r0, [pc, #40]	@ (80090ec <pbuf_cat+0xa0>)
 80090c2:	f009 fde5 	bl	8012c90 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	891a      	ldrh	r2, [r3, #8]
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	891b      	ldrh	r3, [r3, #8]
 80090ce:	4413      	add	r3, r2
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80090dc:	3710      	adds	r7, #16
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	08014488 	.word	0x08014488
 80090e8:	0801467c 	.word	0x0801467c
 80090ec:	080144e8 	.word	0x080144e8
 80090f0:	080146b4 	.word	0x080146b4
 80090f4:	080146e4 	.word	0x080146e4

080090f8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7ff ffa1 	bl	800904c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800910a:	6838      	ldr	r0, [r7, #0]
 800910c:	f7ff ff76 	bl	8008ffc <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009110:	bf00      	nop
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009122:	2300      	movs	r3, #0
 8009124:	617b      	str	r3, [r7, #20]
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d008      	beq.n	8009142 <pbuf_copy+0x2a>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <pbuf_copy+0x2a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	891a      	ldrh	r2, [r3, #8]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	891b      	ldrh	r3, [r3, #8]
 800913e:	429a      	cmp	r2, r3
 8009140:	d209      	bcs.n	8009156 <pbuf_copy+0x3e>
 8009142:	4b57      	ldr	r3, [pc, #348]	@ (80092a0 <pbuf_copy+0x188>)
 8009144:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8009148:	4956      	ldr	r1, [pc, #344]	@ (80092a4 <pbuf_copy+0x18c>)
 800914a:	4857      	ldr	r0, [pc, #348]	@ (80092a8 <pbuf_copy+0x190>)
 800914c:	f009 fda0 	bl	8012c90 <iprintf>
 8009150:	f06f 030f 	mvn.w	r3, #15
 8009154:	e09f      	b.n	8009296 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	895b      	ldrh	r3, [r3, #10]
 800915a:	461a      	mov	r2, r3
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	1ad2      	subs	r2, r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	895b      	ldrh	r3, [r3, #10]
 8009164:	4619      	mov	r1, r3
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	1acb      	subs	r3, r1, r3
 800916a:	429a      	cmp	r2, r3
 800916c:	d306      	bcc.n	800917c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	895b      	ldrh	r3, [r3, #10]
 8009172:	461a      	mov	r2, r3
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	60fb      	str	r3, [r7, #12]
 800917a:	e005      	b.n	8009188 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	895b      	ldrh	r3, [r3, #10]
 8009180:	461a      	mov	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	1ad3      	subs	r3, r2, r3
 8009186:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	18d0      	adds	r0, r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	4413      	add	r3, r2
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	4619      	mov	r1, r3
 800919c:	f009 fec7 	bl	8012f2e <memcpy>
    offset_to += len;
 80091a0:	697a      	ldr	r2, [r7, #20]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	895b      	ldrh	r3, [r3, #10]
 80091b4:	461a      	mov	r2, r3
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d906      	bls.n	80091ca <pbuf_copy+0xb2>
 80091bc:	4b38      	ldr	r3, [pc, #224]	@ (80092a0 <pbuf_copy+0x188>)
 80091be:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80091c2:	493a      	ldr	r1, [pc, #232]	@ (80092ac <pbuf_copy+0x194>)
 80091c4:	4838      	ldr	r0, [pc, #224]	@ (80092a8 <pbuf_copy+0x190>)
 80091c6:	f009 fd63 	bl	8012c90 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	461a      	mov	r2, r3
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d906      	bls.n	80091e4 <pbuf_copy+0xcc>
 80091d6:	4b32      	ldr	r3, [pc, #200]	@ (80092a0 <pbuf_copy+0x188>)
 80091d8:	f240 32da 	movw	r2, #986	@ 0x3da
 80091dc:	4934      	ldr	r1, [pc, #208]	@ (80092b0 <pbuf_copy+0x198>)
 80091de:	4832      	ldr	r0, [pc, #200]	@ (80092a8 <pbuf_copy+0x190>)
 80091e0:	f009 fd56 	bl	8012c90 <iprintf>
    if (offset_from >= p_from->len) {
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	895b      	ldrh	r3, [r3, #10]
 80091e8:	461a      	mov	r2, r3
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d304      	bcc.n	80091fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	895b      	ldrh	r3, [r3, #10]
 80091fe:	461a      	mov	r2, r3
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	4293      	cmp	r3, r2
 8009204:	d114      	bne.n	8009230 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009206:	2300      	movs	r3, #0
 8009208:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10c      	bne.n	8009230 <pbuf_copy+0x118>
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d009      	beq.n	8009230 <pbuf_copy+0x118>
 800921c:	4b20      	ldr	r3, [pc, #128]	@ (80092a0 <pbuf_copy+0x188>)
 800921e:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8009222:	4924      	ldr	r1, [pc, #144]	@ (80092b4 <pbuf_copy+0x19c>)
 8009224:	4820      	ldr	r0, [pc, #128]	@ (80092a8 <pbuf_copy+0x190>)
 8009226:	f009 fd33 	bl	8012c90 <iprintf>
 800922a:	f06f 030f 	mvn.w	r3, #15
 800922e:	e032      	b.n	8009296 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d013      	beq.n	800925e <pbuf_copy+0x146>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	895a      	ldrh	r2, [r3, #10]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	891b      	ldrh	r3, [r3, #8]
 800923e:	429a      	cmp	r2, r3
 8009240:	d10d      	bne.n	800925e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d009      	beq.n	800925e <pbuf_copy+0x146>
 800924a:	4b15      	ldr	r3, [pc, #84]	@ (80092a0 <pbuf_copy+0x188>)
 800924c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8009250:	4919      	ldr	r1, [pc, #100]	@ (80092b8 <pbuf_copy+0x1a0>)
 8009252:	4815      	ldr	r0, [pc, #84]	@ (80092a8 <pbuf_copy+0x190>)
 8009254:	f009 fd1c 	bl	8012c90 <iprintf>
 8009258:	f06f 0305 	mvn.w	r3, #5
 800925c:	e01b      	b.n	8009296 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d013      	beq.n	800928c <pbuf_copy+0x174>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	895a      	ldrh	r2, [r3, #10]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	891b      	ldrh	r3, [r3, #8]
 800926c:	429a      	cmp	r2, r3
 800926e:	d10d      	bne.n	800928c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <pbuf_copy+0x174>
 8009278:	4b09      	ldr	r3, [pc, #36]	@ (80092a0 <pbuf_copy+0x188>)
 800927a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800927e:	490e      	ldr	r1, [pc, #56]	@ (80092b8 <pbuf_copy+0x1a0>)
 8009280:	4809      	ldr	r0, [pc, #36]	@ (80092a8 <pbuf_copy+0x190>)
 8009282:	f009 fd05 	bl	8012c90 <iprintf>
 8009286:	f06f 0305 	mvn.w	r3, #5
 800928a:	e004      	b.n	8009296 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	f47f af61 	bne.w	8009156 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	08014488 	.word	0x08014488
 80092a4:	08014730 	.word	0x08014730
 80092a8:	080144e8 	.word	0x080144e8
 80092ac:	08014760 	.word	0x08014760
 80092b0:	08014778 	.word	0x08014778
 80092b4:	08014794 	.word	0x08014794
 80092b8:	080147a4 	.word	0x080147a4

080092bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b088      	sub	sp, #32
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4611      	mov	r1, r2
 80092c8:	461a      	mov	r2, r3
 80092ca:	460b      	mov	r3, r1
 80092cc:	80fb      	strh	r3, [r7, #6]
 80092ce:	4613      	mov	r3, r2
 80092d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80092d2:	2300      	movs	r3, #0
 80092d4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80092d6:	2300      	movs	r3, #0
 80092d8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <pbuf_copy_partial+0x36>
 80092e0:	4b2b      	ldr	r3, [pc, #172]	@ (8009390 <pbuf_copy_partial+0xd4>)
 80092e2:	f240 420a 	movw	r2, #1034	@ 0x40a
 80092e6:	492b      	ldr	r1, [pc, #172]	@ (8009394 <pbuf_copy_partial+0xd8>)
 80092e8:	482b      	ldr	r0, [pc, #172]	@ (8009398 <pbuf_copy_partial+0xdc>)
 80092ea:	f009 fcd1 	bl	8012c90 <iprintf>
 80092ee:	2300      	movs	r3, #0
 80092f0:	e04a      	b.n	8009388 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d108      	bne.n	800930a <pbuf_copy_partial+0x4e>
 80092f8:	4b25      	ldr	r3, [pc, #148]	@ (8009390 <pbuf_copy_partial+0xd4>)
 80092fa:	f240 420b 	movw	r2, #1035	@ 0x40b
 80092fe:	4927      	ldr	r1, [pc, #156]	@ (800939c <pbuf_copy_partial+0xe0>)
 8009300:	4825      	ldr	r0, [pc, #148]	@ (8009398 <pbuf_copy_partial+0xdc>)
 8009302:	f009 fcc5 	bl	8012c90 <iprintf>
 8009306:	2300      	movs	r3, #0
 8009308:	e03e      	b.n	8009388 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	61fb      	str	r3, [r7, #28]
 800930e:	e034      	b.n	800937a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009310:	88bb      	ldrh	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <pbuf_copy_partial+0x70>
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	895b      	ldrh	r3, [r3, #10]
 800931a:	88ba      	ldrh	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d305      	bcc.n	800932c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009320:	69fb      	ldr	r3, [r7, #28]
 8009322:	895b      	ldrh	r3, [r3, #10]
 8009324:	88ba      	ldrh	r2, [r7, #4]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	80bb      	strh	r3, [r7, #4]
 800932a:	e023      	b.n	8009374 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	895a      	ldrh	r2, [r3, #10]
 8009330:	88bb      	ldrh	r3, [r7, #4]
 8009332:	1ad3      	subs	r3, r2, r3
 8009334:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009336:	8b3a      	ldrh	r2, [r7, #24]
 8009338:	88fb      	ldrh	r3, [r7, #6]
 800933a:	429a      	cmp	r2, r3
 800933c:	d901      	bls.n	8009342 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800933e:	88fb      	ldrh	r3, [r7, #6]
 8009340:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009342:	8b7b      	ldrh	r3, [r7, #26]
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	18d0      	adds	r0, r2, r3
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	88bb      	ldrh	r3, [r7, #4]
 800934e:	4413      	add	r3, r2
 8009350:	8b3a      	ldrh	r2, [r7, #24]
 8009352:	4619      	mov	r1, r3
 8009354:	f009 fdeb 	bl	8012f2e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009358:	8afa      	ldrh	r2, [r7, #22]
 800935a:	8b3b      	ldrh	r3, [r7, #24]
 800935c:	4413      	add	r3, r2
 800935e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009360:	8b7a      	ldrh	r2, [r7, #26]
 8009362:	8b3b      	ldrh	r3, [r7, #24]
 8009364:	4413      	add	r3, r2
 8009366:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009368:	88fa      	ldrh	r2, [r7, #6]
 800936a:	8b3b      	ldrh	r3, [r7, #24]
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009370:	2300      	movs	r3, #0
 8009372:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	61fb      	str	r3, [r7, #28]
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <pbuf_copy_partial+0xca>
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1c4      	bne.n	8009310 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009386:	8afb      	ldrh	r3, [r7, #22]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	08014488 	.word	0x08014488
 8009394:	080147d0 	.word	0x080147d0
 8009398:	080144e8 	.word	0x080144e8
 800939c:	080147f0 	.word	0x080147f0

080093a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80093a4:	f009 fb74 	bl	8012a90 <rand>
 80093a8:	4603      	mov	r3, r0
 80093aa:	b29b      	uxth	r3, r3
 80093ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	4b01      	ldr	r3, [pc, #4]	@ (80093c0 <tcp_init+0x20>)
 80093ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80093bc:	bf00      	nop
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000010 	.word	0x20000010

080093c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	7d1b      	ldrb	r3, [r3, #20]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d105      	bne.n	80093e0 <tcp_free+0x1c>
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <tcp_free+0x2c>)
 80093d6:	22d4      	movs	r2, #212	@ 0xd4
 80093d8:	4906      	ldr	r1, [pc, #24]	@ (80093f4 <tcp_free+0x30>)
 80093da:	4807      	ldr	r0, [pc, #28]	@ (80093f8 <tcp_free+0x34>)
 80093dc:	f009 fc58 	bl	8012c90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	2001      	movs	r0, #1
 80093e4:	f7fe ff2e 	bl	8008244 <memp_free>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	08014988 	.word	0x08014988
 80093f4:	080149b8 	.word	0x080149b8
 80093f8:	080149cc 	.word	0x080149cc

080093fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7d1b      	ldrb	r3, [r3, #20]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d105      	bne.n	8009418 <tcp_free_listen+0x1c>
 800940c:	4b06      	ldr	r3, [pc, #24]	@ (8009428 <tcp_free_listen+0x2c>)
 800940e:	22df      	movs	r2, #223	@ 0xdf
 8009410:	4906      	ldr	r1, [pc, #24]	@ (800942c <tcp_free_listen+0x30>)
 8009412:	4807      	ldr	r0, [pc, #28]	@ (8009430 <tcp_free_listen+0x34>)
 8009414:	f009 fc3c 	bl	8012c90 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	2002      	movs	r0, #2
 800941c:	f7fe ff12 	bl	8008244 <memp_free>
}
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08014988 	.word	0x08014988
 800942c:	080149f4 	.word	0x080149f4
 8009430:	080149cc 	.word	0x080149cc

08009434 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009438:	f001 f85e 	bl	800a4f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800943c:	4b07      	ldr	r3, [pc, #28]	@ (800945c <tcp_tmr+0x28>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	3301      	adds	r3, #1
 8009442:	b2da      	uxtb	r2, r3
 8009444:	4b05      	ldr	r3, [pc, #20]	@ (800945c <tcp_tmr+0x28>)
 8009446:	701a      	strb	r2, [r3, #0]
 8009448:	4b04      	ldr	r3, [pc, #16]	@ (800945c <tcp_tmr+0x28>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 0301 	and.w	r3, r3, #1
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009454:	f000 fd0e 	bl	8009e74 <tcp_slowtmr>
  }
}
 8009458:	bf00      	nop
 800945a:	bd80      	pop	{r7, pc}
 800945c:	200077fd 	.word	0x200077fd

08009460 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b084      	sub	sp, #16
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d105      	bne.n	800947c <tcp_remove_listener+0x1c>
 8009470:	4b0d      	ldr	r3, [pc, #52]	@ (80094a8 <tcp_remove_listener+0x48>)
 8009472:	22ff      	movs	r2, #255	@ 0xff
 8009474:	490d      	ldr	r1, [pc, #52]	@ (80094ac <tcp_remove_listener+0x4c>)
 8009476:	480e      	ldr	r0, [pc, #56]	@ (80094b0 <tcp_remove_listener+0x50>)
 8009478:	f009 fc0a 	bl	8012c90 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e00a      	b.n	8009498 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009486:	683a      	ldr	r2, [r7, #0]
 8009488:	429a      	cmp	r2, r3
 800948a:	d102      	bne.n	8009492 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1f1      	bne.n	8009482 <tcp_remove_listener+0x22>
    }
  }
}
 800949e:	bf00      	nop
 80094a0:	bf00      	nop
 80094a2:	3710      	adds	r7, #16
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	08014988 	.word	0x08014988
 80094ac:	08014a10 	.word	0x08014a10
 80094b0:	080149cc 	.word	0x080149cc

080094b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d106      	bne.n	80094d0 <tcp_listen_closed+0x1c>
 80094c2:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <tcp_listen_closed+0x60>)
 80094c4:	f240 1211 	movw	r2, #273	@ 0x111
 80094c8:	4913      	ldr	r1, [pc, #76]	@ (8009518 <tcp_listen_closed+0x64>)
 80094ca:	4814      	ldr	r0, [pc, #80]	@ (800951c <tcp_listen_closed+0x68>)
 80094cc:	f009 fbe0 	bl	8012c90 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7d1b      	ldrb	r3, [r3, #20]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d006      	beq.n	80094e6 <tcp_listen_closed+0x32>
 80094d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009514 <tcp_listen_closed+0x60>)
 80094da:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80094de:	4910      	ldr	r1, [pc, #64]	@ (8009520 <tcp_listen_closed+0x6c>)
 80094e0:	480e      	ldr	r0, [pc, #56]	@ (800951c <tcp_listen_closed+0x68>)
 80094e2:	f009 fbd5 	bl	8012c90 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80094e6:	2301      	movs	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	e00b      	b.n	8009504 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80094ec:	4a0d      	ldr	r2, [pc, #52]	@ (8009524 <tcp_listen_closed+0x70>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6879      	ldr	r1, [r7, #4]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7ff ffb1 	bl	8009460 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2b03      	cmp	r3, #3
 8009508:	d9f0      	bls.n	80094ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800950a:	bf00      	nop
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	08014988 	.word	0x08014988
 8009518:	08014a38 	.word	0x08014a38
 800951c:	080149cc 	.word	0x080149cc
 8009520:	08014a44 	.word	0x08014a44
 8009524:	08017860 	.word	0x08017860

08009528 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009528:	b5b0      	push	{r4, r5, r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af04      	add	r7, sp, #16
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d106      	bne.n	8009548 <tcp_close_shutdown+0x20>
 800953a:	4b63      	ldr	r3, [pc, #396]	@ (80096c8 <tcp_close_shutdown+0x1a0>)
 800953c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8009540:	4962      	ldr	r1, [pc, #392]	@ (80096cc <tcp_close_shutdown+0x1a4>)
 8009542:	4863      	ldr	r0, [pc, #396]	@ (80096d0 <tcp_close_shutdown+0x1a8>)
 8009544:	f009 fba4 	bl	8012c90 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d066      	beq.n	800961c <tcp_close_shutdown+0xf4>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	7d1b      	ldrb	r3, [r3, #20]
 8009552:	2b04      	cmp	r3, #4
 8009554:	d003      	beq.n	800955e <tcp_close_shutdown+0x36>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7d1b      	ldrb	r3, [r3, #20]
 800955a:	2b07      	cmp	r3, #7
 800955c:	d15e      	bne.n	800961c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <tcp_close_shutdown+0x48>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800956a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800956e:	d055      	beq.n	800961c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	8b5b      	ldrh	r3, [r3, #26]
 8009574:	f003 0310 	and.w	r3, r3, #16
 8009578:	2b00      	cmp	r3, #0
 800957a:	d106      	bne.n	800958a <tcp_close_shutdown+0x62>
 800957c:	4b52      	ldr	r3, [pc, #328]	@ (80096c8 <tcp_close_shutdown+0x1a0>)
 800957e:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8009582:	4954      	ldr	r1, [pc, #336]	@ (80096d4 <tcp_close_shutdown+0x1ac>)
 8009584:	4852      	ldr	r0, [pc, #328]	@ (80096d0 <tcp_close_shutdown+0x1a8>)
 8009586:	f009 fb83 	bl	8012c90 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009592:	687d      	ldr	r5, [r7, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	8ad2      	ldrh	r2, [r2, #22]
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	8b09      	ldrh	r1, [r1, #24]
 80095a0:	9102      	str	r1, [sp, #8]
 80095a2:	9201      	str	r2, [sp, #4]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	462b      	mov	r3, r5
 80095a8:	4622      	mov	r2, r4
 80095aa:	4601      	mov	r1, r0
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f005 fdb1 	bl	800f114 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f001 fb72 	bl	800ac9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80095b8:	4b47      	ldr	r3, [pc, #284]	@ (80096d8 <tcp_close_shutdown+0x1b0>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d105      	bne.n	80095ce <tcp_close_shutdown+0xa6>
 80095c2:	4b45      	ldr	r3, [pc, #276]	@ (80096d8 <tcp_close_shutdown+0x1b0>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a43      	ldr	r2, [pc, #268]	@ (80096d8 <tcp_close_shutdown+0x1b0>)
 80095ca:	6013      	str	r3, [r2, #0]
 80095cc:	e013      	b.n	80095f6 <tcp_close_shutdown+0xce>
 80095ce:	4b42      	ldr	r3, [pc, #264]	@ (80096d8 <tcp_close_shutdown+0x1b0>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	e00c      	b.n	80095f0 <tcp_close_shutdown+0xc8>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d104      	bne.n	80095ea <tcp_close_shutdown+0xc2>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68da      	ldr	r2, [r3, #12]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	60da      	str	r2, [r3, #12]
 80095e8:	e005      	b.n	80095f6 <tcp_close_shutdown+0xce>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	68db      	ldr	r3, [r3, #12]
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d1ef      	bne.n	80095d6 <tcp_close_shutdown+0xae>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	60da      	str	r2, [r3, #12]
 80095fc:	4b37      	ldr	r3, [pc, #220]	@ (80096dc <tcp_close_shutdown+0x1b4>)
 80095fe:	2201      	movs	r2, #1
 8009600:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009602:	4b37      	ldr	r3, [pc, #220]	@ (80096e0 <tcp_close_shutdown+0x1b8>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	429a      	cmp	r2, r3
 800960a:	d102      	bne.n	8009612 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800960c:	f004 f806 	bl	800d61c <tcp_trigger_input_pcb_close>
 8009610:	e002      	b.n	8009618 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7ff fed6 	bl	80093c4 <tcp_free>
      }
      return ERR_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	e050      	b.n	80096be <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	2b02      	cmp	r3, #2
 8009622:	d03b      	beq.n	800969c <tcp_close_shutdown+0x174>
 8009624:	2b02      	cmp	r3, #2
 8009626:	dc44      	bgt.n	80096b2 <tcp_close_shutdown+0x18a>
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <tcp_close_shutdown+0x10a>
 800962c:	2b01      	cmp	r3, #1
 800962e:	d02a      	beq.n	8009686 <tcp_close_shutdown+0x15e>
 8009630:	e03f      	b.n	80096b2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	8adb      	ldrh	r3, [r3, #22]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d021      	beq.n	800967e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800963a:	4b2a      	ldr	r3, [pc, #168]	@ (80096e4 <tcp_close_shutdown+0x1bc>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	429a      	cmp	r2, r3
 8009642:	d105      	bne.n	8009650 <tcp_close_shutdown+0x128>
 8009644:	4b27      	ldr	r3, [pc, #156]	@ (80096e4 <tcp_close_shutdown+0x1bc>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	4a26      	ldr	r2, [pc, #152]	@ (80096e4 <tcp_close_shutdown+0x1bc>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	e013      	b.n	8009678 <tcp_close_shutdown+0x150>
 8009650:	4b24      	ldr	r3, [pc, #144]	@ (80096e4 <tcp_close_shutdown+0x1bc>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60bb      	str	r3, [r7, #8]
 8009656:	e00c      	b.n	8009672 <tcp_close_shutdown+0x14a>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	429a      	cmp	r2, r3
 8009660:	d104      	bne.n	800966c <tcp_close_shutdown+0x144>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	60da      	str	r2, [r3, #12]
 800966a:	e005      	b.n	8009678 <tcp_close_shutdown+0x150>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	60bb      	str	r3, [r7, #8]
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d1ef      	bne.n	8009658 <tcp_close_shutdown+0x130>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7ff fea0 	bl	80093c4 <tcp_free>
      break;
 8009684:	e01a      	b.n	80096bc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff ff14 	bl	80094b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4816      	ldr	r0, [pc, #88]	@ (80096e8 <tcp_close_shutdown+0x1c0>)
 8009690:	f001 fb54 	bl	800ad3c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff feb1 	bl	80093fc <tcp_free_listen>
      break;
 800969a:	e00f      	b.n	80096bc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	480e      	ldr	r0, [pc, #56]	@ (80096d8 <tcp_close_shutdown+0x1b0>)
 80096a0:	f001 fb4c 	bl	800ad3c <tcp_pcb_remove>
 80096a4:	4b0d      	ldr	r3, [pc, #52]	@ (80096dc <tcp_close_shutdown+0x1b4>)
 80096a6:	2201      	movs	r2, #1
 80096a8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f7ff fe8a 	bl	80093c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80096b0:	e004      	b.n	80096bc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f81a 	bl	80096ec <tcp_close_shutdown_fin>
 80096b8:	4603      	mov	r3, r0
 80096ba:	e000      	b.n	80096be <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bdb0      	pop	{r4, r5, r7, pc}
 80096c6:	bf00      	nop
 80096c8:	08014988 	.word	0x08014988
 80096cc:	08014a5c 	.word	0x08014a5c
 80096d0:	080149cc 	.word	0x080149cc
 80096d4:	08014a7c 	.word	0x08014a7c
 80096d8:	200077f4 	.word	0x200077f4
 80096dc:	200077fc 	.word	0x200077fc
 80096e0:	20007834 	.word	0x20007834
 80096e4:	200077ec 	.word	0x200077ec
 80096e8:	200077f0 	.word	0x200077f0

080096ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <tcp_close_shutdown_fin+0x1c>
 80096fa:	4b2e      	ldr	r3, [pc, #184]	@ (80097b4 <tcp_close_shutdown_fin+0xc8>)
 80096fc:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8009700:	492d      	ldr	r1, [pc, #180]	@ (80097b8 <tcp_close_shutdown_fin+0xcc>)
 8009702:	482e      	ldr	r0, [pc, #184]	@ (80097bc <tcp_close_shutdown_fin+0xd0>)
 8009704:	f009 fac4 	bl	8012c90 <iprintf>

  switch (pcb->state) {
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	7d1b      	ldrb	r3, [r3, #20]
 800970c:	2b07      	cmp	r3, #7
 800970e:	d020      	beq.n	8009752 <tcp_close_shutdown_fin+0x66>
 8009710:	2b07      	cmp	r3, #7
 8009712:	dc2b      	bgt.n	800976c <tcp_close_shutdown_fin+0x80>
 8009714:	2b03      	cmp	r3, #3
 8009716:	d002      	beq.n	800971e <tcp_close_shutdown_fin+0x32>
 8009718:	2b04      	cmp	r3, #4
 800971a:	d00d      	beq.n	8009738 <tcp_close_shutdown_fin+0x4c>
 800971c:	e026      	b.n	800976c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f004 fde4 	bl	800e2ec <tcp_send_fin>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009728:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d11f      	bne.n	8009770 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2205      	movs	r2, #5
 8009734:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009736:	e01b      	b.n	8009770 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f004 fdd7 	bl	800e2ec <tcp_send_fin>
 800973e:	4603      	mov	r3, r0
 8009740:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8009742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d114      	bne.n	8009774 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2205      	movs	r2, #5
 800974e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009750:	e010      	b.n	8009774 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f004 fdca 	bl	800e2ec <tcp_send_fin>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800975c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2209      	movs	r2, #9
 8009768:	751a      	strb	r2, [r3, #20]
      }
      break;
 800976a:	e005      	b.n	8009778 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	e01c      	b.n	80097aa <tcp_close_shutdown_fin+0xbe>
      break;
 8009770:	bf00      	nop
 8009772:	e002      	b.n	800977a <tcp_close_shutdown_fin+0x8e>
      break;
 8009774:	bf00      	nop
 8009776:	e000      	b.n	800977a <tcp_close_shutdown_fin+0x8e>
      break;
 8009778:	bf00      	nop
  }

  if (err == ERR_OK) {
 800977a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d103      	bne.n	800978a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f004 fef0 	bl	800e568 <tcp_output>
 8009788:	e00d      	b.n	80097a6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800978a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009792:	d108      	bne.n	80097a6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	8b5b      	ldrh	r3, [r3, #26]
 8009798:	f043 0308 	orr.w	r3, r3, #8
 800979c:	b29a      	uxth	r2, r3
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e001      	b.n	80097aa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80097a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	08014988 	.word	0x08014988
 80097b8:	08014a38 	.word	0x08014a38
 80097bc:	080149cc 	.word	0x080149cc

080097c0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d109      	bne.n	80097e2 <tcp_close+0x22>
 80097ce:	4b0f      	ldr	r3, [pc, #60]	@ (800980c <tcp_close+0x4c>)
 80097d0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80097d4:	490e      	ldr	r1, [pc, #56]	@ (8009810 <tcp_close+0x50>)
 80097d6:	480f      	ldr	r0, [pc, #60]	@ (8009814 <tcp_close+0x54>)
 80097d8:	f009 fa5a 	bl	8012c90 <iprintf>
 80097dc:	f06f 030f 	mvn.w	r3, #15
 80097e0:	e00f      	b.n	8009802 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7d1b      	ldrb	r3, [r3, #20]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d006      	beq.n	80097f8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	8b5b      	ldrh	r3, [r3, #26]
 80097ee:	f043 0310 	orr.w	r3, r3, #16
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80097f8:	2101      	movs	r1, #1
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fe94 	bl	8009528 <tcp_close_shutdown>
 8009800:	4603      	mov	r3, r0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	08014988 	.word	0x08014988
 8009810:	08014a98 	.word	0x08014a98
 8009814:	080149cc 	.word	0x080149cc

08009818 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b08e      	sub	sp, #56	@ 0x38
 800981c:	af04      	add	r7, sp, #16
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d107      	bne.n	8009838 <tcp_abandon+0x20>
 8009828:	4b52      	ldr	r3, [pc, #328]	@ (8009974 <tcp_abandon+0x15c>)
 800982a:	f240 223d 	movw	r2, #573	@ 0x23d
 800982e:	4952      	ldr	r1, [pc, #328]	@ (8009978 <tcp_abandon+0x160>)
 8009830:	4852      	ldr	r0, [pc, #328]	@ (800997c <tcp_abandon+0x164>)
 8009832:	f009 fa2d 	bl	8012c90 <iprintf>
 8009836:	e099      	b.n	800996c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	7d1b      	ldrb	r3, [r3, #20]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d106      	bne.n	800984e <tcp_abandon+0x36>
 8009840:	4b4c      	ldr	r3, [pc, #304]	@ (8009974 <tcp_abandon+0x15c>)
 8009842:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8009846:	494e      	ldr	r1, [pc, #312]	@ (8009980 <tcp_abandon+0x168>)
 8009848:	484c      	ldr	r0, [pc, #304]	@ (800997c <tcp_abandon+0x164>)
 800984a:	f009 fa21 	bl	8012c90 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7d1b      	ldrb	r3, [r3, #20]
 8009852:	2b0a      	cmp	r3, #10
 8009854:	d107      	bne.n	8009866 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009856:	6879      	ldr	r1, [r7, #4]
 8009858:	484a      	ldr	r0, [pc, #296]	@ (8009984 <tcp_abandon+0x16c>)
 800985a:	f001 fa6f 	bl	800ad3c <tcp_pcb_remove>
    tcp_free(pcb);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f7ff fdb0 	bl	80093c4 <tcp_free>
 8009864:	e082      	b.n	800996c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009872:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009878:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009880:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	7d1b      	ldrb	r3, [r3, #20]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d126      	bne.n	80098de <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	8adb      	ldrh	r3, [r3, #22]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d02e      	beq.n	80098f6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009898:	4b3b      	ldr	r3, [pc, #236]	@ (8009988 <tcp_abandon+0x170>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d105      	bne.n	80098ae <tcp_abandon+0x96>
 80098a2:	4b39      	ldr	r3, [pc, #228]	@ (8009988 <tcp_abandon+0x170>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	4a37      	ldr	r2, [pc, #220]	@ (8009988 <tcp_abandon+0x170>)
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	e013      	b.n	80098d6 <tcp_abandon+0xbe>
 80098ae:	4b36      	ldr	r3, [pc, #216]	@ (8009988 <tcp_abandon+0x170>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	e00c      	b.n	80098d0 <tcp_abandon+0xb8>
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d104      	bne.n	80098ca <tcp_abandon+0xb2>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	60da      	str	r2, [r3, #12]
 80098c8:	e005      	b.n	80098d6 <tcp_abandon+0xbe>
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1ef      	bne.n	80098b6 <tcp_abandon+0x9e>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	60da      	str	r2, [r3, #12]
 80098dc:	e00b      	b.n	80098f6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8adb      	ldrh	r3, [r3, #22]
 80098e6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80098e8:	6879      	ldr	r1, [r7, #4]
 80098ea:	4828      	ldr	r0, [pc, #160]	@ (800998c <tcp_abandon+0x174>)
 80098ec:	f001 fa26 	bl	800ad3c <tcp_pcb_remove>
 80098f0:	4b27      	ldr	r3, [pc, #156]	@ (8009990 <tcp_abandon+0x178>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fed8 	bl	800a6b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d004      	beq.n	800991a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fecf 	bl	800a6b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800991e:	2b00      	cmp	r3, #0
 8009920:	d004      	beq.n	800992c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009926:	4618      	mov	r0, r3
 8009928:	f000 fec6 	bl	800a6b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800992c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00e      	beq.n	8009950 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009932:	6879      	ldr	r1, [r7, #4]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	8b12      	ldrh	r2, [r2, #24]
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009940:	9201      	str	r2, [sp, #4]
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	460b      	mov	r3, r1
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	69b9      	ldr	r1, [r7, #24]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f005 fbe2 	bl	800f114 <tcp_rst>
    }
    last_state = pcb->state;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	7d1b      	ldrb	r3, [r3, #20]
 8009954:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff fd34 	bl	80093c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d004      	beq.n	800996c <tcp_abandon+0x154>
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f06f 010c 	mvn.w	r1, #12
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	4798      	blx	r3
  }
}
 800996c:	3728      	adds	r7, #40	@ 0x28
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	08014988 	.word	0x08014988
 8009978:	08014acc 	.word	0x08014acc
 800997c:	080149cc 	.word	0x080149cc
 8009980:	08014ae8 	.word	0x08014ae8
 8009984:	200077f8 	.word	0x200077f8
 8009988:	200077ec 	.word	0x200077ec
 800998c:	200077f4 	.word	0x200077f4
 8009990:	200077fc 	.word	0x200077fc

08009994 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800999c:	2101      	movs	r1, #1
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff ff3a 	bl	8009818 <tcp_abandon>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	4613      	mov	r3, r2
 80099b8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80099ba:	2304      	movs	r3, #4
 80099bc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80099c4:	4b3e      	ldr	r3, [pc, #248]	@ (8009ac0 <tcp_bind+0x114>)
 80099c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <tcp_bind+0x36>
 80099ce:	4b3d      	ldr	r3, [pc, #244]	@ (8009ac4 <tcp_bind+0x118>)
 80099d0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80099d4:	493c      	ldr	r1, [pc, #240]	@ (8009ac8 <tcp_bind+0x11c>)
 80099d6:	483d      	ldr	r0, [pc, #244]	@ (8009acc <tcp_bind+0x120>)
 80099d8:	f009 f95a 	bl	8012c90 <iprintf>
 80099dc:	f06f 030f 	mvn.w	r3, #15
 80099e0:	e06a      	b.n	8009ab8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	7d1b      	ldrb	r3, [r3, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d009      	beq.n	80099fe <tcp_bind+0x52>
 80099ea:	4b36      	ldr	r3, [pc, #216]	@ (8009ac4 <tcp_bind+0x118>)
 80099ec:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80099f0:	4937      	ldr	r1, [pc, #220]	@ (8009ad0 <tcp_bind+0x124>)
 80099f2:	4836      	ldr	r0, [pc, #216]	@ (8009acc <tcp_bind+0x120>)
 80099f4:	f009 f94c 	bl	8012c90 <iprintf>
 80099f8:	f06f 0305 	mvn.w	r3, #5
 80099fc:	e05c      	b.n	8009ab8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <tcp_bind+0x6c>
    port = tcp_new_port();
 8009a04:	f000 f9f0 	bl	8009de8 <tcp_new_port>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009a0c:	88fb      	ldrh	r3, [r7, #6]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d135      	bne.n	8009a7e <tcp_bind+0xd2>
      return ERR_BUF;
 8009a12:	f06f 0301 	mvn.w	r3, #1
 8009a16:	e04f      	b.n	8009ab8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	e02b      	b.n	8009a76 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8009ad4 <tcp_bind+0x128>)
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	e01e      	b.n	8009a6a <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	8adb      	ldrh	r3, [r3, #22]
 8009a30:	88fa      	ldrh	r2, [r7, #6]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d116      	bne.n	8009a64 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a36:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d010      	beq.n	8009a5e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00c      	beq.n	8009a5e <tcp_bind+0xb2>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d009      	beq.n	8009a5e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d102      	bne.n	8009a64 <tcp_bind+0xb8>
              return ERR_USE;
 8009a5e:	f06f 0307 	mvn.w	r3, #7
 8009a62:	e029      	b.n	8009ab8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	61bb      	str	r3, [r7, #24]
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1dd      	bne.n	8009a2c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	3301      	adds	r3, #1
 8009a74:	61fb      	str	r3, [r7, #28]
 8009a76:	69fa      	ldr	r2, [r7, #28]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	dbcf      	blt.n	8009a1e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00c      	beq.n	8009a9e <tcp_bind+0xf2>
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d002      	beq.n	8009a98 <tcp_bind+0xec>
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	e000      	b.n	8009a9a <tcp_bind+0xee>
 8009a98:	2300      	movs	r3, #0
 8009a9a:	68fa      	ldr	r2, [r7, #12]
 8009a9c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	88fa      	ldrh	r2, [r7, #6]
 8009aa2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <tcp_bind+0x12c>)
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	60da      	str	r2, [r3, #12]
 8009aac:	4a0a      	ldr	r2, [pc, #40]	@ (8009ad8 <tcp_bind+0x12c>)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	f005 fcf1 	bl	800f498 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3720      	adds	r7, #32
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	08017888 	.word	0x08017888
 8009ac4:	08014988 	.word	0x08014988
 8009ac8:	08014b1c 	.word	0x08014b1c
 8009acc:	080149cc 	.word	0x080149cc
 8009ad0:	08014b34 	.word	0x08014b34
 8009ad4:	08017860 	.word	0x08017860
 8009ad8:	200077ec 	.word	0x200077ec

08009adc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d106      	bne.n	8009afe <tcp_accept_null+0x22>
 8009af0:	4b07      	ldr	r3, [pc, #28]	@ (8009b10 <tcp_accept_null+0x34>)
 8009af2:	f240 320f 	movw	r2, #783	@ 0x30f
 8009af6:	4907      	ldr	r1, [pc, #28]	@ (8009b14 <tcp_accept_null+0x38>)
 8009af8:	4807      	ldr	r0, [pc, #28]	@ (8009b18 <tcp_accept_null+0x3c>)
 8009afa:	f009 f8c9 	bl	8012c90 <iprintf>

  tcp_abort(pcb);
 8009afe:	68b8      	ldr	r0, [r7, #8]
 8009b00:	f7ff ff48 	bl	8009994 <tcp_abort>

  return ERR_ABRT;
 8009b04:	f06f 030c 	mvn.w	r3, #12
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	08014988 	.word	0x08014988
 8009b14:	08014b5c 	.word	0x08014b5c
 8009b18:	080149cc 	.word	0x080149cc

08009b1c <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8009b28:	78fb      	ldrb	r3, [r7, #3]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f806 	bl	8009b40 <tcp_listen_with_backlog_and_err>
 8009b34:	4603      	mov	r3, r0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d109      	bne.n	8009b6c <tcp_listen_with_backlog_and_err+0x2c>
 8009b58:	4b47      	ldr	r3, [pc, #284]	@ (8009c78 <tcp_listen_with_backlog_and_err+0x138>)
 8009b5a:	f240 3259 	movw	r2, #857	@ 0x359
 8009b5e:	4947      	ldr	r1, [pc, #284]	@ (8009c7c <tcp_listen_with_backlog_and_err+0x13c>)
 8009b60:	4847      	ldr	r0, [pc, #284]	@ (8009c80 <tcp_listen_with_backlog_and_err+0x140>)
 8009b62:	f009 f895 	bl	8012c90 <iprintf>
 8009b66:	23f0      	movs	r3, #240	@ 0xf0
 8009b68:	76fb      	strb	r3, [r7, #27]
 8009b6a:	e079      	b.n	8009c60 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	7d1b      	ldrb	r3, [r3, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d009      	beq.n	8009b88 <tcp_listen_with_backlog_and_err+0x48>
 8009b74:	4b40      	ldr	r3, [pc, #256]	@ (8009c78 <tcp_listen_with_backlog_and_err+0x138>)
 8009b76:	f240 325a 	movw	r2, #858	@ 0x35a
 8009b7a:	4942      	ldr	r1, [pc, #264]	@ (8009c84 <tcp_listen_with_backlog_and_err+0x144>)
 8009b7c:	4840      	ldr	r0, [pc, #256]	@ (8009c80 <tcp_listen_with_backlog_and_err+0x140>)
 8009b7e:	f009 f887 	bl	8012c90 <iprintf>
 8009b82:	23f1      	movs	r3, #241	@ 0xf1
 8009b84:	76fb      	strb	r3, [r7, #27]
 8009b86:	e06b      	b.n	8009c60 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	7d1b      	ldrb	r3, [r3, #20]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d104      	bne.n	8009b9a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8009b94:	23f7      	movs	r3, #247	@ 0xf7
 8009b96:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009b98:	e062      	b.n	8009c60 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8009b9a:	2002      	movs	r0, #2
 8009b9c:	f7fe fb00 	bl	80081a0 <memp_malloc>
 8009ba0:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8009ba8:	23ff      	movs	r3, #255	@ 0xff
 8009baa:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009bac:	e058      	b.n	8009c60 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8ada      	ldrh	r2, [r3, #22]
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	7d5a      	ldrb	r2, [r3, #21]
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	7a5a      	ldrb	r2, [r3, #9]
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009bd4:	69fb      	ldr	r3, [r7, #28]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	7ada      	ldrb	r2, [r3, #11]
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	7a9a      	ldrb	r2, [r3, #10]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	8adb      	ldrh	r3, [r3, #22]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d021      	beq.n	8009c3e <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8009bfa:	4b23      	ldr	r3, [pc, #140]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x148>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d105      	bne.n	8009c10 <tcp_listen_with_backlog_and_err+0xd0>
 8009c04:	4b20      	ldr	r3, [pc, #128]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x148>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x148>)
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	e013      	b.n	8009c38 <tcp_listen_with_backlog_and_err+0xf8>
 8009c10:	4b1d      	ldr	r3, [pc, #116]	@ (8009c88 <tcp_listen_with_backlog_and_err+0x148>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	e00c      	b.n	8009c32 <tcp_listen_with_backlog_and_err+0xf2>
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d104      	bne.n	8009c2c <tcp_listen_with_backlog_and_err+0xec>
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	e005      	b.n	8009c38 <tcp_listen_with_backlog_and_err+0xf8>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	617b      	str	r3, [r7, #20]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1ef      	bne.n	8009c18 <tcp_listen_with_backlog_and_err+0xd8>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7ff fbc0 	bl	80093c4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4a11      	ldr	r2, [pc, #68]	@ (8009c8c <tcp_listen_with_backlog_and_err+0x14c>)
 8009c48:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8009c4a:	4b11      	ldr	r3, [pc, #68]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x150>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	4a0f      	ldr	r2, [pc, #60]	@ (8009c90 <tcp_listen_with_backlog_and_err+0x150>)
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	f005 fc1e 	bl	800f498 <tcp_timer_needed>
  res = ERR_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	7efa      	ldrb	r2, [r7, #27]
 8009c6a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8009c6c:	69fb      	ldr	r3, [r7, #28]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3720      	adds	r7, #32
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	08014988 	.word	0x08014988
 8009c7c:	08014b7c 	.word	0x08014b7c
 8009c80:	080149cc 	.word	0x080149cc
 8009c84:	08014bac 	.word	0x08014bac
 8009c88:	200077ec 	.word	0x200077ec
 8009c8c:	08009add 	.word	0x08009add
 8009c90:	200077f0 	.word	0x200077f0

08009c94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d106      	bne.n	8009cb0 <tcp_update_rcv_ann_wnd+0x1c>
 8009ca2:	4b25      	ldr	r3, [pc, #148]	@ (8009d38 <tcp_update_rcv_ann_wnd+0xa4>)
 8009ca4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009ca8:	4924      	ldr	r1, [pc, #144]	@ (8009d3c <tcp_update_rcv_ann_wnd+0xa8>)
 8009caa:	4825      	ldr	r0, [pc, #148]	@ (8009d40 <tcp_update_rcv_ann_wnd+0xac>)
 8009cac:	f008 fff0 	bl	8012c90 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8009cb8:	4413      	add	r3, r2
 8009cba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009cc4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8009cc8:	bf28      	it	cs
 8009cca:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009cce:	b292      	uxth	r2, r2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	db08      	blt.n	8009cec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	e020      	b.n	8009d2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dd03      	ble.n	8009d02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009d00:	e014      	b.n	8009d2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d14:	d306      	bcc.n	8009d24 <tcp_update_rcv_ann_wnd+0x90>
 8009d16:	4b08      	ldr	r3, [pc, #32]	@ (8009d38 <tcp_update_rcv_ann_wnd+0xa4>)
 8009d18:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009d1c:	4909      	ldr	r1, [pc, #36]	@ (8009d44 <tcp_update_rcv_ann_wnd+0xb0>)
 8009d1e:	4808      	ldr	r0, [pc, #32]	@ (8009d40 <tcp_update_rcv_ann_wnd+0xac>)
 8009d20:	f008 ffb6 	bl	8012c90 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009d2c:	2300      	movs	r3, #0
  }
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	08014988 	.word	0x08014988
 8009d3c:	08014be4 	.word	0x08014be4
 8009d40:	080149cc 	.word	0x080149cc
 8009d44:	08014c08 	.word	0x08014c08

08009d48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	460b      	mov	r3, r1
 8009d52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d107      	bne.n	8009d6a <tcp_recved+0x22>
 8009d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd8 <tcp_recved+0x90>)
 8009d5c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8009d60:	491e      	ldr	r1, [pc, #120]	@ (8009ddc <tcp_recved+0x94>)
 8009d62:	481f      	ldr	r0, [pc, #124]	@ (8009de0 <tcp_recved+0x98>)
 8009d64:	f008 ff94 	bl	8012c90 <iprintf>
 8009d68:	e032      	b.n	8009dd0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	7d1b      	ldrb	r3, [r3, #20]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d106      	bne.n	8009d80 <tcp_recved+0x38>
 8009d72:	4b19      	ldr	r3, [pc, #100]	@ (8009dd8 <tcp_recved+0x90>)
 8009d74:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8009d78:	491a      	ldr	r1, [pc, #104]	@ (8009de4 <tcp_recved+0x9c>)
 8009d7a:	4819      	ldr	r0, [pc, #100]	@ (8009de0 <tcp_recved+0x98>)
 8009d7c:	f008 ff88 	bl	8012c90 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009d84:	887b      	ldrh	r3, [r7, #2]
 8009d86:	4413      	add	r3, r2
 8009d88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009d8a:	89fb      	ldrh	r3, [r7, #14]
 8009d8c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009d90:	d804      	bhi.n	8009d9c <tcp_recved+0x54>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d96:	89fa      	ldrh	r2, [r7, #14]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d204      	bcs.n	8009da6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009da2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009da4:	e002      	b.n	8009dac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	89fa      	ldrh	r2, [r7, #14]
 8009daa:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f7ff ff71 	bl	8009c94 <tcp_update_rcv_ann_wnd>
 8009db2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009dba:	d309      	bcc.n	8009dd0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	8b5b      	ldrh	r3, [r3, #26]
 8009dc0:	f043 0302 	orr.w	r3, r3, #2
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f004 fbcc 	bl	800e568 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009dd0:	3710      	adds	r7, #16
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	08014988 	.word	0x08014988
 8009ddc:	08014c24 	.word	0x08014c24
 8009de0:	080149cc 	.word	0x080149cc
 8009de4:	08014c3c 	.word	0x08014c3c

08009de8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009df2:	4b1e      	ldr	r3, [pc, #120]	@ (8009e6c <tcp_new_port+0x84>)
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	3301      	adds	r3, #1
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8009e6c <tcp_new_port+0x84>)
 8009dfc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8009e6c <tcp_new_port+0x84>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d103      	bne.n	8009e12 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8009e0a:	4b18      	ldr	r3, [pc, #96]	@ (8009e6c <tcp_new_port+0x84>)
 8009e0c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8009e10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009e12:	2300      	movs	r3, #0
 8009e14:	71fb      	strb	r3, [r7, #7]
 8009e16:	e01e      	b.n	8009e56 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009e18:	79fb      	ldrb	r3, [r7, #7]
 8009e1a:	4a15      	ldr	r2, [pc, #84]	@ (8009e70 <tcp_new_port+0x88>)
 8009e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	603b      	str	r3, [r7, #0]
 8009e24:	e011      	b.n	8009e4a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	8ada      	ldrh	r2, [r3, #22]
 8009e2a:	4b10      	ldr	r3, [pc, #64]	@ (8009e6c <tcp_new_port+0x84>)
 8009e2c:	881b      	ldrh	r3, [r3, #0]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d108      	bne.n	8009e44 <tcp_new_port+0x5c>
        n++;
 8009e32:	88bb      	ldrh	r3, [r7, #4]
 8009e34:	3301      	adds	r3, #1
 8009e36:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8009e38:	88bb      	ldrh	r3, [r7, #4]
 8009e3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e3e:	d3d8      	bcc.n	8009df2 <tcp_new_port+0xa>
          return 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	e00d      	b.n	8009e60 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	603b      	str	r3, [r7, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d1ea      	bne.n	8009e26 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009e50:	79fb      	ldrb	r3, [r7, #7]
 8009e52:	3301      	adds	r3, #1
 8009e54:	71fb      	strb	r3, [r7, #7]
 8009e56:	79fb      	ldrb	r3, [r7, #7]
 8009e58:	2b03      	cmp	r3, #3
 8009e5a:	d9dd      	bls.n	8009e18 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8009e5c:	4b03      	ldr	r3, [pc, #12]	@ (8009e6c <tcp_new_port+0x84>)
 8009e5e:	881b      	ldrh	r3, [r3, #0]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bc80      	pop	{r7}
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	20000010 	.word	0x20000010
 8009e70:	08017860 	.word	0x08017860

08009e74 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009e74:	b5b0      	push	{r4, r5, r7, lr}
 8009e76:	b090      	sub	sp, #64	@ 0x40
 8009e78:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8009e80:	4b95      	ldr	r3, [pc, #596]	@ (800a0d8 <tcp_slowtmr+0x264>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	3301      	adds	r3, #1
 8009e86:	4a94      	ldr	r2, [pc, #592]	@ (800a0d8 <tcp_slowtmr+0x264>)
 8009e88:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009e8a:	4b94      	ldr	r3, [pc, #592]	@ (800a0dc <tcp_slowtmr+0x268>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	4b92      	ldr	r3, [pc, #584]	@ (800a0dc <tcp_slowtmr+0x268>)
 8009e94:	701a      	strb	r2, [r3, #0]
 8009e96:	e000      	b.n	8009e9a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8009e98:	bf00      	nop
  prev = NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009e9e:	4b90      	ldr	r3, [pc, #576]	@ (800a0e0 <tcp_slowtmr+0x26c>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009ea4:	e29f      	b.n	800a3e6 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ea8:	7d1b      	ldrb	r3, [r3, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d106      	bne.n	8009ebc <tcp_slowtmr+0x48>
 8009eae:	4b8d      	ldr	r3, [pc, #564]	@ (800a0e4 <tcp_slowtmr+0x270>)
 8009eb0:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009eb4:	498c      	ldr	r1, [pc, #560]	@ (800a0e8 <tcp_slowtmr+0x274>)
 8009eb6:	488d      	ldr	r0, [pc, #564]	@ (800a0ec <tcp_slowtmr+0x278>)
 8009eb8:	f008 feea 	bl	8012c90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ebe:	7d1b      	ldrb	r3, [r3, #20]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d106      	bne.n	8009ed2 <tcp_slowtmr+0x5e>
 8009ec4:	4b87      	ldr	r3, [pc, #540]	@ (800a0e4 <tcp_slowtmr+0x270>)
 8009ec6:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8009eca:	4989      	ldr	r1, [pc, #548]	@ (800a0f0 <tcp_slowtmr+0x27c>)
 8009ecc:	4887      	ldr	r0, [pc, #540]	@ (800a0ec <tcp_slowtmr+0x278>)
 8009ece:	f008 fedf 	bl	8012c90 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ed4:	7d1b      	ldrb	r3, [r3, #20]
 8009ed6:	2b0a      	cmp	r3, #10
 8009ed8:	d106      	bne.n	8009ee8 <tcp_slowtmr+0x74>
 8009eda:	4b82      	ldr	r3, [pc, #520]	@ (800a0e4 <tcp_slowtmr+0x270>)
 8009edc:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009ee0:	4984      	ldr	r1, [pc, #528]	@ (800a0f4 <tcp_slowtmr+0x280>)
 8009ee2:	4882      	ldr	r0, [pc, #520]	@ (800a0ec <tcp_slowtmr+0x278>)
 8009ee4:	f008 fed4 	bl	8012c90 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eea:	7f9a      	ldrb	r2, [r3, #30]
 8009eec:	4b7b      	ldr	r3, [pc, #492]	@ (800a0dc <tcp_slowtmr+0x268>)
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d105      	bne.n	8009f00 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009efe:	e272      	b.n	800a3e6 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8009f00:	4b76      	ldr	r3, [pc, #472]	@ (800a0dc <tcp_slowtmr+0x268>)
 8009f02:	781a      	ldrb	r2, [r3, #0]
 8009f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f06:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d10a      	bne.n	8009f32 <tcp_slowtmr+0xbe>
 8009f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d905      	bls.n	8009f32 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8009f26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f30:	e11e      	b.n	800a170 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f34:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009f38:	2b0b      	cmp	r3, #11
 8009f3a:	d905      	bls.n	8009f48 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f40:	3301      	adds	r3, #1
 8009f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f46:	e113      	b.n	800a170 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8009f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d075      	beq.n	800a03e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d006      	beq.n	8009f68 <tcp_slowtmr+0xf4>
 8009f5a:	4b62      	ldr	r3, [pc, #392]	@ (800a0e4 <tcp_slowtmr+0x270>)
 8009f5c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8009f60:	4965      	ldr	r1, [pc, #404]	@ (800a0f8 <tcp_slowtmr+0x284>)
 8009f62:	4862      	ldr	r0, [pc, #392]	@ (800a0ec <tcp_slowtmr+0x278>)
 8009f64:	f008 fe94 	bl	8012c90 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d106      	bne.n	8009f7e <tcp_slowtmr+0x10a>
 8009f70:	4b5c      	ldr	r3, [pc, #368]	@ (800a0e4 <tcp_slowtmr+0x270>)
 8009f72:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8009f76:	4961      	ldr	r1, [pc, #388]	@ (800a0fc <tcp_slowtmr+0x288>)
 8009f78:	485c      	ldr	r0, [pc, #368]	@ (800a0ec <tcp_slowtmr+0x278>)
 8009f7a:	f008 fe89 	bl	8012c90 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8009f84:	2b0b      	cmp	r3, #11
 8009f86:	d905      	bls.n	8009f94 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8009f88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f92:	e0ed      	b.n	800a170 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f96:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009f9a:	3b01      	subs	r3, #1
 8009f9c:	4a58      	ldr	r2, [pc, #352]	@ (800a100 <tcp_slowtmr+0x28c>)
 8009f9e:	5cd3      	ldrb	r3, [r2, r3]
 8009fa0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fa8:	7c7a      	ldrb	r2, [r7, #17]
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d907      	bls.n	8009fbe <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fba:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009fc4:	7c7a      	ldrb	r2, [r7, #17]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f200 80d2 	bhi.w	800a170 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009fcc:	2301      	movs	r3, #1
 8009fce:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d108      	bne.n	8009fec <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009fda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009fdc:	f005 f98e 	bl	800f2fc <tcp_zero_window_probe>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d014      	beq.n	800a010 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	623b      	str	r3, [r7, #32]
 8009fea:	e011      	b.n	800a010 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ff6:	f004 f831 	bl	800e05c <tcp_split_unsent_seg>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d107      	bne.n	800a010 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800a000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a002:	f004 fab1 	bl	800e568 <tcp_output>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d101      	bne.n	800a010 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800a00c:	2300      	movs	r3, #0
 800a00e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800a010:	6a3b      	ldr	r3, [r7, #32]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f000 80ac 	beq.w	800a170 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800a018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a022:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a026:	2b06      	cmp	r3, #6
 800a028:	f200 80a2 	bhi.w	800a170 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a032:	3301      	adds	r3, #1
 800a034:	b2da      	uxtb	r2, r3
 800a036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a038:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800a03c:	e098      	b.n	800a170 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a03e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a040:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a044:	2b00      	cmp	r3, #0
 800a046:	db0f      	blt.n	800a068 <tcp_slowtmr+0x1f4>
 800a048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a04e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a052:	4293      	cmp	r3, r2
 800a054:	d008      	beq.n	800a068 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800a056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	3301      	adds	r3, #1
 800a060:	b29b      	uxth	r3, r3
 800a062:	b21a      	sxth	r2, r3
 800a064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a066:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800a068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a070:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a074:	429a      	cmp	r2, r3
 800a076:	db7b      	blt.n	800a170 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a078:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a07a:	f004 fd7b 	bl	800eb74 <tcp_rexmit_rto_prepare>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d007      	beq.n	800a094 <tcp_slowtmr+0x220>
 800a084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d171      	bne.n	800a170 <tcp_slowtmr+0x2fc>
 800a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d06d      	beq.n	800a170 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800a094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a096:	7d1b      	ldrb	r3, [r3, #20]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d03a      	beq.n	800a112 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a0a2:	2b0c      	cmp	r3, #12
 800a0a4:	bf28      	it	cs
 800a0a6:	230c      	movcs	r3, #12
 800a0a8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800a0b0:	10db      	asrs	r3, r3, #3
 800a0b2:	b21b      	sxth	r3, r3
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800a0bc:	4413      	add	r3, r2
 800a0be:	7efa      	ldrb	r2, [r7, #27]
 800a0c0:	4910      	ldr	r1, [pc, #64]	@ (800a104 <tcp_slowtmr+0x290>)
 800a0c2:	5c8a      	ldrb	r2, [r1, r2]
 800a0c4:	4093      	lsls	r3, r2
 800a0c6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	dc1a      	bgt.n	800a108 <tcp_slowtmr+0x294>
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	b21a      	sxth	r2, r3
 800a0d6:	e019      	b.n	800a10c <tcp_slowtmr+0x298>
 800a0d8:	200077e8 	.word	0x200077e8
 800a0dc:	200077fe 	.word	0x200077fe
 800a0e0:	200077f4 	.word	0x200077f4
 800a0e4:	08014988 	.word	0x08014988
 800a0e8:	08014ccc 	.word	0x08014ccc
 800a0ec:	080149cc 	.word	0x080149cc
 800a0f0:	08014cf8 	.word	0x08014cf8
 800a0f4:	08014d24 	.word	0x08014d24
 800a0f8:	08014d54 	.word	0x08014d54
 800a0fc:	08014d88 	.word	0x08014d88
 800a100:	08017858 	.word	0x08017858
 800a104:	08017848 	.word	0x08017848
 800a108:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800a112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a114:	2200      	movs	r2, #0
 800a116:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800a11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a120:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800a124:	4293      	cmp	r3, r2
 800a126:	bf28      	it	cs
 800a128:	4613      	movcs	r3, r2
 800a12a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800a12c:	8a7b      	ldrh	r3, [r7, #18]
 800a12e:	085b      	lsrs	r3, r3, #1
 800a130:	b29a      	uxth	r2, r3
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800a13e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a140:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a142:	005b      	lsls	r3, r3, #1
 800a144:	b29b      	uxth	r3, r3
 800a146:	429a      	cmp	r2, r3
 800a148:	d206      	bcs.n	800a158 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800a14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a14e:	005b      	lsls	r3, r3, #1
 800a150:	b29a      	uxth	r2, r3
 800a152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a154:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800a158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800a15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a15e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800a162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a164:	2200      	movs	r2, #0
 800a166:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800a16a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a16c:	f004 fd72 	bl	800ec54 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800a170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a172:	7d1b      	ldrb	r3, [r3, #20]
 800a174:	2b06      	cmp	r3, #6
 800a176:	d111      	bne.n	800a19c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800a178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17a:	8b5b      	ldrh	r3, [r3, #26]
 800a17c:	f003 0310 	and.w	r3, r3, #16
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00b      	beq.n	800a19c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a184:	4b9d      	ldr	r3, [pc, #628]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18a:	6a1b      	ldr	r3, [r3, #32]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b28      	cmp	r3, #40	@ 0x28
 800a190:	d904      	bls.n	800a19c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800a192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a196:	3301      	adds	r3, #1
 800a198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	7a5b      	ldrb	r3, [r3, #9]
 800a1a0:	f003 0308 	and.w	r3, r3, #8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d04c      	beq.n	800a242 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800a1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1aa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a1ac:	2b04      	cmp	r3, #4
 800a1ae:	d003      	beq.n	800a1b8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800a1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1b2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800a1b4:	2b07      	cmp	r3, #7
 800a1b6:	d144      	bne.n	800a242 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1b8:	4b90      	ldr	r3, [pc, #576]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	6a1b      	ldr	r3, [r3, #32]
 800a1c0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800a1c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a1c8:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800a1cc:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800a1d0:	498b      	ldr	r1, [pc, #556]	@ (800a400 <tcp_slowtmr+0x58c>)
 800a1d2:	fba1 1303 	umull	r1, r3, r1, r3
 800a1d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d90a      	bls.n	800a1f2 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800a1dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800a1e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800a1f0:	e027      	b.n	800a242 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a1f2:	4b82      	ldr	r3, [pc, #520]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800a202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a204:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a208:	4618      	mov	r0, r3
 800a20a:	4b7e      	ldr	r3, [pc, #504]	@ (800a404 <tcp_slowtmr+0x590>)
 800a20c:	fb00 f303 	mul.w	r3, r0, r3
 800a210:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800a212:	497b      	ldr	r1, [pc, #492]	@ (800a400 <tcp_slowtmr+0x58c>)
 800a214:	fba1 1303 	umull	r1, r3, r1, r3
 800a218:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d911      	bls.n	800a242 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800a21e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a220:	f005 f82c 	bl	800f27c <tcp_keepalive>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800a22a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d107      	bne.n	800a242 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800a238:	3301      	adds	r3, #1
 800a23a:	b2da      	uxtb	r2, r3
 800a23c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800a242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a246:	2b00      	cmp	r3, #0
 800a248:	d011      	beq.n	800a26e <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800a24a:	4b6c      	ldr	r3, [pc, #432]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a250:	6a1b      	ldr	r3, [r3, #32]
 800a252:	1ad2      	subs	r2, r2, r3
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800a25a:	4619      	mov	r1, r3
 800a25c:	460b      	mov	r3, r1
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	440b      	add	r3, r1
 800a262:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800a264:	429a      	cmp	r2, r3
 800a266:	d302      	bcc.n	800a26e <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800a268:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a26a:	f000 fecb 	bl	800b004 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800a26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a270:	7d1b      	ldrb	r3, [r3, #20]
 800a272:	2b03      	cmp	r3, #3
 800a274:	d10b      	bne.n	800a28e <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a276:	4b61      	ldr	r3, [pc, #388]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	1ad3      	subs	r3, r2, r3
 800a280:	2b28      	cmp	r3, #40	@ 0x28
 800a282:	d904      	bls.n	800a28e <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800a284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a288:	3301      	adds	r3, #1
 800a28a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800a28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a290:	7d1b      	ldrb	r3, [r3, #20]
 800a292:	2b09      	cmp	r3, #9
 800a294:	d10b      	bne.n	800a2ae <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a296:	4b59      	ldr	r3, [pc, #356]	@ (800a3fc <tcp_slowtmr+0x588>)
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	2bf0      	cmp	r3, #240	@ 0xf0
 800a2a2:	d904      	bls.n	800a2ae <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800a2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800a2ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d060      	beq.n	800a378 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800a2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2bc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800a2be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a2c0:	f000 fcec 	bl	800ac9c <tcp_pcb_purge>
      if (prev != NULL) {
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d010      	beq.n	800a2ec <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a2ca:	4b4f      	ldr	r3, [pc, #316]	@ (800a408 <tcp_slowtmr+0x594>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d106      	bne.n	800a2e2 <tcp_slowtmr+0x46e>
 800a2d4:	4b4d      	ldr	r3, [pc, #308]	@ (800a40c <tcp_slowtmr+0x598>)
 800a2d6:	f240 526d 	movw	r2, #1389	@ 0x56d
 800a2da:	494d      	ldr	r1, [pc, #308]	@ (800a410 <tcp_slowtmr+0x59c>)
 800a2dc:	484d      	ldr	r0, [pc, #308]	@ (800a414 <tcp_slowtmr+0x5a0>)
 800a2de:	f008 fcd7 	bl	8012c90 <iprintf>
        prev->next = pcb->next;
 800a2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e4:	68da      	ldr	r2, [r3, #12]
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	60da      	str	r2, [r3, #12]
 800a2ea:	e00f      	b.n	800a30c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a2ec:	4b46      	ldr	r3, [pc, #280]	@ (800a408 <tcp_slowtmr+0x594>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d006      	beq.n	800a304 <tcp_slowtmr+0x490>
 800a2f6:	4b45      	ldr	r3, [pc, #276]	@ (800a40c <tcp_slowtmr+0x598>)
 800a2f8:	f240 5271 	movw	r2, #1393	@ 0x571
 800a2fc:	4946      	ldr	r1, [pc, #280]	@ (800a418 <tcp_slowtmr+0x5a4>)
 800a2fe:	4845      	ldr	r0, [pc, #276]	@ (800a414 <tcp_slowtmr+0x5a0>)
 800a300:	f008 fcc6 	bl	8012c90 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	4a3f      	ldr	r2, [pc, #252]	@ (800a408 <tcp_slowtmr+0x594>)
 800a30a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800a30c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a310:	2b00      	cmp	r3, #0
 800a312:	d013      	beq.n	800a33c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a316:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a31c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800a31e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a320:	3304      	adds	r3, #4
 800a322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a324:	8ad2      	ldrh	r2, [r2, #22]
 800a326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a328:	8b09      	ldrh	r1, [r1, #24]
 800a32a:	9102      	str	r1, [sp, #8]
 800a32c:	9201      	str	r2, [sp, #4]
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	462b      	mov	r3, r5
 800a332:	4622      	mov	r2, r4
 800a334:	4601      	mov	r1, r0
 800a336:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a338:	f004 feec 	bl	800f114 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800a342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a344:	7d1b      	ldrb	r3, [r3, #20]
 800a346:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800a348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800a34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a352:	6838      	ldr	r0, [r7, #0]
 800a354:	f7ff f836 	bl	80093c4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800a358:	4b30      	ldr	r3, [pc, #192]	@ (800a41c <tcp_slowtmr+0x5a8>)
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d004      	beq.n	800a36e <tcp_slowtmr+0x4fa>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f06f 010c 	mvn.w	r1, #12
 800a36a:	68b8      	ldr	r0, [r7, #8]
 800a36c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800a36e:	4b2b      	ldr	r3, [pc, #172]	@ (800a41c <tcp_slowtmr+0x5a8>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d037      	beq.n	800a3e6 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800a376:	e590      	b.n	8009e9a <tcp_slowtmr+0x26>
      prev = pcb;
 800a378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37e:	68db      	ldr	r3, [r3, #12]
 800a380:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	7f1b      	ldrb	r3, [r3, #28]
 800a386:	3301      	adds	r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a38c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	7f1a      	ldrb	r2, [r3, #28]
 800a392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a394:	7f5b      	ldrb	r3, [r3, #29]
 800a396:	429a      	cmp	r2, r3
 800a398:	d325      	bcc.n	800a3e6 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	2200      	movs	r2, #0
 800a39e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800a3a0:	4b1e      	ldr	r3, [pc, #120]	@ (800a41c <tcp_slowtmr+0x5a8>)
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00b      	beq.n	800a3c8 <tcp_slowtmr+0x554>
 800a3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a3b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3b8:	6912      	ldr	r2, [r2, #16]
 800a3ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3bc:	4610      	mov	r0, r2
 800a3be:	4798      	blx	r3
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800a3c6:	e002      	b.n	800a3ce <tcp_slowtmr+0x55a>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800a3ce:	4b13      	ldr	r3, [pc, #76]	@ (800a41c <tcp_slowtmr+0x5a8>)
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	f47f ad60 	bne.w	8009e98 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800a3d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d102      	bne.n	800a3e6 <tcp_slowtmr+0x572>
          tcp_output(prev);
 800a3e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3e2:	f004 f8c1 	bl	800e568 <tcp_output>
  while (pcb != NULL) {
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f47f ad5c 	bne.w	8009ea6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800a420 <tcp_slowtmr+0x5ac>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a3f8:	e067      	b.n	800a4ca <tcp_slowtmr+0x656>
 800a3fa:	bf00      	nop
 800a3fc:	200077e8 	.word	0x200077e8
 800a400:	10624dd3 	.word	0x10624dd3
 800a404:	000124f8 	.word	0x000124f8
 800a408:	200077f4 	.word	0x200077f4
 800a40c:	08014988 	.word	0x08014988
 800a410:	08014dc0 	.word	0x08014dc0
 800a414:	080149cc 	.word	0x080149cc
 800a418:	08014dec 	.word	0x08014dec
 800a41c:	200077fc 	.word	0x200077fc
 800a420:	200077f8 	.word	0x200077f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a426:	7d1b      	ldrb	r3, [r3, #20]
 800a428:	2b0a      	cmp	r3, #10
 800a42a:	d006      	beq.n	800a43a <tcp_slowtmr+0x5c6>
 800a42c:	4b2b      	ldr	r3, [pc, #172]	@ (800a4dc <tcp_slowtmr+0x668>)
 800a42e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800a432:	492b      	ldr	r1, [pc, #172]	@ (800a4e0 <tcp_slowtmr+0x66c>)
 800a434:	482b      	ldr	r0, [pc, #172]	@ (800a4e4 <tcp_slowtmr+0x670>)
 800a436:	f008 fc2b 	bl	8012c90 <iprintf>
    pcb_remove = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a440:	4b29      	ldr	r3, [pc, #164]	@ (800a4e8 <tcp_slowtmr+0x674>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2bf0      	cmp	r3, #240	@ 0xf0
 800a44c:	d904      	bls.n	800a458 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800a44e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a452:	3301      	adds	r3, #1
 800a454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800a458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d02f      	beq.n	800a4c0 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800a460:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a462:	f000 fc1b 	bl	800ac9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800a466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d010      	beq.n	800a48e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a46c:	4b1f      	ldr	r3, [pc, #124]	@ (800a4ec <tcp_slowtmr+0x678>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a472:	429a      	cmp	r2, r3
 800a474:	d106      	bne.n	800a484 <tcp_slowtmr+0x610>
 800a476:	4b19      	ldr	r3, [pc, #100]	@ (800a4dc <tcp_slowtmr+0x668>)
 800a478:	f240 52af 	movw	r2, #1455	@ 0x5af
 800a47c:	491c      	ldr	r1, [pc, #112]	@ (800a4f0 <tcp_slowtmr+0x67c>)
 800a47e:	4819      	ldr	r0, [pc, #100]	@ (800a4e4 <tcp_slowtmr+0x670>)
 800a480:	f008 fc06 	bl	8012c90 <iprintf>
        prev->next = pcb->next;
 800a484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a486:	68da      	ldr	r2, [r3, #12]
 800a488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48a:	60da      	str	r2, [r3, #12]
 800a48c:	e00f      	b.n	800a4ae <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a48e:	4b17      	ldr	r3, [pc, #92]	@ (800a4ec <tcp_slowtmr+0x678>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a494:	429a      	cmp	r2, r3
 800a496:	d006      	beq.n	800a4a6 <tcp_slowtmr+0x632>
 800a498:	4b10      	ldr	r3, [pc, #64]	@ (800a4dc <tcp_slowtmr+0x668>)
 800a49a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800a49e:	4915      	ldr	r1, [pc, #84]	@ (800a4f4 <tcp_slowtmr+0x680>)
 800a4a0:	4810      	ldr	r0, [pc, #64]	@ (800a4e4 <tcp_slowtmr+0x670>)
 800a4a2:	f008 fbf5 	bl	8012c90 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	4a10      	ldr	r2, [pc, #64]	@ (800a4ec <tcp_slowtmr+0x678>)
 800a4ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800a4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b4:	68db      	ldr	r3, [r3, #12]
 800a4b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800a4b8:	69f8      	ldr	r0, [r7, #28]
 800a4ba:	f7fe ff83 	bl	80093c4 <tcp_free>
 800a4be:	e004      	b.n	800a4ca <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800a4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800a4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1a9      	bne.n	800a424 <tcp_slowtmr+0x5b0>
    }
  }
}
 800a4d0:	bf00      	nop
 800a4d2:	bf00      	nop
 800a4d4:	3730      	adds	r7, #48	@ 0x30
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	08014988 	.word	0x08014988
 800a4e0:	08014e18 	.word	0x08014e18
 800a4e4:	080149cc 	.word	0x080149cc
 800a4e8:	200077e8 	.word	0x200077e8
 800a4ec:	200077f8 	.word	0x200077f8
 800a4f0:	08014e48 	.word	0x08014e48
 800a4f4:	08014e70 	.word	0x08014e70

0800a4f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a4fe:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b4 <tcp_fasttmr+0xbc>)
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	b2da      	uxtb	r2, r3
 800a506:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b4 <tcp_fasttmr+0xbc>)
 800a508:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a50a:	4b2b      	ldr	r3, [pc, #172]	@ (800a5b8 <tcp_fasttmr+0xc0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a510:	e048      	b.n	800a5a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7f9a      	ldrb	r2, [r3, #30]
 800a516:	4b27      	ldr	r3, [pc, #156]	@ (800a5b4 <tcp_fasttmr+0xbc>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d03f      	beq.n	800a59e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a51e:	4b25      	ldr	r3, [pc, #148]	@ (800a5b4 <tcp_fasttmr+0xbc>)
 800a520:	781a      	ldrb	r2, [r3, #0]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	8b5b      	ldrh	r3, [r3, #26]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d010      	beq.n	800a554 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	8b5b      	ldrh	r3, [r3, #26]
 800a536:	f043 0302 	orr.w	r3, r3, #2
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f004 f811 	bl	800e568 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	8b5b      	ldrh	r3, [r3, #26]
 800a54a:	f023 0303 	bic.w	r3, r3, #3
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	8b5b      	ldrh	r3, [r3, #26]
 800a558:	f003 0308 	and.w	r3, r3, #8
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	8b5b      	ldrh	r3, [r3, #26]
 800a564:	f023 0308 	bic.w	r3, r3, #8
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f7ff f8bc 	bl	80096ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a582:	4b0e      	ldr	r3, [pc, #56]	@ (800a5bc <tcp_fasttmr+0xc4>)
 800a584:	2200      	movs	r2, #0
 800a586:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 f819 	bl	800a5c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a58e:	4b0b      	ldr	r3, [pc, #44]	@ (800a5bc <tcp_fasttmr+0xc4>)
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d000      	beq.n	800a598 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a596:	e7b8      	b.n	800a50a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	607b      	str	r3, [r7, #4]
 800a59c:	e002      	b.n	800a5a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1b3      	bne.n	800a512 <tcp_fasttmr+0x1a>
    }
  }
}
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	200077fe 	.word	0x200077fe
 800a5b8:	200077f4 	.word	0x200077f4
 800a5bc:	200077fc 	.word	0x200077fc

0800a5c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a5c0:	b590      	push	{r4, r7, lr}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d109      	bne.n	800a5e2 <tcp_process_refused_data+0x22>
 800a5ce:	4b37      	ldr	r3, [pc, #220]	@ (800a6ac <tcp_process_refused_data+0xec>)
 800a5d0:	f240 6209 	movw	r2, #1545	@ 0x609
 800a5d4:	4936      	ldr	r1, [pc, #216]	@ (800a6b0 <tcp_process_refused_data+0xf0>)
 800a5d6:	4837      	ldr	r0, [pc, #220]	@ (800a6b4 <tcp_process_refused_data+0xf4>)
 800a5d8:	f008 fb5a 	bl	8012c90 <iprintf>
 800a5dc:	f06f 030f 	mvn.w	r3, #15
 800a5e0:	e060      	b.n	800a6a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5e6:	7b5b      	ldrb	r3, [r3, #13]
 800a5e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d00b      	beq.n	800a618 <tcp_process_refused_data+0x58>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6918      	ldr	r0, [r3, #16]
 800a60a:	2300      	movs	r3, #0
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	6879      	ldr	r1, [r7, #4]
 800a610:	47a0      	blx	r4
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
 800a616:	e007      	b.n	800a628 <tcp_process_refused_data+0x68>
 800a618:	2300      	movs	r3, #0
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	6879      	ldr	r1, [r7, #4]
 800a61e:	2000      	movs	r0, #0
 800a620:	f000 f8c2 	bl	800a7a8 <tcp_recv_null>
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d12a      	bne.n	800a686 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a630:	7bbb      	ldrb	r3, [r7, #14]
 800a632:	f003 0320 	and.w	r3, r3, #32
 800a636:	2b00      	cmp	r3, #0
 800a638:	d033      	beq.n	800a6a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a63e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800a642:	d005      	beq.n	800a650 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a648:	3301      	adds	r3, #1
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00b      	beq.n	800a672 <tcp_process_refused_data+0xb2>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6918      	ldr	r0, [r3, #16]
 800a664:	2300      	movs	r3, #0
 800a666:	2200      	movs	r2, #0
 800a668:	6879      	ldr	r1, [r7, #4]
 800a66a:	47a0      	blx	r4
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]
 800a670:	e001      	b.n	800a676 <tcp_process_refused_data+0xb6>
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a67a:	f113 0f0d 	cmn.w	r3, #13
 800a67e:	d110      	bne.n	800a6a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a680:	f06f 030c 	mvn.w	r3, #12
 800a684:	e00e      	b.n	800a6a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a68a:	f113 0f0d 	cmn.w	r3, #13
 800a68e:	d102      	bne.n	800a696 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a690:	f06f 030c 	mvn.w	r3, #12
 800a694:	e006      	b.n	800a6a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800a69c:	f06f 0304 	mvn.w	r3, #4
 800a6a0:	e000      	b.n	800a6a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a6a2:	2300      	movs	r3, #0
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd90      	pop	{r4, r7, pc}
 800a6ac:	08014988 	.word	0x08014988
 800a6b0:	08014e98 	.word	0x08014e98
 800a6b4:	080149cc 	.word	0x080149cc

0800a6b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a6c0:	e007      	b.n	800a6d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f000 f80a 	bl	800a6e2 <tcp_seg_free>
    seg = next;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d1f4      	bne.n	800a6c2 <tcp_segs_free+0xa>
  }
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00c      	beq.n	800a70a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d004      	beq.n	800a702 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f7fe fbd9 	bl	8008eb4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	2003      	movs	r0, #3
 800a706:	f7fd fd9d 	bl	8008244 <memp_free>
  }
}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
	...

0800a714 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d107      	bne.n	800a736 <tcp_setprio+0x22>
 800a726:	4b07      	ldr	r3, [pc, #28]	@ (800a744 <tcp_setprio+0x30>)
 800a728:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 800a72c:	4906      	ldr	r1, [pc, #24]	@ (800a748 <tcp_setprio+0x34>)
 800a72e:	4807      	ldr	r0, [pc, #28]	@ (800a74c <tcp_setprio+0x38>)
 800a730:	f008 faae 	bl	8012c90 <iprintf>
 800a734:	e002      	b.n	800a73c <tcp_setprio+0x28>

  pcb->prio = prio;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	78fa      	ldrb	r2, [r7, #3]
 800a73a:	755a      	strb	r2, [r3, #21]
}
 800a73c:	3708      	adds	r7, #8
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	08014988 	.word	0x08014988
 800a748:	08014ec0 	.word	0x08014ec0
 800a74c:	080149cc 	.word	0x080149cc

0800a750 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <tcp_seg_copy+0x1c>
 800a75e:	4b0f      	ldr	r3, [pc, #60]	@ (800a79c <tcp_seg_copy+0x4c>)
 800a760:	f240 6282 	movw	r2, #1666	@ 0x682
 800a764:	490e      	ldr	r1, [pc, #56]	@ (800a7a0 <tcp_seg_copy+0x50>)
 800a766:	480f      	ldr	r0, [pc, #60]	@ (800a7a4 <tcp_seg_copy+0x54>)
 800a768:	f008 fa92 	bl	8012c90 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a76c:	2003      	movs	r0, #3
 800a76e:	f7fd fd17 	bl	80081a0 <memp_malloc>
 800a772:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <tcp_seg_copy+0x2e>
    return NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	e00a      	b.n	800a794 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a77e:	2210      	movs	r2, #16
 800a780:	6879      	ldr	r1, [r7, #4]
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f008 fbd3 	bl	8012f2e <memcpy>
  pbuf_ref(cseg->p);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe fc35 	bl	8008ffc <pbuf_ref>
  return cseg;
 800a792:	68fb      	ldr	r3, [r7, #12]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	08014988 	.word	0x08014988
 800a7a0:	08014edc 	.word	0x08014edc
 800a7a4:	080149cc 	.word	0x080149cc

0800a7a8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b084      	sub	sp, #16
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	607a      	str	r2, [r7, #4]
 800a7b4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d109      	bne.n	800a7d0 <tcp_recv_null+0x28>
 800a7bc:	4b12      	ldr	r3, [pc, #72]	@ (800a808 <tcp_recv_null+0x60>)
 800a7be:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a7c2:	4912      	ldr	r1, [pc, #72]	@ (800a80c <tcp_recv_null+0x64>)
 800a7c4:	4812      	ldr	r0, [pc, #72]	@ (800a810 <tcp_recv_null+0x68>)
 800a7c6:	f008 fa63 	bl	8012c90 <iprintf>
 800a7ca:	f06f 030f 	mvn.w	r3, #15
 800a7ce:	e016      	b.n	800a7fe <tcp_recv_null+0x56>

  if (p != NULL) {
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d009      	beq.n	800a7ea <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	891b      	ldrh	r3, [r3, #8]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	68b8      	ldr	r0, [r7, #8]
 800a7de:	f7ff fab3 	bl	8009d48 <tcp_recved>
    pbuf_free(p);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f7fe fb66 	bl	8008eb4 <pbuf_free>
 800a7e8:	e008      	b.n	800a7fc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a7ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d104      	bne.n	800a7fc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a7f2:	68b8      	ldr	r0, [r7, #8]
 800a7f4:	f7fe ffe4 	bl	80097c0 <tcp_close>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	e000      	b.n	800a7fe <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	08014988 	.word	0x08014988
 800a80c:	08014ef8 	.word	0x08014ef8
 800a810:	080149cc 	.word	0x080149cc

0800a814 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b086      	sub	sp, #24
 800a818:	af00      	add	r7, sp, #0
 800a81a:	4603      	mov	r3, r0
 800a81c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a81e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a822:	2b00      	cmp	r3, #0
 800a824:	db01      	blt.n	800a82a <tcp_kill_prio+0x16>
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	e000      	b.n	800a82c <tcp_kill_prio+0x18>
 800a82a:	237f      	movs	r3, #127	@ 0x7f
 800a82c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a82e:	7afb      	ldrb	r3, [r7, #11]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d034      	beq.n	800a89e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	3b01      	subs	r3, #1
 800a838:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a83e:	2300      	movs	r3, #0
 800a840:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a842:	4b19      	ldr	r3, [pc, #100]	@ (800a8a8 <tcp_kill_prio+0x94>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	e01f      	b.n	800a88a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	7d5b      	ldrb	r3, [r3, #21]
 800a84e:	7afa      	ldrb	r2, [r7, #11]
 800a850:	429a      	cmp	r2, r3
 800a852:	d80c      	bhi.n	800a86e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a858:	7afa      	ldrb	r2, [r7, #11]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d112      	bne.n	800a884 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a85e:	4b13      	ldr	r3, [pc, #76]	@ (800a8ac <tcp_kill_prio+0x98>)
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	1ad3      	subs	r3, r2, r3
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d80a      	bhi.n	800a884 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a86e:	4b0f      	ldr	r3, [pc, #60]	@ (800a8ac <tcp_kill_prio+0x98>)
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	7d5b      	ldrb	r3, [r3, #21]
 800a882:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d1dc      	bne.n	800a84a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d004      	beq.n	800a8a0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a896:	6938      	ldr	r0, [r7, #16]
 800a898:	f7ff f87c 	bl	8009994 <tcp_abort>
 800a89c:	e000      	b.n	800a8a0 <tcp_kill_prio+0x8c>
    return;
 800a89e:	bf00      	nop
  }
}
 800a8a0:	3718      	adds	r7, #24
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	200077f4 	.word	0x200077f4
 800a8ac:	200077e8 	.word	0x200077e8

0800a8b0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a8ba:	79fb      	ldrb	r3, [r7, #7]
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d009      	beq.n	800a8d4 <tcp_kill_state+0x24>
 800a8c0:	79fb      	ldrb	r3, [r7, #7]
 800a8c2:	2b09      	cmp	r3, #9
 800a8c4:	d006      	beq.n	800a8d4 <tcp_kill_state+0x24>
 800a8c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a930 <tcp_kill_state+0x80>)
 800a8c8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a8cc:	4919      	ldr	r1, [pc, #100]	@ (800a934 <tcp_kill_state+0x84>)
 800a8ce:	481a      	ldr	r0, [pc, #104]	@ (800a938 <tcp_kill_state+0x88>)
 800a8d0:	f008 f9de 	bl	8012c90 <iprintf>

  inactivity = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a8dc:	4b17      	ldr	r3, [pc, #92]	@ (800a93c <tcp_kill_state+0x8c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e017      	b.n	800a914 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	7d1b      	ldrb	r3, [r3, #20]
 800a8e8:	79fa      	ldrb	r2, [r7, #7]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d10f      	bne.n	800a90e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a8ee:	4b14      	ldr	r3, [pc, #80]	@ (800a940 <tcp_kill_state+0x90>)
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d807      	bhi.n	800a90e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a8fe:	4b10      	ldr	r3, [pc, #64]	@ (800a940 <tcp_kill_state+0x90>)
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	1ad3      	subs	r3, r2, r3
 800a908:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d1e4      	bne.n	800a8e4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d003      	beq.n	800a928 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a920:	2100      	movs	r1, #0
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f7fe ff78 	bl	8009818 <tcp_abandon>
  }
}
 800a928:	bf00      	nop
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	08014988 	.word	0x08014988
 800a934:	08014f14 	.word	0x08014f14
 800a938:	080149cc 	.word	0x080149cc
 800a93c:	200077f4 	.word	0x200077f4
 800a940:	200077e8 	.word	0x200077e8

0800a944 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a952:	4b12      	ldr	r3, [pc, #72]	@ (800a99c <tcp_kill_timewait+0x58>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
 800a958:	e012      	b.n	800a980 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a95a:	4b11      	ldr	r3, [pc, #68]	@ (800a9a0 <tcp_kill_timewait+0x5c>)
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a1b      	ldr	r3, [r3, #32]
 800a962:	1ad3      	subs	r3, r2, r3
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	429a      	cmp	r2, r3
 800a968:	d807      	bhi.n	800a97a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a96a:	4b0d      	ldr	r3, [pc, #52]	@ (800a9a0 <tcp_kill_timewait+0x5c>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e9      	bne.n	800a95a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d002      	beq.n	800a992 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a98c:	68b8      	ldr	r0, [r7, #8]
 800a98e:	f7ff f801 	bl	8009994 <tcp_abort>
  }
}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200077f8 	.word	0x200077f8
 800a9a0:	200077e8 	.word	0x200077e8

0800a9a4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b082      	sub	sp, #8
 800a9a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a9aa:	4b10      	ldr	r3, [pc, #64]	@ (800a9ec <tcp_handle_closepend+0x48>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a9b0:	e014      	b.n	800a9dc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	8b5b      	ldrh	r3, [r3, #26]
 800a9bc:	f003 0308 	and.w	r3, r3, #8
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d009      	beq.n	800a9d8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	8b5b      	ldrh	r3, [r3, #26]
 800a9c8:	f023 0308 	bic.w	r3, r3, #8
 800a9cc:	b29a      	uxth	r2, r3
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7fe fe8a 	bl	80096ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e7      	bne.n	800a9b2 <tcp_handle_closepend+0xe>
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	bf00      	nop
 800a9e6:	3708      	adds	r7, #8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	200077f4 	.word	0x200077f4

0800a9f0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a9fa:	2001      	movs	r0, #1
 800a9fc:	f7fd fbd0 	bl	80081a0 <memp_malloc>
 800aa00:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d126      	bne.n	800aa56 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800aa08:	f7ff ffcc 	bl	800a9a4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800aa0c:	f7ff ff9a 	bl	800a944 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa10:	2001      	movs	r0, #1
 800aa12:	f7fd fbc5 	bl	80081a0 <memp_malloc>
 800aa16:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d11b      	bne.n	800aa56 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800aa1e:	2009      	movs	r0, #9
 800aa20:	f7ff ff46 	bl	800a8b0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa24:	2001      	movs	r0, #1
 800aa26:	f7fd fbbb 	bl	80081a0 <memp_malloc>
 800aa2a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d111      	bne.n	800aa56 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800aa32:	2008      	movs	r0, #8
 800aa34:	f7ff ff3c 	bl	800a8b0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f7fd fbb1 	bl	80081a0 <memp_malloc>
 800aa3e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d107      	bne.n	800aa56 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7ff fee3 	bl	800a814 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800aa4e:	2001      	movs	r0, #1
 800aa50:	f7fd fba6 	bl	80081a0 <memp_malloc>
 800aa54:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d03f      	beq.n	800aadc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aa5c:	229c      	movs	r2, #156	@ 0x9c
 800aa5e:	2100      	movs	r1, #0
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f008 f97a 	bl	8012d5a <memset>
    pcb->prio = prio;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	79fa      	ldrb	r2, [r7, #7]
 800aa6a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800aa72:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800aa7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	22ff      	movs	r2, #255	@ 0xff
 800aa8a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800aa92:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2206      	movs	r2, #6
 800aa98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2206      	movs	r2, #6
 800aaa0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aaa8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800aab2:	4b0d      	ldr	r3, [pc, #52]	@ (800aae8 <tcp_alloc+0xf8>)
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800aaba:	4b0c      	ldr	r3, [pc, #48]	@ (800aaec <tcp_alloc+0xfc>)
 800aabc:	781a      	ldrb	r2, [r3, #0]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800aac8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4a08      	ldr	r2, [pc, #32]	@ (800aaf0 <tcp_alloc+0x100>)
 800aad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	4a07      	ldr	r2, [pc, #28]	@ (800aaf4 <tcp_alloc+0x104>)
 800aad8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800aadc:	68fb      	ldr	r3, [r7, #12]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	200077e8 	.word	0x200077e8
 800aaec:	200077fe 	.word	0x200077fe
 800aaf0:	0800a7a9 	.word	0x0800a7a9
 800aaf4:	006ddd00 	.word	0x006ddd00

0800aaf8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800aafc:	2040      	movs	r0, #64	@ 0x40
 800aafe:	f7ff ff77 	bl	800a9f0 <tcp_alloc>
 800ab02:	4603      	mov	r3, r0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ab12:	2040      	movs	r0, #64	@ 0x40
 800ab14:	f7ff ff6c 	bl	800a9f0 <tcp_alloc>
 800ab18:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	611a      	str	r2, [r3, #16]
  }
}
 800ab3a:	bf00      	nop
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bc80      	pop	{r7}
 800ab42:	4770      	bx	lr

0800ab44 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00e      	beq.n	800ab72 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7d1b      	ldrb	r3, [r3, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d106      	bne.n	800ab6a <tcp_recv+0x26>
 800ab5c:	4b07      	ldr	r3, [pc, #28]	@ (800ab7c <tcp_recv+0x38>)
 800ab5e:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ab62:	4907      	ldr	r1, [pc, #28]	@ (800ab80 <tcp_recv+0x3c>)
 800ab64:	4807      	ldr	r0, [pc, #28]	@ (800ab84 <tcp_recv+0x40>)
 800ab66:	f008 f893 	bl	8012c90 <iprintf>
    pcb->recv = recv;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ab72:	bf00      	nop
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	08014988 	.word	0x08014988
 800ab80:	08014f24 	.word	0x08014f24
 800ab84:	080149cc 	.word	0x080149cc

0800ab88 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00e      	beq.n	800abb6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	7d1b      	ldrb	r3, [r3, #20]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d106      	bne.n	800abae <tcp_sent+0x26>
 800aba0:	4b07      	ldr	r3, [pc, #28]	@ (800abc0 <tcp_sent+0x38>)
 800aba2:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800aba6:	4907      	ldr	r1, [pc, #28]	@ (800abc4 <tcp_sent+0x3c>)
 800aba8:	4807      	ldr	r0, [pc, #28]	@ (800abc8 <tcp_sent+0x40>)
 800abaa:	f008 f871 	bl	8012c90 <iprintf>
    pcb->sent = sent;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	683a      	ldr	r2, [r7, #0]
 800abb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	08014988 	.word	0x08014988
 800abc4:	08014f4c 	.word	0x08014f4c
 800abc8:	080149cc 	.word	0x080149cc

0800abcc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00e      	beq.n	800abfa <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7d1b      	ldrb	r3, [r3, #20]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d106      	bne.n	800abf2 <tcp_err+0x26>
 800abe4:	4b07      	ldr	r3, [pc, #28]	@ (800ac04 <tcp_err+0x38>)
 800abe6:	f640 020d 	movw	r2, #2061	@ 0x80d
 800abea:	4907      	ldr	r1, [pc, #28]	@ (800ac08 <tcp_err+0x3c>)
 800abec:	4807      	ldr	r0, [pc, #28]	@ (800ac0c <tcp_err+0x40>)
 800abee:	f008 f84f 	bl	8012c90 <iprintf>
    pcb->errf = err;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	683a      	ldr	r2, [r7, #0]
 800abf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800abfa:	bf00      	nop
 800abfc:	3708      	adds	r7, #8
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08014988 	.word	0x08014988
 800ac08:	08014f74 	.word	0x08014f74
 800ac0c:	080149cc 	.word	0x080149cc

0800ac10 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <tcp_accept+0x22>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	7d1b      	ldrb	r3, [r3, #20]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d104      	bne.n	800ac32 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	683a      	ldr	r2, [r7, #0]
 800ac30:	619a      	str	r2, [r3, #24]
  }
}
 800ac32:	bf00      	nop
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bc80      	pop	{r7}
 800ac3a:	4770      	bx	lr

0800ac3c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b084      	sub	sp, #16
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d107      	bne.n	800ac60 <tcp_poll+0x24>
 800ac50:	4b0e      	ldr	r3, [pc, #56]	@ (800ac8c <tcp_poll+0x50>)
 800ac52:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ac56:	490e      	ldr	r1, [pc, #56]	@ (800ac90 <tcp_poll+0x54>)
 800ac58:	480e      	ldr	r0, [pc, #56]	@ (800ac94 <tcp_poll+0x58>)
 800ac5a:	f008 f819 	bl	8012c90 <iprintf>
 800ac5e:	e011      	b.n	800ac84 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	7d1b      	ldrb	r3, [r3, #20]
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d106      	bne.n	800ac76 <tcp_poll+0x3a>
 800ac68:	4b08      	ldr	r3, [pc, #32]	@ (800ac8c <tcp_poll+0x50>)
 800ac6a:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ac6e:	490a      	ldr	r1, [pc, #40]	@ (800ac98 <tcp_poll+0x5c>)
 800ac70:	4808      	ldr	r0, [pc, #32]	@ (800ac94 <tcp_poll+0x58>)
 800ac72:	f008 f80d 	bl	8012c90 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	68ba      	ldr	r2, [r7, #8]
 800ac7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	79fa      	ldrb	r2, [r7, #7]
 800ac82:	775a      	strb	r2, [r3, #29]
}
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	08014988 	.word	0x08014988
 800ac90:	08014f9c 	.word	0x08014f9c
 800ac94:	080149cc 	.word	0x080149cc
 800ac98:	08014fb4 	.word	0x08014fb4

0800ac9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d107      	bne.n	800acba <tcp_pcb_purge+0x1e>
 800acaa:	4b21      	ldr	r3, [pc, #132]	@ (800ad30 <tcp_pcb_purge+0x94>)
 800acac:	f640 0251 	movw	r2, #2129	@ 0x851
 800acb0:	4920      	ldr	r1, [pc, #128]	@ (800ad34 <tcp_pcb_purge+0x98>)
 800acb2:	4821      	ldr	r0, [pc, #132]	@ (800ad38 <tcp_pcb_purge+0x9c>)
 800acb4:	f007 ffec 	bl	8012c90 <iprintf>
 800acb8:	e037      	b.n	800ad2a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d033      	beq.n	800ad2a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800acc6:	2b0a      	cmp	r3, #10
 800acc8:	d02f      	beq.n	800ad2a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d02b      	beq.n	800ad2a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe f8e8 	bl	8008eb4 <pbuf_free>
      pcb->refused_data = NULL;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d002      	beq.n	800acf8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f986 	bl	800b004 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800acfe:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fcd7 	bl	800a6b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7ff fcd2 	bl	800a6b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	08014988 	.word	0x08014988
 800ad34:	08014fd4 	.word	0x08014fd4
 800ad38:	080149cc 	.word	0x080149cc

0800ad3c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d106      	bne.n	800ad5a <tcp_pcb_remove+0x1e>
 800ad4c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae48 <tcp_pcb_remove+0x10c>)
 800ad4e:	f640 0283 	movw	r2, #2179	@ 0x883
 800ad52:	493e      	ldr	r1, [pc, #248]	@ (800ae4c <tcp_pcb_remove+0x110>)
 800ad54:	483e      	ldr	r0, [pc, #248]	@ (800ae50 <tcp_pcb_remove+0x114>)
 800ad56:	f007 ff9b 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d106      	bne.n	800ad6e <tcp_pcb_remove+0x32>
 800ad60:	4b39      	ldr	r3, [pc, #228]	@ (800ae48 <tcp_pcb_remove+0x10c>)
 800ad62:	f640 0284 	movw	r2, #2180	@ 0x884
 800ad66:	493b      	ldr	r1, [pc, #236]	@ (800ae54 <tcp_pcb_remove+0x118>)
 800ad68:	4839      	ldr	r0, [pc, #228]	@ (800ae50 <tcp_pcb_remove+0x114>)
 800ad6a:	f007 ff91 	bl	8012c90 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	683a      	ldr	r2, [r7, #0]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d105      	bne.n	800ad84 <tcp_pcb_remove+0x48>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68da      	ldr	r2, [r3, #12]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	601a      	str	r2, [r3, #0]
 800ad82:	e013      	b.n	800adac <tcp_pcb_remove+0x70>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	60fb      	str	r3, [r7, #12]
 800ad8a:	e00c      	b.n	800ada6 <tcp_pcb_remove+0x6a>
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d104      	bne.n	800ada0 <tcp_pcb_remove+0x64>
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	68da      	ldr	r2, [r3, #12]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	60da      	str	r2, [r3, #12]
 800ad9e:	e005      	b.n	800adac <tcp_pcb_remove+0x70>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	60fb      	str	r3, [r7, #12]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1ef      	bne.n	800ad8c <tcp_pcb_remove+0x50>
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800adb2:	6838      	ldr	r0, [r7, #0]
 800adb4:	f7ff ff72 	bl	800ac9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	7d1b      	ldrb	r3, [r3, #20]
 800adbc:	2b0a      	cmp	r3, #10
 800adbe:	d013      	beq.n	800ade8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d00f      	beq.n	800ade8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	8b5b      	ldrh	r3, [r3, #26]
 800adcc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	8b5b      	ldrh	r3, [r3, #26]
 800add8:	f043 0302 	orr.w	r3, r3, #2
 800addc:	b29a      	uxth	r2, r3
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ade2:	6838      	ldr	r0, [r7, #0]
 800ade4:	f003 fbc0 	bl	800e568 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	7d1b      	ldrb	r3, [r3, #20]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d020      	beq.n	800ae32 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d006      	beq.n	800ae06 <tcp_pcb_remove+0xca>
 800adf8:	4b13      	ldr	r3, [pc, #76]	@ (800ae48 <tcp_pcb_remove+0x10c>)
 800adfa:	f640 0293 	movw	r2, #2195	@ 0x893
 800adfe:	4916      	ldr	r1, [pc, #88]	@ (800ae58 <tcp_pcb_remove+0x11c>)
 800ae00:	4813      	ldr	r0, [pc, #76]	@ (800ae50 <tcp_pcb_remove+0x114>)
 800ae02:	f007 ff45 	bl	8012c90 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d006      	beq.n	800ae1c <tcp_pcb_remove+0xe0>
 800ae0e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae48 <tcp_pcb_remove+0x10c>)
 800ae10:	f640 0294 	movw	r2, #2196	@ 0x894
 800ae14:	4911      	ldr	r1, [pc, #68]	@ (800ae5c <tcp_pcb_remove+0x120>)
 800ae16:	480e      	ldr	r0, [pc, #56]	@ (800ae50 <tcp_pcb_remove+0x114>)
 800ae18:	f007 ff3a 	bl	8012c90 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d006      	beq.n	800ae32 <tcp_pcb_remove+0xf6>
 800ae24:	4b08      	ldr	r3, [pc, #32]	@ (800ae48 <tcp_pcb_remove+0x10c>)
 800ae26:	f640 0296 	movw	r2, #2198	@ 0x896
 800ae2a:	490d      	ldr	r1, [pc, #52]	@ (800ae60 <tcp_pcb_remove+0x124>)
 800ae2c:	4808      	ldr	r0, [pc, #32]	@ (800ae50 <tcp_pcb_remove+0x114>)
 800ae2e:	f007 ff2f 	bl	8012c90 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	2200      	movs	r2, #0
 800ae36:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ae3e:	bf00      	nop
 800ae40:	3710      	adds	r7, #16
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	08014988 	.word	0x08014988
 800ae4c:	08014ff0 	.word	0x08014ff0
 800ae50:	080149cc 	.word	0x080149cc
 800ae54:	0801500c 	.word	0x0801500c
 800ae58:	0801502c 	.word	0x0801502c
 800ae5c:	08015044 	.word	0x08015044
 800ae60:	08015060 	.word	0x08015060

0800ae64 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <tcp_next_iss+0x1c>
 800ae72:	4b0a      	ldr	r3, [pc, #40]	@ (800ae9c <tcp_next_iss+0x38>)
 800ae74:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ae78:	4909      	ldr	r1, [pc, #36]	@ (800aea0 <tcp_next_iss+0x3c>)
 800ae7a:	480a      	ldr	r0, [pc, #40]	@ (800aea4 <tcp_next_iss+0x40>)
 800ae7c:	f007 ff08 	bl	8012c90 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ae80:	4b09      	ldr	r3, [pc, #36]	@ (800aea8 <tcp_next_iss+0x44>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b09      	ldr	r3, [pc, #36]	@ (800aeac <tcp_next_iss+0x48>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4413      	add	r3, r2
 800ae8a:	4a07      	ldr	r2, [pc, #28]	@ (800aea8 <tcp_next_iss+0x44>)
 800ae8c:	6013      	str	r3, [r2, #0]
  return iss;
 800ae8e:	4b06      	ldr	r3, [pc, #24]	@ (800aea8 <tcp_next_iss+0x44>)
 800ae90:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3708      	adds	r7, #8
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	08014988 	.word	0x08014988
 800aea0:	08015078 	.word	0x08015078
 800aea4:	080149cc 	.word	0x080149cc
 800aea8:	20000014 	.word	0x20000014
 800aeac:	200077e8 	.word	0x200077e8

0800aeb0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d106      	bne.n	800aed2 <tcp_eff_send_mss_netif+0x22>
 800aec4:	4b14      	ldr	r3, [pc, #80]	@ (800af18 <tcp_eff_send_mss_netif+0x68>)
 800aec6:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800aeca:	4914      	ldr	r1, [pc, #80]	@ (800af1c <tcp_eff_send_mss_netif+0x6c>)
 800aecc:	4814      	ldr	r0, [pc, #80]	@ (800af20 <tcp_eff_send_mss_netif+0x70>)
 800aece:	f007 fedf 	bl	8012c90 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800aed8:	89fb      	ldrh	r3, [r7, #14]
 800aeda:	e019      	b.n	800af10 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aee0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800aee2:	8afb      	ldrh	r3, [r7, #22]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d012      	beq.n	800af0e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800aee8:	2328      	movs	r3, #40	@ 0x28
 800aeea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800aeec:	8afa      	ldrh	r2, [r7, #22]
 800aeee:	8abb      	ldrh	r3, [r7, #20]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d904      	bls.n	800aefe <tcp_eff_send_mss_netif+0x4e>
 800aef4:	8afa      	ldrh	r2, [r7, #22]
 800aef6:	8abb      	ldrh	r3, [r7, #20]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	e000      	b.n	800af00 <tcp_eff_send_mss_netif+0x50>
 800aefe:	2300      	movs	r3, #0
 800af00:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800af02:	8a7a      	ldrh	r2, [r7, #18]
 800af04:	89fb      	ldrh	r3, [r7, #14]
 800af06:	4293      	cmp	r3, r2
 800af08:	bf28      	it	cs
 800af0a:	4613      	movcs	r3, r2
 800af0c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800af0e:	89fb      	ldrh	r3, [r7, #14]
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	08014988 	.word	0x08014988
 800af1c:	08015094 	.word	0x08015094
 800af20:	080149cc 	.word	0x080149cc

0800af24 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d119      	bne.n	800af6c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800af38:	4b10      	ldr	r3, [pc, #64]	@ (800af7c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800af3a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800af3e:	4910      	ldr	r1, [pc, #64]	@ (800af80 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800af40:	4810      	ldr	r0, [pc, #64]	@ (800af84 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800af42:	f007 fea5 	bl	8012c90 <iprintf>

  while (pcb != NULL) {
 800af46:	e011      	b.n	800af6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	429a      	cmp	r2, r3
 800af52:	d108      	bne.n	800af66 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800af5a:	68f8      	ldr	r0, [r7, #12]
 800af5c:	f7fe fd1a 	bl	8009994 <tcp_abort>
      pcb = next;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	60fb      	str	r3, [r7, #12]
 800af64:	e002      	b.n	800af6c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1ea      	bne.n	800af48 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800af72:	bf00      	nop
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	08014988 	.word	0x08014988
 800af80:	080150bc 	.word	0x080150bc
 800af84:	080149cc 	.word	0x080149cc

0800af88 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d02a      	beq.n	800afee <tcp_netif_ip_addr_changed+0x66>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d026      	beq.n	800afee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800afa0:	4b15      	ldr	r3, [pc, #84]	@ (800aff8 <tcp_netif_ip_addr_changed+0x70>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff ffbc 	bl	800af24 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800afac:	4b13      	ldr	r3, [pc, #76]	@ (800affc <tcp_netif_ip_addr_changed+0x74>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff ffb6 	bl	800af24 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d017      	beq.n	800afee <tcp_netif_ip_addr_changed+0x66>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d013      	beq.n	800afee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afc6:	4b0e      	ldr	r3, [pc, #56]	@ (800b000 <tcp_netif_ip_addr_changed+0x78>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	e00c      	b.n	800afe8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d103      	bne.n	800afe2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1ef      	bne.n	800afce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800afee:	bf00      	nop
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	200077f4 	.word	0x200077f4
 800affc:	200077ec 	.word	0x200077ec
 800b000:	200077f0 	.word	0x200077f0

0800b004 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b010:	2b00      	cmp	r3, #0
 800b012:	d007      	beq.n	800b024 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fb4d 	bl	800a6b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b02c:	b590      	push	{r4, r7, lr}
 800b02e:	b08d      	sub	sp, #52	@ 0x34
 800b030:	af04      	add	r7, sp, #16
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d105      	bne.n	800b048 <tcp_input+0x1c>
 800b03c:	4b9b      	ldr	r3, [pc, #620]	@ (800b2ac <tcp_input+0x280>)
 800b03e:	2283      	movs	r2, #131	@ 0x83
 800b040:	499b      	ldr	r1, [pc, #620]	@ (800b2b0 <tcp_input+0x284>)
 800b042:	489c      	ldr	r0, [pc, #624]	@ (800b2b4 <tcp_input+0x288>)
 800b044:	f007 fe24 	bl	8012c90 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4a9a      	ldr	r2, [pc, #616]	@ (800b2b8 <tcp_input+0x28c>)
 800b04e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	895b      	ldrh	r3, [r3, #10]
 800b054:	2b13      	cmp	r3, #19
 800b056:	f240 83d1 	bls.w	800b7fc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b05a:	4b98      	ldr	r3, [pc, #608]	@ (800b2bc <tcp_input+0x290>)
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	4a97      	ldr	r2, [pc, #604]	@ (800b2bc <tcp_input+0x290>)
 800b060:	6812      	ldr	r2, [r2, #0]
 800b062:	4611      	mov	r1, r2
 800b064:	4618      	mov	r0, r3
 800b066:	f006 f99f 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	f040 83c7 	bne.w	800b800 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b072:	4b92      	ldr	r3, [pc, #584]	@ (800b2bc <tcp_input+0x290>)
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b07a:	2be0      	cmp	r3, #224	@ 0xe0
 800b07c:	f000 83c0 	beq.w	800b800 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b080:	4b8d      	ldr	r3, [pc, #564]	@ (800b2b8 <tcp_input+0x28c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	899b      	ldrh	r3, [r3, #12]
 800b086:	b29b      	uxth	r3, r3
 800b088:	4618      	mov	r0, r3
 800b08a:	f7fc fa31 	bl	80074f0 <lwip_htons>
 800b08e:	4603      	mov	r3, r0
 800b090:	0b1b      	lsrs	r3, r3, #12
 800b092:	b29b      	uxth	r3, r3
 800b094:	b2db      	uxtb	r3, r3
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b09a:	7cbb      	ldrb	r3, [r7, #18]
 800b09c:	2b13      	cmp	r3, #19
 800b09e:	f240 83b1 	bls.w	800b804 <tcp_input+0x7d8>
 800b0a2:	7cbb      	ldrb	r3, [r7, #18]
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	891b      	ldrh	r3, [r3, #8]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	f200 83aa 	bhi.w	800b804 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b0b0:	7cbb      	ldrb	r3, [r7, #18]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	3b14      	subs	r3, #20
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	4b81      	ldr	r3, [pc, #516]	@ (800b2c0 <tcp_input+0x294>)
 800b0ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b0bc:	4b81      	ldr	r3, [pc, #516]	@ (800b2c4 <tcp_input+0x298>)
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	895a      	ldrh	r2, [r3, #10]
 800b0c6:	7cbb      	ldrb	r3, [r7, #18]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	d309      	bcc.n	800b0e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b0ce:	4b7c      	ldr	r3, [pc, #496]	@ (800b2c0 <tcp_input+0x294>)
 800b0d0:	881a      	ldrh	r2, [r3, #0]
 800b0d2:	4b7d      	ldr	r3, [pc, #500]	@ (800b2c8 <tcp_input+0x29c>)
 800b0d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800b0d6:	7cbb      	ldrb	r3, [r7, #18]
 800b0d8:	4619      	mov	r1, r3
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7fd fe64 	bl	8008da8 <pbuf_remove_header>
 800b0e0:	e04e      	b.n	800b180 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d105      	bne.n	800b0f6 <tcp_input+0xca>
 800b0ea:	4b70      	ldr	r3, [pc, #448]	@ (800b2ac <tcp_input+0x280>)
 800b0ec:	22c2      	movs	r2, #194	@ 0xc2
 800b0ee:	4977      	ldr	r1, [pc, #476]	@ (800b2cc <tcp_input+0x2a0>)
 800b0f0:	4870      	ldr	r0, [pc, #448]	@ (800b2b4 <tcp_input+0x288>)
 800b0f2:	f007 fdcd 	bl	8012c90 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800b0f6:	2114      	movs	r1, #20
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7fd fe55 	bl	8008da8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	895a      	ldrh	r2, [r3, #10]
 800b102:	4b71      	ldr	r3, [pc, #452]	@ (800b2c8 <tcp_input+0x29c>)
 800b104:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800b106:	4b6e      	ldr	r3, [pc, #440]	@ (800b2c0 <tcp_input+0x294>)
 800b108:	881a      	ldrh	r2, [r3, #0]
 800b10a:	4b6f      	ldr	r3, [pc, #444]	@ (800b2c8 <tcp_input+0x29c>)
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800b112:	4b6d      	ldr	r3, [pc, #436]	@ (800b2c8 <tcp_input+0x29c>)
 800b114:	881b      	ldrh	r3, [r3, #0]
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7fd fe45 	bl	8008da8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	895b      	ldrh	r3, [r3, #10]
 800b124:	8a3a      	ldrh	r2, [r7, #16]
 800b126:	429a      	cmp	r2, r3
 800b128:	f200 836e 	bhi.w	800b808 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	4a64      	ldr	r2, [pc, #400]	@ (800b2c4 <tcp_input+0x298>)
 800b134:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	8a3a      	ldrh	r2, [r7, #16]
 800b13c:	4611      	mov	r1, r2
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fd fe32 	bl	8008da8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	891a      	ldrh	r2, [r3, #8]
 800b148:	8a3b      	ldrh	r3, [r7, #16]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	895b      	ldrh	r3, [r3, #10]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d005      	beq.n	800b166 <tcp_input+0x13a>
 800b15a:	4b54      	ldr	r3, [pc, #336]	@ (800b2ac <tcp_input+0x280>)
 800b15c:	22df      	movs	r2, #223	@ 0xdf
 800b15e:	495c      	ldr	r1, [pc, #368]	@ (800b2d0 <tcp_input+0x2a4>)
 800b160:	4854      	ldr	r0, [pc, #336]	@ (800b2b4 <tcp_input+0x288>)
 800b162:	f007 fd95 	bl	8012c90 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	891a      	ldrh	r2, [r3, #8]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	891b      	ldrh	r3, [r3, #8]
 800b170:	429a      	cmp	r2, r3
 800b172:	d005      	beq.n	800b180 <tcp_input+0x154>
 800b174:	4b4d      	ldr	r3, [pc, #308]	@ (800b2ac <tcp_input+0x280>)
 800b176:	22e0      	movs	r2, #224	@ 0xe0
 800b178:	4956      	ldr	r1, [pc, #344]	@ (800b2d4 <tcp_input+0x2a8>)
 800b17a:	484e      	ldr	r0, [pc, #312]	@ (800b2b4 <tcp_input+0x288>)
 800b17c:	f007 fd88 	bl	8012c90 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b180:	4b4d      	ldr	r3, [pc, #308]	@ (800b2b8 <tcp_input+0x28c>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	881b      	ldrh	r3, [r3, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	4a4b      	ldr	r2, [pc, #300]	@ (800b2b8 <tcp_input+0x28c>)
 800b18a:	6814      	ldr	r4, [r2, #0]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fc f9af 	bl	80074f0 <lwip_htons>
 800b192:	4603      	mov	r3, r0
 800b194:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b196:	4b48      	ldr	r3, [pc, #288]	@ (800b2b8 <tcp_input+0x28c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	885b      	ldrh	r3, [r3, #2]
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	4a46      	ldr	r2, [pc, #280]	@ (800b2b8 <tcp_input+0x28c>)
 800b1a0:	6814      	ldr	r4, [r2, #0]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7fc f9a4 	bl	80074f0 <lwip_htons>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b1ac:	4b42      	ldr	r3, [pc, #264]	@ (800b2b8 <tcp_input+0x28c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	4a41      	ldr	r2, [pc, #260]	@ (800b2b8 <tcp_input+0x28c>)
 800b1b4:	6814      	ldr	r4, [r2, #0]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fc f9ae 	bl	8007518 <lwip_htonl>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	6063      	str	r3, [r4, #4]
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	4a45      	ldr	r2, [pc, #276]	@ (800b2d8 <tcp_input+0x2ac>)
 800b1c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b1c6:	4b3c      	ldr	r3, [pc, #240]	@ (800b2b8 <tcp_input+0x28c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	4a3a      	ldr	r2, [pc, #232]	@ (800b2b8 <tcp_input+0x28c>)
 800b1ce:	6814      	ldr	r4, [r2, #0]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fc f9a1 	bl	8007518 <lwip_htonl>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	60a3      	str	r3, [r4, #8]
 800b1da:	68a3      	ldr	r3, [r4, #8]
 800b1dc:	4a3f      	ldr	r2, [pc, #252]	@ (800b2dc <tcp_input+0x2b0>)
 800b1de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b1e0:	4b35      	ldr	r3, [pc, #212]	@ (800b2b8 <tcp_input+0x28c>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	89db      	ldrh	r3, [r3, #14]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	4a33      	ldr	r2, [pc, #204]	@ (800b2b8 <tcp_input+0x28c>)
 800b1ea:	6814      	ldr	r4, [r2, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7fc f97f 	bl	80074f0 <lwip_htons>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b1f6:	4b30      	ldr	r3, [pc, #192]	@ (800b2b8 <tcp_input+0x28c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	899b      	ldrh	r3, [r3, #12]
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fc f976 	bl	80074f0 <lwip_htons>
 800b204:	4603      	mov	r3, r0
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	4b34      	ldr	r3, [pc, #208]	@ (800b2e0 <tcp_input+0x2b4>)
 800b210:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	891a      	ldrh	r2, [r3, #8]
 800b216:	4b33      	ldr	r3, [pc, #204]	@ (800b2e4 <tcp_input+0x2b8>)
 800b218:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800b21a:	4b31      	ldr	r3, [pc, #196]	@ (800b2e0 <tcp_input+0x2b4>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d00c      	beq.n	800b240 <tcp_input+0x214>
    tcplen++;
 800b226:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e4 <tcp_input+0x2b8>)
 800b228:	881b      	ldrh	r3, [r3, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	4b2d      	ldr	r3, [pc, #180]	@ (800b2e4 <tcp_input+0x2b8>)
 800b230:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	891a      	ldrh	r2, [r3, #8]
 800b236:	4b2b      	ldr	r3, [pc, #172]	@ (800b2e4 <tcp_input+0x2b8>)
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	f200 82e6 	bhi.w	800b80c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b240:	2300      	movs	r3, #0
 800b242:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b244:	4b28      	ldr	r3, [pc, #160]	@ (800b2e8 <tcp_input+0x2bc>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	61fb      	str	r3, [r7, #28]
 800b24a:	e09d      	b.n	800b388 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	7d1b      	ldrb	r3, [r3, #20]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d105      	bne.n	800b260 <tcp_input+0x234>
 800b254:	4b15      	ldr	r3, [pc, #84]	@ (800b2ac <tcp_input+0x280>)
 800b256:	22fb      	movs	r2, #251	@ 0xfb
 800b258:	4924      	ldr	r1, [pc, #144]	@ (800b2ec <tcp_input+0x2c0>)
 800b25a:	4816      	ldr	r0, [pc, #88]	@ (800b2b4 <tcp_input+0x288>)
 800b25c:	f007 fd18 	bl	8012c90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	7d1b      	ldrb	r3, [r3, #20]
 800b264:	2b0a      	cmp	r3, #10
 800b266:	d105      	bne.n	800b274 <tcp_input+0x248>
 800b268:	4b10      	ldr	r3, [pc, #64]	@ (800b2ac <tcp_input+0x280>)
 800b26a:	22fc      	movs	r2, #252	@ 0xfc
 800b26c:	4920      	ldr	r1, [pc, #128]	@ (800b2f0 <tcp_input+0x2c4>)
 800b26e:	4811      	ldr	r0, [pc, #68]	@ (800b2b4 <tcp_input+0x288>)
 800b270:	f007 fd0e 	bl	8012c90 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b274:	69fb      	ldr	r3, [r7, #28]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d105      	bne.n	800b288 <tcp_input+0x25c>
 800b27c:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ac <tcp_input+0x280>)
 800b27e:	22fd      	movs	r2, #253	@ 0xfd
 800b280:	491c      	ldr	r1, [pc, #112]	@ (800b2f4 <tcp_input+0x2c8>)
 800b282:	480c      	ldr	r0, [pc, #48]	@ (800b2b4 <tcp_input+0x288>)
 800b284:	f007 fd04 	bl	8012c90 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	7a1b      	ldrb	r3, [r3, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d033      	beq.n	800b2f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	7a1a      	ldrb	r2, [r3, #8]
 800b294:	4b09      	ldr	r3, [pc, #36]	@ (800b2bc <tcp_input+0x290>)
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b29c:	3301      	adds	r3, #1
 800b29e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d029      	beq.n	800b2f8 <tcp_input+0x2cc>
      prev = pcb;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	61bb      	str	r3, [r7, #24]
      continue;
 800b2a8:	e06b      	b.n	800b382 <tcp_input+0x356>
 800b2aa:	bf00      	nop
 800b2ac:	080150f0 	.word	0x080150f0
 800b2b0:	08015124 	.word	0x08015124
 800b2b4:	0801513c 	.word	0x0801513c
 800b2b8:	20007810 	.word	0x20007810
 800b2bc:	200046e8 	.word	0x200046e8
 800b2c0:	20007814 	.word	0x20007814
 800b2c4:	20007818 	.word	0x20007818
 800b2c8:	20007816 	.word	0x20007816
 800b2cc:	08015164 	.word	0x08015164
 800b2d0:	08015174 	.word	0x08015174
 800b2d4:	08015180 	.word	0x08015180
 800b2d8:	20007820 	.word	0x20007820
 800b2dc:	20007824 	.word	0x20007824
 800b2e0:	2000782c 	.word	0x2000782c
 800b2e4:	2000782a 	.word	0x2000782a
 800b2e8:	200077f4 	.word	0x200077f4
 800b2ec:	080151a0 	.word	0x080151a0
 800b2f0:	080151c8 	.word	0x080151c8
 800b2f4:	080151f4 	.word	0x080151f4
    }

    if (pcb->remote_port == tcphdr->src &&
 800b2f8:	69fb      	ldr	r3, [r7, #28]
 800b2fa:	8b1a      	ldrh	r2, [r3, #24]
 800b2fc:	4b72      	ldr	r3, [pc, #456]	@ (800b4c8 <tcp_input+0x49c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	881b      	ldrh	r3, [r3, #0]
 800b302:	b29b      	uxth	r3, r3
 800b304:	429a      	cmp	r2, r3
 800b306:	d13a      	bne.n	800b37e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	8ada      	ldrh	r2, [r3, #22]
 800b30c:	4b6e      	ldr	r3, [pc, #440]	@ (800b4c8 <tcp_input+0x49c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	885b      	ldrh	r3, [r3, #2]
 800b312:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b314:	429a      	cmp	r2, r3
 800b316:	d132      	bne.n	800b37e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b318:	69fb      	ldr	r3, [r7, #28]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	4b6b      	ldr	r3, [pc, #428]	@ (800b4cc <tcp_input+0x4a0>)
 800b31e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b320:	429a      	cmp	r2, r3
 800b322:	d12c      	bne.n	800b37e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	4b68      	ldr	r3, [pc, #416]	@ (800b4cc <tcp_input+0x4a0>)
 800b32a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d126      	bne.n	800b37e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	429a      	cmp	r2, r3
 800b338:	d106      	bne.n	800b348 <tcp_input+0x31c>
 800b33a:	4b65      	ldr	r3, [pc, #404]	@ (800b4d0 <tcp_input+0x4a4>)
 800b33c:	f240 120d 	movw	r2, #269	@ 0x10d
 800b340:	4964      	ldr	r1, [pc, #400]	@ (800b4d4 <tcp_input+0x4a8>)
 800b342:	4865      	ldr	r0, [pc, #404]	@ (800b4d8 <tcp_input+0x4ac>)
 800b344:	f007 fca4 	bl	8012c90 <iprintf>
      if (prev != NULL) {
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00a      	beq.n	800b364 <tcp_input+0x338>
        prev->next = pcb->next;
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	68da      	ldr	r2, [r3, #12]
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b356:	4b61      	ldr	r3, [pc, #388]	@ (800b4dc <tcp_input+0x4b0>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b35e:	4a5f      	ldr	r2, [pc, #380]	@ (800b4dc <tcp_input+0x4b0>)
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	69fa      	ldr	r2, [r7, #28]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d111      	bne.n	800b392 <tcp_input+0x366>
 800b36e:	4b58      	ldr	r3, [pc, #352]	@ (800b4d0 <tcp_input+0x4a4>)
 800b370:	f240 1215 	movw	r2, #277	@ 0x115
 800b374:	495a      	ldr	r1, [pc, #360]	@ (800b4e0 <tcp_input+0x4b4>)
 800b376:	4858      	ldr	r0, [pc, #352]	@ (800b4d8 <tcp_input+0x4ac>)
 800b378:	f007 fc8a 	bl	8012c90 <iprintf>
      break;
 800b37c:	e009      	b.n	800b392 <tcp_input+0x366>
    }
    prev = pcb;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	61fb      	str	r3, [r7, #28]
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f47f af5e 	bne.w	800b24c <tcp_input+0x220>
 800b390:	e000      	b.n	800b394 <tcp_input+0x368>
      break;
 800b392:	bf00      	nop
  }

  if (pcb == NULL) {
 800b394:	69fb      	ldr	r3, [r7, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f040 80aa 	bne.w	800b4f0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b39c:	4b51      	ldr	r3, [pc, #324]	@ (800b4e4 <tcp_input+0x4b8>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	61fb      	str	r3, [r7, #28]
 800b3a2:	e03f      	b.n	800b424 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	7d1b      	ldrb	r3, [r3, #20]
 800b3a8:	2b0a      	cmp	r3, #10
 800b3aa:	d006      	beq.n	800b3ba <tcp_input+0x38e>
 800b3ac:	4b48      	ldr	r3, [pc, #288]	@ (800b4d0 <tcp_input+0x4a4>)
 800b3ae:	f240 121f 	movw	r2, #287	@ 0x11f
 800b3b2:	494d      	ldr	r1, [pc, #308]	@ (800b4e8 <tcp_input+0x4bc>)
 800b3b4:	4848      	ldr	r0, [pc, #288]	@ (800b4d8 <tcp_input+0x4ac>)
 800b3b6:	f007 fc6b 	bl	8012c90 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	7a1b      	ldrb	r3, [r3, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b3c2:	69fb      	ldr	r3, [r7, #28]
 800b3c4:	7a1a      	ldrb	r2, [r3, #8]
 800b3c6:	4b41      	ldr	r3, [pc, #260]	@ (800b4cc <tcp_input+0x4a0>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d122      	bne.n	800b41c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	8b1a      	ldrh	r2, [r3, #24]
 800b3da:	4b3b      	ldr	r3, [pc, #236]	@ (800b4c8 <tcp_input+0x49c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d11b      	bne.n	800b41e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	8ada      	ldrh	r2, [r3, #22]
 800b3ea:	4b37      	ldr	r3, [pc, #220]	@ (800b4c8 <tcp_input+0x49c>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	885b      	ldrh	r3, [r3, #2]
 800b3f0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d113      	bne.n	800b41e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	4b34      	ldr	r3, [pc, #208]	@ (800b4cc <tcp_input+0x4a0>)
 800b3fc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d10d      	bne.n	800b41e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	4b31      	ldr	r3, [pc, #196]	@ (800b4cc <tcp_input+0x4a0>)
 800b408:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d107      	bne.n	800b41e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800b40e:	69f8      	ldr	r0, [r7, #28]
 800b410:	f000 fb56 	bl	800bac0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f7fd fd4d 	bl	8008eb4 <pbuf_free>
        return;
 800b41a:	e1fd      	b.n	800b818 <tcp_input+0x7ec>
        continue;
 800b41c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	61fb      	str	r3, [r7, #28]
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1bc      	bne.n	800b3a4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b42e:	4b2f      	ldr	r3, [pc, #188]	@ (800b4ec <tcp_input+0x4c0>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	617b      	str	r3, [r7, #20]
 800b434:	e02a      	b.n	800b48c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	7a1b      	ldrb	r3, [r3, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	7a1a      	ldrb	r2, [r3, #8]
 800b442:	4b22      	ldr	r3, [pc, #136]	@ (800b4cc <tcp_input+0x4a0>)
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b44a:	3301      	adds	r3, #1
 800b44c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800b44e:	429a      	cmp	r2, r3
 800b450:	d002      	beq.n	800b458 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	61bb      	str	r3, [r7, #24]
        continue;
 800b456:	e016      	b.n	800b486 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	8ada      	ldrh	r2, [r3, #22]
 800b45c:	4b1a      	ldr	r3, [pc, #104]	@ (800b4c8 <tcp_input+0x49c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	885b      	ldrh	r3, [r3, #2]
 800b462:	b29b      	uxth	r3, r3
 800b464:	429a      	cmp	r2, r3
 800b466:	d10c      	bne.n	800b482 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	4b17      	ldr	r3, [pc, #92]	@ (800b4cc <tcp_input+0x4a0>)
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	429a      	cmp	r2, r3
 800b472:	d00f      	beq.n	800b494 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00d      	beq.n	800b496 <tcp_input+0x46a>
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d009      	beq.n	800b496 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1d1      	bne.n	800b436 <tcp_input+0x40a>
 800b492:	e000      	b.n	800b496 <tcp_input+0x46a>
            break;
 800b494:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d029      	beq.n	800b4f0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00a      	beq.n	800b4b8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b4aa:	4b10      	ldr	r3, [pc, #64]	@ (800b4ec <tcp_input+0x4c0>)
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b4b2:	4a0e      	ldr	r2, [pc, #56]	@ (800b4ec <tcp_input+0x4c0>)
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800b4b8:	6978      	ldr	r0, [r7, #20]
 800b4ba:	f000 fa03 	bl	800b8c4 <tcp_listen_input>
      }
      pbuf_free(p);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7fd fcf8 	bl	8008eb4 <pbuf_free>
      return;
 800b4c4:	e1a8      	b.n	800b818 <tcp_input+0x7ec>
 800b4c6:	bf00      	nop
 800b4c8:	20007810 	.word	0x20007810
 800b4cc:	200046e8 	.word	0x200046e8
 800b4d0:	080150f0 	.word	0x080150f0
 800b4d4:	0801521c 	.word	0x0801521c
 800b4d8:	0801513c 	.word	0x0801513c
 800b4dc:	200077f4 	.word	0x200077f4
 800b4e0:	08015248 	.word	0x08015248
 800b4e4:	200077f8 	.word	0x200077f8
 800b4e8:	08015274 	.word	0x08015274
 800b4ec:	200077f0 	.word	0x200077f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 8158 	beq.w	800b7a8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b4f8:	4b95      	ldr	r3, [pc, #596]	@ (800b750 <tcp_input+0x724>)
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	891a      	ldrh	r2, [r3, #8]
 800b502:	4b93      	ldr	r3, [pc, #588]	@ (800b750 <tcp_input+0x724>)
 800b504:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b506:	4a92      	ldr	r2, [pc, #584]	@ (800b750 <tcp_input+0x724>)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b50c:	4b91      	ldr	r3, [pc, #580]	@ (800b754 <tcp_input+0x728>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a8f      	ldr	r2, [pc, #572]	@ (800b750 <tcp_input+0x724>)
 800b512:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b514:	4b90      	ldr	r3, [pc, #576]	@ (800b758 <tcp_input+0x72c>)
 800b516:	2200      	movs	r2, #0
 800b518:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b51a:	4b90      	ldr	r3, [pc, #576]	@ (800b75c <tcp_input+0x730>)
 800b51c:	2200      	movs	r2, #0
 800b51e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b520:	4b8f      	ldr	r3, [pc, #572]	@ (800b760 <tcp_input+0x734>)
 800b522:	2200      	movs	r2, #0
 800b524:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b526:	4b8f      	ldr	r3, [pc, #572]	@ (800b764 <tcp_input+0x738>)
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	f003 0308 	and.w	r3, r3, #8
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d006      	beq.n	800b540 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7b5b      	ldrb	r3, [r3, #13]
 800b536:	f043 0301 	orr.w	r3, r3, #1
 800b53a:	b2da      	uxtb	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b544:	2b00      	cmp	r3, #0
 800b546:	d017      	beq.n	800b578 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b548:	69f8      	ldr	r0, [r7, #28]
 800b54a:	f7ff f839 	bl	800a5c0 <tcp_process_refused_data>
 800b54e:	4603      	mov	r3, r0
 800b550:	f113 0f0d 	cmn.w	r3, #13
 800b554:	d007      	beq.n	800b566 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00c      	beq.n	800b578 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b55e:	4b82      	ldr	r3, [pc, #520]	@ (800b768 <tcp_input+0x73c>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d008      	beq.n	800b578 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	f040 80e3 	bne.w	800b736 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b570:	69f8      	ldr	r0, [r7, #28]
 800b572:	f003 fe21 	bl	800f1b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b576:	e0de      	b.n	800b736 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800b578:	4a7c      	ldr	r2, [pc, #496]	@ (800b76c <tcp_input+0x740>)
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800b57e:	69f8      	ldr	r0, [r7, #28]
 800b580:	f000 fb18 	bl	800bbb4 <tcp_process>
 800b584:	4603      	mov	r3, r0
 800b586:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800b588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b58c:	f113 0f0d 	cmn.w	r3, #13
 800b590:	f000 80d3 	beq.w	800b73a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800b594:	4b71      	ldr	r3, [pc, #452]	@ (800b75c <tcp_input+0x730>)
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	f003 0308 	and.w	r3, r3, #8
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d015      	beq.n	800b5cc <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800b5a0:	69fb      	ldr	r3, [r7, #28]
 800b5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d008      	beq.n	800b5bc <tcp_input+0x590>
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5b0:	69fa      	ldr	r2, [r7, #28]
 800b5b2:	6912      	ldr	r2, [r2, #16]
 800b5b4:	f06f 010d 	mvn.w	r1, #13
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b5bc:	69f9      	ldr	r1, [r7, #28]
 800b5be:	486c      	ldr	r0, [pc, #432]	@ (800b770 <tcp_input+0x744>)
 800b5c0:	f7ff fbbc 	bl	800ad3c <tcp_pcb_remove>
        tcp_free(pcb);
 800b5c4:	69f8      	ldr	r0, [r7, #28]
 800b5c6:	f7fd fefd 	bl	80093c4 <tcp_free>
 800b5ca:	e0da      	b.n	800b782 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800b5d0:	4b63      	ldr	r3, [pc, #396]	@ (800b760 <tcp_input+0x734>)
 800b5d2:	881b      	ldrh	r3, [r3, #0]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01d      	beq.n	800b614 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800b5d8:	4b61      	ldr	r3, [pc, #388]	@ (800b760 <tcp_input+0x734>)
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00a      	beq.n	800b5fe <tcp_input+0x5d2>
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	6910      	ldr	r0, [r2, #16]
 800b5f2:	89fa      	ldrh	r2, [r7, #14]
 800b5f4:	69f9      	ldr	r1, [r7, #28]
 800b5f6:	4798      	blx	r3
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	74fb      	strb	r3, [r7, #19]
 800b5fc:	e001      	b.n	800b602 <tcp_input+0x5d6>
 800b5fe:	2300      	movs	r3, #0
 800b600:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b602:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b606:	f113 0f0d 	cmn.w	r3, #13
 800b60a:	f000 8098 	beq.w	800b73e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800b60e:	4b54      	ldr	r3, [pc, #336]	@ (800b760 <tcp_input+0x734>)
 800b610:	2200      	movs	r2, #0
 800b612:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800b614:	69f8      	ldr	r0, [r7, #28]
 800b616:	f000 f915 	bl	800b844 <tcp_input_delayed_close>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f040 8090 	bne.w	800b742 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800b622:	4b4d      	ldr	r3, [pc, #308]	@ (800b758 <tcp_input+0x72c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d041      	beq.n	800b6ae <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d006      	beq.n	800b640 <tcp_input+0x614>
 800b632:	4b50      	ldr	r3, [pc, #320]	@ (800b774 <tcp_input+0x748>)
 800b634:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800b638:	494f      	ldr	r1, [pc, #316]	@ (800b778 <tcp_input+0x74c>)
 800b63a:	4850      	ldr	r0, [pc, #320]	@ (800b77c <tcp_input+0x750>)
 800b63c:	f007 fb28 	bl	8012c90 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	8b5b      	ldrh	r3, [r3, #26]
 800b644:	f003 0310 	and.w	r3, r3, #16
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d008      	beq.n	800b65e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800b64c:	4b42      	ldr	r3, [pc, #264]	@ (800b758 <tcp_input+0x72c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4618      	mov	r0, r3
 800b652:	f7fd fc2f 	bl	8008eb4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800b656:	69f8      	ldr	r0, [r7, #28]
 800b658:	f7fe f99c 	bl	8009994 <tcp_abort>
            goto aborted;
 800b65c:	e091      	b.n	800b782 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b664:	2b00      	cmp	r3, #0
 800b666:	d00c      	beq.n	800b682 <tcp_input+0x656>
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	6918      	ldr	r0, [r3, #16]
 800b672:	4b39      	ldr	r3, [pc, #228]	@ (800b758 <tcp_input+0x72c>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	2300      	movs	r3, #0
 800b678:	69f9      	ldr	r1, [r7, #28]
 800b67a:	47a0      	blx	r4
 800b67c:	4603      	mov	r3, r0
 800b67e:	74fb      	strb	r3, [r7, #19]
 800b680:	e008      	b.n	800b694 <tcp_input+0x668>
 800b682:	4b35      	ldr	r3, [pc, #212]	@ (800b758 <tcp_input+0x72c>)
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	2300      	movs	r3, #0
 800b688:	69f9      	ldr	r1, [r7, #28]
 800b68a:	2000      	movs	r0, #0
 800b68c:	f7ff f88c 	bl	800a7a8 <tcp_recv_null>
 800b690:	4603      	mov	r3, r0
 800b692:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800b694:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b698:	f113 0f0d 	cmn.w	r3, #13
 800b69c:	d053      	beq.n	800b746 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800b69e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d003      	beq.n	800b6ae <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800b6a6:	4b2c      	ldr	r3, [pc, #176]	@ (800b758 <tcp_input+0x72c>)
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800b6ae:	4b2b      	ldr	r3, [pc, #172]	@ (800b75c <tcp_input+0x730>)
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	f003 0320 	and.w	r3, r3, #32
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d030      	beq.n	800b71c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d009      	beq.n	800b6d6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6c6:	7b5a      	ldrb	r2, [r3, #13]
 800b6c8:	69fb      	ldr	r3, [r7, #28]
 800b6ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6cc:	f042 0220 	orr.w	r2, r2, #32
 800b6d0:	b2d2      	uxtb	r2, r2
 800b6d2:	735a      	strb	r2, [r3, #13]
 800b6d4:	e022      	b.n	800b71c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b6d6:	69fb      	ldr	r3, [r7, #28]
 800b6d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800b6de:	d005      	beq.n	800b6ec <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	b29a      	uxth	r2, r3
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00b      	beq.n	800b70e <tcp_input+0x6e2>
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	6918      	ldr	r0, [r3, #16]
 800b700:	2300      	movs	r3, #0
 800b702:	2200      	movs	r2, #0
 800b704:	69f9      	ldr	r1, [r7, #28]
 800b706:	47a0      	blx	r4
 800b708:	4603      	mov	r3, r0
 800b70a:	74fb      	strb	r3, [r7, #19]
 800b70c:	e001      	b.n	800b712 <tcp_input+0x6e6>
 800b70e:	2300      	movs	r3, #0
 800b710:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b712:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b716:	f113 0f0d 	cmn.w	r3, #13
 800b71a:	d016      	beq.n	800b74a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b71c:	4b13      	ldr	r3, [pc, #76]	@ (800b76c <tcp_input+0x740>)
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b722:	69f8      	ldr	r0, [r7, #28]
 800b724:	f000 f88e 	bl	800b844 <tcp_input_delayed_close>
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d128      	bne.n	800b780 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b72e:	69f8      	ldr	r0, [r7, #28]
 800b730:	f002 ff1a 	bl	800e568 <tcp_output>
 800b734:	e025      	b.n	800b782 <tcp_input+0x756>
        goto aborted;
 800b736:	bf00      	nop
 800b738:	e023      	b.n	800b782 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b73a:	bf00      	nop
 800b73c:	e021      	b.n	800b782 <tcp_input+0x756>
              goto aborted;
 800b73e:	bf00      	nop
 800b740:	e01f      	b.n	800b782 <tcp_input+0x756>
          goto aborted;
 800b742:	bf00      	nop
 800b744:	e01d      	b.n	800b782 <tcp_input+0x756>
            goto aborted;
 800b746:	bf00      	nop
 800b748:	e01b      	b.n	800b782 <tcp_input+0x756>
              goto aborted;
 800b74a:	bf00      	nop
 800b74c:	e019      	b.n	800b782 <tcp_input+0x756>
 800b74e:	bf00      	nop
 800b750:	20007800 	.word	0x20007800
 800b754:	20007810 	.word	0x20007810
 800b758:	20007830 	.word	0x20007830
 800b75c:	2000782d 	.word	0x2000782d
 800b760:	20007828 	.word	0x20007828
 800b764:	2000782c 	.word	0x2000782c
 800b768:	2000782a 	.word	0x2000782a
 800b76c:	20007834 	.word	0x20007834
 800b770:	200077f4 	.word	0x200077f4
 800b774:	080150f0 	.word	0x080150f0
 800b778:	080152a4 	.word	0x080152a4
 800b77c:	0801513c 	.word	0x0801513c
          goto aborted;
 800b780:	bf00      	nop
    tcp_input_pcb = NULL;
 800b782:	4b27      	ldr	r3, [pc, #156]	@ (800b820 <tcp_input+0x7f4>)
 800b784:	2200      	movs	r2, #0
 800b786:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b788:	4b26      	ldr	r3, [pc, #152]	@ (800b824 <tcp_input+0x7f8>)
 800b78a:	2200      	movs	r2, #0
 800b78c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b78e:	4b26      	ldr	r3, [pc, #152]	@ (800b828 <tcp_input+0x7fc>)
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d03f      	beq.n	800b816 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800b796:	4b24      	ldr	r3, [pc, #144]	@ (800b828 <tcp_input+0x7fc>)
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7fd fb8a 	bl	8008eb4 <pbuf_free>
      inseg.p = NULL;
 800b7a0:	4b21      	ldr	r3, [pc, #132]	@ (800b828 <tcp_input+0x7fc>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b7a6:	e036      	b.n	800b816 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b7a8:	4b20      	ldr	r3, [pc, #128]	@ (800b82c <tcp_input+0x800>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	899b      	ldrh	r3, [r3, #12]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fb fe9d 	bl	80074f0 <lwip_htons>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	f003 0304 	and.w	r3, r3, #4
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d118      	bne.n	800b7f4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7c2:	4b1b      	ldr	r3, [pc, #108]	@ (800b830 <tcp_input+0x804>)
 800b7c4:	6819      	ldr	r1, [r3, #0]
 800b7c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b834 <tcp_input+0x808>)
 800b7c8:	881b      	ldrh	r3, [r3, #0]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b838 <tcp_input+0x80c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7d2:	4b16      	ldr	r3, [pc, #88]	@ (800b82c <tcp_input+0x800>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7d6:	885b      	ldrh	r3, [r3, #2]
 800b7d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b7da:	4a14      	ldr	r2, [pc, #80]	@ (800b82c <tcp_input+0x800>)
 800b7dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b7de:	8812      	ldrh	r2, [r2, #0]
 800b7e0:	b292      	uxth	r2, r2
 800b7e2:	9202      	str	r2, [sp, #8]
 800b7e4:	9301      	str	r3, [sp, #4]
 800b7e6:	4b15      	ldr	r3, [pc, #84]	@ (800b83c <tcp_input+0x810>)
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	4b15      	ldr	r3, [pc, #84]	@ (800b840 <tcp_input+0x814>)
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f003 fc90 	bl	800f114 <tcp_rst>
    pbuf_free(p);
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7fd fb5d 	bl	8008eb4 <pbuf_free>
  return;
 800b7fa:	e00c      	b.n	800b816 <tcp_input+0x7ea>
    goto dropped;
 800b7fc:	bf00      	nop
 800b7fe:	e006      	b.n	800b80e <tcp_input+0x7e2>
    goto dropped;
 800b800:	bf00      	nop
 800b802:	e004      	b.n	800b80e <tcp_input+0x7e2>
    goto dropped;
 800b804:	bf00      	nop
 800b806:	e002      	b.n	800b80e <tcp_input+0x7e2>
      goto dropped;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <tcp_input+0x7e2>
      goto dropped;
 800b80c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7fd fb50 	bl	8008eb4 <pbuf_free>
 800b814:	e000      	b.n	800b818 <tcp_input+0x7ec>
  return;
 800b816:	bf00      	nop
}
 800b818:	3724      	adds	r7, #36	@ 0x24
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd90      	pop	{r4, r7, pc}
 800b81e:	bf00      	nop
 800b820:	20007834 	.word	0x20007834
 800b824:	20007830 	.word	0x20007830
 800b828:	20007800 	.word	0x20007800
 800b82c:	20007810 	.word	0x20007810
 800b830:	20007824 	.word	0x20007824
 800b834:	2000782a 	.word	0x2000782a
 800b838:	20007820 	.word	0x20007820
 800b83c:	200046f8 	.word	0x200046f8
 800b840:	200046fc 	.word	0x200046fc

0800b844 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <tcp_input_delayed_close+0x1c>
 800b852:	4b17      	ldr	r3, [pc, #92]	@ (800b8b0 <tcp_input_delayed_close+0x6c>)
 800b854:	f240 225a 	movw	r2, #602	@ 0x25a
 800b858:	4916      	ldr	r1, [pc, #88]	@ (800b8b4 <tcp_input_delayed_close+0x70>)
 800b85a:	4817      	ldr	r0, [pc, #92]	@ (800b8b8 <tcp_input_delayed_close+0x74>)
 800b85c:	f007 fa18 	bl	8012c90 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b860:	4b16      	ldr	r3, [pc, #88]	@ (800b8bc <tcp_input_delayed_close+0x78>)
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	f003 0310 	and.w	r3, r3, #16
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d01c      	beq.n	800b8a6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	8b5b      	ldrh	r3, [r3, #26]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10d      	bne.n	800b894 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d008      	beq.n	800b894 <tcp_input_delayed_close+0x50>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	6912      	ldr	r2, [r2, #16]
 800b88c:	f06f 010e 	mvn.w	r1, #14
 800b890:	4610      	mov	r0, r2
 800b892:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b894:	6879      	ldr	r1, [r7, #4]
 800b896:	480a      	ldr	r0, [pc, #40]	@ (800b8c0 <tcp_input_delayed_close+0x7c>)
 800b898:	f7ff fa50 	bl	800ad3c <tcp_pcb_remove>
    tcp_free(pcb);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7fd fd91 	bl	80093c4 <tcp_free>
    return 1;
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e000      	b.n	800b8a8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	080150f0 	.word	0x080150f0
 800b8b4:	080152c0 	.word	0x080152c0
 800b8b8:	0801513c 	.word	0x0801513c
 800b8bc:	2000782d 	.word	0x2000782d
 800b8c0:	200077f4 	.word	0x200077f4

0800b8c4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b8c4:	b590      	push	{r4, r7, lr}
 800b8c6:	b08b      	sub	sp, #44	@ 0x2c
 800b8c8:	af04      	add	r7, sp, #16
 800b8ca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b8cc:	4b6f      	ldr	r3, [pc, #444]	@ (800ba8c <tcp_listen_input+0x1c8>)
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	f003 0304 	and.w	r3, r3, #4
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	f040 80d2 	bne.w	800ba7e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d106      	bne.n	800b8ee <tcp_listen_input+0x2a>
 800b8e0:	4b6b      	ldr	r3, [pc, #428]	@ (800ba90 <tcp_listen_input+0x1cc>)
 800b8e2:	f240 2281 	movw	r2, #641	@ 0x281
 800b8e6:	496b      	ldr	r1, [pc, #428]	@ (800ba94 <tcp_listen_input+0x1d0>)
 800b8e8:	486b      	ldr	r0, [pc, #428]	@ (800ba98 <tcp_listen_input+0x1d4>)
 800b8ea:	f007 f9d1 	bl	8012c90 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b8ee:	4b67      	ldr	r3, [pc, #412]	@ (800ba8c <tcp_listen_input+0x1c8>)
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d019      	beq.n	800b92e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8fa:	4b68      	ldr	r3, [pc, #416]	@ (800ba9c <tcp_listen_input+0x1d8>)
 800b8fc:	6819      	ldr	r1, [r3, #0]
 800b8fe:	4b68      	ldr	r3, [pc, #416]	@ (800baa0 <tcp_listen_input+0x1dc>)
 800b900:	881b      	ldrh	r3, [r3, #0]
 800b902:	461a      	mov	r2, r3
 800b904:	4b67      	ldr	r3, [pc, #412]	@ (800baa4 <tcp_listen_input+0x1e0>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b90a:	4b67      	ldr	r3, [pc, #412]	@ (800baa8 <tcp_listen_input+0x1e4>)
 800b90c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b90e:	885b      	ldrh	r3, [r3, #2]
 800b910:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b912:	4a65      	ldr	r2, [pc, #404]	@ (800baa8 <tcp_listen_input+0x1e4>)
 800b914:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b916:	8812      	ldrh	r2, [r2, #0]
 800b918:	b292      	uxth	r2, r2
 800b91a:	9202      	str	r2, [sp, #8]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	4b63      	ldr	r3, [pc, #396]	@ (800baac <tcp_listen_input+0x1e8>)
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	4b63      	ldr	r3, [pc, #396]	@ (800bab0 <tcp_listen_input+0x1ec>)
 800b924:	4602      	mov	r2, r0
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f003 fbf4 	bl	800f114 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b92c:	e0a9      	b.n	800ba82 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b92e:	4b57      	ldr	r3, [pc, #348]	@ (800ba8c <tcp_listen_input+0x1c8>)
 800b930:	781b      	ldrb	r3, [r3, #0]
 800b932:	f003 0302 	and.w	r3, r3, #2
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 80a3 	beq.w	800ba82 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	7d5b      	ldrb	r3, [r3, #21]
 800b940:	4618      	mov	r0, r3
 800b942:	f7ff f855 	bl	800a9f0 <tcp_alloc>
 800b946:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d111      	bne.n	800b972 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	699b      	ldr	r3, [r3, #24]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <tcp_listen_input+0xa8>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	6910      	ldr	r0, [r2, #16]
 800b95e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b962:	2100      	movs	r1, #0
 800b964:	4798      	blx	r3
 800b966:	4603      	mov	r3, r0
 800b968:	73bb      	strb	r3, [r7, #14]
      return;
 800b96a:	e08b      	b.n	800ba84 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b96c:	23f0      	movs	r3, #240	@ 0xf0
 800b96e:	73bb      	strb	r3, [r7, #14]
      return;
 800b970:	e088      	b.n	800ba84 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b972:	4b50      	ldr	r3, [pc, #320]	@ (800bab4 <tcp_listen_input+0x1f0>)
 800b974:	695a      	ldr	r2, [r3, #20]
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b97a:	4b4e      	ldr	r3, [pc, #312]	@ (800bab4 <tcp_listen_input+0x1f0>)
 800b97c:	691a      	ldr	r2, [r3, #16]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	8ada      	ldrh	r2, [r3, #22]
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b98a:	4b47      	ldr	r3, [pc, #284]	@ (800baa8 <tcp_listen_input+0x1e4>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	b29a      	uxth	r2, r3
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	2203      	movs	r2, #3
 800b99a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b99c:	4b41      	ldr	r3, [pc, #260]	@ (800baa4 <tcp_listen_input+0x1e0>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b9ae:	6978      	ldr	r0, [r7, #20]
 800b9b0:	f7ff fa58 	bl	800ae64 <tcp_next_iss>
 800b9b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	693a      	ldr	r2, [r7, #16]
 800b9ba:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	693a      	ldr	r2, [r7, #16]
 800b9c0:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	693a      	ldr	r2, [r7, #16]
 800b9c6:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	693a      	ldr	r2, [r7, #16]
 800b9cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b9ce:	4b35      	ldr	r3, [pc, #212]	@ (800baa4 <tcp_listen_input+0x1e0>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	1e5a      	subs	r2, r3, #1
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	691a      	ldr	r2, [r3, #16]
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	7a5b      	ldrb	r3, [r3, #9]
 800b9ea:	f003 030c 	and.w	r3, r3, #12
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	7a1a      	ldrb	r2, [r3, #8]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b9fc:	4b2e      	ldr	r3, [pc, #184]	@ (800bab8 <tcp_listen_input+0x1f4>)
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	60da      	str	r2, [r3, #12]
 800ba04:	4a2c      	ldr	r2, [pc, #176]	@ (800bab8 <tcp_listen_input+0x1f4>)
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	f003 fd45 	bl	800f498 <tcp_timer_needed>
 800ba0e:	4b2b      	ldr	r3, [pc, #172]	@ (800babc <tcp_listen_input+0x1f8>)
 800ba10:	2201      	movs	r2, #1
 800ba12:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ba14:	6978      	ldr	r0, [r7, #20]
 800ba16:	f001 fd8b 	bl	800d530 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ba1a:	4b23      	ldr	r3, [pc, #140]	@ (800baa8 <tcp_listen_input+0x1e4>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	89db      	ldrh	r3, [r3, #14]
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f005 f9b9 	bl	8010db4 <ip4_route>
 800ba42:	4601      	mov	r1, r0
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	3304      	adds	r3, #4
 800ba48:	461a      	mov	r2, r3
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7ff fa30 	bl	800aeb0 <tcp_eff_send_mss_netif>
 800ba50:	4603      	mov	r3, r0
 800ba52:	461a      	mov	r2, r3
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ba58:	2112      	movs	r1, #18
 800ba5a:	6978      	ldr	r0, [r7, #20]
 800ba5c:	f002 fc96 	bl	800e38c <tcp_enqueue_flags>
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ba64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6978      	ldr	r0, [r7, #20]
 800ba70:	f7fd fed2 	bl	8009818 <tcp_abandon>
      return;
 800ba74:	e006      	b.n	800ba84 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ba76:	6978      	ldr	r0, [r7, #20]
 800ba78:	f002 fd76 	bl	800e568 <tcp_output>
  return;
 800ba7c:	e001      	b.n	800ba82 <tcp_listen_input+0x1be>
    return;
 800ba7e:	bf00      	nop
 800ba80:	e000      	b.n	800ba84 <tcp_listen_input+0x1c0>
  return;
 800ba82:	bf00      	nop
}
 800ba84:	371c      	adds	r7, #28
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd90      	pop	{r4, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	2000782c 	.word	0x2000782c
 800ba90:	080150f0 	.word	0x080150f0
 800ba94:	080152e8 	.word	0x080152e8
 800ba98:	0801513c 	.word	0x0801513c
 800ba9c:	20007824 	.word	0x20007824
 800baa0:	2000782a 	.word	0x2000782a
 800baa4:	20007820 	.word	0x20007820
 800baa8:	20007810 	.word	0x20007810
 800baac:	200046f8 	.word	0x200046f8
 800bab0:	200046fc 	.word	0x200046fc
 800bab4:	200046e8 	.word	0x200046e8
 800bab8:	200077f4 	.word	0x200077f4
 800babc:	200077fc 	.word	0x200077fc

0800bac0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af04      	add	r7, sp, #16
 800bac6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bac8:	4b2f      	ldr	r3, [pc, #188]	@ (800bb88 <tcp_timewait_input+0xc8>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f003 0304 	and.w	r3, r3, #4
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d153      	bne.n	800bb7c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <tcp_timewait_input+0x28>
 800bada:	4b2c      	ldr	r3, [pc, #176]	@ (800bb8c <tcp_timewait_input+0xcc>)
 800badc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800bae0:	492b      	ldr	r1, [pc, #172]	@ (800bb90 <tcp_timewait_input+0xd0>)
 800bae2:	482c      	ldr	r0, [pc, #176]	@ (800bb94 <tcp_timewait_input+0xd4>)
 800bae4:	f007 f8d4 	bl	8012c90 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bae8:	4b27      	ldr	r3, [pc, #156]	@ (800bb88 <tcp_timewait_input+0xc8>)
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d02a      	beq.n	800bb4a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800baf4:	4b28      	ldr	r3, [pc, #160]	@ (800bb98 <tcp_timewait_input+0xd8>)
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	db2d      	blt.n	800bb5e <tcp_timewait_input+0x9e>
 800bb02:	4b25      	ldr	r3, [pc, #148]	@ (800bb98 <tcp_timewait_input+0xd8>)
 800bb04:	681a      	ldr	r2, [r3, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb0a:	6879      	ldr	r1, [r7, #4]
 800bb0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bb0e:	440b      	add	r3, r1
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dc23      	bgt.n	800bb5e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb16:	4b21      	ldr	r3, [pc, #132]	@ (800bb9c <tcp_timewait_input+0xdc>)
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	4b21      	ldr	r3, [pc, #132]	@ (800bba0 <tcp_timewait_input+0xe0>)
 800bb1c:	881b      	ldrh	r3, [r3, #0]
 800bb1e:	461a      	mov	r2, r3
 800bb20:	4b1d      	ldr	r3, [pc, #116]	@ (800bb98 <tcp_timewait_input+0xd8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb26:	4b1f      	ldr	r3, [pc, #124]	@ (800bba4 <tcp_timewait_input+0xe4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb2a:	885b      	ldrh	r3, [r3, #2]
 800bb2c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bb2e:	4a1d      	ldr	r2, [pc, #116]	@ (800bba4 <tcp_timewait_input+0xe4>)
 800bb30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bb32:	8812      	ldrh	r2, [r2, #0]
 800bb34:	b292      	uxth	r2, r2
 800bb36:	9202      	str	r2, [sp, #8]
 800bb38:	9301      	str	r3, [sp, #4]
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bba8 <tcp_timewait_input+0xe8>)
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	4b1b      	ldr	r3, [pc, #108]	@ (800bbac <tcp_timewait_input+0xec>)
 800bb40:	4602      	mov	r2, r0
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f003 fae6 	bl	800f114 <tcp_rst>
      return;
 800bb48:	e01b      	b.n	800bb82 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800bb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bb88 <tcp_timewait_input+0xc8>)
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	f003 0301 	and.w	r3, r3, #1
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d003      	beq.n	800bb5e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bb56:	4b16      	ldr	r3, [pc, #88]	@ (800bbb0 <tcp_timewait_input+0xf0>)
 800bb58:	681a      	ldr	r2, [r3, #0]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bb5e:	4b10      	ldr	r3, [pc, #64]	@ (800bba0 <tcp_timewait_input+0xe0>)
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00c      	beq.n	800bb80 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	8b5b      	ldrh	r3, [r3, #26]
 800bb6a:	f043 0302 	orr.w	r3, r3, #2
 800bb6e:	b29a      	uxth	r2, r3
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f002 fcf7 	bl	800e568 <tcp_output>
  }
  return;
 800bb7a:	e001      	b.n	800bb80 <tcp_timewait_input+0xc0>
    return;
 800bb7c:	bf00      	nop
 800bb7e:	e000      	b.n	800bb82 <tcp_timewait_input+0xc2>
  return;
 800bb80:	bf00      	nop
}
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	2000782c 	.word	0x2000782c
 800bb8c:	080150f0 	.word	0x080150f0
 800bb90:	08015308 	.word	0x08015308
 800bb94:	0801513c 	.word	0x0801513c
 800bb98:	20007820 	.word	0x20007820
 800bb9c:	20007824 	.word	0x20007824
 800bba0:	2000782a 	.word	0x2000782a
 800bba4:	20007810 	.word	0x20007810
 800bba8:	200046f8 	.word	0x200046f8
 800bbac:	200046fc 	.word	0x200046fc
 800bbb0:	200077e8 	.word	0x200077e8

0800bbb4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bbb4:	b590      	push	{r4, r7, lr}
 800bbb6:	b08d      	sub	sp, #52	@ 0x34
 800bbb8:	af04      	add	r7, sp, #16
 800bbba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <tcp_process+0x24>
 800bbca:	4b9d      	ldr	r3, [pc, #628]	@ (800be40 <tcp_process+0x28c>)
 800bbcc:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800bbd0:	499c      	ldr	r1, [pc, #624]	@ (800be44 <tcp_process+0x290>)
 800bbd2:	489d      	ldr	r0, [pc, #628]	@ (800be48 <tcp_process+0x294>)
 800bbd4:	f007 f85c 	bl	8012c90 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bbd8:	4b9c      	ldr	r3, [pc, #624]	@ (800be4c <tcp_process+0x298>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	f003 0304 	and.w	r3, r3, #4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d04e      	beq.n	800bc82 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	2b02      	cmp	r3, #2
 800bbea:	d108      	bne.n	800bbfe <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbf0:	4b97      	ldr	r3, [pc, #604]	@ (800be50 <tcp_process+0x29c>)
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d123      	bne.n	800bc40 <tcp_process+0x8c>
        acceptable = 1;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	76fb      	strb	r3, [r7, #27]
 800bbfc:	e020      	b.n	800bc40 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc02:	4b94      	ldr	r3, [pc, #592]	@ (800be54 <tcp_process+0x2a0>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d102      	bne.n	800bc10 <tcp_process+0x5c>
        acceptable = 1;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	76fb      	strb	r3, [r7, #27]
 800bc0e:	e017      	b.n	800bc40 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bc10:	4b90      	ldr	r3, [pc, #576]	@ (800be54 <tcp_process+0x2a0>)
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	db10      	blt.n	800bc40 <tcp_process+0x8c>
 800bc1e:	4b8d      	ldr	r3, [pc, #564]	@ (800be54 <tcp_process+0x2a0>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc26:	6879      	ldr	r1, [r7, #4]
 800bc28:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800bc2a:	440b      	add	r3, r1
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	dc06      	bgt.n	800bc40 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	8b5b      	ldrh	r3, [r3, #26]
 800bc36:	f043 0302 	orr.w	r3, r3, #2
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800bc40:	7efb      	ldrb	r3, [r7, #27]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d01b      	beq.n	800bc7e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d106      	bne.n	800bc5c <tcp_process+0xa8>
 800bc4e:	4b7c      	ldr	r3, [pc, #496]	@ (800be40 <tcp_process+0x28c>)
 800bc50:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800bc54:	4980      	ldr	r1, [pc, #512]	@ (800be58 <tcp_process+0x2a4>)
 800bc56:	487c      	ldr	r0, [pc, #496]	@ (800be48 <tcp_process+0x294>)
 800bc58:	f007 f81a 	bl	8012c90 <iprintf>
      recv_flags |= TF_RESET;
 800bc5c:	4b7f      	ldr	r3, [pc, #508]	@ (800be5c <tcp_process+0x2a8>)
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f043 0308 	orr.w	r3, r3, #8
 800bc64:	b2da      	uxtb	r2, r3
 800bc66:	4b7d      	ldr	r3, [pc, #500]	@ (800be5c <tcp_process+0x2a8>)
 800bc68:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f023 0301 	bic.w	r3, r3, #1
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800bc78:	f06f 030d 	mvn.w	r3, #13
 800bc7c:	e37a      	b.n	800c374 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	e378      	b.n	800c374 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800bc82:	4b72      	ldr	r3, [pc, #456]	@ (800be4c <tcp_process+0x298>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	f003 0302 	and.w	r3, r3, #2
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d010      	beq.n	800bcb0 <tcp_process+0xfc>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7d1b      	ldrb	r3, [r3, #20]
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d00c      	beq.n	800bcb0 <tcp_process+0xfc>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	7d1b      	ldrb	r3, [r3, #20]
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d008      	beq.n	800bcb0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8b5b      	ldrh	r3, [r3, #26]
 800bca2:	f043 0302 	orr.w	r3, r3, #2
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	e361      	b.n	800c374 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	8b5b      	ldrh	r3, [r3, #26]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d103      	bne.n	800bcc4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800bcbc:	4b68      	ldr	r3, [pc, #416]	@ (800be60 <tcp_process+0x2ac>)
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f001 fc2b 	bl	800d530 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7d1b      	ldrb	r3, [r3, #20]
 800bcde:	3b02      	subs	r3, #2
 800bce0:	2b07      	cmp	r3, #7
 800bce2:	f200 8337 	bhi.w	800c354 <tcp_process+0x7a0>
 800bce6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcec <tcp_process+0x138>)
 800bce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcec:	0800bd0d 	.word	0x0800bd0d
 800bcf0:	0800bf3d 	.word	0x0800bf3d
 800bcf4:	0800c0b5 	.word	0x0800c0b5
 800bcf8:	0800c0df 	.word	0x0800c0df
 800bcfc:	0800c203 	.word	0x0800c203
 800bd00:	0800c0b5 	.word	0x0800c0b5
 800bd04:	0800c28f 	.word	0x0800c28f
 800bd08:	0800c31f 	.word	0x0800c31f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800bd0c:	4b4f      	ldr	r3, [pc, #316]	@ (800be4c <tcp_process+0x298>)
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	f003 0310 	and.w	r3, r3, #16
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f000 80e4 	beq.w	800bee2 <tcp_process+0x32e>
 800bd1a:	4b4c      	ldr	r3, [pc, #304]	@ (800be4c <tcp_process+0x298>)
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	f003 0302 	and.w	r3, r3, #2
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 80dd 	beq.w	800bee2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	4b48      	ldr	r3, [pc, #288]	@ (800be50 <tcp_process+0x29c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	f040 80d5 	bne.w	800bee2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800bd38:	4b46      	ldr	r3, [pc, #280]	@ (800be54 <tcp_process+0x2a0>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800bd4a:	4b41      	ldr	r3, [pc, #260]	@ (800be50 <tcp_process+0x29c>)
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800bd52:	4b44      	ldr	r3, [pc, #272]	@ (800be64 <tcp_process+0x2b0>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	89db      	ldrh	r3, [r3, #14]
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800bd6c:	4b39      	ldr	r3, [pc, #228]	@ (800be54 <tcp_process+0x2a0>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	1e5a      	subs	r2, r3, #1
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2204      	movs	r2, #4
 800bd7a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4618      	mov	r0, r3
 800bd86:	f005 f815 	bl	8010db4 <ip4_route>
 800bd8a:	4601      	mov	r1, r0
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	3304      	adds	r3, #4
 800bd90:	461a      	mov	r2, r3
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7ff f88c 	bl	800aeb0 <tcp_eff_send_mss_netif>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bda4:	009a      	lsls	r2, r3, #2
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdaa:	005b      	lsls	r3, r3, #1
 800bdac:	f241 111c 	movw	r1, #4380	@ 0x111c
 800bdb0:	428b      	cmp	r3, r1
 800bdb2:	bf38      	it	cc
 800bdb4:	460b      	movcc	r3, r1
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d204      	bcs.n	800bdc4 <tcp_process+0x210>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	b29b      	uxth	r3, r3
 800bdc2:	e00d      	b.n	800bde0 <tcp_process+0x22c>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdc8:	005b      	lsls	r3, r3, #1
 800bdca:	f241 121c 	movw	r2, #4380	@ 0x111c
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	d904      	bls.n	800bddc <tcp_process+0x228>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	e001      	b.n	800bde0 <tcp_process+0x22c>
 800bddc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800bde0:	687a      	ldr	r2, [r7, #4]
 800bde2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d106      	bne.n	800bdfe <tcp_process+0x24a>
 800bdf0:	4b13      	ldr	r3, [pc, #76]	@ (800be40 <tcp_process+0x28c>)
 800bdf2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800bdf6:	491c      	ldr	r1, [pc, #112]	@ (800be68 <tcp_process+0x2b4>)
 800bdf8:	4813      	ldr	r0, [pc, #76]	@ (800be48 <tcp_process+0x294>)
 800bdfa:	f006 ff49 	bl	8012c90 <iprintf>
        --pcb->snd_queuelen;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800be04:	3b01      	subs	r3, #1
 800be06:	b29a      	uxth	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be12:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d12a      	bne.n	800be70 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be1e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800be20:	69fb      	ldr	r3, [r7, #28]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <tcp_process+0x280>
 800be26:	4b06      	ldr	r3, [pc, #24]	@ (800be40 <tcp_process+0x28c>)
 800be28:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800be2c:	490f      	ldr	r1, [pc, #60]	@ (800be6c <tcp_process+0x2b8>)
 800be2e:	4806      	ldr	r0, [pc, #24]	@ (800be48 <tcp_process+0x294>)
 800be30:	f006 ff2e 	bl	8012c90 <iprintf>
          pcb->unsent = rseg->next;
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800be3c:	e01c      	b.n	800be78 <tcp_process+0x2c4>
 800be3e:	bf00      	nop
 800be40:	080150f0 	.word	0x080150f0
 800be44:	08015328 	.word	0x08015328
 800be48:	0801513c 	.word	0x0801513c
 800be4c:	2000782c 	.word	0x2000782c
 800be50:	20007824 	.word	0x20007824
 800be54:	20007820 	.word	0x20007820
 800be58:	08015344 	.word	0x08015344
 800be5c:	2000782d 	.word	0x2000782d
 800be60:	200077e8 	.word	0x200077e8
 800be64:	20007810 	.word	0x20007810
 800be68:	08015364 	.word	0x08015364
 800be6c:	0801537c 	.word	0x0801537c
        } else {
          pcb->unacked = rseg->next;
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	681a      	ldr	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800be78:	69f8      	ldr	r0, [r7, #28]
 800be7a:	f7fe fc32 	bl	800a6e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be82:	2b00      	cmp	r3, #0
 800be84:	d104      	bne.n	800be90 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800be8c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800be8e:	e006      	b.n	800be9e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00a      	beq.n	800bebe <tcp_process+0x30a>
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6910      	ldr	r0, [r2, #16]
 800beb2:	2200      	movs	r2, #0
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	4798      	blx	r3
 800beb8:	4603      	mov	r3, r0
 800beba:	76bb      	strb	r3, [r7, #26]
 800bebc:	e001      	b.n	800bec2 <tcp_process+0x30e>
 800bebe:	2300      	movs	r3, #0
 800bec0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800bec2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bec6:	f113 0f0d 	cmn.w	r3, #13
 800beca:	d102      	bne.n	800bed2 <tcp_process+0x31e>
          return ERR_ABRT;
 800becc:	f06f 030c 	mvn.w	r3, #12
 800bed0:	e250      	b.n	800c374 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	8b5b      	ldrh	r3, [r3, #26]
 800bed6:	f043 0302 	orr.w	r3, r3, #2
 800beda:	b29a      	uxth	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800bee0:	e23a      	b.n	800c358 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800bee2:	4b98      	ldr	r3, [pc, #608]	@ (800c144 <tcp_process+0x590>)
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	f003 0310 	and.w	r3, r3, #16
 800beea:	2b00      	cmp	r3, #0
 800beec:	f000 8234 	beq.w	800c358 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bef0:	4b95      	ldr	r3, [pc, #596]	@ (800c148 <tcp_process+0x594>)
 800bef2:	6819      	ldr	r1, [r3, #0]
 800bef4:	4b95      	ldr	r3, [pc, #596]	@ (800c14c <tcp_process+0x598>)
 800bef6:	881b      	ldrh	r3, [r3, #0]
 800bef8:	461a      	mov	r2, r3
 800befa:	4b95      	ldr	r3, [pc, #596]	@ (800c150 <tcp_process+0x59c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf00:	4b94      	ldr	r3, [pc, #592]	@ (800c154 <tcp_process+0x5a0>)
 800bf02:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf04:	885b      	ldrh	r3, [r3, #2]
 800bf06:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf08:	4a92      	ldr	r2, [pc, #584]	@ (800c154 <tcp_process+0x5a0>)
 800bf0a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf0c:	8812      	ldrh	r2, [r2, #0]
 800bf0e:	b292      	uxth	r2, r2
 800bf10:	9202      	str	r2, [sp, #8]
 800bf12:	9301      	str	r3, [sp, #4]
 800bf14:	4b90      	ldr	r3, [pc, #576]	@ (800c158 <tcp_process+0x5a4>)
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	4b90      	ldr	r3, [pc, #576]	@ (800c15c <tcp_process+0x5a8>)
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f003 f8f9 	bl	800f114 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bf28:	2b05      	cmp	r3, #5
 800bf2a:	f200 8215 	bhi.w	800c358 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f002 feb5 	bl	800eca4 <tcp_rexmit_rto>
      break;
 800bf3a:	e20d      	b.n	800c358 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800bf3c:	4b81      	ldr	r3, [pc, #516]	@ (800c144 <tcp_process+0x590>)
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 80a1 	beq.w	800c08c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bf4a:	4b7f      	ldr	r3, [pc, #508]	@ (800c148 <tcp_process+0x594>)
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	3b01      	subs	r3, #1
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	db7e      	blt.n	800c058 <tcp_process+0x4a4>
 800bf5a:	4b7b      	ldr	r3, [pc, #492]	@ (800c148 <tcp_process+0x594>)
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf62:	1ad3      	subs	r3, r2, r3
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	dc77      	bgt.n	800c058 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2204      	movs	r2, #4
 800bf6c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d102      	bne.n	800bf7c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800bf76:	23fa      	movs	r3, #250	@ 0xfa
 800bf78:	76bb      	strb	r3, [r7, #26]
 800bf7a:	e01d      	b.n	800bfb8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <tcp_process+0x3e0>
 800bf86:	4b76      	ldr	r3, [pc, #472]	@ (800c160 <tcp_process+0x5ac>)
 800bf88:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800bf8c:	4975      	ldr	r1, [pc, #468]	@ (800c164 <tcp_process+0x5b0>)
 800bf8e:	4876      	ldr	r0, [pc, #472]	@ (800c168 <tcp_process+0x5b4>)
 800bf90:	f006 fe7e 	bl	8012c90 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <tcp_process+0x400>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bfa2:	699b      	ldr	r3, [r3, #24]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	6910      	ldr	r0, [r2, #16]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	4798      	blx	r3
 800bfae:	4603      	mov	r3, r0
 800bfb0:	76bb      	strb	r3, [r7, #26]
 800bfb2:	e001      	b.n	800bfb8 <tcp_process+0x404>
 800bfb4:	23f0      	movs	r3, #240	@ 0xf0
 800bfb6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800bfb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00a      	beq.n	800bfd6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800bfc0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfc4:	f113 0f0d 	cmn.w	r3, #13
 800bfc8:	d002      	beq.n	800bfd0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f7fd fce2 	bl	8009994 <tcp_abort>
            }
            return ERR_ABRT;
 800bfd0:	f06f 030c 	mvn.w	r3, #12
 800bfd4:	e1ce      	b.n	800c374 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fae0 	bl	800c59c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800bfdc:	4b63      	ldr	r3, [pc, #396]	@ (800c16c <tcp_process+0x5b8>)
 800bfde:	881b      	ldrh	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d005      	beq.n	800bff0 <tcp_process+0x43c>
            recv_acked--;
 800bfe4:	4b61      	ldr	r3, [pc, #388]	@ (800c16c <tcp_process+0x5b8>)
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	3b01      	subs	r3, #1
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	4b5f      	ldr	r3, [pc, #380]	@ (800c16c <tcp_process+0x5b8>)
 800bfee:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bff4:	009a      	lsls	r2, r3, #2
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	f241 111c 	movw	r1, #4380	@ 0x111c
 800c000:	428b      	cmp	r3, r1
 800c002:	bf38      	it	cc
 800c004:	460b      	movcc	r3, r1
 800c006:	429a      	cmp	r2, r3
 800c008:	d204      	bcs.n	800c014 <tcp_process+0x460>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	b29b      	uxth	r3, r3
 800c012:	e00d      	b.n	800c030 <tcp_process+0x47c>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800c01e:	4293      	cmp	r3, r2
 800c020:	d904      	bls.n	800c02c <tcp_process+0x478>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	b29b      	uxth	r3, r3
 800c02a:	e001      	b.n	800c030 <tcp_process+0x47c>
 800c02c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c036:	4b4e      	ldr	r3, [pc, #312]	@ (800c170 <tcp_process+0x5bc>)
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d037      	beq.n	800c0b2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	8b5b      	ldrh	r3, [r3, #26]
 800c046:	f043 0302 	orr.w	r3, r3, #2
 800c04a:	b29a      	uxth	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2207      	movs	r2, #7
 800c054:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c056:	e02c      	b.n	800c0b2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c058:	4b3b      	ldr	r3, [pc, #236]	@ (800c148 <tcp_process+0x594>)
 800c05a:	6819      	ldr	r1, [r3, #0]
 800c05c:	4b3b      	ldr	r3, [pc, #236]	@ (800c14c <tcp_process+0x598>)
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	4b3b      	ldr	r3, [pc, #236]	@ (800c150 <tcp_process+0x59c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c068:	4b3a      	ldr	r3, [pc, #232]	@ (800c154 <tcp_process+0x5a0>)
 800c06a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c06c:	885b      	ldrh	r3, [r3, #2]
 800c06e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c070:	4a38      	ldr	r2, [pc, #224]	@ (800c154 <tcp_process+0x5a0>)
 800c072:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c074:	8812      	ldrh	r2, [r2, #0]
 800c076:	b292      	uxth	r2, r2
 800c078:	9202      	str	r2, [sp, #8]
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	4b36      	ldr	r3, [pc, #216]	@ (800c158 <tcp_process+0x5a4>)
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	4b36      	ldr	r3, [pc, #216]	@ (800c15c <tcp_process+0x5a8>)
 800c082:	4602      	mov	r2, r0
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f003 f845 	bl	800f114 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c08a:	e167      	b.n	800c35c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c08c:	4b2d      	ldr	r3, [pc, #180]	@ (800c144 <tcp_process+0x590>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	f003 0302 	and.w	r3, r3, #2
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8161 	beq.w	800c35c <tcp_process+0x7a8>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c09e:	1e5a      	subs	r2, r3, #1
 800c0a0:	4b2b      	ldr	r3, [pc, #172]	@ (800c150 <tcp_process+0x59c>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	f040 8159 	bne.w	800c35c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f002 fe1c 	bl	800ece8 <tcp_rexmit>
      break;
 800c0b0:	e154      	b.n	800c35c <tcp_process+0x7a8>
 800c0b2:	e153      	b.n	800c35c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fa71 	bl	800c59c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c0ba:	4b2d      	ldr	r3, [pc, #180]	@ (800c170 <tcp_process+0x5bc>)
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	f003 0320 	and.w	r3, r3, #32
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f000 814c 	beq.w	800c360 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	8b5b      	ldrh	r3, [r3, #26]
 800c0cc:	f043 0302 	orr.w	r3, r3, #2
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2207      	movs	r2, #7
 800c0da:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c0dc:	e140      	b.n	800c360 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fa5c 	bl	800c59c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c0e4:	4b22      	ldr	r3, [pc, #136]	@ (800c170 <tcp_process+0x5bc>)
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	f003 0320 	and.w	r3, r3, #32
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d071      	beq.n	800c1d4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c0f0:	4b14      	ldr	r3, [pc, #80]	@ (800c144 <tcp_process+0x590>)
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	f003 0310 	and.w	r3, r3, #16
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d060      	beq.n	800c1be <tcp_process+0x60a>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c100:	4b11      	ldr	r3, [pc, #68]	@ (800c148 <tcp_process+0x594>)
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	429a      	cmp	r2, r3
 800c106:	d15a      	bne.n	800c1be <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d156      	bne.n	800c1be <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8b5b      	ldrh	r3, [r3, #26]
 800c114:	f043 0302 	orr.w	r3, r3, #2
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7fe fdbc 	bl	800ac9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800c124:	4b13      	ldr	r3, [pc, #76]	@ (800c174 <tcp_process+0x5c0>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d105      	bne.n	800c13a <tcp_process+0x586>
 800c12e:	4b11      	ldr	r3, [pc, #68]	@ (800c174 <tcp_process+0x5c0>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	4a0f      	ldr	r2, [pc, #60]	@ (800c174 <tcp_process+0x5c0>)
 800c136:	6013      	str	r3, [r2, #0]
 800c138:	e02e      	b.n	800c198 <tcp_process+0x5e4>
 800c13a:	4b0e      	ldr	r3, [pc, #56]	@ (800c174 <tcp_process+0x5c0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	e027      	b.n	800c192 <tcp_process+0x5de>
 800c142:	bf00      	nop
 800c144:	2000782c 	.word	0x2000782c
 800c148:	20007824 	.word	0x20007824
 800c14c:	2000782a 	.word	0x2000782a
 800c150:	20007820 	.word	0x20007820
 800c154:	20007810 	.word	0x20007810
 800c158:	200046f8 	.word	0x200046f8
 800c15c:	200046fc 	.word	0x200046fc
 800c160:	080150f0 	.word	0x080150f0
 800c164:	08015390 	.word	0x08015390
 800c168:	0801513c 	.word	0x0801513c
 800c16c:	20007828 	.word	0x20007828
 800c170:	2000782d 	.word	0x2000782d
 800c174:	200077f4 	.word	0x200077f4
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	429a      	cmp	r2, r3
 800c180:	d104      	bne.n	800c18c <tcp_process+0x5d8>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68da      	ldr	r2, [r3, #12]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	60da      	str	r2, [r3, #12]
 800c18a:	e005      	b.n	800c198 <tcp_process+0x5e4>
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	68db      	ldr	r3, [r3, #12]
 800c190:	617b      	str	r3, [r7, #20]
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1ef      	bne.n	800c178 <tcp_process+0x5c4>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	60da      	str	r2, [r3, #12]
 800c19e:	4b77      	ldr	r3, [pc, #476]	@ (800c37c <tcp_process+0x7c8>)
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	220a      	movs	r2, #10
 800c1a8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800c1aa:	4b75      	ldr	r3, [pc, #468]	@ (800c380 <tcp_process+0x7cc>)
 800c1ac:	681a      	ldr	r2, [r3, #0]
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	60da      	str	r2, [r3, #12]
 800c1b2:	4a73      	ldr	r2, [pc, #460]	@ (800c380 <tcp_process+0x7cc>)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	f003 f96e 	bl	800f498 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800c1bc:	e0d2      	b.n	800c364 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	8b5b      	ldrh	r3, [r3, #26]
 800c1c2:	f043 0302 	orr.w	r3, r3, #2
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2208      	movs	r2, #8
 800c1d0:	751a      	strb	r2, [r3, #20]
      break;
 800c1d2:	e0c7      	b.n	800c364 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1d4:	4b6b      	ldr	r3, [pc, #428]	@ (800c384 <tcp_process+0x7d0>)
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	f003 0310 	and.w	r3, r3, #16
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	f000 80c1 	beq.w	800c364 <tcp_process+0x7b0>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c1e6:	4b68      	ldr	r3, [pc, #416]	@ (800c388 <tcp_process+0x7d4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	f040 80ba 	bne.w	800c364 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f040 80b5 	bne.w	800c364 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2206      	movs	r2, #6
 800c1fe:	751a      	strb	r2, [r3, #20]
      break;
 800c200:	e0b0      	b.n	800c364 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f9ca 	bl	800c59c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800c208:	4b60      	ldr	r3, [pc, #384]	@ (800c38c <tcp_process+0x7d8>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f003 0320 	and.w	r3, r3, #32
 800c210:	2b00      	cmp	r3, #0
 800c212:	f000 80a9 	beq.w	800c368 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	8b5b      	ldrh	r3, [r3, #26]
 800c21a:	f043 0302 	orr.w	r3, r3, #2
 800c21e:	b29a      	uxth	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7fe fd39 	bl	800ac9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c22a:	4b59      	ldr	r3, [pc, #356]	@ (800c390 <tcp_process+0x7dc>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	429a      	cmp	r2, r3
 800c232:	d105      	bne.n	800c240 <tcp_process+0x68c>
 800c234:	4b56      	ldr	r3, [pc, #344]	@ (800c390 <tcp_process+0x7dc>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	4a55      	ldr	r2, [pc, #340]	@ (800c390 <tcp_process+0x7dc>)
 800c23c:	6013      	str	r3, [r2, #0]
 800c23e:	e013      	b.n	800c268 <tcp_process+0x6b4>
 800c240:	4b53      	ldr	r3, [pc, #332]	@ (800c390 <tcp_process+0x7dc>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	613b      	str	r3, [r7, #16]
 800c246:	e00c      	b.n	800c262 <tcp_process+0x6ae>
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	68db      	ldr	r3, [r3, #12]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	429a      	cmp	r2, r3
 800c250:	d104      	bne.n	800c25c <tcp_process+0x6a8>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68da      	ldr	r2, [r3, #12]
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	60da      	str	r2, [r3, #12]
 800c25a:	e005      	b.n	800c268 <tcp_process+0x6b4>
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	613b      	str	r3, [r7, #16]
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1ef      	bne.n	800c248 <tcp_process+0x694>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	60da      	str	r2, [r3, #12]
 800c26e:	4b43      	ldr	r3, [pc, #268]	@ (800c37c <tcp_process+0x7c8>)
 800c270:	2201      	movs	r2, #1
 800c272:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	220a      	movs	r2, #10
 800c278:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c27a:	4b41      	ldr	r3, [pc, #260]	@ (800c380 <tcp_process+0x7cc>)
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	60da      	str	r2, [r3, #12]
 800c282:	4a3f      	ldr	r2, [pc, #252]	@ (800c380 <tcp_process+0x7cc>)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6013      	str	r3, [r2, #0]
 800c288:	f003 f906 	bl	800f498 <tcp_timer_needed>
      }
      break;
 800c28c:	e06c      	b.n	800c368 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f984 	bl	800c59c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c294:	4b3b      	ldr	r3, [pc, #236]	@ (800c384 <tcp_process+0x7d0>)
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	f003 0310 	and.w	r3, r3, #16
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d065      	beq.n	800c36c <tcp_process+0x7b8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c2a4:	4b38      	ldr	r3, [pc, #224]	@ (800c388 <tcp_process+0x7d4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d15f      	bne.n	800c36c <tcp_process+0x7b8>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d15b      	bne.n	800c36c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7fe fcf1 	bl	800ac9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2ba:	4b35      	ldr	r3, [pc, #212]	@ (800c390 <tcp_process+0x7dc>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	687a      	ldr	r2, [r7, #4]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d105      	bne.n	800c2d0 <tcp_process+0x71c>
 800c2c4:	4b32      	ldr	r3, [pc, #200]	@ (800c390 <tcp_process+0x7dc>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	4a31      	ldr	r2, [pc, #196]	@ (800c390 <tcp_process+0x7dc>)
 800c2cc:	6013      	str	r3, [r2, #0]
 800c2ce:	e013      	b.n	800c2f8 <tcp_process+0x744>
 800c2d0:	4b2f      	ldr	r3, [pc, #188]	@ (800c390 <tcp_process+0x7dc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e00c      	b.n	800c2f2 <tcp_process+0x73e>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d104      	bne.n	800c2ec <tcp_process+0x738>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68da      	ldr	r2, [r3, #12]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	60da      	str	r2, [r3, #12]
 800c2ea:	e005      	b.n	800c2f8 <tcp_process+0x744>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d1ef      	bne.n	800c2d8 <tcp_process+0x724>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	60da      	str	r2, [r3, #12]
 800c2fe:	4b1f      	ldr	r3, [pc, #124]	@ (800c37c <tcp_process+0x7c8>)
 800c300:	2201      	movs	r2, #1
 800c302:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	220a      	movs	r2, #10
 800c308:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c30a:	4b1d      	ldr	r3, [pc, #116]	@ (800c380 <tcp_process+0x7cc>)
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	60da      	str	r2, [r3, #12]
 800c312:	4a1b      	ldr	r2, [pc, #108]	@ (800c380 <tcp_process+0x7cc>)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6013      	str	r3, [r2, #0]
 800c318:	f003 f8be 	bl	800f498 <tcp_timer_needed>
      }
      break;
 800c31c:	e026      	b.n	800c36c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f93c 	bl	800c59c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c324:	4b17      	ldr	r3, [pc, #92]	@ (800c384 <tcp_process+0x7d0>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	f003 0310 	and.w	r3, r3, #16
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d01f      	beq.n	800c370 <tcp_process+0x7bc>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c334:	4b14      	ldr	r3, [pc, #80]	@ (800c388 <tcp_process+0x7d4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	429a      	cmp	r2, r3
 800c33a:	d119      	bne.n	800c370 <tcp_process+0x7bc>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d115      	bne.n	800c370 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800c344:	4b11      	ldr	r3, [pc, #68]	@ (800c38c <tcp_process+0x7d8>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	f043 0310 	orr.w	r3, r3, #16
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	4b0f      	ldr	r3, [pc, #60]	@ (800c38c <tcp_process+0x7d8>)
 800c350:	701a      	strb	r2, [r3, #0]
      }
      break;
 800c352:	e00d      	b.n	800c370 <tcp_process+0x7bc>
    default:
      break;
 800c354:	bf00      	nop
 800c356:	e00c      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c358:	bf00      	nop
 800c35a:	e00a      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c35c:	bf00      	nop
 800c35e:	e008      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c360:	bf00      	nop
 800c362:	e006      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c364:	bf00      	nop
 800c366:	e004      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c368:	bf00      	nop
 800c36a:	e002      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c36c:	bf00      	nop
 800c36e:	e000      	b.n	800c372 <tcp_process+0x7be>
      break;
 800c370:	bf00      	nop
  }
  return ERR_OK;
 800c372:	2300      	movs	r3, #0
}
 800c374:	4618      	mov	r0, r3
 800c376:	3724      	adds	r7, #36	@ 0x24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd90      	pop	{r4, r7, pc}
 800c37c:	200077fc 	.word	0x200077fc
 800c380:	200077f8 	.word	0x200077f8
 800c384:	2000782c 	.word	0x2000782c
 800c388:	20007824 	.word	0x20007824
 800c38c:	2000782d 	.word	0x2000782d
 800c390:	200077f4 	.word	0x200077f4

0800c394 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d106      	bne.n	800c3b2 <tcp_oos_insert_segment+0x1e>
 800c3a4:	4b3b      	ldr	r3, [pc, #236]	@ (800c494 <tcp_oos_insert_segment+0x100>)
 800c3a6:	f240 421f 	movw	r2, #1055	@ 0x41f
 800c3aa:	493b      	ldr	r1, [pc, #236]	@ (800c498 <tcp_oos_insert_segment+0x104>)
 800c3ac:	483b      	ldr	r0, [pc, #236]	@ (800c49c <tcp_oos_insert_segment+0x108>)
 800c3ae:	f006 fc6f 	bl	8012c90 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68db      	ldr	r3, [r3, #12]
 800c3b6:	899b      	ldrh	r3, [r3, #12]
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fb f898 	bl	80074f0 <lwip_htons>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	b2db      	uxtb	r3, r3
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d028      	beq.n	800c41e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c3cc:	6838      	ldr	r0, [r7, #0]
 800c3ce:	f7fe f973 	bl	800a6b8 <tcp_segs_free>
    next = NULL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	603b      	str	r3, [r7, #0]
 800c3d6:	e056      	b.n	800c486 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fb f885 	bl	80074f0 <lwip_htons>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00d      	beq.n	800c40e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	899b      	ldrh	r3, [r3, #12]
 800c3f8:	b29c      	uxth	r4, r3
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	f7fb f878 	bl	80074f0 <lwip_htons>
 800c400:	4603      	mov	r3, r0
 800c402:	461a      	mov	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	4322      	orrs	r2, r4
 800c40a:	b292      	uxth	r2, r2
 800c40c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7fe f962 	bl	800a6e2 <tcp_seg_free>
    while (next &&
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00e      	beq.n	800c442 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	891b      	ldrh	r3, [r3, #8]
 800c428:	461a      	mov	r2, r3
 800c42a:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a0 <tcp_oos_insert_segment+0x10c>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	441a      	add	r2, r3
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	68db      	ldr	r3, [r3, #12]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	6839      	ldr	r1, [r7, #0]
 800c438:	8909      	ldrh	r1, [r1, #8]
 800c43a:	440b      	add	r3, r1
 800c43c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c43e:	2b00      	cmp	r3, #0
 800c440:	daca      	bge.n	800c3d8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01e      	beq.n	800c486 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	891b      	ldrh	r3, [r3, #8]
 800c44c:	461a      	mov	r2, r3
 800c44e:	4b14      	ldr	r3, [pc, #80]	@ (800c4a0 <tcp_oos_insert_segment+0x10c>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	441a      	add	r2, r3
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dd12      	ble.n	800c486 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	b29a      	uxth	r2, r3
 800c468:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a0 <tcp_oos_insert_segment+0x10c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	b29b      	uxth	r3, r3
 800c46e:	1ad3      	subs	r3, r2, r3
 800c470:	b29a      	uxth	r2, r3
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	685a      	ldr	r2, [r3, #4]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	891b      	ldrh	r3, [r3, #8]
 800c47e:	4619      	mov	r1, r3
 800c480:	4610      	mov	r0, r2
 800c482:	f7fc fb91 	bl	8008ba8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	601a      	str	r2, [r3, #0]
}
 800c48c:	bf00      	nop
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}
 800c494:	080150f0 	.word	0x080150f0
 800c498:	080153b0 	.word	0x080153b0
 800c49c:	0801513c 	.word	0x0801513c
 800c4a0:	20007820 	.word	0x20007820

0800c4a4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800c4a4:	b5b0      	push	{r4, r5, r7, lr}
 800c4a6:	b086      	sub	sp, #24
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800c4b2:	e03e      	b.n	800c532 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fc fd84 	bl	8008fd0 <pbuf_clen>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c4d2:	8a7a      	ldrh	r2, [r7, #18]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d906      	bls.n	800c4e6 <tcp_free_acked_segments+0x42>
 800c4d8:	4b2a      	ldr	r3, [pc, #168]	@ (800c584 <tcp_free_acked_segments+0xe0>)
 800c4da:	f240 4257 	movw	r2, #1111	@ 0x457
 800c4de:	492a      	ldr	r1, [pc, #168]	@ (800c588 <tcp_free_acked_segments+0xe4>)
 800c4e0:	482a      	ldr	r0, [pc, #168]	@ (800c58c <tcp_free_acked_segments+0xe8>)
 800c4e2:	f006 fbd5 	bl	8012c90 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800c4ec:	8a7b      	ldrh	r3, [r7, #18]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	891a      	ldrh	r2, [r3, #8]
 800c4fc:	4b24      	ldr	r3, [pc, #144]	@ (800c590 <tcp_free_acked_segments+0xec>)
 800c4fe:	881b      	ldrh	r3, [r3, #0]
 800c500:	4413      	add	r3, r2
 800c502:	b29a      	uxth	r2, r3
 800c504:	4b22      	ldr	r3, [pc, #136]	@ (800c590 <tcp_free_acked_segments+0xec>)
 800c506:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800c508:	6978      	ldr	r0, [r7, #20]
 800c50a:	f7fe f8ea 	bl	800a6e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00c      	beq.n	800c532 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <tcp_free_acked_segments+0x8e>
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d106      	bne.n	800c532 <tcp_free_acked_segments+0x8e>
 800c524:	4b17      	ldr	r3, [pc, #92]	@ (800c584 <tcp_free_acked_segments+0xe0>)
 800c526:	f240 4261 	movw	r2, #1121	@ 0x461
 800c52a:	491a      	ldr	r1, [pc, #104]	@ (800c594 <tcp_free_acked_segments+0xf0>)
 800c52c:	4817      	ldr	r0, [pc, #92]	@ (800c58c <tcp_free_acked_segments+0xe8>)
 800c52e:	f006 fbaf 	bl	8012c90 <iprintf>
  while (seg_list != NULL &&
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d020      	beq.n	800c57a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	4618      	mov	r0, r3
 800c540:	f7fa ffea 	bl	8007518 <lwip_htonl>
 800c544:	4604      	mov	r4, r0
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	891b      	ldrh	r3, [r3, #8]
 800c54a:	461d      	mov	r5, r3
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	899b      	ldrh	r3, [r3, #12]
 800c552:	b29b      	uxth	r3, r3
 800c554:	4618      	mov	r0, r3
 800c556:	f7fa ffcb 	bl	80074f0 <lwip_htons>
 800c55a:	4603      	mov	r3, r0
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	f003 0303 	and.w	r3, r3, #3
 800c562:	2b00      	cmp	r3, #0
 800c564:	d001      	beq.n	800c56a <tcp_free_acked_segments+0xc6>
 800c566:	2301      	movs	r3, #1
 800c568:	e000      	b.n	800c56c <tcp_free_acked_segments+0xc8>
 800c56a:	2300      	movs	r3, #0
 800c56c:	442b      	add	r3, r5
 800c56e:	18e2      	adds	r2, r4, r3
 800c570:	4b09      	ldr	r3, [pc, #36]	@ (800c598 <tcp_free_acked_segments+0xf4>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800c576:	2b00      	cmp	r3, #0
 800c578:	dd9c      	ble.n	800c4b4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800c57a:	68bb      	ldr	r3, [r7, #8]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3718      	adds	r7, #24
 800c580:	46bd      	mov	sp, r7
 800c582:	bdb0      	pop	{r4, r5, r7, pc}
 800c584:	080150f0 	.word	0x080150f0
 800c588:	080153d8 	.word	0x080153d8
 800c58c:	0801513c 	.word	0x0801513c
 800c590:	20007828 	.word	0x20007828
 800c594:	08015400 	.word	0x08015400
 800c598:	20007824 	.word	0x20007824

0800c59c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c59c:	b5b0      	push	{r4, r5, r7, lr}
 800c59e:	b094      	sub	sp, #80	@ 0x50
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d106      	bne.n	800c5bc <tcp_receive+0x20>
 800c5ae:	4b91      	ldr	r3, [pc, #580]	@ (800c7f4 <tcp_receive+0x258>)
 800c5b0:	f240 427b 	movw	r2, #1147	@ 0x47b
 800c5b4:	4990      	ldr	r1, [pc, #576]	@ (800c7f8 <tcp_receive+0x25c>)
 800c5b6:	4891      	ldr	r0, [pc, #580]	@ (800c7fc <tcp_receive+0x260>)
 800c5b8:	f006 fb6a 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	7d1b      	ldrb	r3, [r3, #20]
 800c5c0:	2b03      	cmp	r3, #3
 800c5c2:	d806      	bhi.n	800c5d2 <tcp_receive+0x36>
 800c5c4:	4b8b      	ldr	r3, [pc, #556]	@ (800c7f4 <tcp_receive+0x258>)
 800c5c6:	f240 427c 	movw	r2, #1148	@ 0x47c
 800c5ca:	498d      	ldr	r1, [pc, #564]	@ (800c800 <tcp_receive+0x264>)
 800c5cc:	488b      	ldr	r0, [pc, #556]	@ (800c7fc <tcp_receive+0x260>)
 800c5ce:	f006 fb5f 	bl	8012c90 <iprintf>

  if (flags & TCP_ACK) {
 800c5d2:	4b8c      	ldr	r3, [pc, #560]	@ (800c804 <tcp_receive+0x268>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	f003 0310 	and.w	r3, r3, #16
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 8264 	beq.w	800caa8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ec:	4413      	add	r3, r2
 800c5ee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5f4:	4b84      	ldr	r3, [pc, #528]	@ (800c808 <tcp_receive+0x26c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	db1b      	blt.n	800c636 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c602:	4b81      	ldr	r3, [pc, #516]	@ (800c808 <tcp_receive+0x26c>)
 800c604:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c606:	429a      	cmp	r2, r3
 800c608:	d106      	bne.n	800c618 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c60e:	4b7f      	ldr	r3, [pc, #508]	@ (800c80c <tcp_receive+0x270>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	db0e      	blt.n	800c636 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c61c:	4b7b      	ldr	r3, [pc, #492]	@ (800c80c <tcp_receive+0x270>)
 800c61e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c620:	429a      	cmp	r2, r3
 800c622:	d125      	bne.n	800c670 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c624:	4b7a      	ldr	r3, [pc, #488]	@ (800c810 <tcp_receive+0x274>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	89db      	ldrh	r3, [r3, #14]
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c632:	429a      	cmp	r2, r3
 800c634:	d91c      	bls.n	800c670 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c636:	4b76      	ldr	r3, [pc, #472]	@ (800c810 <tcp_receive+0x274>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	89db      	ldrh	r3, [r3, #14]
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c650:	429a      	cmp	r2, r3
 800c652:	d205      	bcs.n	800c660 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800c660:	4b69      	ldr	r3, [pc, #420]	@ (800c808 <tcp_receive+0x26c>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800c668:	4b68      	ldr	r3, [pc, #416]	@ (800c80c <tcp_receive+0x270>)
 800c66a:	681a      	ldr	r2, [r3, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c670:	4b66      	ldr	r3, [pc, #408]	@ (800c80c <tcp_receive+0x270>)
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	dc58      	bgt.n	800c730 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800c67e:	4b65      	ldr	r3, [pc, #404]	@ (800c814 <tcp_receive+0x278>)
 800c680:	881b      	ldrh	r3, [r3, #0]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d14b      	bne.n	800c71e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800c690:	4413      	add	r3, r2
 800c692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c694:	429a      	cmp	r2, r3
 800c696:	d142      	bne.n	800c71e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	db3d      	blt.n	800c71e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6a6:	4b59      	ldr	r3, [pc, #356]	@ (800c80c <tcp_receive+0x270>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d137      	bne.n	800c71e <tcp_receive+0x182>
              found_dupack = 1;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6b8:	2bff      	cmp	r3, #255	@ 0xff
 800c6ba:	d007      	beq.n	800c6cc <tcp_receive+0x130>
                ++pcb->dupacks;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	d91b      	bls.n	800c70e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6e0:	4413      	add	r3, r2
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d30a      	bcc.n	800c704 <tcp_receive+0x168>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c6f8:	4413      	add	r3, r2
 800c6fa:	b29a      	uxth	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c702:	e004      	b.n	800c70e <tcp_receive+0x172>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c70a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c714:	2b02      	cmp	r3, #2
 800c716:	d902      	bls.n	800c71e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f002 fb51 	bl	800edc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c720:	2b00      	cmp	r3, #0
 800c722:	f040 8161 	bne.w	800c9e8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c72e:	e15b      	b.n	800c9e8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c730:	4b36      	ldr	r3, [pc, #216]	@ (800c80c <tcp_receive+0x270>)
 800c732:	681a      	ldr	r2, [r3, #0]
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	3b01      	subs	r3, #1
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f2c0 814e 	blt.w	800c9de <tcp_receive+0x442>
 800c742:	4b32      	ldr	r3, [pc, #200]	@ (800c80c <tcp_receive+0x270>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c74a:	1ad3      	subs	r3, r2, r3
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	f300 8146 	bgt.w	800c9de <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	8b5b      	ldrh	r3, [r3, #26]
 800c756:	f003 0304 	and.w	r3, r3, #4
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d010      	beq.n	800c780 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	8b5b      	ldrh	r3, [r3, #26]
 800c762:	f023 0304 	bic.w	r3, r3, #4
 800c766:	b29a      	uxth	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	2200      	movs	r2, #0
 800c77c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c78e:	10db      	asrs	r3, r3, #3
 800c790:	b21b      	sxth	r3, r3
 800c792:	b29a      	uxth	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	4413      	add	r3, r2
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	b21a      	sxth	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c7a8:	4b18      	ldr	r3, [pc, #96]	@ (800c80c <tcp_receive+0x270>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	1ad3      	subs	r3, r2, r3
 800c7b6:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c7c0:	4b12      	ldr	r3, [pc, #72]	@ (800c80c <tcp_receive+0x270>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	7d1b      	ldrb	r3, [r3, #20]
 800c7cc:	2b03      	cmp	r3, #3
 800c7ce:	f240 8097 	bls.w	800c900 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	d245      	bcs.n	800c86e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	8b5b      	ldrh	r3, [r3, #26]
 800c7e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d014      	beq.n	800c818 <tcp_receive+0x27c>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e013      	b.n	800c81a <tcp_receive+0x27e>
 800c7f2:	bf00      	nop
 800c7f4:	080150f0 	.word	0x080150f0
 800c7f8:	08015420 	.word	0x08015420
 800c7fc:	0801513c 	.word	0x0801513c
 800c800:	0801543c 	.word	0x0801543c
 800c804:	2000782c 	.word	0x2000782c
 800c808:	20007820 	.word	0x20007820
 800c80c:	20007824 	.word	0x20007824
 800c810:	20007810 	.word	0x20007810
 800c814:	2000782a 	.word	0x2000782a
 800c818:	2302      	movs	r3, #2
 800c81a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c81e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c822:	b29b      	uxth	r3, r3
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c828:	fb02 f303 	mul.w	r3, r2, r3
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c830:	4293      	cmp	r3, r2
 800c832:	bf28      	it	cs
 800c834:	4613      	movcs	r3, r2
 800c836:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c83e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c840:	4413      	add	r3, r2
 800c842:	b29a      	uxth	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d309      	bcc.n	800c862 <tcp_receive+0x2c6>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c854:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c856:	4413      	add	r3, r2
 800c858:	b29a      	uxth	r2, r3
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c860:	e04e      	b.n	800c900 <tcp_receive+0x364>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c868:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c86c:	e048      	b.n	800c900 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c874:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c876:	4413      	add	r3, r2
 800c878:	b29a      	uxth	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c880:	429a      	cmp	r2, r3
 800c882:	d309      	bcc.n	800c898 <tcp_receive+0x2fc>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c88a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c88c:	4413      	add	r3, r2
 800c88e:	b29a      	uxth	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c896:	e004      	b.n	800c8a2 <tcp_receive+0x306>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c89e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d326      	bcc.n	800c900 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	b29a      	uxth	r2, r3
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8d2:	4413      	add	r3, r2
 800c8d4:	b29a      	uxth	r2, r3
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d30a      	bcc.n	800c8f6 <tcp_receive+0x35a>
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c8ea:	4413      	add	r3, r2
 800c8ec:	b29a      	uxth	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c8f4:	e004      	b.n	800c900 <tcp_receive+0x364>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c8fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c908:	4a98      	ldr	r2, [pc, #608]	@ (800cb6c <tcp_receive+0x5d0>)
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff fdca 	bl	800c4a4 <tcp_free_acked_segments>
 800c910:	4602      	mov	r2, r0
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c91e:	4a94      	ldr	r2, [pc, #592]	@ (800cb70 <tcp_receive+0x5d4>)
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff fdbf 	bl	800c4a4 <tcp_free_acked_segments>
 800c926:	4602      	mov	r2, r0
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c930:	2b00      	cmp	r3, #0
 800c932:	d104      	bne.n	800c93e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c93a:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c93c:	e002      	b.n	800c944 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d103      	bne.n	800c95a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c960:	4b84      	ldr	r3, [pc, #528]	@ (800cb74 <tcp_receive+0x5d8>)
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	4413      	add	r3, r2
 800c966:	b29a      	uxth	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	8b5b      	ldrh	r3, [r3, #26]
 800c972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c976:	2b00      	cmp	r3, #0
 800c978:	d035      	beq.n	800c9e6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d118      	bne.n	800c9b4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00c      	beq.n	800c9a4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	4618      	mov	r0, r3
 800c998:	f7fa fdbe 	bl	8007518 <lwip_htonl>
 800c99c:	4603      	mov	r3, r0
 800c99e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	dc20      	bgt.n	800c9e6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8b5b      	ldrh	r3, [r3, #26]
 800c9a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9b2:	e018      	b.n	800c9e6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fa fda9 	bl	8007518 <lwip_htonl>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	1ae3      	subs	r3, r4, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	dc0b      	bgt.n	800c9e6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	8b5b      	ldrh	r3, [r3, #26]
 800c9d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9d6:	b29a      	uxth	r2, r3
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9dc:	e003      	b.n	800c9e6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f002 fbea 	bl	800f1b8 <tcp_send_empty_ack>
 800c9e4:	e000      	b.n	800c9e8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c9e6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d05b      	beq.n	800caa8 <tcp_receive+0x50c>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9f4:	4b60      	ldr	r3, [pc, #384]	@ (800cb78 <tcp_receive+0x5dc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	1ad3      	subs	r3, r2, r3
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	da54      	bge.n	800caa8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c9fe:	4b5f      	ldr	r3, [pc, #380]	@ (800cb7c <tcp_receive+0x5e0>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	b29a      	uxth	r2, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	1ad3      	subs	r3, r2, r3
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ca12:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca1c:	10db      	asrs	r3, r3, #3
 800ca1e:	b21b      	sxth	r3, r3
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca36:	4413      	add	r3, r2
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	b21a      	sxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800ca40:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	da05      	bge.n	800ca54 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ca48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca4c:	425b      	negs	r3, r3
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ca54:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca5e:	109b      	asrs	r3, r3, #2
 800ca60:	b21b      	sxth	r3, r3
 800ca62:	b29b      	uxth	r3, r3
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca78:	4413      	add	r3, r2
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	b21a      	sxth	r2, r3
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800ca88:	10db      	asrs	r3, r3, #3
 800ca8a:	b21b      	sxth	r3, r3
 800ca8c:	b29a      	uxth	r2, r3
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	b21a      	sxth	r2, r3
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800caa8:	4b35      	ldr	r3, [pc, #212]	@ (800cb80 <tcp_receive+0x5e4>)
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 84df 	beq.w	800d470 <tcp_receive+0xed4>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	7d1b      	ldrb	r3, [r3, #20]
 800cab6:	2b06      	cmp	r3, #6
 800cab8:	f200 84da 	bhi.w	800d470 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cac0:	4b30      	ldr	r3, [pc, #192]	@ (800cb84 <tcp_receive+0x5e8>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	3b01      	subs	r3, #1
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f2c0 808f 	blt.w	800cbec <tcp_receive+0x650>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cad2:	4b2b      	ldr	r3, [pc, #172]	@ (800cb80 <tcp_receive+0x5e4>)
 800cad4:	881b      	ldrh	r3, [r3, #0]
 800cad6:	4619      	mov	r1, r3
 800cad8:	4b2a      	ldr	r3, [pc, #168]	@ (800cb84 <tcp_receive+0x5e8>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	440b      	add	r3, r1
 800cade:	1ad3      	subs	r3, r2, r3
 800cae0:	3301      	adds	r3, #1
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f300 8082 	bgt.w	800cbec <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cae8:	4b27      	ldr	r3, [pc, #156]	@ (800cb88 <tcp_receive+0x5ec>)
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800caf2:	4b24      	ldr	r3, [pc, #144]	@ (800cb84 <tcp_receive+0x5e8>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800cafa:	4b23      	ldr	r3, [pc, #140]	@ (800cb88 <tcp_receive+0x5ec>)
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d106      	bne.n	800cb10 <tcp_receive+0x574>
 800cb02:	4b22      	ldr	r3, [pc, #136]	@ (800cb8c <tcp_receive+0x5f0>)
 800cb04:	f240 5294 	movw	r2, #1428	@ 0x594
 800cb08:	4921      	ldr	r1, [pc, #132]	@ (800cb90 <tcp_receive+0x5f4>)
 800cb0a:	4822      	ldr	r0, [pc, #136]	@ (800cb94 <tcp_receive+0x5f8>)
 800cb0c:	f006 f8c0 	bl	8012c90 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800cb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb12:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d906      	bls.n	800cb28 <tcp_receive+0x58c>
 800cb1a:	4b1c      	ldr	r3, [pc, #112]	@ (800cb8c <tcp_receive+0x5f0>)
 800cb1c:	f240 5295 	movw	r2, #1429	@ 0x595
 800cb20:	491d      	ldr	r1, [pc, #116]	@ (800cb98 <tcp_receive+0x5fc>)
 800cb22:	481c      	ldr	r0, [pc, #112]	@ (800cb94 <tcp_receive+0x5f8>)
 800cb24:	f006 f8b4 	bl	8012c90 <iprintf>
      off = (u16_t)off32;
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800cb2e:	4b16      	ldr	r3, [pc, #88]	@ (800cb88 <tcp_receive+0x5ec>)
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	891b      	ldrh	r3, [r3, #8]
 800cb34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d906      	bls.n	800cb4a <tcp_receive+0x5ae>
 800cb3c:	4b13      	ldr	r3, [pc, #76]	@ (800cb8c <tcp_receive+0x5f0>)
 800cb3e:	f240 5297 	movw	r2, #1431	@ 0x597
 800cb42:	4916      	ldr	r1, [pc, #88]	@ (800cb9c <tcp_receive+0x600>)
 800cb44:	4813      	ldr	r0, [pc, #76]	@ (800cb94 <tcp_receive+0x5f8>)
 800cb46:	f006 f8a3 	bl	8012c90 <iprintf>
      inseg.len -= off;
 800cb4a:	4b0f      	ldr	r3, [pc, #60]	@ (800cb88 <tcp_receive+0x5ec>)
 800cb4c:	891a      	ldrh	r2, [r3, #8]
 800cb4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	b29a      	uxth	r2, r3
 800cb56:	4b0c      	ldr	r3, [pc, #48]	@ (800cb88 <tcp_receive+0x5ec>)
 800cb58:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb88 <tcp_receive+0x5ec>)
 800cb5c:	685b      	ldr	r3, [r3, #4]
 800cb5e:	891a      	ldrh	r2, [r3, #8]
 800cb60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800cb68:	e02a      	b.n	800cbc0 <tcp_receive+0x624>
 800cb6a:	bf00      	nop
 800cb6c:	08015458 	.word	0x08015458
 800cb70:	08015460 	.word	0x08015460
 800cb74:	20007828 	.word	0x20007828
 800cb78:	20007824 	.word	0x20007824
 800cb7c:	200077e8 	.word	0x200077e8
 800cb80:	2000782a 	.word	0x2000782a
 800cb84:	20007820 	.word	0x20007820
 800cb88:	20007800 	.word	0x20007800
 800cb8c:	080150f0 	.word	0x080150f0
 800cb90:	08015468 	.word	0x08015468
 800cb94:	0801513c 	.word	0x0801513c
 800cb98:	08015478 	.word	0x08015478
 800cb9c:	08015488 	.word	0x08015488
        off -= p->len;
 800cba0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba2:	895b      	ldrh	r3, [r3, #10]
 800cba4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800cbae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cbb2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800cbb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800cbba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800cbc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc2:	895b      	ldrh	r3, [r3, #10]
 800cbc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d8e9      	bhi.n	800cba0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800cbcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800cbd4:	f7fc f8e8 	bl	8008da8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbdc:	4a90      	ldr	r2, [pc, #576]	@ (800ce20 <tcp_receive+0x884>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	4b90      	ldr	r3, [pc, #576]	@ (800ce24 <tcp_receive+0x888>)
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	4a8e      	ldr	r2, [pc, #568]	@ (800ce20 <tcp_receive+0x884>)
 800cbe6:	6812      	ldr	r2, [r2, #0]
 800cbe8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cbea:	e00d      	b.n	800cc08 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cbec:	4b8c      	ldr	r3, [pc, #560]	@ (800ce20 <tcp_receive+0x884>)
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da06      	bge.n	800cc08 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	8b5b      	ldrh	r3, [r3, #26]
 800cbfe:	f043 0302 	orr.w	r3, r3, #2
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cc08:	4b85      	ldr	r3, [pc, #532]	@ (800ce20 <tcp_receive+0x884>)
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f2c0 8427 	blt.w	800d466 <tcp_receive+0xeca>
 800cc18:	4b81      	ldr	r3, [pc, #516]	@ (800ce20 <tcp_receive+0x884>)
 800cc1a:	681a      	ldr	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cc24:	440b      	add	r3, r1
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	3301      	adds	r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	f300 841b 	bgt.w	800d466 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc34:	4b7a      	ldr	r3, [pc, #488]	@ (800ce20 <tcp_receive+0x884>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	f040 8298 	bne.w	800d16e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cc3e:	4b79      	ldr	r3, [pc, #484]	@ (800ce24 <tcp_receive+0x888>)
 800cc40:	891c      	ldrh	r4, [r3, #8]
 800cc42:	4b78      	ldr	r3, [pc, #480]	@ (800ce24 <tcp_receive+0x888>)
 800cc44:	68db      	ldr	r3, [r3, #12]
 800cc46:	899b      	ldrh	r3, [r3, #12]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fa fc50 	bl	80074f0 <lwip_htons>
 800cc50:	4603      	mov	r3, r0
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d001      	beq.n	800cc60 <tcp_receive+0x6c4>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	e000      	b.n	800cc62 <tcp_receive+0x6c6>
 800cc60:	2300      	movs	r3, #0
 800cc62:	4423      	add	r3, r4
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	4b70      	ldr	r3, [pc, #448]	@ (800ce28 <tcp_receive+0x88c>)
 800cc68:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cc6e:	4b6e      	ldr	r3, [pc, #440]	@ (800ce28 <tcp_receive+0x88c>)
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d274      	bcs.n	800cd60 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cc76:	4b6b      	ldr	r3, [pc, #428]	@ (800ce24 <tcp_receive+0x888>)
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	899b      	ldrh	r3, [r3, #12]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fa fc36 	bl	80074f0 <lwip_htons>
 800cc84:	4603      	mov	r3, r0
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d01e      	beq.n	800ccce <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cc90:	4b64      	ldr	r3, [pc, #400]	@ (800ce24 <tcp_receive+0x888>)
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	899b      	ldrh	r3, [r3, #12]
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	b21b      	sxth	r3, r3
 800cc9a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cc9e:	b21c      	sxth	r4, r3
 800cca0:	4b60      	ldr	r3, [pc, #384]	@ (800ce24 <tcp_receive+0x888>)
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	899b      	ldrh	r3, [r3, #12]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fa fc21 	bl	80074f0 <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fa fc19 	bl	80074f0 <lwip_htons>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	b21b      	sxth	r3, r3
 800ccc2:	4323      	orrs	r3, r4
 800ccc4:	b21a      	sxth	r2, r3
 800ccc6:	4b57      	ldr	r3, [pc, #348]	@ (800ce24 <tcp_receive+0x888>)
 800ccc8:	68db      	ldr	r3, [r3, #12]
 800ccca:	b292      	uxth	r2, r2
 800cccc:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ccd2:	4b54      	ldr	r3, [pc, #336]	@ (800ce24 <tcp_receive+0x888>)
 800ccd4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ccd6:	4b53      	ldr	r3, [pc, #332]	@ (800ce24 <tcp_receive+0x888>)
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	899b      	ldrh	r3, [r3, #12]
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7fa fc06 	bl	80074f0 <lwip_htons>
 800cce4:	4603      	mov	r3, r0
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d005      	beq.n	800ccfc <tcp_receive+0x760>
            inseg.len -= 1;
 800ccf0:	4b4c      	ldr	r3, [pc, #304]	@ (800ce24 <tcp_receive+0x888>)
 800ccf2:	891b      	ldrh	r3, [r3, #8]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	4b4a      	ldr	r3, [pc, #296]	@ (800ce24 <tcp_receive+0x888>)
 800ccfa:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ccfc:	4b49      	ldr	r3, [pc, #292]	@ (800ce24 <tcp_receive+0x888>)
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	4a48      	ldr	r2, [pc, #288]	@ (800ce24 <tcp_receive+0x888>)
 800cd02:	8912      	ldrh	r2, [r2, #8]
 800cd04:	4611      	mov	r1, r2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fb ff4e 	bl	8008ba8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800cd0c:	4b45      	ldr	r3, [pc, #276]	@ (800ce24 <tcp_receive+0x888>)
 800cd0e:	891c      	ldrh	r4, [r3, #8]
 800cd10:	4b44      	ldr	r3, [pc, #272]	@ (800ce24 <tcp_receive+0x888>)
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	899b      	ldrh	r3, [r3, #12]
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fa fbe9 	bl	80074f0 <lwip_htons>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	f003 0303 	and.w	r3, r3, #3
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d001      	beq.n	800cd2e <tcp_receive+0x792>
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	e000      	b.n	800cd30 <tcp_receive+0x794>
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4423      	add	r3, r4
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	4b3c      	ldr	r3, [pc, #240]	@ (800ce28 <tcp_receive+0x88c>)
 800cd36:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd38:	4b3b      	ldr	r3, [pc, #236]	@ (800ce28 <tcp_receive+0x88c>)
 800cd3a:	881b      	ldrh	r3, [r3, #0]
 800cd3c:	461a      	mov	r2, r3
 800cd3e:	4b38      	ldr	r3, [pc, #224]	@ (800ce20 <tcp_receive+0x884>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	441a      	add	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd48:	6879      	ldr	r1, [r7, #4]
 800cd4a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd4c:	440b      	add	r3, r1
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d006      	beq.n	800cd60 <tcp_receive+0x7c4>
 800cd52:	4b36      	ldr	r3, [pc, #216]	@ (800ce2c <tcp_receive+0x890>)
 800cd54:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800cd58:	4935      	ldr	r1, [pc, #212]	@ (800ce30 <tcp_receive+0x894>)
 800cd5a:	4836      	ldr	r0, [pc, #216]	@ (800ce34 <tcp_receive+0x898>)
 800cd5c:	f005 ff98 	bl	8012c90 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	f000 80e6 	beq.w	800cf36 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cd6a:	4b2e      	ldr	r3, [pc, #184]	@ (800ce24 <tcp_receive+0x888>)
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	899b      	ldrh	r3, [r3, #12]
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fa fbbc 	bl	80074f0 <lwip_htons>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	f003 0301 	and.w	r3, r3, #1
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d010      	beq.n	800cda6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800cd84:	e00a      	b.n	800cd9c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd8a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800cd96:	68f8      	ldr	r0, [r7, #12]
 800cd98:	f7fd fca3 	bl	800a6e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1f0      	bne.n	800cd86 <tcp_receive+0x7ea>
 800cda4:	e0c7      	b.n	800cf36 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800cdac:	e051      	b.n	800ce52 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb0:	68db      	ldr	r3, [r3, #12]
 800cdb2:	899b      	ldrh	r3, [r3, #12]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7fa fb9a 	bl	80074f0 <lwip_htons>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	f003 0301 	and.w	r3, r3, #1
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d03c      	beq.n	800ce42 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800cdc8:	4b16      	ldr	r3, [pc, #88]	@ (800ce24 <tcp_receive+0x888>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	899b      	ldrh	r3, [r3, #12]
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7fa fb8d 	bl	80074f0 <lwip_htons>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d12f      	bne.n	800ce42 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800cde2:	4b10      	ldr	r3, [pc, #64]	@ (800ce24 <tcp_receive+0x888>)
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	899b      	ldrh	r3, [r3, #12]
 800cde8:	b29c      	uxth	r4, r3
 800cdea:	2001      	movs	r0, #1
 800cdec:	f7fa fb80 	bl	80074f0 <lwip_htons>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	4b0b      	ldr	r3, [pc, #44]	@ (800ce24 <tcp_receive+0x888>)
 800cdf6:	68db      	ldr	r3, [r3, #12]
 800cdf8:	4322      	orrs	r2, r4
 800cdfa:	b292      	uxth	r2, r2
 800cdfc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800cdfe:	4b09      	ldr	r3, [pc, #36]	@ (800ce24 <tcp_receive+0x888>)
 800ce00:	891c      	ldrh	r4, [r3, #8]
 800ce02:	4b08      	ldr	r3, [pc, #32]	@ (800ce24 <tcp_receive+0x888>)
 800ce04:	68db      	ldr	r3, [r3, #12]
 800ce06:	899b      	ldrh	r3, [r3, #12]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7fa fb70 	bl	80074f0 <lwip_htons>
 800ce10:	4603      	mov	r3, r0
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	f003 0303 	and.w	r3, r3, #3
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00d      	beq.n	800ce38 <tcp_receive+0x89c>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e00c      	b.n	800ce3a <tcp_receive+0x89e>
 800ce20:	20007820 	.word	0x20007820
 800ce24:	20007800 	.word	0x20007800
 800ce28:	2000782a 	.word	0x2000782a
 800ce2c:	080150f0 	.word	0x080150f0
 800ce30:	08015498 	.word	0x08015498
 800ce34:	0801513c 	.word	0x0801513c
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4423      	add	r3, r4
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	4b98      	ldr	r3, [pc, #608]	@ (800d0a0 <tcp_receive+0xb04>)
 800ce40:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ce42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce44:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ce46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ce4c:	6938      	ldr	r0, [r7, #16]
 800ce4e:	f7fd fc48 	bl	800a6e2 <tcp_seg_free>
            while (next &&
 800ce52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d00e      	beq.n	800ce76 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ce58:	4b91      	ldr	r3, [pc, #580]	@ (800d0a0 <tcp_receive+0xb04>)
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	4b91      	ldr	r3, [pc, #580]	@ (800d0a4 <tcp_receive+0xb08>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	441a      	add	r2, r3
 800ce64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce66:	68db      	ldr	r3, [r3, #12]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce6c:	8909      	ldrh	r1, [r1, #8]
 800ce6e:	440b      	add	r3, r1
 800ce70:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	da9b      	bge.n	800cdae <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ce76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d059      	beq.n	800cf30 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ce7c:	4b88      	ldr	r3, [pc, #544]	@ (800d0a0 <tcp_receive+0xb04>)
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	461a      	mov	r2, r3
 800ce82:	4b88      	ldr	r3, [pc, #544]	@ (800d0a4 <tcp_receive+0xb08>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	441a      	add	r2, r3
 800ce88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	dd4d      	ble.n	800cf30 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ce94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce96:	68db      	ldr	r3, [r3, #12]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	b29a      	uxth	r2, r3
 800ce9c:	4b81      	ldr	r3, [pc, #516]	@ (800d0a4 <tcp_receive+0xb08>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	b29b      	uxth	r3, r3
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	4b80      	ldr	r3, [pc, #512]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cea8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ceaa:	4b7f      	ldr	r3, [pc, #508]	@ (800d0a8 <tcp_receive+0xb0c>)
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	899b      	ldrh	r3, [r3, #12]
 800ceb0:	b29b      	uxth	r3, r3
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fa fb1c 	bl	80074f0 <lwip_htons>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	f003 0302 	and.w	r3, r3, #2
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d005      	beq.n	800ced0 <tcp_receive+0x934>
                inseg.len -= 1;
 800cec4:	4b78      	ldr	r3, [pc, #480]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cec6:	891b      	ldrh	r3, [r3, #8]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	b29a      	uxth	r2, r3
 800cecc:	4b76      	ldr	r3, [pc, #472]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cece:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ced0:	4b75      	ldr	r3, [pc, #468]	@ (800d0a8 <tcp_receive+0xb0c>)
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4a74      	ldr	r2, [pc, #464]	@ (800d0a8 <tcp_receive+0xb0c>)
 800ced6:	8912      	ldrh	r2, [r2, #8]
 800ced8:	4611      	mov	r1, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7fb fe64 	bl	8008ba8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800cee0:	4b71      	ldr	r3, [pc, #452]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cee2:	891c      	ldrh	r4, [r3, #8]
 800cee4:	4b70      	ldr	r3, [pc, #448]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cee6:	68db      	ldr	r3, [r3, #12]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fa faff 	bl	80074f0 <lwip_htons>
 800cef2:	4603      	mov	r3, r0
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	f003 0303 	and.w	r3, r3, #3
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <tcp_receive+0x966>
 800cefe:	2301      	movs	r3, #1
 800cf00:	e000      	b.n	800cf04 <tcp_receive+0x968>
 800cf02:	2300      	movs	r3, #0
 800cf04:	4423      	add	r3, r4
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	4b65      	ldr	r3, [pc, #404]	@ (800d0a0 <tcp_receive+0xb04>)
 800cf0a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800cf0c:	4b64      	ldr	r3, [pc, #400]	@ (800d0a0 <tcp_receive+0xb04>)
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	4b64      	ldr	r3, [pc, #400]	@ (800d0a4 <tcp_receive+0xb08>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	441a      	add	r2, r3
 800cf18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d006      	beq.n	800cf30 <tcp_receive+0x994>
 800cf22:	4b62      	ldr	r3, [pc, #392]	@ (800d0ac <tcp_receive+0xb10>)
 800cf24:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800cf28:	4961      	ldr	r1, [pc, #388]	@ (800d0b0 <tcp_receive+0xb14>)
 800cf2a:	4862      	ldr	r0, [pc, #392]	@ (800d0b4 <tcp_receive+0xb18>)
 800cf2c:	f005 feb0 	bl	8012c90 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cf34:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800cf36:	4b5a      	ldr	r3, [pc, #360]	@ (800d0a0 <tcp_receive+0xb04>)
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	4b59      	ldr	r3, [pc, #356]	@ (800d0a4 <tcp_receive+0xb08>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	441a      	add	r2, r3
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf4a:	4b55      	ldr	r3, [pc, #340]	@ (800d0a0 <tcp_receive+0xb04>)
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d206      	bcs.n	800cf60 <tcp_receive+0x9c4>
 800cf52:	4b56      	ldr	r3, [pc, #344]	@ (800d0ac <tcp_receive+0xb10>)
 800cf54:	f240 6207 	movw	r2, #1543	@ 0x607
 800cf58:	4957      	ldr	r1, [pc, #348]	@ (800d0b8 <tcp_receive+0xb1c>)
 800cf5a:	4856      	ldr	r0, [pc, #344]	@ (800d0b4 <tcp_receive+0xb18>)
 800cf5c:	f005 fe98 	bl	8012c90 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800cf64:	4b4e      	ldr	r3, [pc, #312]	@ (800d0a0 <tcp_receive+0xb04>)
 800cf66:	881b      	ldrh	r3, [r3, #0]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f7fc fe8f 	bl	8009c94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800cf76:	4b4c      	ldr	r3, [pc, #304]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	891b      	ldrh	r3, [r3, #8]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d006      	beq.n	800cf8e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800cf80:	4b49      	ldr	r3, [pc, #292]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	4a4d      	ldr	r2, [pc, #308]	@ (800d0bc <tcp_receive+0xb20>)
 800cf86:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800cf88:	4b47      	ldr	r3, [pc, #284]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cf8e:	4b46      	ldr	r3, [pc, #280]	@ (800d0a8 <tcp_receive+0xb0c>)
 800cf90:	68db      	ldr	r3, [r3, #12]
 800cf92:	899b      	ldrh	r3, [r3, #12]
 800cf94:	b29b      	uxth	r3, r3
 800cf96:	4618      	mov	r0, r3
 800cf98:	f7fa faaa 	bl	80074f0 <lwip_htons>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 80b8 	beq.w	800d11a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800cfaa:	4b45      	ldr	r3, [pc, #276]	@ (800d0c0 <tcp_receive+0xb24>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	f043 0320 	orr.w	r3, r3, #32
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	4b42      	ldr	r3, [pc, #264]	@ (800d0c0 <tcp_receive+0xb24>)
 800cfb6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800cfb8:	e0af      	b.n	800d11a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfbe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	4a36      	ldr	r2, [pc, #216]	@ (800d0a4 <tcp_receive+0xb08>)
 800cfca:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	891b      	ldrh	r3, [r3, #8]
 800cfd0:	461c      	mov	r4, r3
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	899b      	ldrh	r3, [r3, #12]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7fa fa88 	bl	80074f0 <lwip_htons>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d001      	beq.n	800cff0 <tcp_receive+0xa54>
 800cfec:	2301      	movs	r3, #1
 800cfee:	e000      	b.n	800cff2 <tcp_receive+0xa56>
 800cff0:	2300      	movs	r3, #0
 800cff2:	191a      	adds	r2, r3, r4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cff8:	441a      	add	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d002:	461c      	mov	r4, r3
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	891b      	ldrh	r3, [r3, #8]
 800d008:	461d      	mov	r5, r3
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	899b      	ldrh	r3, [r3, #12]
 800d010:	b29b      	uxth	r3, r3
 800d012:	4618      	mov	r0, r3
 800d014:	f7fa fa6c 	bl	80074f0 <lwip_htons>
 800d018:	4603      	mov	r3, r0
 800d01a:	b2db      	uxtb	r3, r3
 800d01c:	f003 0303 	and.w	r3, r3, #3
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <tcp_receive+0xa8c>
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <tcp_receive+0xa8e>
 800d028:	2300      	movs	r3, #0
 800d02a:	442b      	add	r3, r5
 800d02c:	429c      	cmp	r4, r3
 800d02e:	d206      	bcs.n	800d03e <tcp_receive+0xaa2>
 800d030:	4b1e      	ldr	r3, [pc, #120]	@ (800d0ac <tcp_receive+0xb10>)
 800d032:	f240 622b 	movw	r2, #1579	@ 0x62b
 800d036:	4923      	ldr	r1, [pc, #140]	@ (800d0c4 <tcp_receive+0xb28>)
 800d038:	481e      	ldr	r0, [pc, #120]	@ (800d0b4 <tcp_receive+0xb18>)
 800d03a:	f005 fe29 	bl	8012c90 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	891b      	ldrh	r3, [r3, #8]
 800d042:	461c      	mov	r4, r3
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	899b      	ldrh	r3, [r3, #12]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	4618      	mov	r0, r3
 800d04e:	f7fa fa4f 	bl	80074f0 <lwip_htons>
 800d052:	4603      	mov	r3, r0
 800d054:	b2db      	uxtb	r3, r3
 800d056:	f003 0303 	and.w	r3, r3, #3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <tcp_receive+0xac6>
 800d05e:	2301      	movs	r3, #1
 800d060:	e000      	b.n	800d064 <tcp_receive+0xac8>
 800d062:	2300      	movs	r3, #0
 800d064:	1919      	adds	r1, r3, r4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d06a:	b28b      	uxth	r3, r1
 800d06c:	1ad3      	subs	r3, r2, r3
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7fc fe0d 	bl	8009c94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	891b      	ldrh	r3, [r3, #8]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d028      	beq.n	800d0d6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d084:	4b0d      	ldr	r3, [pc, #52]	@ (800d0bc <tcp_receive+0xb20>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d01d      	beq.n	800d0c8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d08c:	4b0b      	ldr	r3, [pc, #44]	@ (800d0bc <tcp_receive+0xb20>)
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	4619      	mov	r1, r3
 800d096:	4610      	mov	r0, r2
 800d098:	f7fb ffd8 	bl	800904c <pbuf_cat>
 800d09c:	e018      	b.n	800d0d0 <tcp_receive+0xb34>
 800d09e:	bf00      	nop
 800d0a0:	2000782a 	.word	0x2000782a
 800d0a4:	20007820 	.word	0x20007820
 800d0a8:	20007800 	.word	0x20007800
 800d0ac:	080150f0 	.word	0x080150f0
 800d0b0:	080154d0 	.word	0x080154d0
 800d0b4:	0801513c 	.word	0x0801513c
 800d0b8:	0801550c 	.word	0x0801550c
 800d0bc:	20007830 	.word	0x20007830
 800d0c0:	2000782d 	.word	0x2000782d
 800d0c4:	0801552c 	.word	0x0801552c
            } else {
              recv_data = cseg->p;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	685b      	ldr	r3, [r3, #4]
 800d0cc:	4a70      	ldr	r2, [pc, #448]	@ (800d290 <tcp_receive+0xcf4>)
 800d0ce:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	899b      	ldrh	r3, [r3, #12]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fa fa06 	bl	80074f0 <lwip_htons>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 0301 	and.w	r3, r3, #1
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d00d      	beq.n	800d10c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d0f0:	4b68      	ldr	r3, [pc, #416]	@ (800d294 <tcp_receive+0xcf8>)
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	f043 0320 	orr.w	r3, r3, #32
 800d0f8:	b2da      	uxtb	r2, r3
 800d0fa:	4b66      	ldr	r3, [pc, #408]	@ (800d294 <tcp_receive+0xcf8>)
 800d0fc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	7d1b      	ldrb	r3, [r3, #20]
 800d102:	2b04      	cmp	r3, #4
 800d104:	d102      	bne.n	800d10c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2207      	movs	r2, #7
 800d10a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	681a      	ldr	r2, [r3, #0]
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800d114:	68b8      	ldr	r0, [r7, #8]
 800d116:	f7fd fae4 	bl	800a6e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d008      	beq.n	800d134 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800d12e:	429a      	cmp	r2, r3
 800d130:	f43f af43 	beq.w	800cfba <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	8b5b      	ldrh	r3, [r3, #26]
 800d138:	f003 0301 	and.w	r3, r3, #1
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00e      	beq.n	800d15e <tcp_receive+0xbc2>
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	8b5b      	ldrh	r3, [r3, #26]
 800d144:	f023 0301 	bic.w	r3, r3, #1
 800d148:	b29a      	uxth	r2, r3
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	835a      	strh	r2, [r3, #26]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	8b5b      	ldrh	r3, [r3, #26]
 800d152:	f043 0302 	orr.w	r3, r3, #2
 800d156:	b29a      	uxth	r2, r3
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d15c:	e187      	b.n	800d46e <tcp_receive+0xed2>
        tcp_ack(pcb);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	8b5b      	ldrh	r3, [r3, #26]
 800d162:	f043 0301 	orr.w	r3, r3, #1
 800d166:	b29a      	uxth	r2, r3
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d16c:	e17f      	b.n	800d46e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d172:	2b00      	cmp	r3, #0
 800d174:	d106      	bne.n	800d184 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d176:	4848      	ldr	r0, [pc, #288]	@ (800d298 <tcp_receive+0xcfc>)
 800d178:	f7fd faea 	bl	800a750 <tcp_seg_copy>
 800d17c:	4602      	mov	r2, r0
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	675a      	str	r2, [r3, #116]	@ 0x74
 800d182:	e16c      	b.n	800d45e <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d18c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d18e:	e156      	b.n	800d43e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	685a      	ldr	r2, [r3, #4]
 800d196:	4b41      	ldr	r3, [pc, #260]	@ (800d29c <tcp_receive+0xd00>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d11d      	bne.n	800d1da <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d19e:	4b3e      	ldr	r3, [pc, #248]	@ (800d298 <tcp_receive+0xcfc>)
 800d1a0:	891a      	ldrh	r2, [r3, #8]
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a4:	891b      	ldrh	r3, [r3, #8]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	f240 814e 	bls.w	800d448 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1ac:	483a      	ldr	r0, [pc, #232]	@ (800d298 <tcp_receive+0xcfc>)
 800d1ae:	f7fd facf 	bl	800a750 <tcp_seg_copy>
 800d1b2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 8148 	beq.w	800d44c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800d1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d003      	beq.n	800d1ca <tcp_receive+0xc2e>
                    prev->next = cseg;
 800d1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c4:	697a      	ldr	r2, [r7, #20]
 800d1c6:	601a      	str	r2, [r3, #0]
 800d1c8:	e002      	b.n	800d1d0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	697a      	ldr	r2, [r7, #20]
 800d1ce:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d1d0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d1d2:	6978      	ldr	r0, [r7, #20]
 800d1d4:	f7ff f8de 	bl	800c394 <tcp_oos_insert_segment>
                }
                break;
 800d1d8:	e138      	b.n	800d44c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d117      	bne.n	800d210 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d1e0:	4b2e      	ldr	r3, [pc, #184]	@ (800d29c <tcp_receive+0xd00>)
 800d1e2:	681a      	ldr	r2, [r3, #0]
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	685b      	ldr	r3, [r3, #4]
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	da57      	bge.n	800d2a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d1f0:	4829      	ldr	r0, [pc, #164]	@ (800d298 <tcp_receive+0xcfc>)
 800d1f2:	f7fd faad 	bl	800a750 <tcp_seg_copy>
 800d1f6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 8128 	beq.w	800d450 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800d206:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d208:	69b8      	ldr	r0, [r7, #24]
 800d20a:	f7ff f8c3 	bl	800c394 <tcp_oos_insert_segment>
                  }
                  break;
 800d20e:	e11f      	b.n	800d450 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800d210:	4b22      	ldr	r3, [pc, #136]	@ (800d29c <tcp_receive+0xd00>)
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d216:	68db      	ldr	r3, [r3, #12]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	1ad3      	subs	r3, r2, r3
 800d21c:	3b01      	subs	r3, #1
 800d21e:	2b00      	cmp	r3, #0
 800d220:	db3e      	blt.n	800d2a0 <tcp_receive+0xd04>
 800d222:	4b1e      	ldr	r3, [pc, #120]	@ (800d29c <tcp_receive+0xd00>)
 800d224:	681a      	ldr	r2, [r3, #0]
 800d226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	1ad3      	subs	r3, r2, r3
 800d22e:	3301      	adds	r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc35      	bgt.n	800d2a0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800d234:	4818      	ldr	r0, [pc, #96]	@ (800d298 <tcp_receive+0xcfc>)
 800d236:	f7fd fa8b 	bl	800a750 <tcp_seg_copy>
 800d23a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	f000 8108 	beq.w	800d454 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d24c:	8912      	ldrh	r2, [r2, #8]
 800d24e:	441a      	add	r2, r3
 800d250:	4b12      	ldr	r3, [pc, #72]	@ (800d29c <tcp_receive+0xd00>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	2b00      	cmp	r3, #0
 800d258:	dd12      	ble.n	800d280 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d25a:	4b10      	ldr	r3, [pc, #64]	@ (800d29c <tcp_receive+0xd00>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	b29a      	uxth	r2, r3
 800d260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b29b      	uxth	r3, r3
 800d268:	1ad3      	subs	r3, r2, r3
 800d26a:	b29a      	uxth	r2, r3
 800d26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d272:	685a      	ldr	r2, [r3, #4]
 800d274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d276:	891b      	ldrh	r3, [r3, #8]
 800d278:	4619      	mov	r1, r3
 800d27a:	4610      	mov	r0, r2
 800d27c:	f7fb fc94 	bl	8008ba8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d282:	69fa      	ldr	r2, [r7, #28]
 800d284:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d286:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d288:	69f8      	ldr	r0, [r7, #28]
 800d28a:	f7ff f883 	bl	800c394 <tcp_oos_insert_segment>
                  }
                  break;
 800d28e:	e0e1      	b.n	800d454 <tcp_receive+0xeb8>
 800d290:	20007830 	.word	0x20007830
 800d294:	2000782d 	.word	0x2000782d
 800d298:	20007800 	.word	0x20007800
 800d29c:	20007820 	.word	0x20007820
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800d2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	f040 80c5 	bne.w	800d438 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d2ae:	4b7f      	ldr	r3, [pc, #508]	@ (800d4ac <tcp_receive+0xf10>)
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b4:	68db      	ldr	r3, [r3, #12]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f340 80bc 	ble.w	800d438 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	899b      	ldrh	r3, [r3, #12]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fa f911 	bl	80074f0 <lwip_htons>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	f003 0301 	and.w	r3, r3, #1
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f040 80be 	bne.w	800d458 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d2dc:	4874      	ldr	r0, [pc, #464]	@ (800d4b0 <tcp_receive+0xf14>)
 800d2de:	f7fd fa37 	bl	800a750 <tcp_seg_copy>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 80b5 	beq.w	800d45c <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2fa:	8912      	ldrh	r2, [r2, #8]
 800d2fc:	441a      	add	r2, r3
 800d2fe:	4b6b      	ldr	r3, [pc, #428]	@ (800d4ac <tcp_receive+0xf10>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	2b00      	cmp	r3, #0
 800d306:	dd12      	ble.n	800d32e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d308:	4b68      	ldr	r3, [pc, #416]	@ (800d4ac <tcp_receive+0xf10>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	b29a      	uxth	r2, r3
 800d30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d310:	68db      	ldr	r3, [r3, #12]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	b29b      	uxth	r3, r3
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	b29a      	uxth	r2, r3
 800d31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d31c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d320:	685a      	ldr	r2, [r3, #4]
 800d322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d324:	891b      	ldrh	r3, [r3, #8]
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f7fb fc3d 	bl	8008ba8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d32e:	4b61      	ldr	r3, [pc, #388]	@ (800d4b4 <tcp_receive+0xf18>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	461a      	mov	r2, r3
 800d334:	4b5d      	ldr	r3, [pc, #372]	@ (800d4ac <tcp_receive+0xf10>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	441a      	add	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d342:	440b      	add	r3, r1
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	2b00      	cmp	r3, #0
 800d348:	f340 8088 	ble.w	800d45c <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d34c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	68db      	ldr	r3, [r3, #12]
 800d352:	899b      	ldrh	r3, [r3, #12]
 800d354:	b29b      	uxth	r3, r3
 800d356:	4618      	mov	r0, r3
 800d358:	f7fa f8ca 	bl	80074f0 <lwip_htons>
 800d35c:	4603      	mov	r3, r0
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	f003 0301 	and.w	r3, r3, #1
 800d364:	2b00      	cmp	r3, #0
 800d366:	d021      	beq.n	800d3ac <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	68db      	ldr	r3, [r3, #12]
 800d36e:	899b      	ldrh	r3, [r3, #12]
 800d370:	b29b      	uxth	r3, r3
 800d372:	b21b      	sxth	r3, r3
 800d374:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d378:	b21c      	sxth	r4, r3
 800d37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	899b      	ldrh	r3, [r3, #12]
 800d382:	b29b      	uxth	r3, r3
 800d384:	4618      	mov	r0, r3
 800d386:	f7fa f8b3 	bl	80074f0 <lwip_htons>
 800d38a:	4603      	mov	r3, r0
 800d38c:	b2db      	uxtb	r3, r3
 800d38e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800d392:	b29b      	uxth	r3, r3
 800d394:	4618      	mov	r0, r3
 800d396:	f7fa f8ab 	bl	80074f0 <lwip_htons>
 800d39a:	4603      	mov	r3, r0
 800d39c:	b21b      	sxth	r3, r3
 800d39e:	4323      	orrs	r3, r4
 800d3a0:	b21a      	sxth	r2, r3
 800d3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68db      	ldr	r3, [r3, #12]
 800d3a8:	b292      	uxth	r2, r2
 800d3aa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d3b6:	4413      	add	r3, r2
 800d3b8:	b299      	uxth	r1, r3
 800d3ba:	4b3c      	ldr	r3, [pc, #240]	@ (800d4ac <tcp_receive+0xf10>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	b29a      	uxth	r2, r3
 800d3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	1a8a      	subs	r2, r1, r2
 800d3c6:	b292      	uxth	r2, r2
 800d3c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	685a      	ldr	r2, [r3, #4]
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	891b      	ldrh	r3, [r3, #8]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	4610      	mov	r0, r2
 800d3da:	f7fb fbe5 	bl	8008ba8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	891c      	ldrh	r4, [r3, #8]
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	899b      	ldrh	r3, [r3, #12]
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f7fa f87e 	bl	80074f0 <lwip_htons>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	b2db      	uxtb	r3, r3
 800d3f8:	f003 0303 	and.w	r3, r3, #3
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d001      	beq.n	800d404 <tcp_receive+0xe68>
 800d400:	2301      	movs	r3, #1
 800d402:	e000      	b.n	800d406 <tcp_receive+0xe6a>
 800d404:	2300      	movs	r3, #0
 800d406:	4423      	add	r3, r4
 800d408:	b29a      	uxth	r2, r3
 800d40a:	4b2a      	ldr	r3, [pc, #168]	@ (800d4b4 <tcp_receive+0xf18>)
 800d40c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d40e:	4b29      	ldr	r3, [pc, #164]	@ (800d4b4 <tcp_receive+0xf18>)
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	461a      	mov	r2, r3
 800d414:	4b25      	ldr	r3, [pc, #148]	@ (800d4ac <tcp_receive+0xf10>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	441a      	add	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d41e:	6879      	ldr	r1, [r7, #4]
 800d420:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d422:	440b      	add	r3, r1
 800d424:	429a      	cmp	r2, r3
 800d426:	d019      	beq.n	800d45c <tcp_receive+0xec0>
 800d428:	4b23      	ldr	r3, [pc, #140]	@ (800d4b8 <tcp_receive+0xf1c>)
 800d42a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800d42e:	4923      	ldr	r1, [pc, #140]	@ (800d4bc <tcp_receive+0xf20>)
 800d430:	4823      	ldr	r0, [pc, #140]	@ (800d4c0 <tcp_receive+0xf24>)
 800d432:	f005 fc2d 	bl	8012c90 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d436:	e011      	b.n	800d45c <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d43e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d440:	2b00      	cmp	r3, #0
 800d442:	f47f aea5 	bne.w	800d190 <tcp_receive+0xbf4>
 800d446:	e00a      	b.n	800d45e <tcp_receive+0xec2>
                break;
 800d448:	bf00      	nop
 800d44a:	e008      	b.n	800d45e <tcp_receive+0xec2>
                break;
 800d44c:	bf00      	nop
 800d44e:	e006      	b.n	800d45e <tcp_receive+0xec2>
                  break;
 800d450:	bf00      	nop
 800d452:	e004      	b.n	800d45e <tcp_receive+0xec2>
                  break;
 800d454:	bf00      	nop
 800d456:	e002      	b.n	800d45e <tcp_receive+0xec2>
                  break;
 800d458:	bf00      	nop
 800d45a:	e000      	b.n	800d45e <tcp_receive+0xec2>
                break;
 800d45c:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f001 feaa 	bl	800f1b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800d464:	e003      	b.n	800d46e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fea6 	bl	800f1b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d46c:	e01a      	b.n	800d4a4 <tcp_receive+0xf08>
 800d46e:	e019      	b.n	800d4a4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d470:	4b0e      	ldr	r3, [pc, #56]	@ (800d4ac <tcp_receive+0xf10>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	db0a      	blt.n	800d494 <tcp_receive+0xef8>
 800d47e:	4b0b      	ldr	r3, [pc, #44]	@ (800d4ac <tcp_receive+0xf10>)
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800d48a:	440b      	add	r3, r1
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	3301      	adds	r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	dd07      	ble.n	800d4a4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	8b5b      	ldrh	r3, [r3, #26]
 800d498:	f043 0302 	orr.w	r3, r3, #2
 800d49c:	b29a      	uxth	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800d4a2:	e7ff      	b.n	800d4a4 <tcp_receive+0xf08>
 800d4a4:	bf00      	nop
 800d4a6:	3750      	adds	r7, #80	@ 0x50
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bdb0      	pop	{r4, r5, r7, pc}
 800d4ac:	20007820 	.word	0x20007820
 800d4b0:	20007800 	.word	0x20007800
 800d4b4:	2000782a 	.word	0x2000782a
 800d4b8:	080150f0 	.word	0x080150f0
 800d4bc:	08015498 	.word	0x08015498
 800d4c0:	0801513c 	.word	0x0801513c

0800d4c4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800d4ca:	4b15      	ldr	r3, [pc, #84]	@ (800d520 <tcp_get_next_optbyte+0x5c>)
 800d4cc:	881b      	ldrh	r3, [r3, #0]
 800d4ce:	1c5a      	adds	r2, r3, #1
 800d4d0:	b291      	uxth	r1, r2
 800d4d2:	4a13      	ldr	r2, [pc, #76]	@ (800d520 <tcp_get_next_optbyte+0x5c>)
 800d4d4:	8011      	strh	r1, [r2, #0]
 800d4d6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800d4d8:	4b12      	ldr	r3, [pc, #72]	@ (800d524 <tcp_get_next_optbyte+0x60>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d004      	beq.n	800d4ea <tcp_get_next_optbyte+0x26>
 800d4e0:	4b11      	ldr	r3, [pc, #68]	@ (800d528 <tcp_get_next_optbyte+0x64>)
 800d4e2:	881b      	ldrh	r3, [r3, #0]
 800d4e4:	88fa      	ldrh	r2, [r7, #6]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d208      	bcs.n	800d4fc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800d4ea:	4b10      	ldr	r3, [pc, #64]	@ (800d52c <tcp_get_next_optbyte+0x68>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	3314      	adds	r3, #20
 800d4f0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	4413      	add	r3, r2
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	e00b      	b.n	800d514 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800d4fc:	88fb      	ldrh	r3, [r7, #6]
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	4b09      	ldr	r3, [pc, #36]	@ (800d528 <tcp_get_next_optbyte+0x64>)
 800d502:	881b      	ldrh	r3, [r3, #0]
 800d504:	b2db      	uxtb	r3, r3
 800d506:	1ad3      	subs	r3, r2, r3
 800d508:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800d50a:	4b06      	ldr	r3, [pc, #24]	@ (800d524 <tcp_get_next_optbyte+0x60>)
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	797b      	ldrb	r3, [r7, #5]
 800d510:	4413      	add	r3, r2
 800d512:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d514:	4618      	mov	r0, r3
 800d516:	370c      	adds	r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	bc80      	pop	{r7}
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop
 800d520:	2000781c 	.word	0x2000781c
 800d524:	20007818 	.word	0x20007818
 800d528:	20007816 	.word	0x20007816
 800d52c:	20007810 	.word	0x20007810

0800d530 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af00      	add	r7, sp, #0
 800d536:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d106      	bne.n	800d54c <tcp_parseopt+0x1c>
 800d53e:	4b32      	ldr	r3, [pc, #200]	@ (800d608 <tcp_parseopt+0xd8>)
 800d540:	f240 727d 	movw	r2, #1917	@ 0x77d
 800d544:	4931      	ldr	r1, [pc, #196]	@ (800d60c <tcp_parseopt+0xdc>)
 800d546:	4832      	ldr	r0, [pc, #200]	@ (800d610 <tcp_parseopt+0xe0>)
 800d548:	f005 fba2 	bl	8012c90 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d54c:	4b31      	ldr	r3, [pc, #196]	@ (800d614 <tcp_parseopt+0xe4>)
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d056      	beq.n	800d602 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d554:	4b30      	ldr	r3, [pc, #192]	@ (800d618 <tcp_parseopt+0xe8>)
 800d556:	2200      	movs	r2, #0
 800d558:	801a      	strh	r2, [r3, #0]
 800d55a:	e046      	b.n	800d5ea <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800d55c:	f7ff ffb2 	bl	800d4c4 <tcp_get_next_optbyte>
 800d560:	4603      	mov	r3, r0
 800d562:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	2b02      	cmp	r3, #2
 800d568:	d006      	beq.n	800d578 <tcp_parseopt+0x48>
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	dc2a      	bgt.n	800d5c4 <tcp_parseopt+0x94>
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d042      	beq.n	800d5f8 <tcp_parseopt+0xc8>
 800d572:	2b01      	cmp	r3, #1
 800d574:	d038      	beq.n	800d5e8 <tcp_parseopt+0xb8>
 800d576:	e025      	b.n	800d5c4 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d578:	f7ff ffa4 	bl	800d4c4 <tcp_get_next_optbyte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d13c      	bne.n	800d5fc <tcp_parseopt+0xcc>
 800d582:	4b25      	ldr	r3, [pc, #148]	@ (800d618 <tcp_parseopt+0xe8>)
 800d584:	881b      	ldrh	r3, [r3, #0]
 800d586:	3301      	adds	r3, #1
 800d588:	4a22      	ldr	r2, [pc, #136]	@ (800d614 <tcp_parseopt+0xe4>)
 800d58a:	8812      	ldrh	r2, [r2, #0]
 800d58c:	4293      	cmp	r3, r2
 800d58e:	da35      	bge.n	800d5fc <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800d590:	f7ff ff98 	bl	800d4c4 <tcp_get_next_optbyte>
 800d594:	4603      	mov	r3, r0
 800d596:	021b      	lsls	r3, r3, #8
 800d598:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800d59a:	f7ff ff93 	bl	800d4c4 <tcp_get_next_optbyte>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	461a      	mov	r2, r3
 800d5a2:	89bb      	ldrh	r3, [r7, #12]
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d5a8:	89bb      	ldrh	r3, [r7, #12]
 800d5aa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800d5ae:	d804      	bhi.n	800d5ba <tcp_parseopt+0x8a>
 800d5b0:	89bb      	ldrh	r3, [r7, #12]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d001      	beq.n	800d5ba <tcp_parseopt+0x8a>
 800d5b6:	89ba      	ldrh	r2, [r7, #12]
 800d5b8:	e001      	b.n	800d5be <tcp_parseopt+0x8e>
 800d5ba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800d5c2:	e012      	b.n	800d5ea <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800d5c4:	f7ff ff7e 	bl	800d4c4 <tcp_get_next_optbyte>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800d5cc:	7afb      	ldrb	r3, [r7, #11]
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d916      	bls.n	800d600 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800d5d2:	7afb      	ldrb	r3, [r7, #11]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	4b10      	ldr	r3, [pc, #64]	@ (800d618 <tcp_parseopt+0xe8>)
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	4413      	add	r3, r2
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	3b02      	subs	r3, #2
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d618 <tcp_parseopt+0xe8>)
 800d5e4:	801a      	strh	r2, [r3, #0]
 800d5e6:	e000      	b.n	800d5ea <tcp_parseopt+0xba>
          break;
 800d5e8:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d5ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d618 <tcp_parseopt+0xe8>)
 800d5ec:	881a      	ldrh	r2, [r3, #0]
 800d5ee:	4b09      	ldr	r3, [pc, #36]	@ (800d614 <tcp_parseopt+0xe4>)
 800d5f0:	881b      	ldrh	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d3b2      	bcc.n	800d55c <tcp_parseopt+0x2c>
 800d5f6:	e004      	b.n	800d602 <tcp_parseopt+0xd2>
          return;
 800d5f8:	bf00      	nop
 800d5fa:	e002      	b.n	800d602 <tcp_parseopt+0xd2>
            return;
 800d5fc:	bf00      	nop
 800d5fe:	e000      	b.n	800d602 <tcp_parseopt+0xd2>
            return;
 800d600:	bf00      	nop
      }
    }
  }
}
 800d602:	3710      	adds	r7, #16
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	080150f0 	.word	0x080150f0
 800d60c:	08015554 	.word	0x08015554
 800d610:	0801513c 	.word	0x0801513c
 800d614:	20007814 	.word	0x20007814
 800d618:	2000781c 	.word	0x2000781c

0800d61c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d620:	4b05      	ldr	r3, [pc, #20]	@ (800d638 <tcp_trigger_input_pcb_close+0x1c>)
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	f043 0310 	orr.w	r3, r3, #16
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	4b03      	ldr	r3, [pc, #12]	@ (800d638 <tcp_trigger_input_pcb_close+0x1c>)
 800d62c:	701a      	strb	r2, [r3, #0]
}
 800d62e:	bf00      	nop
 800d630:	46bd      	mov	sp, r7
 800d632:	bc80      	pop	{r7}
 800d634:	4770      	bx	lr
 800d636:	bf00      	nop
 800d638:	2000782d 	.word	0x2000782d

0800d63c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d00a      	beq.n	800d664 <tcp_route+0x28>
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	7a1b      	ldrb	r3, [r3, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d006      	beq.n	800d664 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	7a1b      	ldrb	r3, [r3, #8]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7fb f89e 	bl	800879c <netif_get_by_index>
 800d660:	4603      	mov	r3, r0
 800d662:	e003      	b.n	800d66c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f003 fba5 	bl	8010db4 <ip4_route>
 800d66a:	4603      	mov	r3, r0
  }
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800d674:	b590      	push	{r4, r7, lr}
 800d676:	b087      	sub	sp, #28
 800d678:	af00      	add	r7, sp, #0
 800d67a:	60f8      	str	r0, [r7, #12]
 800d67c:	60b9      	str	r1, [r7, #8]
 800d67e:	603b      	str	r3, [r7, #0]
 800d680:	4613      	mov	r3, r2
 800d682:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d105      	bne.n	800d696 <tcp_create_segment+0x22>
 800d68a:	4b43      	ldr	r3, [pc, #268]	@ (800d798 <tcp_create_segment+0x124>)
 800d68c:	22a3      	movs	r2, #163	@ 0xa3
 800d68e:	4943      	ldr	r1, [pc, #268]	@ (800d79c <tcp_create_segment+0x128>)
 800d690:	4843      	ldr	r0, [pc, #268]	@ (800d7a0 <tcp_create_segment+0x12c>)
 800d692:	f005 fafd 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d105      	bne.n	800d6a8 <tcp_create_segment+0x34>
 800d69c:	4b3e      	ldr	r3, [pc, #248]	@ (800d798 <tcp_create_segment+0x124>)
 800d69e:	22a4      	movs	r2, #164	@ 0xa4
 800d6a0:	4940      	ldr	r1, [pc, #256]	@ (800d7a4 <tcp_create_segment+0x130>)
 800d6a2:	483f      	ldr	r0, [pc, #252]	@ (800d7a0 <tcp_create_segment+0x12c>)
 800d6a4:	f005 faf4 	bl	8012c90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d6a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800d6b6:	2003      	movs	r0, #3
 800d6b8:	f7fa fd72 	bl	80081a0 <memp_malloc>
 800d6bc:	6138      	str	r0, [r7, #16]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d104      	bne.n	800d6ce <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800d6c4:	68b8      	ldr	r0, [r7, #8]
 800d6c6:	f7fb fbf5 	bl	8008eb4 <pbuf_free>
    return NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	e060      	b.n	800d790 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d6d4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d6d6:	693b      	ldr	r3, [r7, #16]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	891a      	ldrh	r2, [r3, #8]
 800d6e6:	7dfb      	ldrb	r3, [r7, #23]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d205      	bcs.n	800d6fa <tcp_create_segment+0x86>
 800d6ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d798 <tcp_create_segment+0x124>)
 800d6f0:	22b0      	movs	r2, #176	@ 0xb0
 800d6f2:	492d      	ldr	r1, [pc, #180]	@ (800d7a8 <tcp_create_segment+0x134>)
 800d6f4:	482a      	ldr	r0, [pc, #168]	@ (800d7a0 <tcp_create_segment+0x12c>)
 800d6f6:	f005 facb 	bl	8012c90 <iprintf>
  seg->len = p->tot_len - optlen;
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	891a      	ldrh	r2, [r3, #8]
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	b29b      	uxth	r3, r3
 800d702:	1ad3      	subs	r3, r2, r3
 800d704:	b29a      	uxth	r2, r3
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d70a:	2114      	movs	r1, #20
 800d70c:	68b8      	ldr	r0, [r7, #8]
 800d70e:	f7fb fb3b 	bl	8008d88 <pbuf_add_header>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d004      	beq.n	800d722 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d718:	6938      	ldr	r0, [r7, #16]
 800d71a:	f7fc ffe2 	bl	800a6e2 <tcp_seg_free>
    return NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	e036      	b.n	800d790 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	685b      	ldr	r3, [r3, #4]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	8ada      	ldrh	r2, [r3, #22]
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	68dc      	ldr	r4, [r3, #12]
 800d734:	4610      	mov	r0, r2
 800d736:	f7f9 fedb 	bl	80074f0 <lwip_htons>
 800d73a:	4603      	mov	r3, r0
 800d73c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	8b1a      	ldrh	r2, [r3, #24]
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	68dc      	ldr	r4, [r3, #12]
 800d746:	4610      	mov	r0, r2
 800d748:	f7f9 fed2 	bl	80074f0 <lwip_htons>
 800d74c:	4603      	mov	r3, r0
 800d74e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	68dc      	ldr	r4, [r3, #12]
 800d754:	6838      	ldr	r0, [r7, #0]
 800d756:	f7f9 fedf 	bl	8007518 <lwip_htonl>
 800d75a:	4603      	mov	r3, r0
 800d75c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d75e:	7dfb      	ldrb	r3, [r7, #23]
 800d760:	089b      	lsrs	r3, r3, #2
 800d762:	b2db      	uxtb	r3, r3
 800d764:	3305      	adds	r3, #5
 800d766:	b29b      	uxth	r3, r3
 800d768:	031b      	lsls	r3, r3, #12
 800d76a:	b29a      	uxth	r2, r3
 800d76c:	79fb      	ldrb	r3, [r7, #7]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	4313      	orrs	r3, r2
 800d772:	b29a      	uxth	r2, r3
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	68dc      	ldr	r4, [r3, #12]
 800d778:	4610      	mov	r0, r2
 800d77a:	f7f9 feb9 	bl	80074f0 <lwip_htons>
 800d77e:	4603      	mov	r3, r0
 800d780:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	2200      	movs	r2, #0
 800d788:	749a      	strb	r2, [r3, #18]
 800d78a:	2200      	movs	r2, #0
 800d78c:	74da      	strb	r2, [r3, #19]
  return seg;
 800d78e:	693b      	ldr	r3, [r7, #16]
}
 800d790:	4618      	mov	r0, r3
 800d792:	371c      	adds	r7, #28
 800d794:	46bd      	mov	sp, r7
 800d796:	bd90      	pop	{r4, r7, pc}
 800d798:	08015570 	.word	0x08015570
 800d79c:	080155a4 	.word	0x080155a4
 800d7a0:	080155c4 	.word	0x080155c4
 800d7a4:	080155ec 	.word	0x080155ec
 800d7a8:	08015610 	.word	0x08015610

0800d7ac <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	607b      	str	r3, [r7, #4]
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	81bb      	strh	r3, [r7, #12]
 800d7bc:	4613      	mov	r3, r2
 800d7be:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d7c0:	89bb      	ldrh	r3, [r7, #12]
 800d7c2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d105      	bne.n	800d7d6 <tcp_pbuf_prealloc+0x2a>
 800d7ca:	4b30      	ldr	r3, [pc, #192]	@ (800d88c <tcp_pbuf_prealloc+0xe0>)
 800d7cc:	22e8      	movs	r2, #232	@ 0xe8
 800d7ce:	4930      	ldr	r1, [pc, #192]	@ (800d890 <tcp_pbuf_prealloc+0xe4>)
 800d7d0:	4830      	ldr	r0, [pc, #192]	@ (800d894 <tcp_pbuf_prealloc+0xe8>)
 800d7d2:	f005 fa5d 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d7d6:	6a3b      	ldr	r3, [r7, #32]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d105      	bne.n	800d7e8 <tcp_pbuf_prealloc+0x3c>
 800d7dc:	4b2b      	ldr	r3, [pc, #172]	@ (800d88c <tcp_pbuf_prealloc+0xe0>)
 800d7de:	22e9      	movs	r2, #233	@ 0xe9
 800d7e0:	492d      	ldr	r1, [pc, #180]	@ (800d898 <tcp_pbuf_prealloc+0xec>)
 800d7e2:	482c      	ldr	r0, [pc, #176]	@ (800d894 <tcp_pbuf_prealloc+0xe8>)
 800d7e4:	f005 fa54 	bl	8012c90 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d7e8:	89ba      	ldrh	r2, [r7, #12]
 800d7ea:	897b      	ldrh	r3, [r7, #10]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d221      	bcs.n	800d834 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d7f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d7f4:	f003 0302 	and.w	r3, r3, #2
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d111      	bne.n	800d820 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d7fc:	6a3b      	ldr	r3, [r7, #32]
 800d7fe:	8b5b      	ldrh	r3, [r3, #26]
 800d800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d804:	2b00      	cmp	r3, #0
 800d806:	d115      	bne.n	800d834 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d808:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d007      	beq.n	800d820 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d818:	6a3b      	ldr	r3, [r7, #32]
 800d81a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d009      	beq.n	800d834 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d820:	89bb      	ldrh	r3, [r7, #12]
 800d822:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d826:	f023 0203 	bic.w	r2, r3, #3
 800d82a:	897b      	ldrh	r3, [r7, #10]
 800d82c:	4293      	cmp	r3, r2
 800d82e:	bf28      	it	cs
 800d830:	4613      	movcs	r3, r2
 800d832:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d834:	8af9      	ldrh	r1, [r7, #22]
 800d836:	7bfb      	ldrb	r3, [r7, #15]
 800d838:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7fb f855 	bl	80088ec <pbuf_alloc>
 800d842:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d101      	bne.n	800d84e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d84a:	2300      	movs	r3, #0
 800d84c:	e019      	b.n	800d882 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d006      	beq.n	800d864 <tcp_pbuf_prealloc+0xb8>
 800d856:	4b0d      	ldr	r3, [pc, #52]	@ (800d88c <tcp_pbuf_prealloc+0xe0>)
 800d858:	f240 120b 	movw	r2, #267	@ 0x10b
 800d85c:	490f      	ldr	r1, [pc, #60]	@ (800d89c <tcp_pbuf_prealloc+0xf0>)
 800d85e:	480d      	ldr	r0, [pc, #52]	@ (800d894 <tcp_pbuf_prealloc+0xe8>)
 800d860:	f005 fa16 	bl	8012c90 <iprintf>
  *oversize = p->len - length;
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	895a      	ldrh	r2, [r3, #10]
 800d868:	89bb      	ldrh	r3, [r7, #12]
 800d86a:	1ad3      	subs	r3, r2, r3
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	89ba      	ldrh	r2, [r7, #12]
 800d876:	811a      	strh	r2, [r3, #8]
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	891a      	ldrh	r2, [r3, #8]
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	815a      	strh	r2, [r3, #10]
  return p;
 800d880:	693b      	ldr	r3, [r7, #16]
}
 800d882:	4618      	mov	r0, r3
 800d884:	3718      	adds	r7, #24
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
 800d88a:	bf00      	nop
 800d88c:	08015570 	.word	0x08015570
 800d890:	08015628 	.word	0x08015628
 800d894:	080155c4 	.word	0x080155c4
 800d898:	0801564c 	.word	0x0801564c
 800d89c:	0801566c 	.word	0x0801566c

0800d8a0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d106      	bne.n	800d8c0 <tcp_write_checks+0x20>
 800d8b2:	4b33      	ldr	r3, [pc, #204]	@ (800d980 <tcp_write_checks+0xe0>)
 800d8b4:	f240 1233 	movw	r2, #307	@ 0x133
 800d8b8:	4932      	ldr	r1, [pc, #200]	@ (800d984 <tcp_write_checks+0xe4>)
 800d8ba:	4833      	ldr	r0, [pc, #204]	@ (800d988 <tcp_write_checks+0xe8>)
 800d8bc:	f005 f9e8 	bl	8012c90 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	7d1b      	ldrb	r3, [r3, #20]
 800d8c4:	2b04      	cmp	r3, #4
 800d8c6:	d00e      	beq.n	800d8e6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d8cc:	2b07      	cmp	r3, #7
 800d8ce:	d00a      	beq.n	800d8e6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d006      	beq.n	800d8e6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d002      	beq.n	800d8e6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d8e0:	f06f 030a 	mvn.w	r3, #10
 800d8e4:	e048      	b.n	800d978 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d8e6:	887b      	ldrh	r3, [r7, #2]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d101      	bne.n	800d8f0 <tcp_write_checks+0x50>
    return ERR_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	e043      	b.n	800d978 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d8f6:	887a      	ldrh	r2, [r7, #2]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d909      	bls.n	800d910 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	8b5b      	ldrh	r3, [r3, #26]
 800d900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d904:	b29a      	uxth	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d90a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d90e:	e033      	b.n	800d978 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d916:	2b08      	cmp	r3, #8
 800d918:	d909      	bls.n	800d92e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	8b5b      	ldrh	r3, [r3, #26]
 800d91e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d922:	b29a      	uxth	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d928:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d92c:	e024      	b.n	800d978 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00f      	beq.n	800d958 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d11a      	bne.n	800d976 <tcp_write_checks+0xd6>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d944:	2b00      	cmp	r3, #0
 800d946:	d116      	bne.n	800d976 <tcp_write_checks+0xd6>
 800d948:	4b0d      	ldr	r3, [pc, #52]	@ (800d980 <tcp_write_checks+0xe0>)
 800d94a:	f240 1255 	movw	r2, #341	@ 0x155
 800d94e:	490f      	ldr	r1, [pc, #60]	@ (800d98c <tcp_write_checks+0xec>)
 800d950:	480d      	ldr	r0, [pc, #52]	@ (800d988 <tcp_write_checks+0xe8>)
 800d952:	f005 f99d 	bl	8012c90 <iprintf>
 800d956:	e00e      	b.n	800d976 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d103      	bne.n	800d968 <tcp_write_checks+0xc8>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d006      	beq.n	800d976 <tcp_write_checks+0xd6>
 800d968:	4b05      	ldr	r3, [pc, #20]	@ (800d980 <tcp_write_checks+0xe0>)
 800d96a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d96e:	4908      	ldr	r1, [pc, #32]	@ (800d990 <tcp_write_checks+0xf0>)
 800d970:	4805      	ldr	r0, [pc, #20]	@ (800d988 <tcp_write_checks+0xe8>)
 800d972:	f005 f98d 	bl	8012c90 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	08015570 	.word	0x08015570
 800d984:	08015680 	.word	0x08015680
 800d988:	080155c4 	.word	0x080155c4
 800d98c:	080156a0 	.word	0x080156a0
 800d990:	080156dc 	.word	0x080156dc

0800d994 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d994:	b590      	push	{r4, r7, lr}
 800d996:	b09b      	sub	sp, #108	@ 0x6c
 800d998:	af04      	add	r7, sp, #16
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	4611      	mov	r1, r2
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	460b      	mov	r3, r1
 800d9a4:	80fb      	strh	r3, [r7, #6]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d9be:	2300      	movs	r3, #0
 800d9c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d109      	bne.n	800d9f0 <tcp_write+0x5c>
 800d9dc:	4ba4      	ldr	r3, [pc, #656]	@ (800dc70 <tcp_write+0x2dc>)
 800d9de:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d9e2:	49a4      	ldr	r1, [pc, #656]	@ (800dc74 <tcp_write+0x2e0>)
 800d9e4:	48a4      	ldr	r0, [pc, #656]	@ (800dc78 <tcp_write+0x2e4>)
 800d9e6:	f005 f953 	bl	8012c90 <iprintf>
 800d9ea:	f06f 030f 	mvn.w	r3, #15
 800d9ee:	e32a      	b.n	800e046 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d9f6:	085b      	lsrs	r3, r3, #1
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d9fe:	4293      	cmp	r3, r2
 800da00:	bf28      	it	cs
 800da02:	4613      	movcs	r3, r2
 800da04:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800da06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d102      	bne.n	800da12 <tcp_write+0x7e>
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800da10:	e000      	b.n	800da14 <tcp_write+0x80>
 800da12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da14:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d109      	bne.n	800da30 <tcp_write+0x9c>
 800da1c:	4b94      	ldr	r3, [pc, #592]	@ (800dc70 <tcp_write+0x2dc>)
 800da1e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800da22:	4996      	ldr	r1, [pc, #600]	@ (800dc7c <tcp_write+0x2e8>)
 800da24:	4894      	ldr	r0, [pc, #592]	@ (800dc78 <tcp_write+0x2e4>)
 800da26:	f005 f933 	bl	8012c90 <iprintf>
 800da2a:	f06f 030f 	mvn.w	r3, #15
 800da2e:	e30a      	b.n	800e046 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800da30:	88fb      	ldrh	r3, [r7, #6]
 800da32:	4619      	mov	r1, r3
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f7ff ff33 	bl	800d8a0 <tcp_write_checks>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800da40:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800da44:	2b00      	cmp	r3, #0
 800da46:	d002      	beq.n	800da4e <tcp_write+0xba>
    return err;
 800da48:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800da4c:	e2fb      	b.n	800e046 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da54:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800da58:	2300      	movs	r3, #0
 800da5a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da62:	2b00      	cmp	r3, #0
 800da64:	f000 80f6 	beq.w	800dc54 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800da6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800da6e:	e002      	b.n	800da76 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800da70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1f8      	bne.n	800da70 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800da7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da80:	7a9b      	ldrb	r3, [r3, #10]
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	b29b      	uxth	r3, r3
 800da86:	f003 0304 	and.w	r3, r3, #4
 800da8a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800da8c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800da8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da90:	891b      	ldrh	r3, [r3, #8]
 800da92:	4619      	mov	r1, r3
 800da94:	8c3b      	ldrh	r3, [r7, #32]
 800da96:	440b      	add	r3, r1
 800da98:	429a      	cmp	r2, r3
 800da9a:	da06      	bge.n	800daaa <tcp_write+0x116>
 800da9c:	4b74      	ldr	r3, [pc, #464]	@ (800dc70 <tcp_write+0x2dc>)
 800da9e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800daa2:	4977      	ldr	r1, [pc, #476]	@ (800dc80 <tcp_write+0x2ec>)
 800daa4:	4874      	ldr	r0, [pc, #464]	@ (800dc78 <tcp_write+0x2e4>)
 800daa6:	f005 f8f3 	bl	8012c90 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800daaa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800daac:	891a      	ldrh	r2, [r3, #8]
 800daae:	8c3b      	ldrh	r3, [r7, #32]
 800dab0:	4413      	add	r3, r2
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dac0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800dac2:	8a7b      	ldrh	r3, [r7, #18]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d026      	beq.n	800db16 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800dac8:	8a7b      	ldrh	r3, [r7, #18]
 800daca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800dacc:	429a      	cmp	r2, r3
 800dace:	d206      	bcs.n	800dade <tcp_write+0x14a>
 800dad0:	4b67      	ldr	r3, [pc, #412]	@ (800dc70 <tcp_write+0x2dc>)
 800dad2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800dad6:	496b      	ldr	r1, [pc, #428]	@ (800dc84 <tcp_write+0x2f0>)
 800dad8:	4867      	ldr	r0, [pc, #412]	@ (800dc78 <tcp_write+0x2e4>)
 800dada:	f005 f8d9 	bl	8012c90 <iprintf>
      seg = last_unsent;
 800dade:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800dae2:	8a7b      	ldrh	r3, [r7, #18]
 800dae4:	88fa      	ldrh	r2, [r7, #6]
 800dae6:	4293      	cmp	r3, r2
 800dae8:	bf28      	it	cs
 800daea:	4613      	movcs	r3, r2
 800daec:	b29b      	uxth	r3, r3
 800daee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800daf0:	4293      	cmp	r3, r2
 800daf2:	bf28      	it	cs
 800daf4:	4613      	movcs	r3, r2
 800daf6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800daf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dafc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800dafe:	4413      	add	r3, r2
 800db00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800db04:	8a7a      	ldrh	r2, [r7, #18]
 800db06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800db0e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db10:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800db16:	8a7b      	ldrh	r3, [r7, #18]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <tcp_write+0x1a0>
 800db1c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db20:	88fb      	ldrh	r3, [r7, #6]
 800db22:	429a      	cmp	r2, r3
 800db24:	d006      	beq.n	800db34 <tcp_write+0x1a0>
 800db26:	4b52      	ldr	r3, [pc, #328]	@ (800dc70 <tcp_write+0x2dc>)
 800db28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db2c:	4956      	ldr	r1, [pc, #344]	@ (800dc88 <tcp_write+0x2f4>)
 800db2e:	4852      	ldr	r0, [pc, #328]	@ (800dc78 <tcp_write+0x2e4>)
 800db30:	f005 f8ae 	bl	8012c90 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800db34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800db38:	88fb      	ldrh	r3, [r7, #6]
 800db3a:	429a      	cmp	r2, r3
 800db3c:	f080 8167 	bcs.w	800de0e <tcp_write+0x47a>
 800db40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db42:	2b00      	cmp	r3, #0
 800db44:	f000 8163 	beq.w	800de0e <tcp_write+0x47a>
 800db48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db4a:	891b      	ldrh	r3, [r3, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	f000 815e 	beq.w	800de0e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800db52:	88fa      	ldrh	r2, [r7, #6]
 800db54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800db58:	1ad2      	subs	r2, r2, r3
 800db5a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db5c:	4293      	cmp	r3, r2
 800db5e:	bfa8      	it	ge
 800db60:	4613      	movge	r3, r2
 800db62:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800db64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800db66:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800db68:	797b      	ldrb	r3, [r7, #5]
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d027      	beq.n	800dbc2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800db72:	f107 0012 	add.w	r0, r7, #18
 800db76:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800db78:	8bf9      	ldrh	r1, [r7, #30]
 800db7a:	2301      	movs	r3, #1
 800db7c:	9302      	str	r3, [sp, #8]
 800db7e:	797b      	ldrb	r3, [r7, #5]
 800db80:	9301      	str	r3, [sp, #4]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	9300      	str	r3, [sp, #0]
 800db86:	4603      	mov	r3, r0
 800db88:	2000      	movs	r0, #0
 800db8a:	f7ff fe0f 	bl	800d7ac <tcp_pbuf_prealloc>
 800db8e:	6578      	str	r0, [r7, #84]	@ 0x54
 800db90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 8225 	beq.w	800dfe2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800db98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db9a:	6858      	ldr	r0, [r3, #4]
 800db9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	4413      	add	r3, r2
 800dba4:	8bfa      	ldrh	r2, [r7, #30]
 800dba6:	4619      	mov	r1, r3
 800dba8:	f005 f9c1 	bl	8012f2e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800dbac:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800dbae:	f7fb fa0f 	bl	8008fd0 <pbuf_clen>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dbba:	4413      	add	r3, r2
 800dbbc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800dbc0:	e041      	b.n	800dc46 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800dbc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbc8:	e002      	b.n	800dbd0 <tcp_write+0x23c>
 800dbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1f8      	bne.n	800dbca <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbda:	7b1b      	ldrb	r3, [r3, #12]
 800dbdc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d115      	bne.n	800dc10 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800dbe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbea:	8952      	ldrh	r2, [r2, #10]
 800dbec:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d10d      	bne.n	800dc10 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800dbf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d006      	beq.n	800dc0a <tcp_write+0x276>
 800dbfc:	4b1c      	ldr	r3, [pc, #112]	@ (800dc70 <tcp_write+0x2dc>)
 800dbfe:	f240 2231 	movw	r2, #561	@ 0x231
 800dc02:	4922      	ldr	r1, [pc, #136]	@ (800dc8c <tcp_write+0x2f8>)
 800dc04:	481c      	ldr	r0, [pc, #112]	@ (800dc78 <tcp_write+0x2e4>)
 800dc06:	f005 f843 	bl	8012c90 <iprintf>
          extendlen = seglen;
 800dc0a:	8bfb      	ldrh	r3, [r7, #30]
 800dc0c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800dc0e:	e01a      	b.n	800dc46 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800dc10:	8bfb      	ldrh	r3, [r7, #30]
 800dc12:	2201      	movs	r2, #1
 800dc14:	4619      	mov	r1, r3
 800dc16:	2000      	movs	r0, #0
 800dc18:	f7fa fe68 	bl	80088ec <pbuf_alloc>
 800dc1c:	6578      	str	r0, [r7, #84]	@ 0x54
 800dc1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 81e0 	beq.w	800dfe6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800dc26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	441a      	add	r2, r3
 800dc2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc30:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800dc32:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800dc34:	f7fb f9cc 	bl	8008fd0 <pbuf_clen>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dc40:	4413      	add	r3, r2
 800dc42:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800dc46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dc4a:	8bfb      	ldrh	r3, [r7, #30]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800dc52:	e0dc      	b.n	800de0e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 80d7 	beq.w	800de0e <tcp_write+0x47a>
 800dc60:	4b03      	ldr	r3, [pc, #12]	@ (800dc70 <tcp_write+0x2dc>)
 800dc62:	f240 224a 	movw	r2, #586	@ 0x24a
 800dc66:	490a      	ldr	r1, [pc, #40]	@ (800dc90 <tcp_write+0x2fc>)
 800dc68:	4803      	ldr	r0, [pc, #12]	@ (800dc78 <tcp_write+0x2e4>)
 800dc6a:	f005 f811 	bl	8012c90 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800dc6e:	e0ce      	b.n	800de0e <tcp_write+0x47a>
 800dc70:	08015570 	.word	0x08015570
 800dc74:	08015710 	.word	0x08015710
 800dc78:	080155c4 	.word	0x080155c4
 800dc7c:	08015728 	.word	0x08015728
 800dc80:	0801575c 	.word	0x0801575c
 800dc84:	08015774 	.word	0x08015774
 800dc88:	08015794 	.word	0x08015794
 800dc8c:	080157b4 	.word	0x080157b4
 800dc90:	080157e0 	.word	0x080157e0
    struct pbuf *p;
    u16_t left = len - pos;
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800dc9e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dca6:	1ad3      	subs	r3, r2, r3
 800dca8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800dcaa:	8b7a      	ldrh	r2, [r7, #26]
 800dcac:	8bbb      	ldrh	r3, [r7, #28]
 800dcae:	4293      	cmp	r3, r2
 800dcb0:	bf28      	it	cs
 800dcb2:	4613      	movcs	r3, r2
 800dcb4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800dcb6:	797b      	ldrb	r3, [r7, #5]
 800dcb8:	f003 0301 	and.w	r3, r3, #1
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d036      	beq.n	800dd2e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800dcc0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	8b3b      	ldrh	r3, [r7, #24]
 800dcc8:	4413      	add	r3, r2
 800dcca:	b299      	uxth	r1, r3
 800dccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	bf0c      	ite	eq
 800dcd2:	2301      	moveq	r3, #1
 800dcd4:	2300      	movne	r3, #0
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	f107 0012 	add.w	r0, r7, #18
 800dcdc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	797b      	ldrb	r3, [r7, #5]
 800dce2:	9301      	str	r3, [sp, #4]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	4603      	mov	r3, r0
 800dcea:	2036      	movs	r0, #54	@ 0x36
 800dcec:	f7ff fd5e 	bl	800d7ac <tcp_pbuf_prealloc>
 800dcf0:	6338      	str	r0, [r7, #48]	@ 0x30
 800dcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	f000 8178 	beq.w	800dfea <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800dcfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcfc:	895b      	ldrh	r3, [r3, #10]
 800dcfe:	8b3a      	ldrh	r2, [r7, #24]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d906      	bls.n	800dd12 <tcp_write+0x37e>
 800dd04:	4b8c      	ldr	r3, [pc, #560]	@ (800df38 <tcp_write+0x5a4>)
 800dd06:	f240 2266 	movw	r2, #614	@ 0x266
 800dd0a:	498c      	ldr	r1, [pc, #560]	@ (800df3c <tcp_write+0x5a8>)
 800dd0c:	488c      	ldr	r0, [pc, #560]	@ (800df40 <tcp_write+0x5ac>)
 800dd0e:	f004 ffbf 	bl	8012c90 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800dd12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd14:	685a      	ldr	r2, [r3, #4]
 800dd16:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dd1a:	18d0      	adds	r0, r2, r3
 800dd1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd20:	68ba      	ldr	r2, [r7, #8]
 800dd22:	4413      	add	r3, r2
 800dd24:	8b3a      	ldrh	r2, [r7, #24]
 800dd26:	4619      	mov	r1, r3
 800dd28:	f005 f901 	bl	8012f2e <memcpy>
 800dd2c:	e02f      	b.n	800dd8e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800dd2e:	8a7b      	ldrh	r3, [r7, #18]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d006      	beq.n	800dd42 <tcp_write+0x3ae>
 800dd34:	4b80      	ldr	r3, [pc, #512]	@ (800df38 <tcp_write+0x5a4>)
 800dd36:	f240 2271 	movw	r2, #625	@ 0x271
 800dd3a:	4982      	ldr	r1, [pc, #520]	@ (800df44 <tcp_write+0x5b0>)
 800dd3c:	4880      	ldr	r0, [pc, #512]	@ (800df40 <tcp_write+0x5ac>)
 800dd3e:	f004 ffa7 	bl	8012c90 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800dd42:	8b3b      	ldrh	r3, [r7, #24]
 800dd44:	2201      	movs	r2, #1
 800dd46:	4619      	mov	r1, r3
 800dd48:	2036      	movs	r0, #54	@ 0x36
 800dd4a:	f7fa fdcf 	bl	80088ec <pbuf_alloc>
 800dd4e:	6178      	str	r0, [r7, #20]
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	f000 814b 	beq.w	800dfee <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800dd58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd5c:	68ba      	ldr	r2, [r7, #8]
 800dd5e:	441a      	add	r2, r3
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dd64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dd6e:	4619      	mov	r1, r3
 800dd70:	2036      	movs	r0, #54	@ 0x36
 800dd72:	f7fa fdbb 	bl	80088ec <pbuf_alloc>
 800dd76:	6338      	str	r0, [r7, #48]	@ 0x30
 800dd78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d103      	bne.n	800dd86 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800dd7e:	6978      	ldr	r0, [r7, #20]
 800dd80:	f7fb f898 	bl	8008eb4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800dd84:	e136      	b.n	800dff4 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800dd86:	6979      	ldr	r1, [r7, #20]
 800dd88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd8a:	f7fb f95f 	bl	800904c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800dd8e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dd90:	f7fb f91e 	bl	8008fd0 <pbuf_clen>
 800dd94:	4603      	mov	r3, r0
 800dd96:	461a      	mov	r2, r3
 800dd98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dd9c:	4413      	add	r3, r2
 800dd9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800dda2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dda6:	2b09      	cmp	r3, #9
 800dda8:	d903      	bls.n	800ddb2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800ddaa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ddac:	f7fb f882 	bl	8008eb4 <pbuf_free>
      goto memerr;
 800ddb0:	e120      	b.n	800dff4 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ddb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ddba:	441a      	add	r2, r3
 800ddbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddc0:	9300      	str	r3, [sp, #0]
 800ddc2:	4613      	mov	r3, r2
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff fc53 	bl	800d674 <tcp_create_segment>
 800ddce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ddd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 810d 	beq.w	800dff2 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800ddd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d102      	bne.n	800dde4 <tcp_write+0x450>
      queue = seg;
 800ddde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dde0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dde2:	e00c      	b.n	800ddfe <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800dde4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d106      	bne.n	800ddf8 <tcp_write+0x464>
 800ddea:	4b53      	ldr	r3, [pc, #332]	@ (800df38 <tcp_write+0x5a4>)
 800ddec:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800ddf0:	4955      	ldr	r1, [pc, #340]	@ (800df48 <tcp_write+0x5b4>)
 800ddf2:	4853      	ldr	r0, [pc, #332]	@ (800df40 <tcp_write+0x5ac>)
 800ddf4:	f004 ff4c 	bl	8012c90 <iprintf>
      prev_seg->next = seg;
 800ddf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddfc:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ddfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de00:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800de02:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800de06:	8b3b      	ldrh	r3, [r7, #24]
 800de08:	4413      	add	r3, r2
 800de0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800de0e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800de12:	88fb      	ldrh	r3, [r7, #6]
 800de14:	429a      	cmp	r2, r3
 800de16:	f4ff af3d 	bcc.w	800dc94 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800de1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d02c      	beq.n	800de7a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800de20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de26:	e01e      	b.n	800de66 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800de28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de2a:	891a      	ldrh	r2, [r3, #8]
 800de2c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de2e:	4413      	add	r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de34:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d110      	bne.n	800de60 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800de3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de44:	8952      	ldrh	r2, [r2, #10]
 800de46:	4413      	add	r3, r2
 800de48:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800de4a:	68b9      	ldr	r1, [r7, #8]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f005 f86e 	bl	8012f2e <memcpy>
        p->len += oversize_used;
 800de52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de54:	895a      	ldrh	r2, [r3, #10]
 800de56:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de58:	4413      	add	r3, r2
 800de5a:	b29a      	uxth	r2, r3
 800de5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de5e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1dd      	bne.n	800de28 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800de6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de6e:	891a      	ldrh	r2, [r3, #8]
 800de70:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de72:	4413      	add	r3, r2
 800de74:	b29a      	uxth	r2, r3
 800de76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de78:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800de7a:	8a7a      	ldrh	r2, [r7, #18]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800de82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de84:	2b00      	cmp	r3, #0
 800de86:	d018      	beq.n	800deba <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800de88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d106      	bne.n	800de9c <tcp_write+0x508>
 800de8e:	4b2a      	ldr	r3, [pc, #168]	@ (800df38 <tcp_write+0x5a4>)
 800de90:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800de94:	492d      	ldr	r1, [pc, #180]	@ (800df4c <tcp_write+0x5b8>)
 800de96:	482a      	ldr	r0, [pc, #168]	@ (800df40 <tcp_write+0x5ac>)
 800de98:	f004 fefa 	bl	8012c90 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800de9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fb f8d2 	bl	800904c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800dea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deaa:	891a      	ldrh	r2, [r3, #8]
 800deac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deae:	891b      	ldrh	r3, [r3, #8]
 800deb0:	4413      	add	r3, r2
 800deb2:	b29a      	uxth	r2, r3
 800deb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800deb6:	811a      	strh	r2, [r3, #8]
 800deb8:	e037      	b.n	800df2a <tcp_write+0x596>
  } else if (extendlen > 0) {
 800deba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800debc:	2b00      	cmp	r3, #0
 800debe:	d034      	beq.n	800df2a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800dec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <tcp_write+0x53a>
 800dec6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d106      	bne.n	800dedc <tcp_write+0x548>
 800dece:	4b1a      	ldr	r3, [pc, #104]	@ (800df38 <tcp_write+0x5a4>)
 800ded0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800ded4:	491e      	ldr	r1, [pc, #120]	@ (800df50 <tcp_write+0x5bc>)
 800ded6:	481a      	ldr	r0, [pc, #104]	@ (800df40 <tcp_write+0x5ac>)
 800ded8:	f004 feda 	bl	8012c90 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800dedc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dee2:	e009      	b.n	800def8 <tcp_write+0x564>
      p->tot_len += extendlen;
 800dee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dee6:	891a      	ldrh	r2, [r3, #8]
 800dee8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800deea:	4413      	add	r3, r2
 800deec:	b29a      	uxth	r2, r3
 800deee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def0:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800def2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800def8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1f1      	bne.n	800dee4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	891a      	ldrh	r2, [r3, #8]
 800df04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df06:	4413      	add	r3, r2
 800df08:	b29a      	uxth	r2, r3
 800df0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df0c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df10:	895a      	ldrh	r2, [r3, #10]
 800df12:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df14:	4413      	add	r3, r2
 800df16:	b29a      	uxth	r2, r3
 800df18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df1a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800df1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df1e:	891a      	ldrh	r2, [r3, #8]
 800df20:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df22:	4413      	add	r3, r2
 800df24:	b29a      	uxth	r2, r3
 800df26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df28:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800df2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d111      	bne.n	800df54 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df34:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df36:	e010      	b.n	800df5a <tcp_write+0x5c6>
 800df38:	08015570 	.word	0x08015570
 800df3c:	08015810 	.word	0x08015810
 800df40:	080155c4 	.word	0x080155c4
 800df44:	08015850 	.word	0x08015850
 800df48:	08015860 	.word	0x08015860
 800df4c:	08015874 	.word	0x08015874
 800df50:	080158ac 	.word	0x080158ac
  } else {
    last_unsent->next = queue;
 800df54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df58:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df5e:	88fb      	ldrh	r3, [r7, #6]
 800df60:	441a      	add	r2, r3
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800df6c:	88fb      	ldrh	r3, [r7, #6]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	b29a      	uxth	r2, r3
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800df7e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d00e      	beq.n	800dfaa <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10a      	bne.n	800dfaa <tcp_write+0x616>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d106      	bne.n	800dfaa <tcp_write+0x616>
 800df9c:	4b2c      	ldr	r3, [pc, #176]	@ (800e050 <tcp_write+0x6bc>)
 800df9e:	f240 3212 	movw	r2, #786	@ 0x312
 800dfa2:	492c      	ldr	r1, [pc, #176]	@ (800e054 <tcp_write+0x6c0>)
 800dfa4:	482c      	ldr	r0, [pc, #176]	@ (800e058 <tcp_write+0x6c4>)
 800dfa6:	f004 fe73 	bl	8012c90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800dfaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d016      	beq.n	800dfde <tcp_write+0x64a>
 800dfb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d012      	beq.n	800dfde <tcp_write+0x64a>
 800dfb8:	797b      	ldrb	r3, [r7, #5]
 800dfba:	f003 0302 	and.w	r3, r3, #2
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d10d      	bne.n	800dfde <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800dfc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	899b      	ldrh	r3, [r3, #12]
 800dfc8:	b29c      	uxth	r4, r3
 800dfca:	2008      	movs	r0, #8
 800dfcc:	f7f9 fa90 	bl	80074f0 <lwip_htons>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	4322      	orrs	r2, r4
 800dfda:	b292      	uxth	r2, r2
 800dfdc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e031      	b.n	800e046 <tcp_write+0x6b2>
          goto memerr;
 800dfe2:	bf00      	nop
 800dfe4:	e006      	b.n	800dff4 <tcp_write+0x660>
            goto memerr;
 800dfe6:	bf00      	nop
 800dfe8:	e004      	b.n	800dff4 <tcp_write+0x660>
        goto memerr;
 800dfea:	bf00      	nop
 800dfec:	e002      	b.n	800dff4 <tcp_write+0x660>
        goto memerr;
 800dfee:	bf00      	nop
 800dff0:	e000      	b.n	800dff4 <tcp_write+0x660>
      goto memerr;
 800dff2:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	8b5b      	ldrh	r3, [r3, #26]
 800dff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <tcp_write+0x67a>
    pbuf_free(concat_p);
 800e008:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800e00a:	f7fa ff53 	bl	8008eb4 <pbuf_free>
  }
  if (queue != NULL) {
 800e00e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e010:	2b00      	cmp	r3, #0
 800e012:	d002      	beq.n	800e01a <tcp_write+0x686>
    tcp_segs_free(queue);
 800e014:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800e016:	f7fc fb4f 	bl	800a6b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00e      	beq.n	800e042 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10a      	bne.n	800e042 <tcp_write+0x6ae>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d106      	bne.n	800e042 <tcp_write+0x6ae>
 800e034:	4b06      	ldr	r3, [pc, #24]	@ (800e050 <tcp_write+0x6bc>)
 800e036:	f240 3227 	movw	r2, #807	@ 0x327
 800e03a:	4906      	ldr	r1, [pc, #24]	@ (800e054 <tcp_write+0x6c0>)
 800e03c:	4806      	ldr	r0, [pc, #24]	@ (800e058 <tcp_write+0x6c4>)
 800e03e:	f004 fe27 	bl	8012c90 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e046:	4618      	mov	r0, r3
 800e048:	375c      	adds	r7, #92	@ 0x5c
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd90      	pop	{r4, r7, pc}
 800e04e:	bf00      	nop
 800e050:	08015570 	.word	0x08015570
 800e054:	080158e4 	.word	0x080158e4
 800e058:	080155c4 	.word	0x080155c4

0800e05c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b08b      	sub	sp, #44	@ 0x2c
 800e060:	af02      	add	r7, sp, #8
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e068:	2300      	movs	r3, #0
 800e06a:	61fb      	str	r3, [r7, #28]
 800e06c:	2300      	movs	r3, #0
 800e06e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e070:	2300      	movs	r3, #0
 800e072:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d106      	bne.n	800e088 <tcp_split_unsent_seg+0x2c>
 800e07a:	4b95      	ldr	r3, [pc, #596]	@ (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e07c:	f240 324b 	movw	r2, #843	@ 0x34b
 800e080:	4994      	ldr	r1, [pc, #592]	@ (800e2d4 <tcp_split_unsent_seg+0x278>)
 800e082:	4895      	ldr	r0, [pc, #596]	@ (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e084:	f004 fe04 	bl	8012c90 <iprintf>

  useg = pcb->unsent;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e08c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d102      	bne.n	800e09a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e094:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e098:	e116      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e09a:	887b      	ldrh	r3, [r7, #2]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e0a0:	4b8b      	ldr	r3, [pc, #556]	@ (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0a2:	f240 3253 	movw	r2, #851	@ 0x353
 800e0a6:	498d      	ldr	r1, [pc, #564]	@ (800e2dc <tcp_split_unsent_seg+0x280>)
 800e0a8:	488b      	ldr	r0, [pc, #556]	@ (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0aa:	f004 fdf1 	bl	8012c90 <iprintf>
    return ERR_VAL;
 800e0ae:	f06f 0305 	mvn.w	r3, #5
 800e0b2:	e109      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	891b      	ldrh	r3, [r3, #8]
 800e0b8:	887a      	ldrh	r2, [r7, #2]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d301      	bcc.n	800e0c2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	e102      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0c6:	887a      	ldrh	r2, [r7, #2]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d906      	bls.n	800e0da <tcp_split_unsent_seg+0x7e>
 800e0cc:	4b80      	ldr	r3, [pc, #512]	@ (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0ce:	f240 325b 	movw	r2, #859	@ 0x35b
 800e0d2:	4983      	ldr	r1, [pc, #524]	@ (800e2e0 <tcp_split_unsent_seg+0x284>)
 800e0d4:	4880      	ldr	r0, [pc, #512]	@ (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0d6:	f004 fddb 	bl	8012c90 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	891b      	ldrh	r3, [r3, #8]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d106      	bne.n	800e0f0 <tcp_split_unsent_seg+0x94>
 800e0e2:	4b7b      	ldr	r3, [pc, #492]	@ (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e0e4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800e0e8:	497e      	ldr	r1, [pc, #504]	@ (800e2e4 <tcp_split_unsent_seg+0x288>)
 800e0ea:	487b      	ldr	r0, [pc, #492]	@ (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e0ec:	f004 fdd0 	bl	8012c90 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	7a9b      	ldrb	r3, [r3, #10]
 800e0f4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	009b      	lsls	r3, r3, #2
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	891a      	ldrh	r2, [r3, #8]
 800e106:	887b      	ldrh	r3, [r7, #2]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800e10c:	7bbb      	ldrb	r3, [r7, #14]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	89bb      	ldrh	r3, [r7, #12]
 800e112:	4413      	add	r3, r2
 800e114:	b29b      	uxth	r3, r3
 800e116:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e11a:	4619      	mov	r1, r3
 800e11c:	2036      	movs	r0, #54	@ 0x36
 800e11e:	f7fa fbe5 	bl	80088ec <pbuf_alloc>
 800e122:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b00      	cmp	r3, #0
 800e128:	f000 80b7 	beq.w	800e29a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	891a      	ldrh	r2, [r3, #8]
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	891b      	ldrh	r3, [r3, #8]
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	b29a      	uxth	r2, r3
 800e13a:	887b      	ldrh	r3, [r7, #2]
 800e13c:	4413      	add	r3, r2
 800e13e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	6858      	ldr	r0, [r3, #4]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	685a      	ldr	r2, [r3, #4]
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	18d1      	adds	r1, r2, r3
 800e14c:	897b      	ldrh	r3, [r7, #10]
 800e14e:	89ba      	ldrh	r2, [r7, #12]
 800e150:	f7fb f8b4 	bl	80092bc <pbuf_copy_partial>
 800e154:	4603      	mov	r3, r0
 800e156:	461a      	mov	r2, r3
 800e158:	89bb      	ldrh	r3, [r7, #12]
 800e15a:	4293      	cmp	r3, r2
 800e15c:	f040 809f 	bne.w	800e29e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	68db      	ldr	r3, [r3, #12]
 800e164:	899b      	ldrh	r3, [r3, #12]
 800e166:	b29b      	uxth	r3, r3
 800e168:	4618      	mov	r0, r3
 800e16a:	f7f9 f9c1 	bl	80074f0 <lwip_htons>
 800e16e:	4603      	mov	r3, r0
 800e170:	b2db      	uxtb	r3, r3
 800e172:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e176:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800e178:	2300      	movs	r3, #0
 800e17a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800e17c:	7efb      	ldrb	r3, [r7, #27]
 800e17e:	f003 0308 	and.w	r3, r3, #8
 800e182:	2b00      	cmp	r3, #0
 800e184:	d007      	beq.n	800e196 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800e186:	7efb      	ldrb	r3, [r7, #27]
 800e188:	f023 0308 	bic.w	r3, r3, #8
 800e18c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800e18e:	7ebb      	ldrb	r3, [r7, #26]
 800e190:	f043 0308 	orr.w	r3, r3, #8
 800e194:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800e196:	7efb      	ldrb	r3, [r7, #27]
 800e198:	f003 0301 	and.w	r3, r3, #1
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d007      	beq.n	800e1b0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800e1a0:	7efb      	ldrb	r3, [r7, #27]
 800e1a2:	f023 0301 	bic.w	r3, r3, #1
 800e1a6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800e1a8:	7ebb      	ldrb	r3, [r7, #26]
 800e1aa:	f043 0301 	orr.w	r3, r3, #1
 800e1ae:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f9 f9ae 	bl	8007518 <lwip_htonl>
 800e1bc:	4602      	mov	r2, r0
 800e1be:	887b      	ldrh	r3, [r7, #2]
 800e1c0:	18d1      	adds	r1, r2, r3
 800e1c2:	7eba      	ldrb	r2, [r7, #26]
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	6939      	ldr	r1, [r7, #16]
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7ff fa51 	bl	800d674 <tcp_create_segment>
 800e1d2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800e1d4:	69fb      	ldr	r3, [r7, #28]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d063      	beq.n	800e2a2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fa fef6 	bl	8008fd0 <pbuf_clen>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e1ee:	1a9b      	subs	r3, r3, r2
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	6858      	ldr	r0, [r3, #4]
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	891a      	ldrh	r2, [r3, #8]
 800e202:	89bb      	ldrh	r3, [r7, #12]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	b29b      	uxth	r3, r3
 800e208:	4619      	mov	r1, r3
 800e20a:	f7fa fccd 	bl	8008ba8 <pbuf_realloc>
  useg->len -= remainder;
 800e20e:	697b      	ldr	r3, [r7, #20]
 800e210:	891a      	ldrh	r2, [r3, #8]
 800e212:	89bb      	ldrh	r3, [r7, #12]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	b29a      	uxth	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	68db      	ldr	r3, [r3, #12]
 800e220:	899b      	ldrh	r3, [r3, #12]
 800e222:	b29c      	uxth	r4, r3
 800e224:	7efb      	ldrb	r3, [r7, #27]
 800e226:	b29b      	uxth	r3, r3
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f9 f961 	bl	80074f0 <lwip_htons>
 800e22e:	4603      	mov	r3, r0
 800e230:	461a      	mov	r2, r3
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	4322      	orrs	r2, r4
 800e238:	b292      	uxth	r2, r2
 800e23a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	f7fa fec5 	bl	8008fd0 <pbuf_clen>
 800e246:	4603      	mov	r3, r0
 800e248:	461a      	mov	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e250:	4413      	add	r3, r2
 800e252:	b29a      	uxth	r2, r3
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fa feb6 	bl	8008fd0 <pbuf_clen>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e26e:	4413      	add	r3, r2
 800e270:	b29a      	uxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	69fa      	ldr	r2, [r7, #28]
 800e284:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d103      	bne.n	800e296 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	2200      	movs	r2, #0
 800e292:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	e016      	b.n	800e2c8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800e29a:	bf00      	nop
 800e29c:	e002      	b.n	800e2a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e29e:	bf00      	nop
 800e2a0:	e000      	b.n	800e2a4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800e2a2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d006      	beq.n	800e2b8 <tcp_split_unsent_seg+0x25c>
 800e2aa:	4b09      	ldr	r3, [pc, #36]	@ (800e2d0 <tcp_split_unsent_seg+0x274>)
 800e2ac:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800e2b0:	490d      	ldr	r1, [pc, #52]	@ (800e2e8 <tcp_split_unsent_seg+0x28c>)
 800e2b2:	4809      	ldr	r0, [pc, #36]	@ (800e2d8 <tcp_split_unsent_seg+0x27c>)
 800e2b4:	f004 fcec 	bl	8012c90 <iprintf>
  if (p != NULL) {
 800e2b8:	693b      	ldr	r3, [r7, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d002      	beq.n	800e2c4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800e2be:	6938      	ldr	r0, [r7, #16]
 800e2c0:	f7fa fdf8 	bl	8008eb4 <pbuf_free>
  }

  return ERR_MEM;
 800e2c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3724      	adds	r7, #36	@ 0x24
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd90      	pop	{r4, r7, pc}
 800e2d0:	08015570 	.word	0x08015570
 800e2d4:	08015904 	.word	0x08015904
 800e2d8:	080155c4 	.word	0x080155c4
 800e2dc:	08015928 	.word	0x08015928
 800e2e0:	0801594c 	.word	0x0801594c
 800e2e4:	0801595c 	.word	0x0801595c
 800e2e8:	0801596c 	.word	0x0801596c

0800e2ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e2ec:	b590      	push	{r4, r7, lr}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d106      	bne.n	800e308 <tcp_send_fin+0x1c>
 800e2fa:	4b21      	ldr	r3, [pc, #132]	@ (800e380 <tcp_send_fin+0x94>)
 800e2fc:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800e300:	4920      	ldr	r1, [pc, #128]	@ (800e384 <tcp_send_fin+0x98>)
 800e302:	4821      	ldr	r0, [pc, #132]	@ (800e388 <tcp_send_fin+0x9c>)
 800e304:	f004 fcc4 	bl	8012c90 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d02e      	beq.n	800e36e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e314:	60fb      	str	r3, [r7, #12]
 800e316:	e002      	b.n	800e31e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1f8      	bne.n	800e318 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	899b      	ldrh	r3, [r3, #12]
 800e32c:	b29b      	uxth	r3, r3
 800e32e:	4618      	mov	r0, r3
 800e330:	f7f9 f8de 	bl	80074f0 <lwip_htons>
 800e334:	4603      	mov	r3, r0
 800e336:	b2db      	uxtb	r3, r3
 800e338:	f003 0307 	and.w	r3, r3, #7
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d116      	bne.n	800e36e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	899b      	ldrh	r3, [r3, #12]
 800e346:	b29c      	uxth	r4, r3
 800e348:	2001      	movs	r0, #1
 800e34a:	f7f9 f8d1 	bl	80074f0 <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	4322      	orrs	r2, r4
 800e358:	b292      	uxth	r2, r2
 800e35a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8b5b      	ldrh	r3, [r3, #26]
 800e360:	f043 0320 	orr.w	r3, r3, #32
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e004      	b.n	800e378 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e36e:	2101      	movs	r1, #1
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f80b 	bl	800e38c <tcp_enqueue_flags>
 800e376:	4603      	mov	r3, r0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	08015570 	.word	0x08015570
 800e384:	08015978 	.word	0x08015978
 800e388:	080155c4 	.word	0x080155c4

0800e38c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b08a      	sub	sp, #40	@ 0x28
 800e390:	af02      	add	r7, sp, #8
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e398:	2300      	movs	r3, #0
 800e39a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e39c:	2300      	movs	r3, #0
 800e39e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e3a0:	78fb      	ldrb	r3, [r7, #3]
 800e3a2:	f003 0303 	and.w	r3, r3, #3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d106      	bne.n	800e3b8 <tcp_enqueue_flags+0x2c>
 800e3aa:	4b67      	ldr	r3, [pc, #412]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e3ac:	f240 4211 	movw	r2, #1041	@ 0x411
 800e3b0:	4966      	ldr	r1, [pc, #408]	@ (800e54c <tcp_enqueue_flags+0x1c0>)
 800e3b2:	4867      	ldr	r0, [pc, #412]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e3b4:	f004 fc6c 	bl	8012c90 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d106      	bne.n	800e3cc <tcp_enqueue_flags+0x40>
 800e3be:	4b62      	ldr	r3, [pc, #392]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e3c0:	f240 4213 	movw	r2, #1043	@ 0x413
 800e3c4:	4963      	ldr	r1, [pc, #396]	@ (800e554 <tcp_enqueue_flags+0x1c8>)
 800e3c6:	4862      	ldr	r0, [pc, #392]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e3c8:	f004 fc62 	bl	8012c90 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	f003 0302 	and.w	r3, r3, #2
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d001      	beq.n	800e3da <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e3da:	7ffb      	ldrb	r3, [r7, #31]
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e3e6:	7dfb      	ldrb	r3, [r7, #23]
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	2036      	movs	r0, #54	@ 0x36
 800e3f2:	f7fa fa7b 	bl	80088ec <pbuf_alloc>
 800e3f6:	6138      	str	r0, [r7, #16]
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d109      	bne.n	800e412 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e40c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e410:	e095      	b.n	800e53e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	895a      	ldrh	r2, [r3, #10]
 800e416:	7dfb      	ldrb	r3, [r7, #23]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d206      	bcs.n	800e42c <tcp_enqueue_flags+0xa0>
 800e41e:	4b4a      	ldr	r3, [pc, #296]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e420:	f240 4239 	movw	r2, #1081	@ 0x439
 800e424:	494c      	ldr	r1, [pc, #304]	@ (800e558 <tcp_enqueue_flags+0x1cc>)
 800e426:	484a      	ldr	r0, [pc, #296]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e428:	f004 fc32 	bl	8012c90 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800e430:	78fa      	ldrb	r2, [r7, #3]
 800e432:	7ffb      	ldrb	r3, [r7, #31]
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	460b      	mov	r3, r1
 800e438:	6939      	ldr	r1, [r7, #16]
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f7ff f91a 	bl	800d674 <tcp_create_segment>
 800e440:	60f8      	str	r0, [r7, #12]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d109      	bne.n	800e45c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	8b5b      	ldrh	r3, [r3, #26]
 800e44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e450:	b29a      	uxth	r2, r3
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e45a:	e070      	b.n	800e53e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	68db      	ldr	r3, [r3, #12]
 800e460:	f003 0303 	and.w	r3, r3, #3
 800e464:	2b00      	cmp	r3, #0
 800e466:	d006      	beq.n	800e476 <tcp_enqueue_flags+0xea>
 800e468:	4b37      	ldr	r3, [pc, #220]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e46a:	f240 4242 	movw	r2, #1090	@ 0x442
 800e46e:	493b      	ldr	r1, [pc, #236]	@ (800e55c <tcp_enqueue_flags+0x1d0>)
 800e470:	4837      	ldr	r0, [pc, #220]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e472:	f004 fc0d 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	891b      	ldrh	r3, [r3, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d006      	beq.n	800e48c <tcp_enqueue_flags+0x100>
 800e47e:	4b32      	ldr	r3, [pc, #200]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e480:	f240 4243 	movw	r2, #1091	@ 0x443
 800e484:	4936      	ldr	r1, [pc, #216]	@ (800e560 <tcp_enqueue_flags+0x1d4>)
 800e486:	4832      	ldr	r0, [pc, #200]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e488:	f004 fc02 	bl	8012c90 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d103      	bne.n	800e49c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	66da      	str	r2, [r3, #108]	@ 0x6c
 800e49a:	e00d      	b.n	800e4b8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e4a0:	61bb      	str	r3, [r7, #24]
 800e4a2:	e002      	b.n	800e4aa <tcp_enqueue_flags+0x11e>
 800e4a4:	69bb      	ldr	r3, [r7, #24]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	61bb      	str	r3, [r7, #24]
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1f8      	bne.n	800e4a4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	68fa      	ldr	r2, [r7, #12]
 800e4b6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e4c0:	78fb      	ldrb	r3, [r7, #3]
 800e4c2:	f003 0302 	and.w	r3, r3, #2
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d104      	bne.n	800e4d4 <tcp_enqueue_flags+0x148>
 800e4ca:	78fb      	ldrb	r3, [r7, #3]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d006      	beq.n	800e4f6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	8b5b      	ldrh	r3, [r3, #26]
 800e4ec:	f043 0320 	orr.w	r3, r3, #32
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7fa fd68 	bl	8008fd0 <pbuf_clen>
 800e500:	4603      	mov	r3, r0
 800e502:	461a      	mov	r2, r3
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e50a:	4413      	add	r3, r2
 800e50c:	b29a      	uxth	r2, r3
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00e      	beq.n	800e53c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e522:	2b00      	cmp	r3, #0
 800e524:	d10a      	bne.n	800e53c <tcp_enqueue_flags+0x1b0>
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d106      	bne.n	800e53c <tcp_enqueue_flags+0x1b0>
 800e52e:	4b06      	ldr	r3, [pc, #24]	@ (800e548 <tcp_enqueue_flags+0x1bc>)
 800e530:	f240 4265 	movw	r2, #1125	@ 0x465
 800e534:	490b      	ldr	r1, [pc, #44]	@ (800e564 <tcp_enqueue_flags+0x1d8>)
 800e536:	4806      	ldr	r0, [pc, #24]	@ (800e550 <tcp_enqueue_flags+0x1c4>)
 800e538:	f004 fbaa 	bl	8012c90 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e53c:	2300      	movs	r3, #0
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	08015570 	.word	0x08015570
 800e54c:	08015994 	.word	0x08015994
 800e550:	080155c4 	.word	0x080155c4
 800e554:	080159ec 	.word	0x080159ec
 800e558:	08015a0c 	.word	0x08015a0c
 800e55c:	08015a48 	.word	0x08015a48
 800e560:	08015a60 	.word	0x08015a60
 800e564:	08015a8c 	.word	0x08015a8c

0800e568 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e568:	b5b0      	push	{r4, r5, r7, lr}
 800e56a:	b08a      	sub	sp, #40	@ 0x28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d106      	bne.n	800e584 <tcp_output+0x1c>
 800e576:	4b8a      	ldr	r3, [pc, #552]	@ (800e7a0 <tcp_output+0x238>)
 800e578:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800e57c:	4989      	ldr	r1, [pc, #548]	@ (800e7a4 <tcp_output+0x23c>)
 800e57e:	488a      	ldr	r0, [pc, #552]	@ (800e7a8 <tcp_output+0x240>)
 800e580:	f004 fb86 	bl	8012c90 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7d1b      	ldrb	r3, [r3, #20]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d106      	bne.n	800e59a <tcp_output+0x32>
 800e58c:	4b84      	ldr	r3, [pc, #528]	@ (800e7a0 <tcp_output+0x238>)
 800e58e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800e592:	4986      	ldr	r1, [pc, #536]	@ (800e7ac <tcp_output+0x244>)
 800e594:	4884      	ldr	r0, [pc, #528]	@ (800e7a8 <tcp_output+0x240>)
 800e596:	f004 fb7b 	bl	8012c90 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e59a:	4b85      	ldr	r3, [pc, #532]	@ (800e7b0 <tcp_output+0x248>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d101      	bne.n	800e5a8 <tcp_output+0x40>
    return ERR_OK;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	e1ce      	b.n	800e946 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	bf28      	it	cs
 800e5b8:	4613      	movcs	r3, r2
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5c2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10b      	bne.n	800e5e2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	8b5b      	ldrh	r3, [r3, #26]
 800e5ce:	f003 0302 	and.w	r3, r3, #2
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	f000 81aa 	beq.w	800e92c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 fded 	bl	800f1b8 <tcp_send_empty_ack>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	e1b1      	b.n	800e946 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	3304      	adds	r3, #4
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7ff f826 	bl	800d63c <tcp_route>
 800e5f0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d102      	bne.n	800e5fe <tcp_output+0x96>
    return ERR_RTE;
 800e5f8:	f06f 0303 	mvn.w	r3, #3
 800e5fc:	e1a3      	b.n	800e946 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d003      	beq.n	800e60c <tcp_output+0xa4>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d111      	bne.n	800e630 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d002      	beq.n	800e618 <tcp_output+0xb0>
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	3304      	adds	r3, #4
 800e616:	e000      	b.n	800e61a <tcp_output+0xb2>
 800e618:	2300      	movs	r3, #0
 800e61a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d102      	bne.n	800e628 <tcp_output+0xc0>
      return ERR_RTE;
 800e622:	f06f 0303 	mvn.w	r3, #3
 800e626:	e18e      	b.n	800e946 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800e630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	685b      	ldr	r3, [r3, #4]
 800e636:	4618      	mov	r0, r3
 800e638:	f7f8 ff6e 	bl	8007518 <lwip_htonl>
 800e63c:	4602      	mov	r2, r0
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e642:	1ad3      	subs	r3, r2, r3
 800e644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e646:	8912      	ldrh	r2, [r2, #8]
 800e648:	4413      	add	r3, r2
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	d227      	bcs.n	800e6a0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e656:	461a      	mov	r2, r3
 800e658:	69bb      	ldr	r3, [r7, #24]
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d114      	bne.n	800e688 <tcp_output+0x120>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e662:	2b00      	cmp	r3, #0
 800e664:	d110      	bne.n	800e688 <tcp_output+0x120>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10b      	bne.n	800e688 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2200      	movs	r2, #0
 800e674:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2201      	movs	r2, #1
 800e67c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	8b5b      	ldrh	r3, [r3, #26]
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	f000 814d 	beq.w	800e930 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f000 fd8e 	bl	800f1b8 <tcp_send_empty_ack>
 800e69c:	4603      	mov	r3, r0
 800e69e:	e152      	b.n	800e946 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6ac:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e6ae:	6a3b      	ldr	r3, [r7, #32]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 811c 	beq.w	800e8ee <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800e6b6:	e002      	b.n	800e6be <tcp_output+0x156>
 800e6b8:	6a3b      	ldr	r3, [r7, #32]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	623b      	str	r3, [r7, #32]
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d1f8      	bne.n	800e6b8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800e6c6:	e112      	b.n	800e8ee <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	899b      	ldrh	r3, [r3, #12]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7f8 ff0d 	bl	80074f0 <lwip_htons>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	b2db      	uxtb	r3, r3
 800e6da:	f003 0304 	and.w	r3, r3, #4
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d006      	beq.n	800e6f0 <tcp_output+0x188>
 800e6e2:	4b2f      	ldr	r3, [pc, #188]	@ (800e7a0 <tcp_output+0x238>)
 800e6e4:	f240 5236 	movw	r2, #1334	@ 0x536
 800e6e8:	4932      	ldr	r1, [pc, #200]	@ (800e7b4 <tcp_output+0x24c>)
 800e6ea:	482f      	ldr	r0, [pc, #188]	@ (800e7a8 <tcp_output+0x240>)
 800e6ec:	f004 fad0 	bl	8012c90 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d01f      	beq.n	800e738 <tcp_output+0x1d0>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	8b5b      	ldrh	r3, [r3, #26]
 800e6fc:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800e700:	2b00      	cmp	r3, #0
 800e702:	d119      	bne.n	800e738 <tcp_output+0x1d0>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00b      	beq.n	800e724 <tcp_output+0x1bc>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d110      	bne.n	800e738 <tcp_output+0x1d0>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e71a:	891a      	ldrh	r2, [r3, #8]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e720:	429a      	cmp	r2, r3
 800e722:	d209      	bcs.n	800e738 <tcp_output+0x1d0>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d004      	beq.n	800e738 <tcp_output+0x1d0>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e734:	2b08      	cmp	r3, #8
 800e736:	d901      	bls.n	800e73c <tcp_output+0x1d4>
 800e738:	2301      	movs	r3, #1
 800e73a:	e000      	b.n	800e73e <tcp_output+0x1d6>
 800e73c:	2300      	movs	r3, #0
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d106      	bne.n	800e750 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	8b5b      	ldrh	r3, [r3, #26]
 800e746:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 80e4 	beq.w	800e918 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	2b02      	cmp	r3, #2
 800e756:	d00d      	beq.n	800e774 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	899b      	ldrh	r3, [r3, #12]
 800e75e:	b29c      	uxth	r4, r3
 800e760:	2010      	movs	r0, #16
 800e762:	f7f8 fec5 	bl	80074f0 <lwip_htons>
 800e766:	4603      	mov	r3, r0
 800e768:	461a      	mov	r2, r3
 800e76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	4322      	orrs	r2, r4
 800e770:	b292      	uxth	r2, r2
 800e772:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800e774:	697a      	ldr	r2, [r7, #20]
 800e776:	6879      	ldr	r1, [r7, #4]
 800e778:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e77a:	f000 f909 	bl	800e990 <tcp_output_segment>
 800e77e:	4603      	mov	r3, r0
 800e780:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d016      	beq.n	800e7b8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	8b5b      	ldrh	r3, [r3, #26]
 800e78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e792:	b29a      	uxth	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	835a      	strh	r2, [r3, #26]
      return err;
 800e798:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e79c:	e0d3      	b.n	800e946 <tcp_output+0x3de>
 800e79e:	bf00      	nop
 800e7a0:	08015570 	.word	0x08015570
 800e7a4:	08015ab4 	.word	0x08015ab4
 800e7a8:	080155c4 	.word	0x080155c4
 800e7ac:	08015acc 	.word	0x08015acc
 800e7b0:	20007834 	.word	0x20007834
 800e7b4:	08015af4 	.word	0x08015af4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ba:	681a      	ldr	r2, [r3, #0]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	7d1b      	ldrb	r3, [r3, #20]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d006      	beq.n	800e7d6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8b5b      	ldrh	r3, [r3, #26]
 800e7cc:	f023 0303 	bic.w	r3, r3, #3
 800e7d0:	b29a      	uxth	r2, r3
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e7d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7f8 fe9b 	bl	8007518 <lwip_htonl>
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	461d      	mov	r5, r3
 800e7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	899b      	ldrh	r3, [r3, #12]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7f8 fe7c 	bl	80074f0 <lwip_htons>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	f003 0303 	and.w	r3, r3, #3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d001      	beq.n	800e808 <tcp_output+0x2a0>
 800e804:	2301      	movs	r3, #1
 800e806:	e000      	b.n	800e80a <tcp_output+0x2a2>
 800e808:	2300      	movs	r3, #0
 800e80a:	442b      	add	r3, r5
 800e80c:	4423      	add	r3, r4
 800e80e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	da02      	bge.n	800e822 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e824:	891b      	ldrh	r3, [r3, #8]
 800e826:	461c      	mov	r4, r3
 800e828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4618      	mov	r0, r3
 800e832:	f7f8 fe5d 	bl	80074f0 <lwip_htons>
 800e836:	4603      	mov	r3, r0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	f003 0303 	and.w	r3, r3, #3
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d001      	beq.n	800e846 <tcp_output+0x2de>
 800e842:	2301      	movs	r3, #1
 800e844:	e000      	b.n	800e848 <tcp_output+0x2e0>
 800e846:	2300      	movs	r3, #0
 800e848:	4423      	add	r3, r4
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d049      	beq.n	800e8e2 <tcp_output+0x37a>
      seg->next = NULL;
 800e84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e850:	2200      	movs	r2, #0
 800e852:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d105      	bne.n	800e868 <tcp_output+0x300>
        pcb->unacked = seg;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e860:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e864:	623b      	str	r3, [r7, #32]
 800e866:	e03f      	b.n	800e8e8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	685b      	ldr	r3, [r3, #4]
 800e86e:	4618      	mov	r0, r3
 800e870:	f7f8 fe52 	bl	8007518 <lwip_htonl>
 800e874:	4604      	mov	r4, r0
 800e876:	6a3b      	ldr	r3, [r7, #32]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	4618      	mov	r0, r3
 800e87e:	f7f8 fe4b 	bl	8007518 <lwip_htonl>
 800e882:	4603      	mov	r3, r0
 800e884:	1ae3      	subs	r3, r4, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	da24      	bge.n	800e8d4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3370      	adds	r3, #112	@ 0x70
 800e88e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e890:	e002      	b.n	800e898 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d011      	beq.n	800e8c4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e8a0:	69fb      	ldr	r3, [r7, #28]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f8 fe35 	bl	8007518 <lwip_htonl>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f8 fe2e 	bl	8007518 <lwip_htonl>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	dbe6      	blt.n	800e892 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e8c4:	69fb      	ldr	r3, [r7, #28]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8ca:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d0:	601a      	str	r2, [r3, #0]
 800e8d2:	e009      	b.n	800e8e8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e8da:	6a3b      	ldr	r3, [r7, #32]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	623b      	str	r3, [r7, #32]
 800e8e0:	e002      	b.n	800e8e8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e8e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e8e4:	f7fb fefd 	bl	800a6e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e8ec:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d012      	beq.n	800e91a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f6:	68db      	ldr	r3, [r3, #12]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f8 fe0c 	bl	8007518 <lwip_htonl>
 800e900:	4602      	mov	r2, r0
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e906:	1ad3      	subs	r3, r2, r3
 800e908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e90a:	8912      	ldrh	r2, [r2, #8]
 800e90c:	4413      	add	r3, r2
  while (seg != NULL &&
 800e90e:	69ba      	ldr	r2, [r7, #24]
 800e910:	429a      	cmp	r2, r3
 800e912:	f4bf aed9 	bcs.w	800e6c8 <tcp_output+0x160>
 800e916:	e000      	b.n	800e91a <tcp_output+0x3b2>
      break;
 800e918:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d108      	bne.n	800e934 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	2200      	movs	r2, #0
 800e926:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e92a:	e004      	b.n	800e936 <tcp_output+0x3ce>
    goto output_done;
 800e92c:	bf00      	nop
 800e92e:	e002      	b.n	800e936 <tcp_output+0x3ce>
    goto output_done;
 800e930:	bf00      	nop
 800e932:	e000      	b.n	800e936 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e934:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8b5b      	ldrh	r3, [r3, #26]
 800e93a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3728      	adds	r7, #40	@ 0x28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bdb0      	pop	{r4, r5, r7, pc}
 800e94e:	bf00      	nop

0800e950 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b082      	sub	sp, #8
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d106      	bne.n	800e96c <tcp_output_segment_busy+0x1c>
 800e95e:	4b09      	ldr	r3, [pc, #36]	@ (800e984 <tcp_output_segment_busy+0x34>)
 800e960:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e964:	4908      	ldr	r1, [pc, #32]	@ (800e988 <tcp_output_segment_busy+0x38>)
 800e966:	4809      	ldr	r0, [pc, #36]	@ (800e98c <tcp_output_segment_busy+0x3c>)
 800e968:	f004 f992 	bl	8012c90 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	7b9b      	ldrb	r3, [r3, #14]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d001      	beq.n	800e97a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e976:	2301      	movs	r3, #1
 800e978:	e000      	b.n	800e97c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e97a:	2300      	movs	r3, #0
}
 800e97c:	4618      	mov	r0, r3
 800e97e:	3708      	adds	r7, #8
 800e980:	46bd      	mov	sp, r7
 800e982:	bd80      	pop	{r7, pc}
 800e984:	08015570 	.word	0x08015570
 800e988:	08015b0c 	.word	0x08015b0c
 800e98c:	080155c4 	.word	0x080155c4

0800e990 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e990:	b5b0      	push	{r4, r5, r7, lr}
 800e992:	b08c      	sub	sp, #48	@ 0x30
 800e994:	af04      	add	r7, sp, #16
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d106      	bne.n	800e9b0 <tcp_output_segment+0x20>
 800e9a2:	4b6d      	ldr	r3, [pc, #436]	@ (800eb58 <tcp_output_segment+0x1c8>)
 800e9a4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e9a8:	496c      	ldr	r1, [pc, #432]	@ (800eb5c <tcp_output_segment+0x1cc>)
 800e9aa:	486d      	ldr	r0, [pc, #436]	@ (800eb60 <tcp_output_segment+0x1d0>)
 800e9ac:	f004 f970 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d106      	bne.n	800e9c4 <tcp_output_segment+0x34>
 800e9b6:	4b68      	ldr	r3, [pc, #416]	@ (800eb58 <tcp_output_segment+0x1c8>)
 800e9b8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e9bc:	4969      	ldr	r1, [pc, #420]	@ (800eb64 <tcp_output_segment+0x1d4>)
 800e9be:	4868      	ldr	r0, [pc, #416]	@ (800eb60 <tcp_output_segment+0x1d0>)
 800e9c0:	f004 f966 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d106      	bne.n	800e9d8 <tcp_output_segment+0x48>
 800e9ca:	4b63      	ldr	r3, [pc, #396]	@ (800eb58 <tcp_output_segment+0x1c8>)
 800e9cc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e9d0:	4965      	ldr	r1, [pc, #404]	@ (800eb68 <tcp_output_segment+0x1d8>)
 800e9d2:	4863      	ldr	r0, [pc, #396]	@ (800eb60 <tcp_output_segment+0x1d0>)
 800e9d4:	f004 f95c 	bl	8012c90 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff ffb9 	bl	800e950 <tcp_output_segment_busy>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e0b3      	b.n	800eb50 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	68dc      	ldr	r4, [r3, #12]
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	f7f8 fd91 	bl	8007518 <lwip_htonl>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68dc      	ldr	r4, [r3, #12]
 800ea02:	4610      	mov	r0, r2
 800ea04:	f7f8 fd74 	bl	80074f0 <lwip_htons>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea10:	68ba      	ldr	r2, [r7, #8]
 800ea12:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ea14:	441a      	add	r2, r3
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	68db      	ldr	r3, [r3, #12]
 800ea1e:	3314      	adds	r3, #20
 800ea20:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7a9b      	ldrb	r3, [r3, #10]
 800ea26:	f003 0301 	and.w	r3, r3, #1
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d015      	beq.n	800ea5a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	3304      	adds	r3, #4
 800ea32:	461a      	mov	r2, r3
 800ea34:	6879      	ldr	r1, [r7, #4]
 800ea36:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ea3a:	f7fc fa39 	bl	800aeb0 <tcp_eff_send_mss_netif>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ea42:	8b7b      	ldrh	r3, [r7, #26]
 800ea44:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ea48:	4618      	mov	r0, r3
 800ea4a:	f7f8 fd65 	bl	8007518 <lwip_htonl>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	3304      	adds	r3, #4
 800ea58:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	da02      	bge.n	800ea6a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	2200      	movs	r2, #0
 800ea68:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d10c      	bne.n	800ea8c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ea72:	4b3e      	ldr	r3, [pc, #248]	@ (800eb6c <tcp_output_segment+0x1dc>)
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68db      	ldr	r3, [r3, #12]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f8 fd49 	bl	8007518 <lwip_htonl>
 800ea86:	4602      	mov	r2, r0
 800ea88:	68bb      	ldr	r3, [r7, #8]
 800ea8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	68da      	ldr	r2, [r3, #12]
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	1ad3      	subs	r3, r2, r3
 800ea98:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	8959      	ldrh	r1, [r3, #10]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	8b3a      	ldrh	r2, [r7, #24]
 800eaa6:	1a8a      	subs	r2, r1, r2
 800eaa8:	b292      	uxth	r2, r2
 800eaaa:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	8919      	ldrh	r1, [r3, #8]
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	685b      	ldr	r3, [r3, #4]
 800eab6:	8b3a      	ldrh	r2, [r7, #24]
 800eab8:	1a8a      	subs	r2, r1, r2
 800eaba:	b292      	uxth	r2, r2
 800eabc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	685b      	ldr	r3, [r3, #4]
 800eac2:	68fa      	ldr	r2, [r7, #12]
 800eac4:	68d2      	ldr	r2, [r2, #12]
 800eac6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	741a      	strb	r2, [r3, #16]
 800ead0:	2200      	movs	r2, #0
 800ead2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	68da      	ldr	r2, [r3, #12]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	7a9b      	ldrb	r3, [r3, #10]
 800eadc:	f003 0301 	and.w	r3, r3, #1
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d001      	beq.n	800eae8 <tcp_output_segment+0x158>
 800eae4:	2318      	movs	r3, #24
 800eae6:	e000      	b.n	800eaea <tcp_output_segment+0x15a>
 800eae8:	2314      	movs	r3, #20
 800eaea:	4413      	add	r3, r2
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d006      	beq.n	800eb00 <tcp_output_segment+0x170>
 800eaf2:	4b19      	ldr	r3, [pc, #100]	@ (800eb58 <tcp_output_segment+0x1c8>)
 800eaf4:	f240 621c 	movw	r2, #1564	@ 0x61c
 800eaf8:	491d      	ldr	r1, [pc, #116]	@ (800eb70 <tcp_output_segment+0x1e0>)
 800eafa:	4819      	ldr	r0, [pc, #100]	@ (800eb60 <tcp_output_segment+0x1d0>)
 800eafc:	f004 f8c8 	bl	8012c90 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb08:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800eb0a:	68bd      	ldr	r5, [r7, #8]
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	68d4      	ldr	r4, [r2, #12]
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	462b      	mov	r3, r5
 800eb18:	460a      	mov	r2, r1
 800eb1a:	2106      	movs	r1, #6
 800eb1c:	f7f8 fe4d 	bl	80077ba <ip_chksum_pseudo>
 800eb20:	4603      	mov	r3, r0
 800eb22:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	6858      	ldr	r0, [r3, #4]
 800eb28:	68b9      	ldr	r1, [r7, #8]
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	1d1c      	adds	r4, r3, #4
 800eb2e:	68bb      	ldr	r3, [r7, #8]
 800eb30:	7add      	ldrb	r5, [r3, #11]
 800eb32:	68bb      	ldr	r3, [r7, #8]
 800eb34:	7a9b      	ldrb	r3, [r3, #10]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	9202      	str	r2, [sp, #8]
 800eb3a:	2206      	movs	r2, #6
 800eb3c:	9201      	str	r2, [sp, #4]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	462b      	mov	r3, r5
 800eb42:	4622      	mov	r2, r4
 800eb44:	f002 faf2 	bl	801112c <ip4_output_if>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800eb4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bdb0      	pop	{r4, r5, r7, pc}
 800eb58:	08015570 	.word	0x08015570
 800eb5c:	08015b34 	.word	0x08015b34
 800eb60:	080155c4 	.word	0x080155c4
 800eb64:	08015b54 	.word	0x08015b54
 800eb68:	08015b74 	.word	0x08015b74
 800eb6c:	200077e8 	.word	0x200077e8
 800eb70:	08015b98 	.word	0x08015b98

0800eb74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800eb74:	b5b0      	push	{r4, r5, r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d106      	bne.n	800eb90 <tcp_rexmit_rto_prepare+0x1c>
 800eb82:	4b31      	ldr	r3, [pc, #196]	@ (800ec48 <tcp_rexmit_rto_prepare+0xd4>)
 800eb84:	f240 6263 	movw	r2, #1635	@ 0x663
 800eb88:	4930      	ldr	r1, [pc, #192]	@ (800ec4c <tcp_rexmit_rto_prepare+0xd8>)
 800eb8a:	4831      	ldr	r0, [pc, #196]	@ (800ec50 <tcp_rexmit_rto_prepare+0xdc>)
 800eb8c:	f004 f880 	bl	8012c90 <iprintf>

  if (pcb->unacked == NULL) {
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800eb98:	f06f 0305 	mvn.w	r3, #5
 800eb9c:	e050      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	e00b      	b.n	800ebbe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800eba6:	68f8      	ldr	r0, [r7, #12]
 800eba8:	f7ff fed2 	bl	800e950 <tcp_output_segment_busy>
 800ebac:	4603      	mov	r3, r0
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ebb2:	f06f 0305 	mvn.w	r3, #5
 800ebb6:	e043      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	60fb      	str	r3, [r7, #12]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d1ef      	bne.n	800eba6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f7ff fec2 	bl	800e950 <tcp_output_segment_busy>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d002      	beq.n	800ebd8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800ebd2:	f06f 0305 	mvn.w	r3, #5
 800ebd6:	e033      	b.n	800ec40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2200      	movs	r2, #0
 800ebec:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	8b5b      	ldrh	r3, [r3, #26]
 800ebf2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7f8 fc88 	bl	8007518 <lwip_htonl>
 800ec08:	4604      	mov	r4, r0
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	891b      	ldrh	r3, [r3, #8]
 800ec0e:	461d      	mov	r5, r3
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	68db      	ldr	r3, [r3, #12]
 800ec14:	899b      	ldrh	r3, [r3, #12]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f7f8 fc69 	bl	80074f0 <lwip_htons>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	f003 0303 	and.w	r3, r3, #3
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <tcp_rexmit_rto_prepare+0xba>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	e000      	b.n	800ec30 <tcp_rexmit_rto_prepare+0xbc>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	442b      	add	r3, r5
 800ec32:	18e2      	adds	r2, r4, r3
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bdb0      	pop	{r4, r5, r7, pc}
 800ec48:	08015570 	.word	0x08015570
 800ec4c:	08015bac 	.word	0x08015bac
 800ec50:	080155c4 	.word	0x080155c4

0800ec54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d106      	bne.n	800ec70 <tcp_rexmit_rto_commit+0x1c>
 800ec62:	4b0d      	ldr	r3, [pc, #52]	@ (800ec98 <tcp_rexmit_rto_commit+0x44>)
 800ec64:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ec68:	490c      	ldr	r1, [pc, #48]	@ (800ec9c <tcp_rexmit_rto_commit+0x48>)
 800ec6a:	480d      	ldr	r0, [pc, #52]	@ (800eca0 <tcp_rexmit_rto_commit+0x4c>)
 800ec6c:	f004 f810 	bl	8012c90 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec76:	2bff      	cmp	r3, #255	@ 0xff
 800ec78:	d007      	beq.n	800ec8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ec80:	3301      	adds	r3, #1
 800ec82:	b2da      	uxtb	r2, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f7ff fc6c 	bl	800e568 <tcp_output>
}
 800ec90:	bf00      	nop
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	08015570 	.word	0x08015570
 800ec9c:	08015bd0 	.word	0x08015bd0
 800eca0:	080155c4 	.word	0x080155c4

0800eca4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d106      	bne.n	800ecc0 <tcp_rexmit_rto+0x1c>
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	@ (800ecdc <tcp_rexmit_rto+0x38>)
 800ecb4:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ecb8:	4909      	ldr	r1, [pc, #36]	@ (800ece0 <tcp_rexmit_rto+0x3c>)
 800ecba:	480a      	ldr	r0, [pc, #40]	@ (800ece4 <tcp_rexmit_rto+0x40>)
 800ecbc:	f003 ffe8 	bl	8012c90 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff ff57 	bl	800eb74 <tcp_rexmit_rto_prepare>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d102      	bne.n	800ecd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7ff ffc1 	bl	800ec54 <tcp_rexmit_rto_commit>
  }
}
 800ecd2:	bf00      	nop
 800ecd4:	3708      	adds	r7, #8
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	08015570 	.word	0x08015570
 800ece0:	08015bf4 	.word	0x08015bf4
 800ece4:	080155c4 	.word	0x080155c4

0800ece8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ece8:	b590      	push	{r4, r7, lr}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <tcp_rexmit+0x1c>
 800ecf6:	4b2f      	ldr	r3, [pc, #188]	@ (800edb4 <tcp_rexmit+0xcc>)
 800ecf8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800ecfc:	492e      	ldr	r1, [pc, #184]	@ (800edb8 <tcp_rexmit+0xd0>)
 800ecfe:	482f      	ldr	r0, [pc, #188]	@ (800edbc <tcp_rexmit+0xd4>)
 800ed00:	f003 ffc6 	bl	8012c90 <iprintf>

  if (pcb->unacked == NULL) {
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d102      	bne.n	800ed12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800ed0c:	f06f 0305 	mvn.w	r3, #5
 800ed10:	e04c      	b.n	800edac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ed16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800ed18:	68b8      	ldr	r0, [r7, #8]
 800ed1a:	f7ff fe19 	bl	800e950 <tcp_output_segment_busy>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d002      	beq.n	800ed2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ed24:	f06f 0305 	mvn.w	r3, #5
 800ed28:	e040      	b.n	800edac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	336c      	adds	r3, #108	@ 0x6c
 800ed36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed38:	e002      	b.n	800ed40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d011      	beq.n	800ed6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7f8 fbe1 	bl	8007518 <lwip_htonl>
 800ed56:	4604      	mov	r4, r0
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	68db      	ldr	r3, [r3, #12]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7f8 fbda 	bl	8007518 <lwip_htonl>
 800ed64:	4603      	mov	r3, r0
 800ed66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	dbe6      	blt.n	800ed3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d103      	bne.n	800ed8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed90:	2bff      	cmp	r3, #255	@ 0xff
 800ed92:	d007      	beq.n	800eda4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd90      	pop	{r4, r7, pc}
 800edb4:	08015570 	.word	0x08015570
 800edb8:	08015c10 	.word	0x08015c10
 800edbc:	080155c4 	.word	0x080155c4

0800edc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d106      	bne.n	800eddc <tcp_rexmit_fast+0x1c>
 800edce:	4b2a      	ldr	r3, [pc, #168]	@ (800ee78 <tcp_rexmit_fast+0xb8>)
 800edd0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800edd4:	4929      	ldr	r1, [pc, #164]	@ (800ee7c <tcp_rexmit_fast+0xbc>)
 800edd6:	482a      	ldr	r0, [pc, #168]	@ (800ee80 <tcp_rexmit_fast+0xc0>)
 800edd8:	f003 ff5a 	bl	8012c90 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d044      	beq.n	800ee6e <tcp_rexmit_fast+0xae>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	8b5b      	ldrh	r3, [r3, #26]
 800ede8:	f003 0304 	and.w	r3, r3, #4
 800edec:	2b00      	cmp	r3, #0
 800edee:	d13e      	bne.n	800ee6e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7ff ff79 	bl	800ece8 <tcp_rexmit>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d138      	bne.n	800ee6e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	bf28      	it	cs
 800ee0c:	4613      	movcs	r3, r2
 800ee0e:	b29b      	uxth	r3, r3
 800ee10:	0fda      	lsrs	r2, r3, #31
 800ee12:	4413      	add	r3, r2
 800ee14:	105b      	asrs	r3, r3, #1
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800ee24:	461a      	mov	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d206      	bcs.n	800ee3e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	b29a      	uxth	r2, r3
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ee48:	4619      	mov	r1, r3
 800ee4a:	0049      	lsls	r1, r1, #1
 800ee4c:	440b      	add	r3, r1
 800ee4e:	b29b      	uxth	r3, r3
 800ee50:	4413      	add	r3, r2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	8b5b      	ldrh	r3, [r3, #26]
 800ee5e:	f043 0304 	orr.w	r3, r3, #4
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800ee6e:	bf00      	nop
 800ee70:	3708      	adds	r7, #8
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	08015570 	.word	0x08015570
 800ee7c:	08015c28 	.word	0x08015c28
 800ee80:	080155c4 	.word	0x080155c4

0800ee84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b086      	sub	sp, #24
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	607b      	str	r3, [r7, #4]
 800ee8e:	460b      	mov	r3, r1
 800ee90:	817b      	strh	r3, [r7, #10]
 800ee92:	4613      	mov	r3, r2
 800ee94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ee96:	897a      	ldrh	r2, [r7, #10]
 800ee98:	893b      	ldrh	r3, [r7, #8]
 800ee9a:	4413      	add	r3, r2
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	3314      	adds	r3, #20
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800eea6:	4619      	mov	r1, r3
 800eea8:	2022      	movs	r0, #34	@ 0x22
 800eeaa:	f7f9 fd1f 	bl	80088ec <pbuf_alloc>
 800eeae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d04d      	beq.n	800ef52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800eeb6:	897b      	ldrh	r3, [r7, #10]
 800eeb8:	3313      	adds	r3, #19
 800eeba:	697a      	ldr	r2, [r7, #20]
 800eebc:	8952      	ldrh	r2, [r2, #10]
 800eebe:	4293      	cmp	r3, r2
 800eec0:	db06      	blt.n	800eed0 <tcp_output_alloc_header_common+0x4c>
 800eec2:	4b26      	ldr	r3, [pc, #152]	@ (800ef5c <tcp_output_alloc_header_common+0xd8>)
 800eec4:	f240 7223 	movw	r2, #1827	@ 0x723
 800eec8:	4925      	ldr	r1, [pc, #148]	@ (800ef60 <tcp_output_alloc_header_common+0xdc>)
 800eeca:	4826      	ldr	r0, [pc, #152]	@ (800ef64 <tcp_output_alloc_header_common+0xe0>)
 800eecc:	f003 fee0 	bl	8012c90 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800eed6:	8c3b      	ldrh	r3, [r7, #32]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7f8 fb09 	bl	80074f0 <lwip_htons>
 800eede:	4603      	mov	r3, r0
 800eee0:	461a      	mov	r2, r3
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800eee6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7f8 fb01 	bl	80074f0 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	461a      	mov	r2, r3
 800eef2:	693b      	ldr	r3, [r7, #16]
 800eef4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	687a      	ldr	r2, [r7, #4]
 800eefa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f7f8 fb0b 	bl	8007518 <lwip_htonl>
 800ef02:	4602      	mov	r2, r0
 800ef04:	693b      	ldr	r3, [r7, #16]
 800ef06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ef08:	897b      	ldrh	r3, [r7, #10]
 800ef0a:	089b      	lsrs	r3, r3, #2
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	3305      	adds	r3, #5
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	031b      	lsls	r3, r3, #12
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7f8 fae5 	bl	80074f0 <lwip_htons>
 800ef26:	4603      	mov	r3, r0
 800ef28:	461a      	mov	r2, r3
 800ef2a:	693b      	ldr	r3, [r7, #16]
 800ef2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ef2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7f8 fadd 	bl	80074f0 <lwip_htons>
 800ef36:	4603      	mov	r3, r0
 800ef38:	461a      	mov	r2, r3
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2200      	movs	r2, #0
 800ef42:	741a      	strb	r2, [r3, #16]
 800ef44:	2200      	movs	r2, #0
 800ef46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	749a      	strb	r2, [r3, #18]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ef52:	697b      	ldr	r3, [r7, #20]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}
 800ef5c:	08015570 	.word	0x08015570
 800ef60:	08015c48 	.word	0x08015c48
 800ef64:	080155c4 	.word	0x080155c4

0800ef68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ef68:	b5b0      	push	{r4, r5, r7, lr}
 800ef6a:	b08a      	sub	sp, #40	@ 0x28
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	607b      	str	r3, [r7, #4]
 800ef72:	460b      	mov	r3, r1
 800ef74:	817b      	strh	r3, [r7, #10]
 800ef76:	4613      	mov	r3, r2
 800ef78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d106      	bne.n	800ef8e <tcp_output_alloc_header+0x26>
 800ef80:	4b15      	ldr	r3, [pc, #84]	@ (800efd8 <tcp_output_alloc_header+0x70>)
 800ef82:	f240 7242 	movw	r2, #1858	@ 0x742
 800ef86:	4915      	ldr	r1, [pc, #84]	@ (800efdc <tcp_output_alloc_header+0x74>)
 800ef88:	4815      	ldr	r0, [pc, #84]	@ (800efe0 <tcp_output_alloc_header+0x78>)
 800ef8a:	f003 fe81 	bl	8012c90 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	8adb      	ldrh	r3, [r3, #22]
 800ef96:	68fa      	ldr	r2, [r7, #12]
 800ef98:	8b12      	ldrh	r2, [r2, #24]
 800ef9a:	68f9      	ldr	r1, [r7, #12]
 800ef9c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800ef9e:	893d      	ldrh	r5, [r7, #8]
 800efa0:	897c      	ldrh	r4, [r7, #10]
 800efa2:	9103      	str	r1, [sp, #12]
 800efa4:	2110      	movs	r1, #16
 800efa6:	9102      	str	r1, [sp, #8]
 800efa8:	9201      	str	r2, [sp, #4]
 800efaa:	9300      	str	r3, [sp, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	462a      	mov	r2, r5
 800efb0:	4621      	mov	r1, r4
 800efb2:	f7ff ff67 	bl	800ee84 <tcp_output_alloc_header_common>
 800efb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d006      	beq.n	800efcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800efc6:	441a      	add	r2, r3
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800efcc:	697b      	ldr	r3, [r7, #20]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3718      	adds	r7, #24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bdb0      	pop	{r4, r5, r7, pc}
 800efd6:	bf00      	nop
 800efd8:	08015570 	.word	0x08015570
 800efdc:	08015c78 	.word	0x08015c78
 800efe0:	080155c4 	.word	0x080155c4

0800efe4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b088      	sub	sp, #32
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	60b9      	str	r1, [r7, #8]
 800efee:	4611      	mov	r1, r2
 800eff0:	461a      	mov	r2, r3
 800eff2:	460b      	mov	r3, r1
 800eff4:	71fb      	strb	r3, [r7, #7]
 800eff6:	4613      	mov	r3, r2
 800eff8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800effa:	2300      	movs	r3, #0
 800effc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <tcp_output_fill_options+0x2e>
 800f004:	4b12      	ldr	r3, [pc, #72]	@ (800f050 <tcp_output_fill_options+0x6c>)
 800f006:	f240 7256 	movw	r2, #1878	@ 0x756
 800f00a:	4912      	ldr	r1, [pc, #72]	@ (800f054 <tcp_output_fill_options+0x70>)
 800f00c:	4812      	ldr	r0, [pc, #72]	@ (800f058 <tcp_output_fill_options+0x74>)
 800f00e:	f003 fe3f 	bl	8012c90 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	685b      	ldr	r3, [r3, #4]
 800f016:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	3314      	adds	r3, #20
 800f01c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f01e:	8bfb      	ldrh	r3, [r7, #30]
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	461a      	mov	r2, r3
 800f024:	79fb      	ldrb	r3, [r7, #7]
 800f026:	009b      	lsls	r3, r3, #2
 800f028:	f003 0304 	and.w	r3, r3, #4
 800f02c:	4413      	add	r3, r2
 800f02e:	3314      	adds	r3, #20
 800f030:	69ba      	ldr	r2, [r7, #24]
 800f032:	4413      	add	r3, r2
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	429a      	cmp	r2, r3
 800f038:	d006      	beq.n	800f048 <tcp_output_fill_options+0x64>
 800f03a:	4b05      	ldr	r3, [pc, #20]	@ (800f050 <tcp_output_fill_options+0x6c>)
 800f03c:	f240 7275 	movw	r2, #1909	@ 0x775
 800f040:	4906      	ldr	r1, [pc, #24]	@ (800f05c <tcp_output_fill_options+0x78>)
 800f042:	4805      	ldr	r0, [pc, #20]	@ (800f058 <tcp_output_fill_options+0x74>)
 800f044:	f003 fe24 	bl	8012c90 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f048:	bf00      	nop
 800f04a:	3720      	adds	r7, #32
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	08015570 	.word	0x08015570
 800f054:	08015ca0 	.word	0x08015ca0
 800f058:	080155c4 	.word	0x080155c4
 800f05c:	08015b98 	.word	0x08015b98

0800f060 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b08c      	sub	sp, #48	@ 0x30
 800f064:	af04      	add	r7, sp, #16
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
 800f06c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d106      	bne.n	800f082 <tcp_output_control_segment+0x22>
 800f074:	4b24      	ldr	r3, [pc, #144]	@ (800f108 <tcp_output_control_segment+0xa8>)
 800f076:	f240 7287 	movw	r2, #1927	@ 0x787
 800f07a:	4924      	ldr	r1, [pc, #144]	@ (800f10c <tcp_output_control_segment+0xac>)
 800f07c:	4824      	ldr	r0, [pc, #144]	@ (800f110 <tcp_output_control_segment+0xb0>)
 800f07e:	f003 fe07 	bl	8012c90 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f082:	683a      	ldr	r2, [r7, #0]
 800f084:	6879      	ldr	r1, [r7, #4]
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7fe fad8 	bl	800d63c <tcp_route>
 800f08c:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f094:	23fc      	movs	r3, #252	@ 0xfc
 800f096:	77fb      	strb	r3, [r7, #31]
 800f098:	e02c      	b.n	800f0f4 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	891a      	ldrh	r2, [r3, #8]
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2106      	movs	r1, #6
 800f0ac:	68b8      	ldr	r0, [r7, #8]
 800f0ae:	f7f8 fb84 	bl	80077ba <ip_chksum_pseudo>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	461a      	mov	r2, r3
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d006      	beq.n	800f0ce <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	7adb      	ldrb	r3, [r3, #11]
 800f0c4:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	7a9b      	ldrb	r3, [r3, #10]
 800f0ca:	777b      	strb	r3, [r7, #29]
 800f0cc:	e003      	b.n	800f0d6 <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f0ce:	23ff      	movs	r3, #255	@ 0xff
 800f0d0:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f0d6:	7fba      	ldrb	r2, [r7, #30]
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	9302      	str	r3, [sp, #8]
 800f0dc:	2306      	movs	r3, #6
 800f0de:	9301      	str	r3, [sp, #4]
 800f0e0:	7f7b      	ldrb	r3, [r7, #29]
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	6879      	ldr	r1, [r7, #4]
 800f0ea:	68b8      	ldr	r0, [r7, #8]
 800f0ec:	f002 f81e 	bl	801112c <ip4_output_if>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800f0f4:	68b8      	ldr	r0, [r7, #8]
 800f0f6:	f7f9 fedd 	bl	8008eb4 <pbuf_free>
  return err;
 800f0fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3720      	adds	r7, #32
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	08015570 	.word	0x08015570
 800f10c:	08015cc8 	.word	0x08015cc8
 800f110:	080155c4 	.word	0x080155c4

0800f114 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800f114:	b590      	push	{r4, r7, lr}
 800f116:	b08b      	sub	sp, #44	@ 0x2c
 800f118:	af04      	add	r7, sp, #16
 800f11a:	60f8      	str	r0, [r7, #12]
 800f11c:	60b9      	str	r1, [r7, #8]
 800f11e:	607a      	str	r2, [r7, #4]
 800f120:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d106      	bne.n	800f136 <tcp_rst+0x22>
 800f128:	4b1f      	ldr	r3, [pc, #124]	@ (800f1a8 <tcp_rst+0x94>)
 800f12a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800f12e:	491f      	ldr	r1, [pc, #124]	@ (800f1ac <tcp_rst+0x98>)
 800f130:	481f      	ldr	r0, [pc, #124]	@ (800f1b0 <tcp_rst+0x9c>)
 800f132:	f003 fdad 	bl	8012c90 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800f136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d106      	bne.n	800f14a <tcp_rst+0x36>
 800f13c:	4b1a      	ldr	r3, [pc, #104]	@ (800f1a8 <tcp_rst+0x94>)
 800f13e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800f142:	491c      	ldr	r1, [pc, #112]	@ (800f1b4 <tcp_rst+0xa0>)
 800f144:	481a      	ldr	r0, [pc, #104]	@ (800f1b0 <tcp_rst+0x9c>)
 800f146:	f003 fda3 	bl	8012c90 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f14a:	2300      	movs	r3, #0
 800f14c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800f14e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800f152:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800f154:	7dfb      	ldrb	r3, [r7, #23]
 800f156:	b29c      	uxth	r4, r3
 800f158:	68b8      	ldr	r0, [r7, #8]
 800f15a:	f7f8 f9dd 	bl	8007518 <lwip_htonl>
 800f15e:	4602      	mov	r2, r0
 800f160:	8abb      	ldrh	r3, [r7, #20]
 800f162:	9303      	str	r3, [sp, #12]
 800f164:	2314      	movs	r3, #20
 800f166:	9302      	str	r3, [sp, #8]
 800f168:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800f16a:	9301      	str	r3, [sp, #4]
 800f16c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	4613      	mov	r3, r2
 800f172:	2200      	movs	r2, #0
 800f174:	4621      	mov	r1, r4
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff fe84 	bl	800ee84 <tcp_output_alloc_header_common>
 800f17c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00c      	beq.n	800f19e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f184:	7dfb      	ldrb	r3, [r7, #23]
 800f186:	2200      	movs	r2, #0
 800f188:	6939      	ldr	r1, [r7, #16]
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7ff ff2a 	bl	800efe4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800f190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	6939      	ldr	r1, [r7, #16]
 800f196:	68f8      	ldr	r0, [r7, #12]
 800f198:	f7ff ff62 	bl	800f060 <tcp_output_control_segment>
 800f19c:	e000      	b.n	800f1a0 <tcp_rst+0x8c>
    return;
 800f19e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800f1a0:	371c      	adds	r7, #28
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd90      	pop	{r4, r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	08015570 	.word	0x08015570
 800f1ac:	08015cf4 	.word	0x08015cf4
 800f1b0:	080155c4 	.word	0x080155c4
 800f1b4:	08015d10 	.word	0x08015d10

0800f1b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800f1b8:	b590      	push	{r4, r7, lr}
 800f1ba:	b087      	sub	sp, #28
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d106      	bne.n	800f1dc <tcp_send_empty_ack+0x24>
 800f1ce:	4b28      	ldr	r3, [pc, #160]	@ (800f270 <tcp_send_empty_ack+0xb8>)
 800f1d0:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800f1d4:	4927      	ldr	r1, [pc, #156]	@ (800f274 <tcp_send_empty_ack+0xbc>)
 800f1d6:	4828      	ldr	r0, [pc, #160]	@ (800f278 <tcp_send_empty_ack+0xc0>)
 800f1d8:	f003 fd5a 	bl	8012c90 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f1dc:	7dfb      	ldrb	r3, [r7, #23]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	b2db      	uxtb	r3, r3
 800f1e2:	f003 0304 	and.w	r3, r3, #4
 800f1e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800f1e8:	7d7b      	ldrb	r3, [r7, #21]
 800f1ea:	b29c      	uxth	r4, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7f8 f991 	bl	8007518 <lwip_htonl>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7ff feb3 	bl	800ef68 <tcp_output_alloc_header>
 800f202:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d109      	bne.n	800f21e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8b5b      	ldrh	r3, [r3, #26]
 800f20e:	f043 0303 	orr.w	r3, r3, #3
 800f212:	b29a      	uxth	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800f218:	f06f 0301 	mvn.w	r3, #1
 800f21c:	e023      	b.n	800f266 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800f21e:	7dbb      	ldrb	r3, [r7, #22]
 800f220:	7dfa      	ldrb	r2, [r7, #23]
 800f222:	6939      	ldr	r1, [r7, #16]
 800f224:	6878      	ldr	r0, [r7, #4]
 800f226:	f7ff fedd 	bl	800efe4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	3304      	adds	r3, #4
 800f230:	6939      	ldr	r1, [r7, #16]
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7ff ff14 	bl	800f060 <tcp_output_control_segment>
 800f238:	4603      	mov	r3, r0
 800f23a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800f23c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d007      	beq.n	800f254 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	8b5b      	ldrh	r3, [r3, #26]
 800f248:	f043 0303 	orr.w	r3, r3, #3
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	835a      	strh	r2, [r3, #26]
 800f252:	e006      	b.n	800f262 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	8b5b      	ldrh	r3, [r3, #26]
 800f258:	f023 0303 	bic.w	r3, r3, #3
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800f262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f266:	4618      	mov	r0, r3
 800f268:	371c      	adds	r7, #28
 800f26a:	46bd      	mov	sp, r7
 800f26c:	bd90      	pop	{r4, r7, pc}
 800f26e:	bf00      	nop
 800f270:	08015570 	.word	0x08015570
 800f274:	08015d2c 	.word	0x08015d2c
 800f278:	080155c4 	.word	0x080155c4

0800f27c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800f27c:	b590      	push	{r4, r7, lr}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f284:	2300      	movs	r3, #0
 800f286:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <tcp_keepalive+0x20>
 800f28e:	4b18      	ldr	r3, [pc, #96]	@ (800f2f0 <tcp_keepalive+0x74>)
 800f290:	f640 0224 	movw	r2, #2084	@ 0x824
 800f294:	4917      	ldr	r1, [pc, #92]	@ (800f2f4 <tcp_keepalive+0x78>)
 800f296:	4818      	ldr	r0, [pc, #96]	@ (800f2f8 <tcp_keepalive+0x7c>)
 800f298:	f003 fcfa 	bl	8012c90 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800f29c:	7dfb      	ldrb	r3, [r7, #23]
 800f29e:	b29c      	uxth	r4, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7f8 f936 	bl	8007518 <lwip_htonl>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f7ff fe58 	bl	800ef68 <tcp_output_alloc_header>
 800f2b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f2c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f2c4:	e010      	b.n	800f2e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	6939      	ldr	r1, [r7, #16]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff fe89 	bl	800efe4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	6939      	ldr	r1, [r7, #16]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f7ff fec0 	bl	800f060 <tcp_output_control_segment>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f2e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	371c      	adds	r7, #28
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd90      	pop	{r4, r7, pc}
 800f2f0:	08015570 	.word	0x08015570
 800f2f4:	08015d4c 	.word	0x08015d4c
 800f2f8:	080155c4 	.word	0x080155c4

0800f2fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f2fc:	b590      	push	{r4, r7, lr}
 800f2fe:	b08b      	sub	sp, #44	@ 0x2c
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800f304:	2300      	movs	r3, #0
 800f306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d106      	bne.n	800f31e <tcp_zero_window_probe+0x22>
 800f310:	4b4c      	ldr	r3, [pc, #304]	@ (800f444 <tcp_zero_window_probe+0x148>)
 800f312:	f640 024f 	movw	r2, #2127	@ 0x84f
 800f316:	494c      	ldr	r1, [pc, #304]	@ (800f448 <tcp_zero_window_probe+0x14c>)
 800f318:	484c      	ldr	r0, [pc, #304]	@ (800f44c <tcp_zero_window_probe+0x150>)
 800f31a:	f003 fcb9 	bl	8012c90 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f322:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800f324:	6a3b      	ldr	r3, [r7, #32]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800f32a:	2300      	movs	r3, #0
 800f32c:	e086      	b.n	800f43c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f334:	2bff      	cmp	r3, #255	@ 0xff
 800f336:	d007      	beq.n	800f348 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800f33e:	3301      	adds	r3, #1
 800f340:	b2da      	uxtb	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	68db      	ldr	r3, [r3, #12]
 800f34c:	899b      	ldrh	r3, [r3, #12]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7f8 f8cd 	bl	80074f0 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d005      	beq.n	800f36e <tcp_zero_window_probe+0x72>
 800f362:	6a3b      	ldr	r3, [r7, #32]
 800f364:	891b      	ldrh	r3, [r3, #8]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d101      	bne.n	800f36e <tcp_zero_window_probe+0x72>
 800f36a:	2301      	movs	r3, #1
 800f36c:	e000      	b.n	800f370 <tcp_zero_window_probe+0x74>
 800f36e:	2300      	movs	r3, #0
 800f370:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f372:	7ffb      	ldrb	r3, [r7, #31]
 800f374:	2b00      	cmp	r3, #0
 800f376:	bf0c      	ite	eq
 800f378:	2301      	moveq	r3, #1
 800f37a:	2300      	movne	r3, #0
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800f380:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f384:	b299      	uxth	r1, r3
 800f386:	6a3b      	ldr	r3, [r7, #32]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	685b      	ldr	r3, [r3, #4]
 800f38c:	8bba      	ldrh	r2, [r7, #28]
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff fdea 	bl	800ef68 <tcp_output_alloc_header>
 800f394:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d102      	bne.n	800f3a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f39c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f3a0:	e04c      	b.n	800f43c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f3a2:	69bb      	ldr	r3, [r7, #24]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f3a8:	7ffb      	ldrb	r3, [r7, #31]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d011      	beq.n	800f3d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	899b      	ldrh	r3, [r3, #12]
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	b21b      	sxth	r3, r3
 800f3b6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f3ba:	b21c      	sxth	r4, r3
 800f3bc:	2011      	movs	r0, #17
 800f3be:	f7f8 f897 	bl	80074f0 <lwip_htons>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	b21b      	sxth	r3, r3
 800f3c6:	4323      	orrs	r3, r4
 800f3c8:	b21b      	sxth	r3, r3
 800f3ca:	b29a      	uxth	r2, r3
 800f3cc:	697b      	ldr	r3, [r7, #20]
 800f3ce:	819a      	strh	r2, [r3, #12]
 800f3d0:	e010      	b.n	800f3f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f3d2:	69bb      	ldr	r3, [r7, #24]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	3314      	adds	r3, #20
 800f3d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f3da:	6a3b      	ldr	r3, [r7, #32]
 800f3dc:	6858      	ldr	r0, [r3, #4]
 800f3de:	6a3b      	ldr	r3, [r7, #32]
 800f3e0:	685b      	ldr	r3, [r3, #4]
 800f3e2:	891a      	ldrh	r2, [r3, #8]
 800f3e4:	6a3b      	ldr	r3, [r7, #32]
 800f3e6:	891b      	ldrh	r3, [r3, #8]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	b29b      	uxth	r3, r3
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	6939      	ldr	r1, [r7, #16]
 800f3f0:	f7f9 ff64 	bl	80092bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f3f4:	6a3b      	ldr	r3, [r7, #32]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	685b      	ldr	r3, [r3, #4]
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7f8 f88c 	bl	8007518 <lwip_htonl>
 800f400:	4603      	mov	r3, r0
 800f402:	3301      	adds	r3, #1
 800f404:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	1ad3      	subs	r3, r2, r3
 800f40e:	2b00      	cmp	r3, #0
 800f410:	da02      	bge.n	800f418 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800f418:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f41c:	2200      	movs	r2, #0
 800f41e:	69b9      	ldr	r1, [r7, #24]
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f7ff fddf 	bl	800efe4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	3304      	adds	r3, #4
 800f42c:	69b9      	ldr	r1, [r7, #24]
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff fe16 	bl	800f060 <tcp_output_control_segment>
 800f434:	4603      	mov	r3, r0
 800f436:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f438:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	372c      	adds	r7, #44	@ 0x2c
 800f440:	46bd      	mov	sp, r7
 800f442:	bd90      	pop	{r4, r7, pc}
 800f444:	08015570 	.word	0x08015570
 800f448:	08015d68 	.word	0x08015d68
 800f44c:	080155c4 	.word	0x080155c4

0800f450 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f458:	f7f9 ffec 	bl	8009434 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f45c:	4b0a      	ldr	r3, [pc, #40]	@ (800f488 <tcpip_tcp_timer+0x38>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d103      	bne.n	800f46c <tcpip_tcp_timer+0x1c>
 800f464:	4b09      	ldr	r3, [pc, #36]	@ (800f48c <tcpip_tcp_timer+0x3c>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d005      	beq.n	800f478 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f46c:	2200      	movs	r2, #0
 800f46e:	4908      	ldr	r1, [pc, #32]	@ (800f490 <tcpip_tcp_timer+0x40>)
 800f470:	20fa      	movs	r0, #250	@ 0xfa
 800f472:	f000 f8f3 	bl	800f65c <sys_timeout>
 800f476:	e003      	b.n	800f480 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f478:	4b06      	ldr	r3, [pc, #24]	@ (800f494 <tcpip_tcp_timer+0x44>)
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]
  }
}
 800f47e:	bf00      	nop
 800f480:	bf00      	nop
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	200077f4 	.word	0x200077f4
 800f48c:	200077f8 	.word	0x200077f8
 800f490:	0800f451 	.word	0x0800f451
 800f494:	20007840 	.word	0x20007840

0800f498 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f49c:	4b0a      	ldr	r3, [pc, #40]	@ (800f4c8 <tcp_timer_needed+0x30>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d10f      	bne.n	800f4c4 <tcp_timer_needed+0x2c>
 800f4a4:	4b09      	ldr	r3, [pc, #36]	@ (800f4cc <tcp_timer_needed+0x34>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d103      	bne.n	800f4b4 <tcp_timer_needed+0x1c>
 800f4ac:	4b08      	ldr	r3, [pc, #32]	@ (800f4d0 <tcp_timer_needed+0x38>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d007      	beq.n	800f4c4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f4b4:	4b04      	ldr	r3, [pc, #16]	@ (800f4c8 <tcp_timer_needed+0x30>)
 800f4b6:	2201      	movs	r2, #1
 800f4b8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	4905      	ldr	r1, [pc, #20]	@ (800f4d4 <tcp_timer_needed+0x3c>)
 800f4be:	20fa      	movs	r0, #250	@ 0xfa
 800f4c0:	f000 f8cc 	bl	800f65c <sys_timeout>
  }
}
 800f4c4:	bf00      	nop
 800f4c6:	bd80      	pop	{r7, pc}
 800f4c8:	20007840 	.word	0x20007840
 800f4cc:	200077f4 	.word	0x200077f4
 800f4d0:	200077f8 	.word	0x200077f8
 800f4d4:	0800f451 	.word	0x0800f451

0800f4d8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b086      	sub	sp, #24
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	60f8      	str	r0, [r7, #12]
 800f4e0:	60b9      	str	r1, [r7, #8]
 800f4e2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f4e4:	200a      	movs	r0, #10
 800f4e6:	f7f8 fe5b 	bl	80081a0 <memp_malloc>
 800f4ea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d109      	bne.n	800f506 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f4f2:	693b      	ldr	r3, [r7, #16]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d151      	bne.n	800f59c <sys_timeout_abs+0xc4>
 800f4f8:	4b2a      	ldr	r3, [pc, #168]	@ (800f5a4 <sys_timeout_abs+0xcc>)
 800f4fa:	22be      	movs	r2, #190	@ 0xbe
 800f4fc:	492a      	ldr	r1, [pc, #168]	@ (800f5a8 <sys_timeout_abs+0xd0>)
 800f4fe:	482b      	ldr	r0, [pc, #172]	@ (800f5ac <sys_timeout_abs+0xd4>)
 800f500:	f003 fbc6 	bl	8012c90 <iprintf>
    return;
 800f504:	e04a      	b.n	800f59c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	2200      	movs	r2, #0
 800f50a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	68ba      	ldr	r2, [r7, #8]
 800f510:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f51e:	4b24      	ldr	r3, [pc, #144]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d103      	bne.n	800f52e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800f526:	4a22      	ldr	r2, [pc, #136]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	6013      	str	r3, [r2, #0]
    return;
 800f52c:	e037      	b.n	800f59e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	685a      	ldr	r2, [r3, #4]
 800f532:	4b1f      	ldr	r3, [pc, #124]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	1ad3      	subs	r3, r2, r3
 800f53a:	0fdb      	lsrs	r3, r3, #31
 800f53c:	f003 0301 	and.w	r3, r3, #1
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b00      	cmp	r3, #0
 800f544:	d007      	beq.n	800f556 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800f546:	4b1a      	ldr	r3, [pc, #104]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f54e:	4a18      	ldr	r2, [pc, #96]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	6013      	str	r3, [r2, #0]
 800f554:	e023      	b.n	800f59e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f556:	4b16      	ldr	r3, [pc, #88]	@ (800f5b0 <sys_timeout_abs+0xd8>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e01a      	b.n	800f594 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00b      	beq.n	800f57e <sys_timeout_abs+0xa6>
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	0fdb      	lsrs	r3, r3, #31
 800f574:	f003 0301 	and.w	r3, r3, #1
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d007      	beq.n	800f58e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	681a      	ldr	r2, [r3, #0]
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	693a      	ldr	r2, [r7, #16]
 800f58a:	601a      	str	r2, [r3, #0]
        break;
 800f58c:	e007      	b.n	800f59e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	617b      	str	r3, [r7, #20]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d1e1      	bne.n	800f55e <sys_timeout_abs+0x86>
 800f59a:	e000      	b.n	800f59e <sys_timeout_abs+0xc6>
    return;
 800f59c:	bf00      	nop
      }
    }
  }
}
 800f59e:	3718      	adds	r7, #24
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	08015d8c 	.word	0x08015d8c
 800f5a8:	08015dc0 	.word	0x08015dc0
 800f5ac:	08015e00 	.word	0x08015e00
 800f5b0:	20007838 	.word	0x20007838

0800f5b4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	4798      	blx	r3

  now = sys_now();
 800f5c6:	f7f4 f974 	bl	80038b2 <sys_now>
 800f5ca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	4b0f      	ldr	r3, [pc, #60]	@ (800f610 <lwip_cyclic_timer+0x5c>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4413      	add	r3, r2
 800f5d6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800f5d8:	68fa      	ldr	r2, [r7, #12]
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	1ad3      	subs	r3, r2, r3
 800f5de:	0fdb      	lsrs	r3, r3, #31
 800f5e0:	f003 0301 	and.w	r3, r3, #1
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	681a      	ldr	r2, [r3, #0]
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	4907      	ldr	r1, [pc, #28]	@ (800f614 <lwip_cyclic_timer+0x60>)
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff ff6e 	bl	800f4d8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800f5fc:	e004      	b.n	800f608 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	4904      	ldr	r1, [pc, #16]	@ (800f614 <lwip_cyclic_timer+0x60>)
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f7ff ff68 	bl	800f4d8 <sys_timeout_abs>
}
 800f608:	bf00      	nop
 800f60a:	3718      	adds	r7, #24
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	2000783c 	.word	0x2000783c
 800f614:	0800f5b5 	.word	0x0800f5b5

0800f618 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f61e:	2301      	movs	r3, #1
 800f620:	607b      	str	r3, [r7, #4]
 800f622:	e00e      	b.n	800f642 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800f624:	4a0b      	ldr	r2, [pc, #44]	@ (800f654 <sys_timeouts_init+0x3c>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	00db      	lsls	r3, r3, #3
 800f630:	4a08      	ldr	r2, [pc, #32]	@ (800f654 <sys_timeouts_init+0x3c>)
 800f632:	4413      	add	r3, r2
 800f634:	461a      	mov	r2, r3
 800f636:	4908      	ldr	r1, [pc, #32]	@ (800f658 <sys_timeouts_init+0x40>)
 800f638:	f000 f810 	bl	800f65c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3301      	adds	r3, #1
 800f640:	607b      	str	r3, [r7, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2b02      	cmp	r3, #2
 800f646:	d9ed      	bls.n	800f624 <sys_timeouts_init+0xc>
  }
}
 800f648:	bf00      	nop
 800f64a:	bf00      	nop
 800f64c:	3708      	adds	r7, #8
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	08017870 	.word	0x08017870
 800f658:	0800f5b5 	.word	0x0800f5b5

0800f65c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b086      	sub	sp, #24
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f66e:	d306      	bcc.n	800f67e <sys_timeout+0x22>
 800f670:	4b0a      	ldr	r3, [pc, #40]	@ (800f69c <sys_timeout+0x40>)
 800f672:	f240 1229 	movw	r2, #297	@ 0x129
 800f676:	490a      	ldr	r1, [pc, #40]	@ (800f6a0 <sys_timeout+0x44>)
 800f678:	480a      	ldr	r0, [pc, #40]	@ (800f6a4 <sys_timeout+0x48>)
 800f67a:	f003 fb09 	bl	8012c90 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800f67e:	f7f4 f918 	bl	80038b2 <sys_now>
 800f682:	4602      	mov	r2, r0
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	4413      	add	r3, r2
 800f688:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800f68a:	687a      	ldr	r2, [r7, #4]
 800f68c:	68b9      	ldr	r1, [r7, #8]
 800f68e:	6978      	ldr	r0, [r7, #20]
 800f690:	f7ff ff22 	bl	800f4d8 <sys_timeout_abs>
#endif
}
 800f694:	bf00      	nop
 800f696:	3718      	adds	r7, #24
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08015d8c 	.word	0x08015d8c
 800f6a0:	08015e28 	.word	0x08015e28
 800f6a4:	08015e00 	.word	0x08015e00

0800f6a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800f6ae:	f7f4 f900 	bl	80038b2 <sys_now>
 800f6b2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800f6b4:	4b17      	ldr	r3, [pc, #92]	@ (800f714 <sys_check_timeouts+0x6c>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d022      	beq.n	800f706 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800f6c0:	68bb      	ldr	r3, [r7, #8]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	68fa      	ldr	r2, [r7, #12]
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	0fdb      	lsrs	r3, r3, #31
 800f6ca:	f003 0301 	and.w	r3, r3, #1
 800f6ce:	b2db      	uxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d11a      	bne.n	800f70a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a0e      	ldr	r2, [pc, #56]	@ (800f714 <sys_check_timeouts+0x6c>)
 800f6da:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4a0a      	ldr	r2, [pc, #40]	@ (800f718 <sys_check_timeouts+0x70>)
 800f6ee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f6f0:	68b9      	ldr	r1, [r7, #8]
 800f6f2:	200a      	movs	r0, #10
 800f6f4:	f7f8 fda6 	bl	8008244 <memp_free>
    if (handler != NULL) {
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d0da      	beq.n	800f6b4 <sys_check_timeouts+0xc>
      handler(arg);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6838      	ldr	r0, [r7, #0]
 800f702:	4798      	blx	r3
  do {
 800f704:	e7d6      	b.n	800f6b4 <sys_check_timeouts+0xc>
      return;
 800f706:	bf00      	nop
 800f708:	e000      	b.n	800f70c <sys_check_timeouts+0x64>
      return;
 800f70a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800f70c:	3710      	adds	r7, #16
 800f70e:	46bd      	mov	sp, r7
 800f710:	bd80      	pop	{r7, pc}
 800f712:	bf00      	nop
 800f714:	20007838 	.word	0x20007838
 800f718:	2000783c 	.word	0x2000783c

0800f71c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800f722:	4b16      	ldr	r3, [pc, #88]	@ (800f77c <sys_timeouts_sleeptime+0x60>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d102      	bne.n	800f730 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800f72a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f72e:	e020      	b.n	800f772 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800f730:	f7f4 f8bf 	bl	80038b2 <sys_now>
 800f734:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800f736:	4b11      	ldr	r3, [pc, #68]	@ (800f77c <sys_timeouts_sleeptime+0x60>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	685a      	ldr	r2, [r3, #4]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	1ad3      	subs	r3, r2, r3
 800f740:	0fdb      	lsrs	r3, r3, #31
 800f742:	f003 0301 	and.w	r3, r3, #1
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <sys_timeouts_sleeptime+0x34>
    return 0;
 800f74c:	2300      	movs	r3, #0
 800f74e:	e010      	b.n	800f772 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800f750:	4b0a      	ldr	r3, [pc, #40]	@ (800f77c <sys_timeouts_sleeptime+0x60>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	1ad3      	subs	r3, r2, r3
 800f75a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	da06      	bge.n	800f770 <sys_timeouts_sleeptime+0x54>
 800f762:	4b07      	ldr	r3, [pc, #28]	@ (800f780 <sys_timeouts_sleeptime+0x64>)
 800f764:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800f768:	4906      	ldr	r1, [pc, #24]	@ (800f784 <sys_timeouts_sleeptime+0x68>)
 800f76a:	4807      	ldr	r0, [pc, #28]	@ (800f788 <sys_timeouts_sleeptime+0x6c>)
 800f76c:	f003 fa90 	bl	8012c90 <iprintf>
    return ret;
 800f770:	683b      	ldr	r3, [r7, #0]
  }
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20007838 	.word	0x20007838
 800f780:	08015d8c 	.word	0x08015d8c
 800f784:	08015e60 	.word	0x08015e60
 800f788:	08015e00 	.word	0x08015e00

0800f78c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f790:	f003 f97e 	bl	8012a90 <rand>
 800f794:	4603      	mov	r3, r0
 800f796:	b29b      	uxth	r3, r3
 800f798:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f79c:	b29b      	uxth	r3, r3
 800f79e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	4b01      	ldr	r3, [pc, #4]	@ (800f7ac <udp_init+0x20>)
 800f7a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f7a8:	bf00      	nop
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	20000018 	.word	0x20000018

0800f7b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f7ba:	4b17      	ldr	r3, [pc, #92]	@ (800f818 <udp_new_port+0x68>)
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	1c5a      	adds	r2, r3, #1
 800f7c0:	b291      	uxth	r1, r2
 800f7c2:	4a15      	ldr	r2, [pc, #84]	@ (800f818 <udp_new_port+0x68>)
 800f7c4:	8011      	strh	r1, [r2, #0]
 800f7c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d103      	bne.n	800f7d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f7ce:	4b12      	ldr	r3, [pc, #72]	@ (800f818 <udp_new_port+0x68>)
 800f7d0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800f7d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d6:	4b11      	ldr	r3, [pc, #68]	@ (800f81c <udp_new_port+0x6c>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	603b      	str	r3, [r7, #0]
 800f7dc:	e011      	b.n	800f802 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	8a5a      	ldrh	r2, [r3, #18]
 800f7e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f818 <udp_new_port+0x68>)
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d108      	bne.n	800f7fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f7ea:	88fb      	ldrh	r3, [r7, #6]
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	80fb      	strh	r3, [r7, #6]
 800f7f0:	88fb      	ldrh	r3, [r7, #6]
 800f7f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f7f6:	d3e0      	bcc.n	800f7ba <udp_new_port+0xa>
        return 0;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	e007      	b.n	800f80c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	68db      	ldr	r3, [r3, #12]
 800f800:	603b      	str	r3, [r7, #0]
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d1ea      	bne.n	800f7de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f808:	4b03      	ldr	r3, [pc, #12]	@ (800f818 <udp_new_port+0x68>)
 800f80a:	881b      	ldrh	r3, [r3, #0]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	bc80      	pop	{r7}
 800f814:	4770      	bx	lr
 800f816:	bf00      	nop
 800f818:	20000018 	.word	0x20000018
 800f81c:	20007844 	.word	0x20007844

0800f820 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b084      	sub	sp, #16
 800f824:	af00      	add	r7, sp, #0
 800f826:	60f8      	str	r0, [r7, #12]
 800f828:	60b9      	str	r1, [r7, #8]
 800f82a:	4613      	mov	r3, r2
 800f82c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d105      	bne.n	800f840 <udp_input_local_match+0x20>
 800f834:	4b27      	ldr	r3, [pc, #156]	@ (800f8d4 <udp_input_local_match+0xb4>)
 800f836:	2287      	movs	r2, #135	@ 0x87
 800f838:	4927      	ldr	r1, [pc, #156]	@ (800f8d8 <udp_input_local_match+0xb8>)
 800f83a:	4828      	ldr	r0, [pc, #160]	@ (800f8dc <udp_input_local_match+0xbc>)
 800f83c:	f003 fa28 	bl	8012c90 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d105      	bne.n	800f852 <udp_input_local_match+0x32>
 800f846:	4b23      	ldr	r3, [pc, #140]	@ (800f8d4 <udp_input_local_match+0xb4>)
 800f848:	2288      	movs	r2, #136	@ 0x88
 800f84a:	4925      	ldr	r1, [pc, #148]	@ (800f8e0 <udp_input_local_match+0xc0>)
 800f84c:	4823      	ldr	r0, [pc, #140]	@ (800f8dc <udp_input_local_match+0xbc>)
 800f84e:	f003 fa1f 	bl	8012c90 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	7a1b      	ldrb	r3, [r3, #8]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d00b      	beq.n	800f872 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	7a1a      	ldrb	r2, [r3, #8]
 800f85e:	4b21      	ldr	r3, [pc, #132]	@ (800f8e4 <udp_input_local_match+0xc4>)
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f866:	3301      	adds	r3, #1
 800f868:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d001      	beq.n	800f872 <udp_input_local_match+0x52>
    return 0;
 800f86e:	2300      	movs	r3, #0
 800f870:	e02b      	b.n	800f8ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f872:	79fb      	ldrb	r3, [r7, #7]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d018      	beq.n	800f8aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d013      	beq.n	800f8a6 <udp_input_local_match+0x86>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00f      	beq.n	800f8a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f886:	4b17      	ldr	r3, [pc, #92]	@ (800f8e4 <udp_input_local_match+0xc4>)
 800f888:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f88a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f88e:	d00a      	beq.n	800f8a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	4b13      	ldr	r3, [pc, #76]	@ (800f8e4 <udp_input_local_match+0xc4>)
 800f896:	695b      	ldr	r3, [r3, #20]
 800f898:	405a      	eors	r2, r3
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	3308      	adds	r3, #8
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d110      	bne.n	800f8c8 <udp_input_local_match+0xa8>
          return 1;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e00f      	b.n	800f8ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d009      	beq.n	800f8c4 <udp_input_local_match+0xa4>
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d005      	beq.n	800f8c4 <udp_input_local_match+0xa4>
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	4b09      	ldr	r3, [pc, #36]	@ (800f8e4 <udp_input_local_match+0xc4>)
 800f8be:	695b      	ldr	r3, [r3, #20]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d101      	bne.n	800f8c8 <udp_input_local_match+0xa8>
        return 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e000      	b.n	800f8ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f8c8:	2300      	movs	r3, #0
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	08015e74 	.word	0x08015e74
 800f8d8:	08015ea4 	.word	0x08015ea4
 800f8dc:	08015ec8 	.word	0x08015ec8
 800f8e0:	08015ef0 	.word	0x08015ef0
 800f8e4:	200046e8 	.word	0x200046e8

0800f8e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f8e8:	b590      	push	{r4, r7, lr}
 800f8ea:	b08d      	sub	sp, #52	@ 0x34
 800f8ec:	af02      	add	r7, sp, #8
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d105      	bne.n	800f908 <udp_input+0x20>
 800f8fc:	4b7c      	ldr	r3, [pc, #496]	@ (800faf0 <udp_input+0x208>)
 800f8fe:	22cf      	movs	r2, #207	@ 0xcf
 800f900:	497c      	ldr	r1, [pc, #496]	@ (800faf4 <udp_input+0x20c>)
 800f902:	487d      	ldr	r0, [pc, #500]	@ (800faf8 <udp_input+0x210>)
 800f904:	f003 f9c4 	bl	8012c90 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <udp_input+0x32>
 800f90e:	4b78      	ldr	r3, [pc, #480]	@ (800faf0 <udp_input+0x208>)
 800f910:	22d0      	movs	r2, #208	@ 0xd0
 800f912:	497a      	ldr	r1, [pc, #488]	@ (800fafc <udp_input+0x214>)
 800f914:	4878      	ldr	r0, [pc, #480]	@ (800faf8 <udp_input+0x210>)
 800f916:	f003 f9bb 	bl	8012c90 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	895b      	ldrh	r3, [r3, #10]
 800f91e:	2b07      	cmp	r3, #7
 800f920:	d803      	bhi.n	800f92a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f7f9 fac6 	bl	8008eb4 <pbuf_free>
    goto end;
 800f928:	e0de      	b.n	800fae8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	685b      	ldr	r3, [r3, #4]
 800f92e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f930:	4b73      	ldr	r3, [pc, #460]	@ (800fb00 <udp_input+0x218>)
 800f932:	695b      	ldr	r3, [r3, #20]
 800f934:	4a72      	ldr	r2, [pc, #456]	@ (800fb00 <udp_input+0x218>)
 800f936:	6812      	ldr	r2, [r2, #0]
 800f938:	4611      	mov	r1, r2
 800f93a:	4618      	mov	r0, r3
 800f93c:	f001 fd34 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 800f940:	4603      	mov	r3, r0
 800f942:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	881b      	ldrh	r3, [r3, #0]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7f7 fdd0 	bl	80074f0 <lwip_htons>
 800f950:	4603      	mov	r3, r0
 800f952:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	885b      	ldrh	r3, [r3, #2]
 800f958:	b29b      	uxth	r3, r3
 800f95a:	4618      	mov	r0, r3
 800f95c:	f7f7 fdc8 	bl	80074f0 <lwip_htons>
 800f960:	4603      	mov	r3, r0
 800f962:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f964:	2300      	movs	r3, #0
 800f966:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f968:	2300      	movs	r3, #0
 800f96a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f96c:	2300      	movs	r3, #0
 800f96e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f970:	4b64      	ldr	r3, [pc, #400]	@ (800fb04 <udp_input+0x21c>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	627b      	str	r3, [r7, #36]	@ 0x24
 800f976:	e054      	b.n	800fa22 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f97a:	8a5b      	ldrh	r3, [r3, #18]
 800f97c:	89fa      	ldrh	r2, [r7, #14]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d14a      	bne.n	800fa18 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f982:	7cfb      	ldrb	r3, [r7, #19]
 800f984:	461a      	mov	r2, r3
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f98a:	f7ff ff49 	bl	800f820 <udp_input_local_match>
 800f98e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f990:	2b00      	cmp	r3, #0
 800f992:	d041      	beq.n	800fa18 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f996:	7c1b      	ldrb	r3, [r3, #16]
 800f998:	f003 0304 	and.w	r3, r3, #4
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d11d      	bne.n	800f9dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d102      	bne.n	800f9ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9a8:	61fb      	str	r3, [r7, #28]
 800f9aa:	e017      	b.n	800f9dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f9ac:	7cfb      	ldrb	r3, [r7, #19]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d014      	beq.n	800f9dc <udp_input+0xf4>
 800f9b2:	4b53      	ldr	r3, [pc, #332]	@ (800fb00 <udp_input+0x218>)
 800f9b4:	695b      	ldr	r3, [r3, #20]
 800f9b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f9ba:	d10f      	bne.n	800f9dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	681a      	ldr	r2, [r3, #0]
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d008      	beq.n	800f9dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9cc:	681a      	ldr	r2, [r3, #0]
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	3304      	adds	r3, #4
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d101      	bne.n	800f9dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9de:	8a9b      	ldrh	r3, [r3, #20]
 800f9e0:	8a3a      	ldrh	r2, [r7, #16]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d118      	bne.n	800fa18 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	4b43      	ldr	r3, [pc, #268]	@ (800fb00 <udp_input+0x218>)
 800f9f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d10e      	bne.n	800fa18 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f9fa:	6a3b      	ldr	r3, [r7, #32]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d014      	beq.n	800fa2a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800fa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa02:	68da      	ldr	r2, [r3, #12]
 800fa04:	6a3b      	ldr	r3, [r7, #32]
 800fa06:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800fa08:	4b3e      	ldr	r3, [pc, #248]	@ (800fb04 <udp_input+0x21c>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa0e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800fa10:	4a3c      	ldr	r2, [pc, #240]	@ (800fb04 <udp_input+0x21c>)
 800fa12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa14:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800fa16:	e008      	b.n	800fa2a <udp_input+0x142>
      }
    }

    prev = pcb;
 800fa18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1a7      	bne.n	800f978 <udp_input+0x90>
 800fa28:	e000      	b.n	800fa2c <udp_input+0x144>
        break;
 800fa2a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800fa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d101      	bne.n	800fa36 <udp_input+0x14e>
    pcb = uncon_pcb;
 800fa32:	69fb      	ldr	r3, [r7, #28]
 800fa34:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800fa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d002      	beq.n	800fa42 <udp_input+0x15a>
    for_us = 1;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	76fb      	strb	r3, [r7, #27]
 800fa40:	e00a      	b.n	800fa58 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	3304      	adds	r3, #4
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	4b2d      	ldr	r3, [pc, #180]	@ (800fb00 <udp_input+0x218>)
 800fa4a:	695b      	ldr	r3, [r3, #20]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	bf0c      	ite	eq
 800fa50:	2301      	moveq	r3, #1
 800fa52:	2300      	movne	r3, #0
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800fa58:	7efb      	ldrb	r3, [r7, #27]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d041      	beq.n	800fae2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800fa5e:	2108      	movs	r1, #8
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7f9 f9a1 	bl	8008da8 <pbuf_remove_header>
 800fa66:	4603      	mov	r3, r0
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00a      	beq.n	800fa82 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800fa6c:	4b20      	ldr	r3, [pc, #128]	@ (800faf0 <udp_input+0x208>)
 800fa6e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800fa72:	4925      	ldr	r1, [pc, #148]	@ (800fb08 <udp_input+0x220>)
 800fa74:	4820      	ldr	r0, [pc, #128]	@ (800faf8 <udp_input+0x210>)
 800fa76:	f003 f90b 	bl	8012c90 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	f7f9 fa1a 	bl	8008eb4 <pbuf_free>
      goto end;
 800fa80:	e032      	b.n	800fae8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800fa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d012      	beq.n	800faae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800fa88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa8a:	699b      	ldr	r3, [r3, #24]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00a      	beq.n	800faa6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800fa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa92:	699c      	ldr	r4, [r3, #24]
 800fa94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa96:	69d8      	ldr	r0, [r3, #28]
 800fa98:	8a3b      	ldrh	r3, [r7, #16]
 800fa9a:	9300      	str	r3, [sp, #0]
 800fa9c:	4b1b      	ldr	r3, [pc, #108]	@ (800fb0c <udp_input+0x224>)
 800fa9e:	687a      	ldr	r2, [r7, #4]
 800faa0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800faa2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800faa4:	e021      	b.n	800faea <udp_input+0x202>
        pbuf_free(p);
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7f9 fa04 	bl	8008eb4 <pbuf_free>
        goto end;
 800faac:	e01c      	b.n	800fae8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800faae:	7cfb      	ldrb	r3, [r7, #19]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d112      	bne.n	800fada <udp_input+0x1f2>
 800fab4:	4b12      	ldr	r3, [pc, #72]	@ (800fb00 <udp_input+0x218>)
 800fab6:	695b      	ldr	r3, [r3, #20]
 800fab8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800fabc:	2be0      	cmp	r3, #224	@ 0xe0
 800fabe:	d00c      	beq.n	800fada <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800fac0:	4b0f      	ldr	r3, [pc, #60]	@ (800fb00 <udp_input+0x218>)
 800fac2:	899b      	ldrh	r3, [r3, #12]
 800fac4:	3308      	adds	r3, #8
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	b21b      	sxth	r3, r3
 800faca:	4619      	mov	r1, r3
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f7f9 f9de 	bl	8008e8e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800fad2:	2103      	movs	r1, #3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f001 f8d9 	bl	8010c8c <icmp_dest_unreach>
      pbuf_free(p);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f7f9 f9ea 	bl	8008eb4 <pbuf_free>
  return;
 800fae0:	e003      	b.n	800faea <udp_input+0x202>
    pbuf_free(p);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7f9 f9e6 	bl	8008eb4 <pbuf_free>
  return;
 800fae8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800faea:	372c      	adds	r7, #44	@ 0x2c
 800faec:	46bd      	mov	sp, r7
 800faee:	bd90      	pop	{r4, r7, pc}
 800faf0:	08015e74 	.word	0x08015e74
 800faf4:	08015f18 	.word	0x08015f18
 800faf8:	08015ec8 	.word	0x08015ec8
 800fafc:	08015f30 	.word	0x08015f30
 800fb00:	200046e8 	.word	0x200046e8
 800fb04:	20007844 	.word	0x20007844
 800fb08:	08015f4c 	.word	0x08015f4c
 800fb0c:	200046f8 	.word	0x200046f8

0800fb10 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b088      	sub	sp, #32
 800fb14:	af02      	add	r7, sp, #8
 800fb16:	60f8      	str	r0, [r7, #12]
 800fb18:	60b9      	str	r1, [r7, #8]
 800fb1a:	607a      	str	r2, [r7, #4]
 800fb1c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d109      	bne.n	800fb38 <udp_sendto+0x28>
 800fb24:	4b23      	ldr	r3, [pc, #140]	@ (800fbb4 <udp_sendto+0xa4>)
 800fb26:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800fb2a:	4923      	ldr	r1, [pc, #140]	@ (800fbb8 <udp_sendto+0xa8>)
 800fb2c:	4823      	ldr	r0, [pc, #140]	@ (800fbbc <udp_sendto+0xac>)
 800fb2e:	f003 f8af 	bl	8012c90 <iprintf>
 800fb32:	f06f 030f 	mvn.w	r3, #15
 800fb36:	e038      	b.n	800fbaa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d109      	bne.n	800fb52 <udp_sendto+0x42>
 800fb3e:	4b1d      	ldr	r3, [pc, #116]	@ (800fbb4 <udp_sendto+0xa4>)
 800fb40:	f240 2219 	movw	r2, #537	@ 0x219
 800fb44:	491e      	ldr	r1, [pc, #120]	@ (800fbc0 <udp_sendto+0xb0>)
 800fb46:	481d      	ldr	r0, [pc, #116]	@ (800fbbc <udp_sendto+0xac>)
 800fb48:	f003 f8a2 	bl	8012c90 <iprintf>
 800fb4c:	f06f 030f 	mvn.w	r3, #15
 800fb50:	e02b      	b.n	800fbaa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d109      	bne.n	800fb6c <udp_sendto+0x5c>
 800fb58:	4b16      	ldr	r3, [pc, #88]	@ (800fbb4 <udp_sendto+0xa4>)
 800fb5a:	f240 221a 	movw	r2, #538	@ 0x21a
 800fb5e:	4919      	ldr	r1, [pc, #100]	@ (800fbc4 <udp_sendto+0xb4>)
 800fb60:	4816      	ldr	r0, [pc, #88]	@ (800fbbc <udp_sendto+0xac>)
 800fb62:	f003 f895 	bl	8012c90 <iprintf>
 800fb66:	f06f 030f 	mvn.w	r3, #15
 800fb6a:	e01e      	b.n	800fbaa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	7a1b      	ldrb	r3, [r3, #8]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d006      	beq.n	800fb82 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	7a1b      	ldrb	r3, [r3, #8]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7f8 fe0f 	bl	800879c <netif_get_by_index>
 800fb7e:	6178      	str	r0, [r7, #20]
 800fb80:	e003      	b.n	800fb8a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f001 f916 	bl	8010db4 <ip4_route>
 800fb88:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d102      	bne.n	800fb96 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800fb90:	f06f 0303 	mvn.w	r3, #3
 800fb94:	e009      	b.n	800fbaa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800fb96:	887a      	ldrh	r2, [r7, #2]
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	9300      	str	r3, [sp, #0]
 800fb9c:	4613      	mov	r3, r2
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	68b9      	ldr	r1, [r7, #8]
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f000 f810 	bl	800fbc8 <udp_sendto_if>
 800fba8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3718      	adds	r7, #24
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	08015e74 	.word	0x08015e74
 800fbb8:	08015f98 	.word	0x08015f98
 800fbbc:	08015ec8 	.word	0x08015ec8
 800fbc0:	08015fb0 	.word	0x08015fb0
 800fbc4:	08015fcc 	.word	0x08015fcc

0800fbc8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b088      	sub	sp, #32
 800fbcc:	af02      	add	r7, sp, #8
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d109      	bne.n	800fbf0 <udp_sendto_if+0x28>
 800fbdc:	4b2e      	ldr	r3, [pc, #184]	@ (800fc98 <udp_sendto_if+0xd0>)
 800fbde:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fbe2:	492e      	ldr	r1, [pc, #184]	@ (800fc9c <udp_sendto_if+0xd4>)
 800fbe4:	482e      	ldr	r0, [pc, #184]	@ (800fca0 <udp_sendto_if+0xd8>)
 800fbe6:	f003 f853 	bl	8012c90 <iprintf>
 800fbea:	f06f 030f 	mvn.w	r3, #15
 800fbee:	e04f      	b.n	800fc90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d109      	bne.n	800fc0a <udp_sendto_if+0x42>
 800fbf6:	4b28      	ldr	r3, [pc, #160]	@ (800fc98 <udp_sendto_if+0xd0>)
 800fbf8:	f240 2281 	movw	r2, #641	@ 0x281
 800fbfc:	4929      	ldr	r1, [pc, #164]	@ (800fca4 <udp_sendto_if+0xdc>)
 800fbfe:	4828      	ldr	r0, [pc, #160]	@ (800fca0 <udp_sendto_if+0xd8>)
 800fc00:	f003 f846 	bl	8012c90 <iprintf>
 800fc04:	f06f 030f 	mvn.w	r3, #15
 800fc08:	e042      	b.n	800fc90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d109      	bne.n	800fc24 <udp_sendto_if+0x5c>
 800fc10:	4b21      	ldr	r3, [pc, #132]	@ (800fc98 <udp_sendto_if+0xd0>)
 800fc12:	f240 2282 	movw	r2, #642	@ 0x282
 800fc16:	4924      	ldr	r1, [pc, #144]	@ (800fca8 <udp_sendto_if+0xe0>)
 800fc18:	4821      	ldr	r0, [pc, #132]	@ (800fca0 <udp_sendto_if+0xd8>)
 800fc1a:	f003 f839 	bl	8012c90 <iprintf>
 800fc1e:	f06f 030f 	mvn.w	r3, #15
 800fc22:	e035      	b.n	800fc90 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800fc24:	6a3b      	ldr	r3, [r7, #32]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d109      	bne.n	800fc3e <udp_sendto_if+0x76>
 800fc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800fc98 <udp_sendto_if+0xd0>)
 800fc2c:	f240 2283 	movw	r2, #643	@ 0x283
 800fc30:	491e      	ldr	r1, [pc, #120]	@ (800fcac <udp_sendto_if+0xe4>)
 800fc32:	481b      	ldr	r0, [pc, #108]	@ (800fca0 <udp_sendto_if+0xd8>)
 800fc34:	f003 f82c 	bl	8012c90 <iprintf>
 800fc38:	f06f 030f 	mvn.w	r3, #15
 800fc3c:	e028      	b.n	800fc90 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d009      	beq.n	800fc58 <udp_sendto_if+0x90>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d005      	beq.n	800fc58 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800fc54:	2be0      	cmp	r3, #224	@ 0xe0
 800fc56:	d103      	bne.n	800fc60 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800fc58:	6a3b      	ldr	r3, [r7, #32]
 800fc5a:	3304      	adds	r3, #4
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	e00b      	b.n	800fc78 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	6a3b      	ldr	r3, [r7, #32]
 800fc66:	3304      	adds	r3, #4
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d002      	beq.n	800fc74 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800fc6e:	f06f 0303 	mvn.w	r3, #3
 800fc72:	e00d      	b.n	800fc90 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800fc78:	887a      	ldrh	r2, [r7, #2]
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	9301      	str	r3, [sp, #4]
 800fc7e:	6a3b      	ldr	r3, [r7, #32]
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	4613      	mov	r3, r2
 800fc84:	687a      	ldr	r2, [r7, #4]
 800fc86:	68b9      	ldr	r1, [r7, #8]
 800fc88:	68f8      	ldr	r0, [r7, #12]
 800fc8a:	f000 f811 	bl	800fcb0 <udp_sendto_if_src>
 800fc8e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}
 800fc98:	08015e74 	.word	0x08015e74
 800fc9c:	08015fe8 	.word	0x08015fe8
 800fca0:	08015ec8 	.word	0x08015ec8
 800fca4:	08016004 	.word	0x08016004
 800fca8:	08016020 	.word	0x08016020
 800fcac:	08016040 	.word	0x08016040

0800fcb0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b08c      	sub	sp, #48	@ 0x30
 800fcb4:	af04      	add	r7, sp, #16
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
 800fcbc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d109      	bne.n	800fcd8 <udp_sendto_if_src+0x28>
 800fcc4:	4b72      	ldr	r3, [pc, #456]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fcc6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fcca:	4972      	ldr	r1, [pc, #456]	@ (800fe94 <udp_sendto_if_src+0x1e4>)
 800fccc:	4872      	ldr	r0, [pc, #456]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fcce:	f002 ffdf 	bl	8012c90 <iprintf>
 800fcd2:	f06f 030f 	mvn.w	r3, #15
 800fcd6:	e0d6      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d109      	bne.n	800fcf2 <udp_sendto_if_src+0x42>
 800fcde:	4b6c      	ldr	r3, [pc, #432]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fce0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800fce4:	496d      	ldr	r1, [pc, #436]	@ (800fe9c <udp_sendto_if_src+0x1ec>)
 800fce6:	486c      	ldr	r0, [pc, #432]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fce8:	f002 ffd2 	bl	8012c90 <iprintf>
 800fcec:	f06f 030f 	mvn.w	r3, #15
 800fcf0:	e0c9      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d109      	bne.n	800fd0c <udp_sendto_if_src+0x5c>
 800fcf8:	4b65      	ldr	r3, [pc, #404]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fcfa:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800fcfe:	4968      	ldr	r1, [pc, #416]	@ (800fea0 <udp_sendto_if_src+0x1f0>)
 800fd00:	4865      	ldr	r0, [pc, #404]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fd02:	f002 ffc5 	bl	8012c90 <iprintf>
 800fd06:	f06f 030f 	mvn.w	r3, #15
 800fd0a:	e0bc      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800fd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d109      	bne.n	800fd26 <udp_sendto_if_src+0x76>
 800fd12:	4b5f      	ldr	r3, [pc, #380]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fd14:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800fd18:	4962      	ldr	r1, [pc, #392]	@ (800fea4 <udp_sendto_if_src+0x1f4>)
 800fd1a:	485f      	ldr	r0, [pc, #380]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fd1c:	f002 ffb8 	bl	8012c90 <iprintf>
 800fd20:	f06f 030f 	mvn.w	r3, #15
 800fd24:	e0af      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800fd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d109      	bne.n	800fd40 <udp_sendto_if_src+0x90>
 800fd2c:	4b58      	ldr	r3, [pc, #352]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fd2e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800fd32:	495d      	ldr	r1, [pc, #372]	@ (800fea8 <udp_sendto_if_src+0x1f8>)
 800fd34:	4858      	ldr	r0, [pc, #352]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fd36:	f002 ffab 	bl	8012c90 <iprintf>
 800fd3a:	f06f 030f 	mvn.w	r3, #15
 800fd3e:	e0a2      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	8a5b      	ldrh	r3, [r3, #18]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10f      	bne.n	800fd68 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fd48:	68f9      	ldr	r1, [r7, #12]
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	8a5b      	ldrh	r3, [r3, #18]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	68f8      	ldr	r0, [r7, #12]
 800fd52:	f000 f8ad 	bl	800feb0 <udp_bind>
 800fd56:	4603      	mov	r3, r0
 800fd58:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800fd5a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d002      	beq.n	800fd68 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800fd62:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800fd66:	e08e      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	891b      	ldrh	r3, [r3, #8]
 800fd6c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d902      	bls.n	800fd7a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800fd74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd78:	e085      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800fd7a:	2108      	movs	r1, #8
 800fd7c:	68b8      	ldr	r0, [r7, #8]
 800fd7e:	f7f9 f803 	bl	8008d88 <pbuf_add_header>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d015      	beq.n	800fdb4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800fd88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fd8c:	2108      	movs	r1, #8
 800fd8e:	2022      	movs	r0, #34	@ 0x22
 800fd90:	f7f8 fdac 	bl	80088ec <pbuf_alloc>
 800fd94:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d102      	bne.n	800fda2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800fd9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fda0:	e071      	b.n	800fe86 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	891b      	ldrh	r3, [r3, #8]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d006      	beq.n	800fdb8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800fdaa:	68b9      	ldr	r1, [r7, #8]
 800fdac:	69f8      	ldr	r0, [r7, #28]
 800fdae:	f7f9 f9a3 	bl	80090f8 <pbuf_chain>
 800fdb2:	e001      	b.n	800fdb8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	895b      	ldrh	r3, [r3, #10]
 800fdbc:	2b07      	cmp	r3, #7
 800fdbe:	d806      	bhi.n	800fdce <udp_sendto_if_src+0x11e>
 800fdc0:	4b33      	ldr	r3, [pc, #204]	@ (800fe90 <udp_sendto_if_src+0x1e0>)
 800fdc2:	f240 320d 	movw	r2, #781	@ 0x30d
 800fdc6:	4939      	ldr	r1, [pc, #228]	@ (800feac <udp_sendto_if_src+0x1fc>)
 800fdc8:	4833      	ldr	r0, [pc, #204]	@ (800fe98 <udp_sendto_if_src+0x1e8>)
 800fdca:	f002 ff61 	bl	8012c90 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800fdce:	69fb      	ldr	r3, [r7, #28]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	8a5b      	ldrh	r3, [r3, #18]
 800fdd8:	4618      	mov	r0, r3
 800fdda:	f7f7 fb89 	bl	80074f0 <lwip_htons>
 800fdde:	4603      	mov	r3, r0
 800fde0:	461a      	mov	r2, r3
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800fde6:	887b      	ldrh	r3, [r7, #2]
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7f7 fb81 	bl	80074f0 <lwip_htons>
 800fdee:	4603      	mov	r3, r0
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	719a      	strb	r2, [r3, #6]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800fe00:	69fb      	ldr	r3, [r7, #28]
 800fe02:	891b      	ldrh	r3, [r3, #8]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f7f7 fb73 	bl	80074f0 <lwip_htons>
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	461a      	mov	r2, r3
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	7c1b      	ldrb	r3, [r3, #16]
 800fe16:	f003 0301 	and.w	r3, r3, #1
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d113      	bne.n	800fe46 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	891a      	ldrh	r2, [r3, #8]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe28:	2111      	movs	r1, #17
 800fe2a:	69f8      	ldr	r0, [r7, #28]
 800fe2c:	f7f7 fcc5 	bl	80077ba <ip_chksum_pseudo>
 800fe30:	4603      	mov	r3, r0
 800fe32:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800fe34:	8b7b      	ldrh	r3, [r7, #26]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d102      	bne.n	800fe40 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800fe3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe3e:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	8b7a      	ldrh	r2, [r7, #26]
 800fe44:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800fe46:	2311      	movs	r3, #17
 800fe48:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	7adb      	ldrb	r3, [r3, #11]
 800fe4e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	7a9b      	ldrb	r3, [r3, #10]
 800fe54:	7cb9      	ldrb	r1, [r7, #18]
 800fe56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe58:	9202      	str	r2, [sp, #8]
 800fe5a:	7cfa      	ldrb	r2, [r7, #19]
 800fe5c:	9201      	str	r2, [sp, #4]
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	460b      	mov	r3, r1
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fe66:	69f8      	ldr	r0, [r7, #28]
 800fe68:	f001 f98a 	bl	8011180 <ip4_output_if_src>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800fe70:	69fa      	ldr	r2, [r7, #28]
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d004      	beq.n	800fe82 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800fe78:	69f8      	ldr	r0, [r7, #28]
 800fe7a:	f7f9 f81b 	bl	8008eb4 <pbuf_free>
    q = NULL;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800fe82:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3720      	adds	r7, #32
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	08015e74 	.word	0x08015e74
 800fe94:	08016060 	.word	0x08016060
 800fe98:	08015ec8 	.word	0x08015ec8
 800fe9c:	08016080 	.word	0x08016080
 800fea0:	080160a0 	.word	0x080160a0
 800fea4:	080160c4 	.word	0x080160c4
 800fea8:	080160e8 	.word	0x080160e8
 800feac:	0801610c 	.word	0x0801610c

0800feb0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b086      	sub	sp, #24
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	4613      	mov	r3, r2
 800febc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d101      	bne.n	800fec8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800fec4:	4b39      	ldr	r3, [pc, #228]	@ (800ffac <udp_bind+0xfc>)
 800fec6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d109      	bne.n	800fee2 <udp_bind+0x32>
 800fece:	4b38      	ldr	r3, [pc, #224]	@ (800ffb0 <udp_bind+0x100>)
 800fed0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800fed4:	4937      	ldr	r1, [pc, #220]	@ (800ffb4 <udp_bind+0x104>)
 800fed6:	4838      	ldr	r0, [pc, #224]	@ (800ffb8 <udp_bind+0x108>)
 800fed8:	f002 feda 	bl	8012c90 <iprintf>
 800fedc:	f06f 030f 	mvn.w	r3, #15
 800fee0:	e060      	b.n	800ffa4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fee2:	2300      	movs	r3, #0
 800fee4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fee6:	4b35      	ldr	r3, [pc, #212]	@ (800ffbc <udp_bind+0x10c>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	617b      	str	r3, [r7, #20]
 800feec:	e009      	b.n	800ff02 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d102      	bne.n	800fefc <udp_bind+0x4c>
      rebind = 1;
 800fef6:	2301      	movs	r3, #1
 800fef8:	74fb      	strb	r3, [r7, #19]
      break;
 800fefa:	e005      	b.n	800ff08 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	68db      	ldr	r3, [r3, #12]
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d1f2      	bne.n	800feee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ff08:	88fb      	ldrh	r3, [r7, #6]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d109      	bne.n	800ff22 <udp_bind+0x72>
    port = udp_new_port();
 800ff0e:	f7ff fc4f 	bl	800f7b0 <udp_new_port>
 800ff12:	4603      	mov	r3, r0
 800ff14:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ff16:	88fb      	ldrh	r3, [r7, #6]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d12c      	bne.n	800ff76 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ff1c:	f06f 0307 	mvn.w	r3, #7
 800ff20:	e040      	b.n	800ffa4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff22:	4b26      	ldr	r3, [pc, #152]	@ (800ffbc <udp_bind+0x10c>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	617b      	str	r3, [r7, #20]
 800ff28:	e022      	b.n	800ff70 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ff2a:	68fa      	ldr	r2, [r7, #12]
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d01b      	beq.n	800ff6a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	8a5b      	ldrh	r3, [r3, #18]
 800ff36:	88fa      	ldrh	r2, [r7, #6]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d116      	bne.n	800ff6a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d00d      	beq.n	800ff64 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00a      	beq.n	800ff64 <udp_bind+0xb4>
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d006      	beq.n	800ff64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff56:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d003      	beq.n	800ff64 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d102      	bne.n	800ff6a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800ff64:	f06f 0307 	mvn.w	r3, #7
 800ff68:	e01c      	b.n	800ffa4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	617b      	str	r3, [r7, #20]
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1d9      	bne.n	800ff2a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d002      	beq.n	800ff82 <udp_bind+0xd2>
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	e000      	b.n	800ff84 <udp_bind+0xd4>
 800ff82:	2300      	movs	r3, #0
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	88fa      	ldrh	r2, [r7, #6]
 800ff8c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800ff8e:	7cfb      	ldrb	r3, [r7, #19]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d106      	bne.n	800ffa2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ff94:	4b09      	ldr	r3, [pc, #36]	@ (800ffbc <udp_bind+0x10c>)
 800ff96:	681a      	ldr	r2, [r3, #0]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ff9c:	4a07      	ldr	r2, [pc, #28]	@ (800ffbc <udp_bind+0x10c>)
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ffa2:	2300      	movs	r3, #0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3718      	adds	r7, #24
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	08017888 	.word	0x08017888
 800ffb0:	08015e74 	.word	0x08015e74
 800ffb4:	0801613c 	.word	0x0801613c
 800ffb8:	08015ec8 	.word	0x08015ec8
 800ffbc:	20007844 	.word	0x20007844

0800ffc0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b086      	sub	sp, #24
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	60f8      	str	r0, [r7, #12]
 800ffc8:	60b9      	str	r1, [r7, #8]
 800ffca:	4613      	mov	r3, r2
 800ffcc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d109      	bne.n	800ffe8 <udp_connect+0x28>
 800ffd4:	4b2c      	ldr	r3, [pc, #176]	@ (8010088 <udp_connect+0xc8>)
 800ffd6:	f240 4235 	movw	r2, #1077	@ 0x435
 800ffda:	492c      	ldr	r1, [pc, #176]	@ (801008c <udp_connect+0xcc>)
 800ffdc:	482c      	ldr	r0, [pc, #176]	@ (8010090 <udp_connect+0xd0>)
 800ffde:	f002 fe57 	bl	8012c90 <iprintf>
 800ffe2:	f06f 030f 	mvn.w	r3, #15
 800ffe6:	e04b      	b.n	8010080 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d109      	bne.n	8010002 <udp_connect+0x42>
 800ffee:	4b26      	ldr	r3, [pc, #152]	@ (8010088 <udp_connect+0xc8>)
 800fff0:	f240 4236 	movw	r2, #1078	@ 0x436
 800fff4:	4927      	ldr	r1, [pc, #156]	@ (8010094 <udp_connect+0xd4>)
 800fff6:	4826      	ldr	r0, [pc, #152]	@ (8010090 <udp_connect+0xd0>)
 800fff8:	f002 fe4a 	bl	8012c90 <iprintf>
 800fffc:	f06f 030f 	mvn.w	r3, #15
 8010000:	e03e      	b.n	8010080 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	8a5b      	ldrh	r3, [r3, #18]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d10f      	bne.n	801002a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801000a:	68f9      	ldr	r1, [r7, #12]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	8a5b      	ldrh	r3, [r3, #18]
 8010010:	461a      	mov	r2, r3
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f7ff ff4c 	bl	800feb0 <udp_bind>
 8010018:	4603      	mov	r3, r0
 801001a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801001c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d002      	beq.n	801002a <udp_connect+0x6a>
      return err;
 8010024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010028:	e02a      	b.n	8010080 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d002      	beq.n	8010036 <udp_connect+0x76>
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	e000      	b.n	8010038 <udp_connect+0x78>
 8010036:	2300      	movs	r3, #0
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	88fa      	ldrh	r2, [r7, #6]
 8010040:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	7c1b      	ldrb	r3, [r3, #16]
 8010046:	f043 0304 	orr.w	r3, r3, #4
 801004a:	b2da      	uxtb	r2, r3
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010050:	4b11      	ldr	r3, [pc, #68]	@ (8010098 <udp_connect+0xd8>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	617b      	str	r3, [r7, #20]
 8010056:	e008      	b.n	801006a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010058:	68fa      	ldr	r2, [r7, #12]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	429a      	cmp	r2, r3
 801005e:	d101      	bne.n	8010064 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8010060:	2300      	movs	r3, #0
 8010062:	e00d      	b.n	8010080 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	617b      	str	r3, [r7, #20]
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1f3      	bne.n	8010058 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8010070:	4b09      	ldr	r3, [pc, #36]	@ (8010098 <udp_connect+0xd8>)
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010078:	4a07      	ldr	r2, [pc, #28]	@ (8010098 <udp_connect+0xd8>)
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801007e:	2300      	movs	r3, #0
}
 8010080:	4618      	mov	r0, r3
 8010082:	3718      	adds	r7, #24
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}
 8010088:	08015e74 	.word	0x08015e74
 801008c:	08016154 	.word	0x08016154
 8010090:	08015ec8 	.word	0x08015ec8
 8010094:	08016170 	.word	0x08016170
 8010098:	20007844 	.word	0x20007844

0801009c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d107      	bne.n	80100ba <udp_disconnect+0x1e>
 80100aa:	4b0d      	ldr	r3, [pc, #52]	@ (80100e0 <udp_disconnect+0x44>)
 80100ac:	f240 426a 	movw	r2, #1130	@ 0x46a
 80100b0:	490c      	ldr	r1, [pc, #48]	@ (80100e4 <udp_disconnect+0x48>)
 80100b2:	480d      	ldr	r0, [pc, #52]	@ (80100e8 <udp_disconnect+0x4c>)
 80100b4:	f002 fdec 	bl	8012c90 <iprintf>
 80100b8:	e00f      	b.n	80100da <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	2200      	movs	r2, #0
 80100be:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2200      	movs	r2, #0
 80100ca:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	7c1b      	ldrb	r3, [r3, #16]
 80100d0:	f023 0304 	bic.w	r3, r3, #4
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	741a      	strb	r2, [r3, #16]
}
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	08015e74 	.word	0x08015e74
 80100e4:	0801618c 	.word	0x0801618c
 80100e8:	08015ec8 	.word	0x08015ec8

080100ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d107      	bne.n	801010e <udp_recv+0x22>
 80100fe:	4b08      	ldr	r3, [pc, #32]	@ (8010120 <udp_recv+0x34>)
 8010100:	f240 428a 	movw	r2, #1162	@ 0x48a
 8010104:	4907      	ldr	r1, [pc, #28]	@ (8010124 <udp_recv+0x38>)
 8010106:	4808      	ldr	r0, [pc, #32]	@ (8010128 <udp_recv+0x3c>)
 8010108:	f002 fdc2 	bl	8012c90 <iprintf>
 801010c:	e005      	b.n	801011a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	68ba      	ldr	r2, [r7, #8]
 8010112:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	687a      	ldr	r2, [r7, #4]
 8010118:	61da      	str	r2, [r3, #28]
}
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	08015e74 	.word	0x08015e74
 8010124:	080161a8 	.word	0x080161a8
 8010128:	08015ec8 	.word	0x08015ec8

0801012c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010132:	2000      	movs	r0, #0
 8010134:	f7f8 f834 	bl	80081a0 <memp_malloc>
 8010138:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d007      	beq.n	8010150 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010140:	2220      	movs	r2, #32
 8010142:	2100      	movs	r1, #0
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f002 fe08 	bl	8012d5a <memset>
    pcb->ttl = UDP_TTL;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	22ff      	movs	r2, #255	@ 0xff
 801014e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8010150:	687b      	ldr	r3, [r7, #4]
}
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
	...

0801015c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d01e      	beq.n	80101aa <udp_netif_ip_addr_changed+0x4e>
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d01a      	beq.n	80101aa <udp_netif_ip_addr_changed+0x4e>
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d017      	beq.n	80101aa <udp_netif_ip_addr_changed+0x4e>
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d013      	beq.n	80101aa <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010182:	4b0c      	ldr	r3, [pc, #48]	@ (80101b4 <udp_netif_ip_addr_changed+0x58>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	60fb      	str	r3, [r7, #12]
 8010188:	e00c      	b.n	80101a4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	429a      	cmp	r2, r3
 8010194:	d103      	bne.n	801019e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	60fb      	str	r3, [r7, #12]
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d1ef      	bne.n	801018a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80101aa:	bf00      	nop
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bc80      	pop	{r7}
 80101b2:	4770      	bx	lr
 80101b4:	20007844 	.word	0x20007844

080101b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80101c0:	4915      	ldr	r1, [pc, #84]	@ (8010218 <etharp_free_entry+0x60>)
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	4613      	mov	r3, r2
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	4413      	add	r3, r2
 80101ca:	00db      	lsls	r3, r3, #3
 80101cc:	440b      	add	r3, r1
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d013      	beq.n	80101fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80101d4:	4910      	ldr	r1, [pc, #64]	@ (8010218 <etharp_free_entry+0x60>)
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	4613      	mov	r3, r2
 80101da:	005b      	lsls	r3, r3, #1
 80101dc:	4413      	add	r3, r2
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	440b      	add	r3, r1
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7f8 fe65 	bl	8008eb4 <pbuf_free>
    arp_table[i].q = NULL;
 80101ea:	490b      	ldr	r1, [pc, #44]	@ (8010218 <etharp_free_entry+0x60>)
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	4613      	mov	r3, r2
 80101f0:	005b      	lsls	r3, r3, #1
 80101f2:	4413      	add	r3, r2
 80101f4:	00db      	lsls	r3, r3, #3
 80101f6:	440b      	add	r3, r1
 80101f8:	2200      	movs	r2, #0
 80101fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80101fc:	4906      	ldr	r1, [pc, #24]	@ (8010218 <etharp_free_entry+0x60>)
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	4613      	mov	r3, r2
 8010202:	005b      	lsls	r3, r3, #1
 8010204:	4413      	add	r3, r2
 8010206:	00db      	lsls	r3, r3, #3
 8010208:	440b      	add	r3, r1
 801020a:	3314      	adds	r3, #20
 801020c:	2200      	movs	r2, #0
 801020e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010210:	bf00      	nop
 8010212:	3708      	adds	r7, #8
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	20007848 	.word	0x20007848

0801021c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010222:	2300      	movs	r3, #0
 8010224:	607b      	str	r3, [r7, #4]
 8010226:	e096      	b.n	8010356 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010228:	494f      	ldr	r1, [pc, #316]	@ (8010368 <etharp_tmr+0x14c>)
 801022a:	687a      	ldr	r2, [r7, #4]
 801022c:	4613      	mov	r3, r2
 801022e:	005b      	lsls	r3, r3, #1
 8010230:	4413      	add	r3, r2
 8010232:	00db      	lsls	r3, r3, #3
 8010234:	440b      	add	r3, r1
 8010236:	3314      	adds	r3, #20
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801023c:	78fb      	ldrb	r3, [r7, #3]
 801023e:	2b00      	cmp	r3, #0
 8010240:	f000 8086 	beq.w	8010350 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010244:	4948      	ldr	r1, [pc, #288]	@ (8010368 <etharp_tmr+0x14c>)
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	4613      	mov	r3, r2
 801024a:	005b      	lsls	r3, r3, #1
 801024c:	4413      	add	r3, r2
 801024e:	00db      	lsls	r3, r3, #3
 8010250:	440b      	add	r3, r1
 8010252:	3312      	adds	r3, #18
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	3301      	adds	r3, #1
 8010258:	b298      	uxth	r0, r3
 801025a:	4943      	ldr	r1, [pc, #268]	@ (8010368 <etharp_tmr+0x14c>)
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	4613      	mov	r3, r2
 8010260:	005b      	lsls	r3, r3, #1
 8010262:	4413      	add	r3, r2
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	440b      	add	r3, r1
 8010268:	3312      	adds	r3, #18
 801026a:	4602      	mov	r2, r0
 801026c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801026e:	493e      	ldr	r1, [pc, #248]	@ (8010368 <etharp_tmr+0x14c>)
 8010270:	687a      	ldr	r2, [r7, #4]
 8010272:	4613      	mov	r3, r2
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	4413      	add	r3, r2
 8010278:	00db      	lsls	r3, r3, #3
 801027a:	440b      	add	r3, r1
 801027c:	3312      	adds	r3, #18
 801027e:	881b      	ldrh	r3, [r3, #0]
 8010280:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8010284:	d215      	bcs.n	80102b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010286:	4938      	ldr	r1, [pc, #224]	@ (8010368 <etharp_tmr+0x14c>)
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	4613      	mov	r3, r2
 801028c:	005b      	lsls	r3, r3, #1
 801028e:	4413      	add	r3, r2
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	440b      	add	r3, r1
 8010294:	3314      	adds	r3, #20
 8010296:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010298:	2b01      	cmp	r3, #1
 801029a:	d10e      	bne.n	80102ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801029c:	4932      	ldr	r1, [pc, #200]	@ (8010368 <etharp_tmr+0x14c>)
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	4613      	mov	r3, r2
 80102a2:	005b      	lsls	r3, r3, #1
 80102a4:	4413      	add	r3, r2
 80102a6:	00db      	lsls	r3, r3, #3
 80102a8:	440b      	add	r3, r1
 80102aa:	3312      	adds	r3, #18
 80102ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d903      	bls.n	80102ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f7ff ff80 	bl	80101b8 <etharp_free_entry>
 80102b8:	e04a      	b.n	8010350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80102ba:	492b      	ldr	r1, [pc, #172]	@ (8010368 <etharp_tmr+0x14c>)
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	4613      	mov	r3, r2
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	4413      	add	r3, r2
 80102c4:	00db      	lsls	r3, r3, #3
 80102c6:	440b      	add	r3, r1
 80102c8:	3314      	adds	r3, #20
 80102ca:	781b      	ldrb	r3, [r3, #0]
 80102cc:	2b03      	cmp	r3, #3
 80102ce:	d10a      	bne.n	80102e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80102d0:	4925      	ldr	r1, [pc, #148]	@ (8010368 <etharp_tmr+0x14c>)
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	4613      	mov	r3, r2
 80102d6:	005b      	lsls	r3, r3, #1
 80102d8:	4413      	add	r3, r2
 80102da:	00db      	lsls	r3, r3, #3
 80102dc:	440b      	add	r3, r1
 80102de:	3314      	adds	r3, #20
 80102e0:	2204      	movs	r2, #4
 80102e2:	701a      	strb	r2, [r3, #0]
 80102e4:	e034      	b.n	8010350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80102e6:	4920      	ldr	r1, [pc, #128]	@ (8010368 <etharp_tmr+0x14c>)
 80102e8:	687a      	ldr	r2, [r7, #4]
 80102ea:	4613      	mov	r3, r2
 80102ec:	005b      	lsls	r3, r3, #1
 80102ee:	4413      	add	r3, r2
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	440b      	add	r3, r1
 80102f4:	3314      	adds	r3, #20
 80102f6:	781b      	ldrb	r3, [r3, #0]
 80102f8:	2b04      	cmp	r3, #4
 80102fa:	d10a      	bne.n	8010312 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80102fc:	491a      	ldr	r1, [pc, #104]	@ (8010368 <etharp_tmr+0x14c>)
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	4613      	mov	r3, r2
 8010302:	005b      	lsls	r3, r3, #1
 8010304:	4413      	add	r3, r2
 8010306:	00db      	lsls	r3, r3, #3
 8010308:	440b      	add	r3, r1
 801030a:	3314      	adds	r3, #20
 801030c:	2202      	movs	r2, #2
 801030e:	701a      	strb	r2, [r3, #0]
 8010310:	e01e      	b.n	8010350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010312:	4915      	ldr	r1, [pc, #84]	@ (8010368 <etharp_tmr+0x14c>)
 8010314:	687a      	ldr	r2, [r7, #4]
 8010316:	4613      	mov	r3, r2
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	4413      	add	r3, r2
 801031c:	00db      	lsls	r3, r3, #3
 801031e:	440b      	add	r3, r1
 8010320:	3314      	adds	r3, #20
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d113      	bne.n	8010350 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8010328:	490f      	ldr	r1, [pc, #60]	@ (8010368 <etharp_tmr+0x14c>)
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	4613      	mov	r3, r2
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	4413      	add	r3, r2
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	440b      	add	r3, r1
 8010336:	3308      	adds	r3, #8
 8010338:	6818      	ldr	r0, [r3, #0]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	4613      	mov	r3, r2
 801033e:	005b      	lsls	r3, r3, #1
 8010340:	4413      	add	r3, r2
 8010342:	00db      	lsls	r3, r3, #3
 8010344:	4a08      	ldr	r2, [pc, #32]	@ (8010368 <etharp_tmr+0x14c>)
 8010346:	4413      	add	r3, r2
 8010348:	3304      	adds	r3, #4
 801034a:	4619      	mov	r1, r3
 801034c:	f000 fb64 	bl	8010a18 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	3301      	adds	r3, #1
 8010354:	607b      	str	r3, [r7, #4]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b09      	cmp	r3, #9
 801035a:	f77f af65 	ble.w	8010228 <etharp_tmr+0xc>
      }
    }
  }
}
 801035e:	bf00      	nop
 8010360:	bf00      	nop
 8010362:	3708      	adds	r7, #8
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	20007848 	.word	0x20007848

0801036c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08a      	sub	sp, #40	@ 0x28
 8010370:	af00      	add	r7, sp, #0
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	460b      	mov	r3, r1
 8010376:	607a      	str	r2, [r7, #4]
 8010378:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801037a:	230a      	movs	r3, #10
 801037c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801037e:	230a      	movs	r3, #10
 8010380:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8010382:	230a      	movs	r3, #10
 8010384:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 8010386:	2300      	movs	r3, #0
 8010388:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801038a:	230a      	movs	r3, #10
 801038c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	83bb      	strh	r3, [r7, #28]
 8010392:	2300      	movs	r3, #0
 8010394:	837b      	strh	r3, [r7, #26]
 8010396:	2300      	movs	r3, #0
 8010398:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801039a:	2300      	movs	r3, #0
 801039c:	843b      	strh	r3, [r7, #32]
 801039e:	e0ae      	b.n	80104fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80103a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103a4:	49a6      	ldr	r1, [pc, #664]	@ (8010640 <etharp_find_entry+0x2d4>)
 80103a6:	4613      	mov	r3, r2
 80103a8:	005b      	lsls	r3, r3, #1
 80103aa:	4413      	add	r3, r2
 80103ac:	00db      	lsls	r3, r3, #3
 80103ae:	440b      	add	r3, r1
 80103b0:	3314      	adds	r3, #20
 80103b2:	781b      	ldrb	r3, [r3, #0]
 80103b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80103b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80103ba:	2b0a      	cmp	r3, #10
 80103bc:	d105      	bne.n	80103ca <etharp_find_entry+0x5e>
 80103be:	7dfb      	ldrb	r3, [r7, #23]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d102      	bne.n	80103ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80103c4:	8c3b      	ldrh	r3, [r7, #32]
 80103c6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80103c8:	e095      	b.n	80104f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80103ca:	7dfb      	ldrb	r3, [r7, #23]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 8092 	beq.w	80104f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	d009      	beq.n	80103ec <etharp_find_entry+0x80>
 80103d8:	7dfb      	ldrb	r3, [r7, #23]
 80103da:	2b01      	cmp	r3, #1
 80103dc:	d806      	bhi.n	80103ec <etharp_find_entry+0x80>
 80103de:	4b99      	ldr	r3, [pc, #612]	@ (8010644 <etharp_find_entry+0x2d8>)
 80103e0:	f240 1223 	movw	r2, #291	@ 0x123
 80103e4:	4998      	ldr	r1, [pc, #608]	@ (8010648 <etharp_find_entry+0x2dc>)
 80103e6:	4899      	ldr	r0, [pc, #612]	@ (801064c <etharp_find_entry+0x2e0>)
 80103e8:	f002 fc52 	bl	8012c90 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d020      	beq.n	8010434 <etharp_find_entry+0xc8>
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6819      	ldr	r1, [r3, #0]
 80103f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80103fa:	4891      	ldr	r0, [pc, #580]	@ (8010640 <etharp_find_entry+0x2d4>)
 80103fc:	4613      	mov	r3, r2
 80103fe:	005b      	lsls	r3, r3, #1
 8010400:	4413      	add	r3, r2
 8010402:	00db      	lsls	r3, r3, #3
 8010404:	4403      	add	r3, r0
 8010406:	3304      	adds	r3, #4
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4299      	cmp	r1, r3
 801040c:	d112      	bne.n	8010434 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00c      	beq.n	801042e <etharp_find_entry+0xc2>
 8010414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010418:	4989      	ldr	r1, [pc, #548]	@ (8010640 <etharp_find_entry+0x2d4>)
 801041a:	4613      	mov	r3, r2
 801041c:	005b      	lsls	r3, r3, #1
 801041e:	4413      	add	r3, r2
 8010420:	00db      	lsls	r3, r3, #3
 8010422:	440b      	add	r3, r1
 8010424:	3308      	adds	r3, #8
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	687a      	ldr	r2, [r7, #4]
 801042a:	429a      	cmp	r2, r3
 801042c:	d102      	bne.n	8010434 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801042e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010432:	e100      	b.n	8010636 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8010434:	7dfb      	ldrb	r3, [r7, #23]
 8010436:	2b01      	cmp	r3, #1
 8010438:	d140      	bne.n	80104bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801043a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801043e:	4980      	ldr	r1, [pc, #512]	@ (8010640 <etharp_find_entry+0x2d4>)
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	440b      	add	r3, r1
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d01a      	beq.n	8010486 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8010450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010454:	497a      	ldr	r1, [pc, #488]	@ (8010640 <etharp_find_entry+0x2d4>)
 8010456:	4613      	mov	r3, r2
 8010458:	005b      	lsls	r3, r3, #1
 801045a:	4413      	add	r3, r2
 801045c:	00db      	lsls	r3, r3, #3
 801045e:	440b      	add	r3, r1
 8010460:	3312      	adds	r3, #18
 8010462:	881b      	ldrh	r3, [r3, #0]
 8010464:	8bba      	ldrh	r2, [r7, #28]
 8010466:	429a      	cmp	r2, r3
 8010468:	d845      	bhi.n	80104f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801046a:	8c3b      	ldrh	r3, [r7, #32]
 801046c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801046e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010472:	4973      	ldr	r1, [pc, #460]	@ (8010640 <etharp_find_entry+0x2d4>)
 8010474:	4613      	mov	r3, r2
 8010476:	005b      	lsls	r3, r3, #1
 8010478:	4413      	add	r3, r2
 801047a:	00db      	lsls	r3, r3, #3
 801047c:	440b      	add	r3, r1
 801047e:	3312      	adds	r3, #18
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	83bb      	strh	r3, [r7, #28]
 8010484:	e037      	b.n	80104f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8010486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801048a:	496d      	ldr	r1, [pc, #436]	@ (8010640 <etharp_find_entry+0x2d4>)
 801048c:	4613      	mov	r3, r2
 801048e:	005b      	lsls	r3, r3, #1
 8010490:	4413      	add	r3, r2
 8010492:	00db      	lsls	r3, r3, #3
 8010494:	440b      	add	r3, r1
 8010496:	3312      	adds	r3, #18
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	8b7a      	ldrh	r2, [r7, #26]
 801049c:	429a      	cmp	r2, r3
 801049e:	d82a      	bhi.n	80104f6 <etharp_find_entry+0x18a>
            old_pending = i;
 80104a0:	8c3b      	ldrh	r3, [r7, #32]
 80104a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80104a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104a8:	4965      	ldr	r1, [pc, #404]	@ (8010640 <etharp_find_entry+0x2d4>)
 80104aa:	4613      	mov	r3, r2
 80104ac:	005b      	lsls	r3, r3, #1
 80104ae:	4413      	add	r3, r2
 80104b0:	00db      	lsls	r3, r3, #3
 80104b2:	440b      	add	r3, r1
 80104b4:	3312      	adds	r3, #18
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	837b      	strh	r3, [r7, #26]
 80104ba:	e01c      	b.n	80104f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80104bc:	7dfb      	ldrb	r3, [r7, #23]
 80104be:	2b01      	cmp	r3, #1
 80104c0:	d919      	bls.n	80104f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80104c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104c6:	495e      	ldr	r1, [pc, #376]	@ (8010640 <etharp_find_entry+0x2d4>)
 80104c8:	4613      	mov	r3, r2
 80104ca:	005b      	lsls	r3, r3, #1
 80104cc:	4413      	add	r3, r2
 80104ce:	00db      	lsls	r3, r3, #3
 80104d0:	440b      	add	r3, r1
 80104d2:	3312      	adds	r3, #18
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	8b3a      	ldrh	r2, [r7, #24]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d80c      	bhi.n	80104f6 <etharp_find_entry+0x18a>
            old_stable = i;
 80104dc:	8c3b      	ldrh	r3, [r7, #32]
 80104de:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80104e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80104e4:	4956      	ldr	r1, [pc, #344]	@ (8010640 <etharp_find_entry+0x2d4>)
 80104e6:	4613      	mov	r3, r2
 80104e8:	005b      	lsls	r3, r3, #1
 80104ea:	4413      	add	r3, r2
 80104ec:	00db      	lsls	r3, r3, #3
 80104ee:	440b      	add	r3, r1
 80104f0:	3312      	adds	r3, #18
 80104f2:	881b      	ldrh	r3, [r3, #0]
 80104f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80104f6:	8c3b      	ldrh	r3, [r7, #32]
 80104f8:	3301      	adds	r3, #1
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	843b      	strh	r3, [r7, #32]
 80104fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010502:	2b09      	cmp	r3, #9
 8010504:	f77f af4c 	ble.w	80103a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010508:	7afb      	ldrb	r3, [r7, #11]
 801050a:	f003 0302 	and.w	r3, r3, #2
 801050e:	2b00      	cmp	r3, #0
 8010510:	d108      	bne.n	8010524 <etharp_find_entry+0x1b8>
 8010512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8010516:	2b0a      	cmp	r3, #10
 8010518:	d107      	bne.n	801052a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801051a:	7afb      	ldrb	r3, [r7, #11]
 801051c:	f003 0301 	and.w	r3, r3, #1
 8010520:	2b00      	cmp	r3, #0
 8010522:	d102      	bne.n	801052a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8010524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8010528:	e085      	b.n	8010636 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801052a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801052e:	2b09      	cmp	r3, #9
 8010530:	dc02      	bgt.n	8010538 <etharp_find_entry+0x1cc>
    i = empty;
 8010532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010534:	843b      	strh	r3, [r7, #32]
 8010536:	e039      	b.n	80105ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8010538:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801053c:	2b09      	cmp	r3, #9
 801053e:	dc14      	bgt.n	801056a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8010540:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010542:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8010544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010548:	493d      	ldr	r1, [pc, #244]	@ (8010640 <etharp_find_entry+0x2d4>)
 801054a:	4613      	mov	r3, r2
 801054c:	005b      	lsls	r3, r3, #1
 801054e:	4413      	add	r3, r2
 8010550:	00db      	lsls	r3, r3, #3
 8010552:	440b      	add	r3, r1
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d018      	beq.n	801058c <etharp_find_entry+0x220>
 801055a:	4b3a      	ldr	r3, [pc, #232]	@ (8010644 <etharp_find_entry+0x2d8>)
 801055c:	f240 126d 	movw	r2, #365	@ 0x16d
 8010560:	493b      	ldr	r1, [pc, #236]	@ (8010650 <etharp_find_entry+0x2e4>)
 8010562:	483a      	ldr	r0, [pc, #232]	@ (801064c <etharp_find_entry+0x2e0>)
 8010564:	f002 fb94 	bl	8012c90 <iprintf>
 8010568:	e010      	b.n	801058c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801056a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801056e:	2b09      	cmp	r3, #9
 8010570:	dc02      	bgt.n	8010578 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8010572:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8010574:	843b      	strh	r3, [r7, #32]
 8010576:	e009      	b.n	801058c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010578:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801057c:	2b09      	cmp	r3, #9
 801057e:	dc02      	bgt.n	8010586 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8010580:	8bfb      	ldrh	r3, [r7, #30]
 8010582:	843b      	strh	r3, [r7, #32]
 8010584:	e002      	b.n	801058c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8010586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801058a:	e054      	b.n	8010636 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801058c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8010590:	2b09      	cmp	r3, #9
 8010592:	dd06      	ble.n	80105a2 <etharp_find_entry+0x236>
 8010594:	4b2b      	ldr	r3, [pc, #172]	@ (8010644 <etharp_find_entry+0x2d8>)
 8010596:	f240 127f 	movw	r2, #383	@ 0x17f
 801059a:	492e      	ldr	r1, [pc, #184]	@ (8010654 <etharp_find_entry+0x2e8>)
 801059c:	482b      	ldr	r0, [pc, #172]	@ (801064c <etharp_find_entry+0x2e0>)
 801059e:	f002 fb77 	bl	8012c90 <iprintf>
    etharp_free_entry(i);
 80105a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7ff fe06 	bl	80101b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80105ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80105b0:	2b09      	cmp	r3, #9
 80105b2:	dd06      	ble.n	80105c2 <etharp_find_entry+0x256>
 80105b4:	4b23      	ldr	r3, [pc, #140]	@ (8010644 <etharp_find_entry+0x2d8>)
 80105b6:	f240 1283 	movw	r2, #387	@ 0x183
 80105ba:	4926      	ldr	r1, [pc, #152]	@ (8010654 <etharp_find_entry+0x2e8>)
 80105bc:	4823      	ldr	r0, [pc, #140]	@ (801064c <etharp_find_entry+0x2e0>)
 80105be:	f002 fb67 	bl	8012c90 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80105c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105c6:	491e      	ldr	r1, [pc, #120]	@ (8010640 <etharp_find_entry+0x2d4>)
 80105c8:	4613      	mov	r3, r2
 80105ca:	005b      	lsls	r3, r3, #1
 80105cc:	4413      	add	r3, r2
 80105ce:	00db      	lsls	r3, r3, #3
 80105d0:	440b      	add	r3, r1
 80105d2:	3314      	adds	r3, #20
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d006      	beq.n	80105e8 <etharp_find_entry+0x27c>
 80105da:	4b1a      	ldr	r3, [pc, #104]	@ (8010644 <etharp_find_entry+0x2d8>)
 80105dc:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80105e0:	491d      	ldr	r1, [pc, #116]	@ (8010658 <etharp_find_entry+0x2ec>)
 80105e2:	481a      	ldr	r0, [pc, #104]	@ (801064c <etharp_find_entry+0x2e0>)
 80105e4:	f002 fb54 	bl	8012c90 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00b      	beq.n	8010606 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80105ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6819      	ldr	r1, [r3, #0]
 80105f6:	4812      	ldr	r0, [pc, #72]	@ (8010640 <etharp_find_entry+0x2d4>)
 80105f8:	4613      	mov	r3, r2
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	4403      	add	r3, r0
 8010602:	3304      	adds	r3, #4
 8010604:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801060a:	490d      	ldr	r1, [pc, #52]	@ (8010640 <etharp_find_entry+0x2d4>)
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	440b      	add	r3, r1
 8010616:	3312      	adds	r3, #18
 8010618:	2200      	movs	r2, #0
 801061a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801061c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8010620:	4907      	ldr	r1, [pc, #28]	@ (8010640 <etharp_find_entry+0x2d4>)
 8010622:	4613      	mov	r3, r2
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	4413      	add	r3, r2
 8010628:	00db      	lsls	r3, r3, #3
 801062a:	440b      	add	r3, r1
 801062c:	3308      	adds	r3, #8
 801062e:	687a      	ldr	r2, [r7, #4]
 8010630:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8010632:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3728      	adds	r7, #40	@ 0x28
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	20007848 	.word	0x20007848
 8010644:	080161d8 	.word	0x080161d8
 8010648:	08016210 	.word	0x08016210
 801064c:	08016250 	.word	0x08016250
 8010650:	08016278 	.word	0x08016278
 8010654:	08016290 	.word	0x08016290
 8010658:	080162a4 	.word	0x080162a4

0801065c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af02      	add	r7, sp, #8
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8010670:	2b06      	cmp	r3, #6
 8010672:	d006      	beq.n	8010682 <etharp_update_arp_entry+0x26>
 8010674:	4b48      	ldr	r3, [pc, #288]	@ (8010798 <etharp_update_arp_entry+0x13c>)
 8010676:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801067a:	4948      	ldr	r1, [pc, #288]	@ (801079c <etharp_update_arp_entry+0x140>)
 801067c:	4848      	ldr	r0, [pc, #288]	@ (80107a0 <etharp_update_arp_entry+0x144>)
 801067e:	f002 fb07 	bl	8012c90 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d012      	beq.n	80106ae <etharp_update_arp_entry+0x52>
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00e      	beq.n	80106ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	68f9      	ldr	r1, [r7, #12]
 8010696:	4618      	mov	r0, r3
 8010698:	f000 fe86 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 801069c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d105      	bne.n	80106ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80106aa:	2be0      	cmp	r3, #224	@ 0xe0
 80106ac:	d102      	bne.n	80106b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80106ae:	f06f 030f 	mvn.w	r3, #15
 80106b2:	e06c      	b.n	801078e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80106b4:	78fb      	ldrb	r3, [r7, #3]
 80106b6:	68fa      	ldr	r2, [r7, #12]
 80106b8:	4619      	mov	r1, r3
 80106ba:	68b8      	ldr	r0, [r7, #8]
 80106bc:	f7ff fe56 	bl	801036c <etharp_find_entry>
 80106c0:	4603      	mov	r3, r0
 80106c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80106c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	da02      	bge.n	80106d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80106cc:	8afb      	ldrh	r3, [r7, #22]
 80106ce:	b25b      	sxtb	r3, r3
 80106d0:	e05d      	b.n	801078e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80106d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106d6:	4933      	ldr	r1, [pc, #204]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 80106d8:	4613      	mov	r3, r2
 80106da:	005b      	lsls	r3, r3, #1
 80106dc:	4413      	add	r3, r2
 80106de:	00db      	lsls	r3, r3, #3
 80106e0:	440b      	add	r3, r1
 80106e2:	3314      	adds	r3, #20
 80106e4:	2202      	movs	r2, #2
 80106e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80106e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80106ec:	492d      	ldr	r1, [pc, #180]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 80106ee:	4613      	mov	r3, r2
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	440b      	add	r3, r1
 80106f8:	3308      	adds	r3, #8
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80106fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010702:	4613      	mov	r3, r2
 8010704:	005b      	lsls	r3, r3, #1
 8010706:	4413      	add	r3, r2
 8010708:	00db      	lsls	r3, r3, #3
 801070a:	3308      	adds	r3, #8
 801070c:	4a25      	ldr	r2, [pc, #148]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 801070e:	4413      	add	r3, r2
 8010710:	3304      	adds	r3, #4
 8010712:	2206      	movs	r2, #6
 8010714:	6879      	ldr	r1, [r7, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	f002 fc09 	bl	8012f2e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801071c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010720:	4920      	ldr	r1, [pc, #128]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 8010722:	4613      	mov	r3, r2
 8010724:	005b      	lsls	r3, r3, #1
 8010726:	4413      	add	r3, r2
 8010728:	00db      	lsls	r3, r3, #3
 801072a:	440b      	add	r3, r1
 801072c:	3312      	adds	r3, #18
 801072e:	2200      	movs	r2, #0
 8010730:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010736:	491b      	ldr	r1, [pc, #108]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 8010738:	4613      	mov	r3, r2
 801073a:	005b      	lsls	r3, r3, #1
 801073c:	4413      	add	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	440b      	add	r3, r1
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d021      	beq.n	801078c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801074c:	4915      	ldr	r1, [pc, #84]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 801074e:	4613      	mov	r3, r2
 8010750:	005b      	lsls	r3, r3, #1
 8010752:	4413      	add	r3, r2
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	440b      	add	r3, r1
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801075c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8010760:	4910      	ldr	r1, [pc, #64]	@ (80107a4 <etharp_update_arp_entry+0x148>)
 8010762:	4613      	mov	r3, r2
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	4413      	add	r3, r2
 8010768:	00db      	lsls	r3, r3, #3
 801076a:	440b      	add	r3, r1
 801076c:	2200      	movs	r2, #0
 801076e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8010776:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6939      	ldr	r1, [r7, #16]
 8010780:	68f8      	ldr	r0, [r7, #12]
 8010782:	f001 fd2d 	bl	80121e0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010786:	6938      	ldr	r0, [r7, #16]
 8010788:	f7f8 fb94 	bl	8008eb4 <pbuf_free>
  }
  return ERR_OK;
 801078c:	2300      	movs	r3, #0
}
 801078e:	4618      	mov	r0, r3
 8010790:	3718      	adds	r7, #24
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	080161d8 	.word	0x080161d8
 801079c:	080162d0 	.word	0x080162d0
 80107a0:	08016250 	.word	0x08016250
 80107a4:	20007848 	.word	0x20007848

080107a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80107a8:	b5b0      	push	{r4, r5, r7, lr}
 80107aa:	b08a      	sub	sp, #40	@ 0x28
 80107ac:	af04      	add	r7, sp, #16
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d107      	bne.n	80107c8 <etharp_input+0x20>
 80107b8:	4b3d      	ldr	r3, [pc, #244]	@ (80108b0 <etharp_input+0x108>)
 80107ba:	f240 228a 	movw	r2, #650	@ 0x28a
 80107be:	493d      	ldr	r1, [pc, #244]	@ (80108b4 <etharp_input+0x10c>)
 80107c0:	483d      	ldr	r0, [pc, #244]	@ (80108b8 <etharp_input+0x110>)
 80107c2:	f002 fa65 	bl	8012c90 <iprintf>
 80107c6:	e06f      	b.n	80108a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	881b      	ldrh	r3, [r3, #0]
 80107d2:	b29b      	uxth	r3, r3
 80107d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107d8:	d10c      	bne.n	80107f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80107de:	2b06      	cmp	r3, #6
 80107e0:	d108      	bne.n	80107f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80107e6:	2b04      	cmp	r3, #4
 80107e8:	d104      	bne.n	80107f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	885b      	ldrh	r3, [r3, #2]
 80107ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80107f0:	2b08      	cmp	r3, #8
 80107f2:	d003      	beq.n	80107fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7f8 fb5d 	bl	8008eb4 <pbuf_free>
    return;
 80107fa:	e055      	b.n	80108a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80107fc:	693b      	ldr	r3, [r7, #16]
 80107fe:	330e      	adds	r3, #14
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	3318      	adds	r3, #24
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	3304      	adds	r3, #4
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d102      	bne.n	801081c <etharp_input+0x74>
    for_us = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	75fb      	strb	r3, [r7, #23]
 801081a:	e009      	b.n	8010830 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801081c:	68ba      	ldr	r2, [r7, #8]
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	3304      	adds	r3, #4
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	bf0c      	ite	eq
 8010828:	2301      	moveq	r3, #1
 801082a:	2300      	movne	r3, #0
 801082c:	b2db      	uxtb	r3, r3
 801082e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	f103 0208 	add.w	r2, r3, #8
 8010836:	7dfb      	ldrb	r3, [r7, #23]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <etharp_input+0x98>
 801083c:	2301      	movs	r3, #1
 801083e:	e000      	b.n	8010842 <etharp_input+0x9a>
 8010840:	2302      	movs	r3, #2
 8010842:	f107 010c 	add.w	r1, r7, #12
 8010846:	6838      	ldr	r0, [r7, #0]
 8010848:	f7ff ff08 	bl	801065c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	88db      	ldrh	r3, [r3, #6]
 8010850:	b29b      	uxth	r3, r3
 8010852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010856:	d003      	beq.n	8010860 <etharp_input+0xb8>
 8010858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801085c:	d01e      	beq.n	801089c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801085e:	e020      	b.n	80108a2 <etharp_input+0xfa>
      if (for_us) {
 8010860:	7dfb      	ldrb	r3, [r7, #23]
 8010862:	2b00      	cmp	r3, #0
 8010864:	d01c      	beq.n	80108a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801087c:	693a      	ldr	r2, [r7, #16]
 801087e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8010880:	2102      	movs	r1, #2
 8010882:	9103      	str	r1, [sp, #12]
 8010884:	f107 010c 	add.w	r1, r7, #12
 8010888:	9102      	str	r1, [sp, #8]
 801088a:	9201      	str	r2, [sp, #4]
 801088c:	9300      	str	r3, [sp, #0]
 801088e:	462b      	mov	r3, r5
 8010890:	4622      	mov	r2, r4
 8010892:	4601      	mov	r1, r0
 8010894:	6838      	ldr	r0, [r7, #0]
 8010896:	f000 f811 	bl	80108bc <etharp_raw>
      break;
 801089a:	e001      	b.n	80108a0 <etharp_input+0xf8>
      break;
 801089c:	bf00      	nop
 801089e:	e000      	b.n	80108a2 <etharp_input+0xfa>
      break;
 80108a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f7f8 fb06 	bl	8008eb4 <pbuf_free>
}
 80108a8:	3718      	adds	r7, #24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bdb0      	pop	{r4, r5, r7, pc}
 80108ae:	bf00      	nop
 80108b0:	080161d8 	.word	0x080161d8
 80108b4:	08016328 	.word	0x08016328
 80108b8:	08016250 	.word	0x08016250

080108bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08a      	sub	sp, #40	@ 0x28
 80108c0:	af02      	add	r7, sp, #8
 80108c2:	60f8      	str	r0, [r7, #12]
 80108c4:	60b9      	str	r1, [r7, #8]
 80108c6:	607a      	str	r2, [r7, #4]
 80108c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80108ca:	2300      	movs	r3, #0
 80108cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d106      	bne.n	80108e2 <etharp_raw+0x26>
 80108d4:	4b3a      	ldr	r3, [pc, #232]	@ (80109c0 <etharp_raw+0x104>)
 80108d6:	f240 4257 	movw	r2, #1111	@ 0x457
 80108da:	493a      	ldr	r1, [pc, #232]	@ (80109c4 <etharp_raw+0x108>)
 80108dc:	483a      	ldr	r0, [pc, #232]	@ (80109c8 <etharp_raw+0x10c>)
 80108de:	f002 f9d7 	bl	8012c90 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80108e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80108e6:	211c      	movs	r1, #28
 80108e8:	200e      	movs	r0, #14
 80108ea:	f7f7 ffff 	bl	80088ec <pbuf_alloc>
 80108ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d102      	bne.n	80108fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80108f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80108fa:	e05d      	b.n	80109b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80108fc:	69bb      	ldr	r3, [r7, #24]
 80108fe:	895b      	ldrh	r3, [r3, #10]
 8010900:	2b1b      	cmp	r3, #27
 8010902:	d806      	bhi.n	8010912 <etharp_raw+0x56>
 8010904:	4b2e      	ldr	r3, [pc, #184]	@ (80109c0 <etharp_raw+0x104>)
 8010906:	f240 4262 	movw	r2, #1122	@ 0x462
 801090a:	4930      	ldr	r1, [pc, #192]	@ (80109cc <etharp_raw+0x110>)
 801090c:	482e      	ldr	r0, [pc, #184]	@ (80109c8 <etharp_raw+0x10c>)
 801090e:	f002 f9bf 	bl	8012c90 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8010918:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801091a:	4618      	mov	r0, r3
 801091c:	f7f6 fde8 	bl	80074f0 <lwip_htons>
 8010920:	4603      	mov	r3, r0
 8010922:	461a      	mov	r2, r3
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801092e:	2b06      	cmp	r3, #6
 8010930:	d006      	beq.n	8010940 <etharp_raw+0x84>
 8010932:	4b23      	ldr	r3, [pc, #140]	@ (80109c0 <etharp_raw+0x104>)
 8010934:	f240 4269 	movw	r2, #1129	@ 0x469
 8010938:	4925      	ldr	r1, [pc, #148]	@ (80109d0 <etharp_raw+0x114>)
 801093a:	4823      	ldr	r0, [pc, #140]	@ (80109c8 <etharp_raw+0x10c>)
 801093c:	f002 f9a8 	bl	8012c90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	3308      	adds	r3, #8
 8010944:	2206      	movs	r2, #6
 8010946:	6839      	ldr	r1, [r7, #0]
 8010948:	4618      	mov	r0, r3
 801094a:	f002 faf0 	bl	8012f2e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	3312      	adds	r3, #18
 8010952:	2206      	movs	r2, #6
 8010954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010956:	4618      	mov	r0, r3
 8010958:	f002 fae9 	bl	8012f2e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	330e      	adds	r3, #14
 8010960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010962:	6812      	ldr	r2, [r2, #0]
 8010964:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	3318      	adds	r3, #24
 801096a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801096c:	6812      	ldr	r2, [r2, #0]
 801096e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	2200      	movs	r2, #0
 8010974:	701a      	strb	r2, [r3, #0]
 8010976:	2200      	movs	r2, #0
 8010978:	f042 0201 	orr.w	r2, r2, #1
 801097c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	2200      	movs	r2, #0
 8010982:	f042 0208 	orr.w	r2, r2, #8
 8010986:	709a      	strb	r2, [r3, #2]
 8010988:	2200      	movs	r2, #0
 801098a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	2206      	movs	r2, #6
 8010990:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	2204      	movs	r2, #4
 8010996:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8010998:	f640 0306 	movw	r3, #2054	@ 0x806
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	69b9      	ldr	r1, [r7, #24]
 80109a4:	68f8      	ldr	r0, [r7, #12]
 80109a6:	f001 fc1b 	bl	80121e0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80109aa:	69b8      	ldr	r0, [r7, #24]
 80109ac:	f7f8 fa82 	bl	8008eb4 <pbuf_free>
  p = NULL;
 80109b0:	2300      	movs	r3, #0
 80109b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80109b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3720      	adds	r7, #32
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	080161d8 	.word	0x080161d8
 80109c4:	08016328 	.word	0x08016328
 80109c8:	08016250 	.word	0x08016250
 80109cc:	080163d8 	.word	0x080163d8
 80109d0:	0801640c 	.word	0x0801640c

080109d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b088      	sub	sp, #32
 80109d8:	af04      	add	r7, sp, #16
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80109f0:	2201      	movs	r2, #1
 80109f2:	9203      	str	r2, [sp, #12]
 80109f4:	68ba      	ldr	r2, [r7, #8]
 80109f6:	9202      	str	r2, [sp, #8]
 80109f8:	4a06      	ldr	r2, [pc, #24]	@ (8010a14 <etharp_request_dst+0x40>)
 80109fa:	9201      	str	r2, [sp, #4]
 80109fc:	9300      	str	r3, [sp, #0]
 80109fe:	4603      	mov	r3, r0
 8010a00:	687a      	ldr	r2, [r7, #4]
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f7ff ff5a 	bl	80108bc <etharp_raw>
 8010a08:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}
 8010a12:	bf00      	nop
 8010a14:	08017894 	.word	0x08017894

08010a18 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8010a22:	4a05      	ldr	r2, [pc, #20]	@ (8010a38 <etharp_request+0x20>)
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f7ff ffd4 	bl	80109d4 <etharp_request_dst>
 8010a2c:	4603      	mov	r3, r0
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3708      	adds	r7, #8
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	0801788c 	.word	0x0801788c

08010a3c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b08e      	sub	sp, #56	@ 0x38
 8010a40:	af04      	add	r7, sp, #16
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8010a46:	4b8b      	ldr	r3, [pc, #556]	@ (8010c74 <icmp_input+0x238>)
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 030f 	and.w	r3, r3, #15
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8010a5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010a5e:	2b13      	cmp	r3, #19
 8010a60:	f240 80f1 	bls.w	8010c46 <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	895b      	ldrh	r3, [r3, #10]
 8010a68:	2b03      	cmp	r3, #3
 8010a6a:	f240 80ee 	bls.w	8010c4a <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	685b      	ldr	r3, [r3, #4]
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8010a78:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	f000 80db 	beq.w	8010c38 <icmp_input+0x1fc>
 8010a82:	2b08      	cmp	r3, #8
 8010a84:	f040 80db 	bne.w	8010c3e <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8010a88:	4b7b      	ldr	r3, [pc, #492]	@ (8010c78 <icmp_input+0x23c>)
 8010a8a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010a8c:	4b79      	ldr	r3, [pc, #484]	@ (8010c74 <icmp_input+0x238>)
 8010a8e:	695b      	ldr	r3, [r3, #20]
 8010a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010a94:	2be0      	cmp	r3, #224	@ 0xe0
 8010a96:	f000 80df 	beq.w	8010c58 <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8010a9a:	4b76      	ldr	r3, [pc, #472]	@ (8010c74 <icmp_input+0x238>)
 8010a9c:	695b      	ldr	r3, [r3, #20]
 8010a9e:	4a75      	ldr	r2, [pc, #468]	@ (8010c74 <icmp_input+0x238>)
 8010aa0:	6812      	ldr	r2, [r2, #0]
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f000 fc7f 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f040 80d5 	bne.w	8010c5c <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	891b      	ldrh	r3, [r3, #8]
 8010ab6:	2b07      	cmp	r3, #7
 8010ab8:	f240 80c9 	bls.w	8010c4e <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8010abc:	6878      	ldr	r0, [r7, #4]
 8010abe:	f7f6 fea4 	bl	800780a <inet_chksum_pbuf>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d003      	beq.n	8010ad0 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7f8 f9f3 	bl	8008eb4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8010ace:	e0ce      	b.n	8010c6e <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010ad0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ad2:	330e      	adds	r3, #14
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7f8 f956 	bl	8008d88 <pbuf_add_header>
 8010adc:	4603      	mov	r3, r0
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d04b      	beq.n	8010b7a <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	891a      	ldrh	r2, [r3, #8]
 8010ae6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ae8:	4413      	add	r3, r2
 8010aea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	891b      	ldrh	r3, [r3, #8]
 8010af0:	8b7a      	ldrh	r2, [r7, #26]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	f0c0 80b4 	bcc.w	8010c60 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8010af8:	8b7b      	ldrh	r3, [r7, #26]
 8010afa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010afe:	4619      	mov	r1, r3
 8010b00:	200e      	movs	r0, #14
 8010b02:	f7f7 fef3 	bl	80088ec <pbuf_alloc>
 8010b06:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 80aa 	beq.w	8010c64 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	895b      	ldrh	r3, [r3, #10]
 8010b14:	461a      	mov	r2, r3
 8010b16:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b18:	3308      	adds	r3, #8
 8010b1a:	429a      	cmp	r2, r3
 8010b1c:	d203      	bcs.n	8010b26 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8010b1e:	6978      	ldr	r0, [r7, #20]
 8010b20:	f7f8 f9c8 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 8010b24:	e09f      	b.n	8010c66 <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8010b26:	697b      	ldr	r3, [r7, #20]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f002 f9fd 	bl	8012f2e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8010b34:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b36:	4619      	mov	r1, r3
 8010b38:	6978      	ldr	r0, [r7, #20]
 8010b3a:	f7f8 f935 	bl	8008da8 <pbuf_remove_header>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d009      	beq.n	8010b58 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8010b44:	4b4d      	ldr	r3, [pc, #308]	@ (8010c7c <icmp_input+0x240>)
 8010b46:	22b6      	movs	r2, #182	@ 0xb6
 8010b48:	494d      	ldr	r1, [pc, #308]	@ (8010c80 <icmp_input+0x244>)
 8010b4a:	484e      	ldr	r0, [pc, #312]	@ (8010c84 <icmp_input+0x248>)
 8010b4c:	f002 f8a0 	bl	8012c90 <iprintf>
          pbuf_free(r);
 8010b50:	6978      	ldr	r0, [r7, #20]
 8010b52:	f7f8 f9af 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 8010b56:	e086      	b.n	8010c66 <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8010b58:	6879      	ldr	r1, [r7, #4]
 8010b5a:	6978      	ldr	r0, [r7, #20]
 8010b5c:	f7f8 fadc 	bl	8009118 <pbuf_copy>
 8010b60:	4603      	mov	r3, r0
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d003      	beq.n	8010b6e <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8010b66:	6978      	ldr	r0, [r7, #20]
 8010b68:	f7f8 f9a4 	bl	8008eb4 <pbuf_free>
          goto icmperr;
 8010b6c:	e07b      	b.n	8010c66 <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f7f8 f9a0 	bl	8008eb4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	607b      	str	r3, [r7, #4]
 8010b78:	e00f      	b.n	8010b9a <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8010b7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010b7c:	330e      	adds	r3, #14
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7f8 f911 	bl	8008da8 <pbuf_remove_header>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d006      	beq.n	8010b9a <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8010b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8010c7c <icmp_input+0x240>)
 8010b8e:	22c7      	movs	r2, #199	@ 0xc7
 8010b90:	493d      	ldr	r1, [pc, #244]	@ (8010c88 <icmp_input+0x24c>)
 8010b92:	483c      	ldr	r0, [pc, #240]	@ (8010c84 <icmp_input+0x248>)
 8010b94:	f002 f87c 	bl	8012c90 <iprintf>
          goto icmperr;
 8010b98:	e065      	b.n	8010c66 <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8010ba0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7f8 f8ef 	bl	8008d88 <pbuf_add_header>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d145      	bne.n	8010c3c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8010bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8010c74 <icmp_input+0x238>)
 8010bc0:	691a      	ldr	r2, [r3, #16]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8010bc6:	693b      	ldr	r3, [r7, #16]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	885b      	ldrh	r3, [r3, #2]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8010bd6:	4293      	cmp	r3, r2
 8010bd8:	d907      	bls.n	8010bea <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	885b      	ldrh	r3, [r3, #2]
 8010bde:	b29b      	uxth	r3, r3
 8010be0:	3309      	adds	r3, #9
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	805a      	strh	r2, [r3, #2]
 8010be8:	e006      	b.n	8010bf8 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	885b      	ldrh	r3, [r3, #2]
 8010bee:	b29b      	uxth	r3, r3
 8010bf0:	3308      	adds	r3, #8
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	22ff      	movs	r2, #255	@ 0xff
 8010bfc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2200      	movs	r2, #0
 8010c02:	729a      	strb	r2, [r3, #10]
 8010c04:	2200      	movs	r2, #0
 8010c06:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8010c08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7f6 fdea 	bl	80077e6 <inet_chksum>
 8010c12:	4603      	mov	r3, r0
 8010c14:	461a      	mov	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	9302      	str	r3, [sp, #8]
 8010c1e:	2301      	movs	r3, #1
 8010c20:	9301      	str	r3, [sp, #4]
 8010c22:	2300      	movs	r3, #0
 8010c24:	9300      	str	r3, [sp, #0]
 8010c26:	23ff      	movs	r3, #255	@ 0xff
 8010c28:	2200      	movs	r2, #0
 8010c2a:	69f9      	ldr	r1, [r7, #28]
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f000 fa7d 	bl	801112c <ip4_output_if>
 8010c32:	4603      	mov	r3, r0
 8010c34:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8010c36:	e001      	b.n	8010c3c <icmp_input+0x200>
      break;
 8010c38:	bf00      	nop
 8010c3a:	e000      	b.n	8010c3e <icmp_input+0x202>
      break;
 8010c3c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7f8 f938 	bl	8008eb4 <pbuf_free>
  return;
 8010c44:	e013      	b.n	8010c6e <icmp_input+0x232>
    goto lenerr;
 8010c46:	bf00      	nop
 8010c48:	e002      	b.n	8010c50 <icmp_input+0x214>
    goto lenerr;
 8010c4a:	bf00      	nop
 8010c4c:	e000      	b.n	8010c50 <icmp_input+0x214>
        goto lenerr;
 8010c4e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f7f8 f92f 	bl	8008eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c56:	e00a      	b.n	8010c6e <icmp_input+0x232>
        goto icmperr;
 8010c58:	bf00      	nop
 8010c5a:	e004      	b.n	8010c66 <icmp_input+0x22a>
        goto icmperr;
 8010c5c:	bf00      	nop
 8010c5e:	e002      	b.n	8010c66 <icmp_input+0x22a>
          goto icmperr;
 8010c60:	bf00      	nop
 8010c62:	e000      	b.n	8010c66 <icmp_input+0x22a>
          goto icmperr;
 8010c64:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f7f8 f924 	bl	8008eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8010c6c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8010c6e:	3728      	adds	r7, #40	@ 0x28
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	200046e8 	.word	0x200046e8
 8010c78:	200046fc 	.word	0x200046fc
 8010c7c:	08016450 	.word	0x08016450
 8010c80:	08016488 	.word	0x08016488
 8010c84:	080164c0 	.word	0x080164c0
 8010c88:	080164e8 	.word	0x080164e8

08010c8c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	2103      	movs	r1, #3
 8010c9e:	6878      	ldr	r0, [r7, #4]
 8010ca0:	f000 f814 	bl	8010ccc <icmp_send_response>
}
 8010ca4:	bf00      	nop
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b082      	sub	sp, #8
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
 8010cb4:	460b      	mov	r3, r1
 8010cb6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8010cb8:	78fb      	ldrb	r3, [r7, #3]
 8010cba:	461a      	mov	r2, r3
 8010cbc:	210b      	movs	r1, #11
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 f804 	bl	8010ccc <icmp_send_response>
}
 8010cc4:	bf00      	nop
 8010cc6:	3708      	adds	r7, #8
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08c      	sub	sp, #48	@ 0x30
 8010cd0:	af04      	add	r7, sp, #16
 8010cd2:	6078      	str	r0, [r7, #4]
 8010cd4:	460b      	mov	r3, r1
 8010cd6:	70fb      	strb	r3, [r7, #3]
 8010cd8:	4613      	mov	r3, r2
 8010cda:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8010cdc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010ce0:	2124      	movs	r1, #36	@ 0x24
 8010ce2:	2022      	movs	r0, #34	@ 0x22
 8010ce4:	f7f7 fe02 	bl	80088ec <pbuf_alloc>
 8010ce8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d056      	beq.n	8010d9e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	895b      	ldrh	r3, [r3, #10]
 8010cf4:	2b23      	cmp	r3, #35	@ 0x23
 8010cf6:	d806      	bhi.n	8010d06 <icmp_send_response+0x3a>
 8010cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8010da8 <icmp_send_response+0xdc>)
 8010cfa:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8010cfe:	492b      	ldr	r1, [pc, #172]	@ (8010dac <icmp_send_response+0xe0>)
 8010d00:	482b      	ldr	r0, [pc, #172]	@ (8010db0 <icmp_send_response+0xe4>)
 8010d02:	f001 ffc5 	bl	8012c90 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	78fa      	ldrb	r2, [r7, #3]
 8010d16:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	78ba      	ldrb	r2, [r7, #2]
 8010d1c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	2200      	movs	r2, #0
 8010d22:	711a      	strb	r2, [r3, #4]
 8010d24:	2200      	movs	r2, #0
 8010d26:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	719a      	strb	r2, [r3, #6]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	f103 0008 	add.w	r0, r3, #8
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	685b      	ldr	r3, [r3, #4]
 8010d3e:	221c      	movs	r2, #28
 8010d40:	4619      	mov	r1, r3
 8010d42:	f002 f8f4 	bl	8012f2e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8010d46:	69bb      	ldr	r3, [r7, #24]
 8010d48:	68db      	ldr	r3, [r3, #12]
 8010d4a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8010d4c:	f107 030c 	add.w	r3, r7, #12
 8010d50:	4618      	mov	r0, r3
 8010d52:	f000 f82f 	bl	8010db4 <ip4_route>
 8010d56:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d01b      	beq.n	8010d96 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8010d5e:	697b      	ldr	r3, [r7, #20]
 8010d60:	2200      	movs	r2, #0
 8010d62:	709a      	strb	r2, [r3, #2]
 8010d64:	2200      	movs	r2, #0
 8010d66:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8010d68:	69fb      	ldr	r3, [r7, #28]
 8010d6a:	895b      	ldrh	r3, [r3, #10]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6978      	ldr	r0, [r7, #20]
 8010d70:	f7f6 fd39 	bl	80077e6 <inet_chksum>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8010d7c:	f107 020c 	add.w	r2, r7, #12
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	2301      	movs	r3, #1
 8010d86:	9301      	str	r3, [sp, #4]
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	23ff      	movs	r3, #255	@ 0xff
 8010d8e:	2100      	movs	r1, #0
 8010d90:	69f8      	ldr	r0, [r7, #28]
 8010d92:	f000 f9cb 	bl	801112c <ip4_output_if>
  }
  pbuf_free(q);
 8010d96:	69f8      	ldr	r0, [r7, #28]
 8010d98:	f7f8 f88c 	bl	8008eb4 <pbuf_free>
 8010d9c:	e000      	b.n	8010da0 <icmp_send_response+0xd4>
    return;
 8010d9e:	bf00      	nop
}
 8010da0:	3720      	adds	r7, #32
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	08016450 	.word	0x08016450
 8010dac:	0801651c 	.word	0x0801651c
 8010db0:	080164c0 	.word	0x080164c0

08010db4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8010dbc:	4b32      	ldr	r3, [pc, #200]	@ (8010e88 <ip4_route+0xd4>)
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	60fb      	str	r3, [r7, #12]
 8010dc2:	e036      	b.n	8010e32 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010dca:	f003 0301 	and.w	r3, r3, #1
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d02b      	beq.n	8010e2c <ip4_route+0x78>
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010dda:	089b      	lsrs	r3, r3, #2
 8010ddc:	f003 0301 	and.w	r3, r3, #1
 8010de0:	b2db      	uxtb	r3, r3
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d022      	beq.n	8010e2c <ip4_route+0x78>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	3304      	adds	r3, #4
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d01d      	beq.n	8010e2c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	3304      	adds	r3, #4
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	405a      	eors	r2, r3
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	3308      	adds	r3, #8
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	4013      	ands	r3, r2
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d101      	bne.n	8010e0c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	e038      	b.n	8010e7e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e12:	f003 0302 	and.w	r3, r3, #2
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d108      	bne.n	8010e2c <ip4_route+0x78>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681a      	ldr	r2, [r3, #0]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	330c      	adds	r3, #12
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d101      	bne.n	8010e2c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	e028      	b.n	8010e7e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	60fb      	str	r3, [r7, #12]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d1c5      	bne.n	8010dc4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010e38:	4b14      	ldr	r3, [pc, #80]	@ (8010e8c <ip4_route+0xd8>)
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d01a      	beq.n	8010e76 <ip4_route+0xc2>
 8010e40:	4b12      	ldr	r3, [pc, #72]	@ (8010e8c <ip4_route+0xd8>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e48:	f003 0301 	and.w	r3, r3, #1
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d012      	beq.n	8010e76 <ip4_route+0xc2>
 8010e50:	4b0e      	ldr	r3, [pc, #56]	@ (8010e8c <ip4_route+0xd8>)
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e58:	f003 0304 	and.w	r3, r3, #4
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00a      	beq.n	8010e76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010e60:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <ip4_route+0xd8>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	3304      	adds	r3, #4
 8010e66:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d004      	beq.n	8010e76 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8010e74:	d101      	bne.n	8010e7a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	e001      	b.n	8010e7e <ip4_route+0xca>
  }

  return netif_default;
 8010e7a:	4b04      	ldr	r3, [pc, #16]	@ (8010e8c <ip4_route+0xd8>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bc80      	pop	{r7}
 8010e86:	4770      	bx	lr
 8010e88:	200077dc 	.word	0x200077dc
 8010e8c:	200077e0 	.word	0x200077e0

08010e90 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010e9e:	f003 0301 	and.w	r3, r3, #1
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d016      	beq.n	8010ed6 <ip4_input_accept+0x46>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	3304      	adds	r3, #4
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d011      	beq.n	8010ed6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee0 <ip4_input_accept+0x50>)
 8010eb4:	695a      	ldr	r2, [r3, #20]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	3304      	adds	r3, #4
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	d008      	beq.n	8010ed2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8010ec0:	4b07      	ldr	r3, [pc, #28]	@ (8010ee0 <ip4_input_accept+0x50>)
 8010ec2:	695b      	ldr	r3, [r3, #20]
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	f000 fa6e 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 8010ecc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e000      	b.n	8010ed8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8010ed6:	2300      	movs	r3, #0
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	200046e8 	.word	0x200046e8

08010ee4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	091b      	lsrs	r3, r3, #4
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	2b04      	cmp	r3, #4
 8010efe:	d004      	beq.n	8010f0a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8010f00:	6878      	ldr	r0, [r7, #4]
 8010f02:	f7f7 ffd7 	bl	8008eb4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8010f06:	2300      	movs	r3, #0
 8010f08:	e107      	b.n	801111a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	781b      	ldrb	r3, [r3, #0]
 8010f0e:	f003 030f 	and.w	r3, r3, #15
 8010f12:	b2db      	uxtb	r3, r3
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	b2db      	uxtb	r3, r3
 8010f18:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	885b      	ldrh	r3, [r3, #2]
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7f6 fae5 	bl	80074f0 <lwip_htons>
 8010f26:	4603      	mov	r3, r0
 8010f28:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	891b      	ldrh	r3, [r3, #8]
 8010f2e:	89ba      	ldrh	r2, [r7, #12]
 8010f30:	429a      	cmp	r2, r3
 8010f32:	d204      	bcs.n	8010f3e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8010f34:	89bb      	ldrh	r3, [r7, #12]
 8010f36:	4619      	mov	r1, r3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7f7 fe35 	bl	8008ba8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	895b      	ldrh	r3, [r3, #10]
 8010f42:	89fa      	ldrh	r2, [r7, #14]
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d807      	bhi.n	8010f58 <ip4_input+0x74>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	891b      	ldrh	r3, [r3, #8]
 8010f4c:	89ba      	ldrh	r2, [r7, #12]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d802      	bhi.n	8010f58 <ip4_input+0x74>
 8010f52:	89fb      	ldrh	r3, [r7, #14]
 8010f54:	2b13      	cmp	r3, #19
 8010f56:	d804      	bhi.n	8010f62 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7f7 ffab 	bl	8008eb4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	e0db      	b.n	801111a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	4a6f      	ldr	r2, [pc, #444]	@ (8011124 <ip4_input+0x240>)
 8010f68:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	68db      	ldr	r3, [r3, #12]
 8010f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8011124 <ip4_input+0x240>)
 8010f70:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8010f72:	4b6c      	ldr	r3, [pc, #432]	@ (8011124 <ip4_input+0x240>)
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f7a:	2be0      	cmp	r3, #224	@ 0xe0
 8010f7c:	d112      	bne.n	8010fa4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8010f7e:	683b      	ldr	r3, [r7, #0]
 8010f80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	b2db      	uxtb	r3, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d007      	beq.n	8010f9e <ip4_input+0xba>
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	3304      	adds	r3, #4
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d002      	beq.n	8010f9e <ip4_input+0xba>
      netif = inp;
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	613b      	str	r3, [r7, #16]
 8010f9c:	e02a      	b.n	8010ff4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	613b      	str	r3, [r7, #16]
 8010fa2:	e027      	b.n	8010ff4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8010fa4:	6838      	ldr	r0, [r7, #0]
 8010fa6:	f7ff ff73 	bl	8010e90 <ip4_input_accept>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d002      	beq.n	8010fb6 <ip4_input+0xd2>
      netif = inp;
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	613b      	str	r3, [r7, #16]
 8010fb4:	e01e      	b.n	8010ff4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8010fba:	4b5a      	ldr	r3, [pc, #360]	@ (8011124 <ip4_input+0x240>)
 8010fbc:	695b      	ldr	r3, [r3, #20]
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8010fc2:	d017      	beq.n	8010ff4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8010fc4:	4b58      	ldr	r3, [pc, #352]	@ (8011128 <ip4_input+0x244>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	613b      	str	r3, [r7, #16]
 8010fca:	e00e      	b.n	8010fea <ip4_input+0x106>
          if (netif == inp) {
 8010fcc:	693a      	ldr	r2, [r7, #16]
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d006      	beq.n	8010fe2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8010fd4:	6938      	ldr	r0, [r7, #16]
 8010fd6:	f7ff ff5b 	bl	8010e90 <ip4_input_accept>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d108      	bne.n	8010ff2 <ip4_input+0x10e>
 8010fe0:	e000      	b.n	8010fe4 <ip4_input+0x100>
            continue;
 8010fe2:	bf00      	nop
        NETIF_FOREACH(netif) {
 8010fe4:	693b      	ldr	r3, [r7, #16]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	613b      	str	r3, [r7, #16]
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d1ed      	bne.n	8010fcc <ip4_input+0xe8>
 8010ff0:	e000      	b.n	8010ff4 <ip4_input+0x110>
            break;
 8010ff2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8010ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8011124 <ip4_input+0x240>)
 8010ff6:	691b      	ldr	r3, [r3, #16]
 8010ff8:	6839      	ldr	r1, [r7, #0]
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f000 f9d4 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d105      	bne.n	8011012 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8011006:	4b47      	ldr	r3, [pc, #284]	@ (8011124 <ip4_input+0x240>)
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801100e:	2be0      	cmp	r3, #224	@ 0xe0
 8011010:	d104      	bne.n	801101c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7f7 ff4e 	bl	8008eb4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8011018:	2300      	movs	r3, #0
 801101a:	e07e      	b.n	801111a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801101c:	693b      	ldr	r3, [r7, #16]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d104      	bne.n	801102c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7f7 ff46 	bl	8008eb4 <pbuf_free>
    return ERR_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	e076      	b.n	801111a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	88db      	ldrh	r3, [r3, #6]
 8011030:	b29b      	uxth	r3, r3
 8011032:	461a      	mov	r2, r3
 8011034:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8011038:	4013      	ands	r3, r2
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00b      	beq.n	8011056 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fcf6 	bl	8011a30 <ip4_reass>
 8011044:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d101      	bne.n	8011050 <ip4_input+0x16c>
      return ERR_OK;
 801104c:	2300      	movs	r3, #0
 801104e:	e064      	b.n	801111a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8011056:	4a33      	ldr	r2, [pc, #204]	@ (8011124 <ip4_input+0x240>)
 8011058:	693b      	ldr	r3, [r7, #16]
 801105a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801105c:	4a31      	ldr	r2, [pc, #196]	@ (8011124 <ip4_input+0x240>)
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8011062:	4a30      	ldr	r2, [pc, #192]	@ (8011124 <ip4_input+0x240>)
 8011064:	697b      	ldr	r3, [r7, #20]
 8011066:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f003 030f 	and.w	r3, r3, #15
 8011070:	b2db      	uxtb	r3, r3
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	b2db      	uxtb	r3, r3
 8011076:	461a      	mov	r2, r3
 8011078:	4b2a      	ldr	r3, [pc, #168]	@ (8011124 <ip4_input+0x240>)
 801107a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801107c:	89fb      	ldrh	r3, [r7, #14]
 801107e:	4619      	mov	r1, r3
 8011080:	6878      	ldr	r0, [r7, #4]
 8011082:	f7f7 fe91 	bl	8008da8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	7a5b      	ldrb	r3, [r3, #9]
 801108a:	2b11      	cmp	r3, #17
 801108c:	d006      	beq.n	801109c <ip4_input+0x1b8>
 801108e:	2b11      	cmp	r3, #17
 8011090:	dc13      	bgt.n	80110ba <ip4_input+0x1d6>
 8011092:	2b01      	cmp	r3, #1
 8011094:	d00c      	beq.n	80110b0 <ip4_input+0x1cc>
 8011096:	2b06      	cmp	r3, #6
 8011098:	d005      	beq.n	80110a6 <ip4_input+0x1c2>
 801109a:	e00e      	b.n	80110ba <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7fe fc22 	bl	800f8e8 <udp_input>
        break;
 80110a4:	e026      	b.n	80110f4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80110a6:	6839      	ldr	r1, [r7, #0]
 80110a8:	6878      	ldr	r0, [r7, #4]
 80110aa:	f7f9 ffbf 	bl	800b02c <tcp_input>
        break;
 80110ae:	e021      	b.n	80110f4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80110b0:	6839      	ldr	r1, [r7, #0]
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7ff fcc2 	bl	8010a3c <icmp_input>
        break;
 80110b8:	e01c      	b.n	80110f4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80110ba:	4b1a      	ldr	r3, [pc, #104]	@ (8011124 <ip4_input+0x240>)
 80110bc:	695b      	ldr	r3, [r3, #20]
 80110be:	6939      	ldr	r1, [r7, #16]
 80110c0:	4618      	mov	r0, r3
 80110c2:	f000 f971 	bl	80113a8 <ip4_addr_isbroadcast_u32>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d10f      	bne.n	80110ec <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80110cc:	4b15      	ldr	r3, [pc, #84]	@ (8011124 <ip4_input+0x240>)
 80110ce:	695b      	ldr	r3, [r3, #20]
 80110d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80110d4:	2be0      	cmp	r3, #224	@ 0xe0
 80110d6:	d009      	beq.n	80110ec <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80110d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80110dc:	4619      	mov	r1, r3
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7f7 fed5 	bl	8008e8e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80110e4:	2102      	movs	r1, #2
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff fdd0 	bl	8010c8c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f7f7 fee1 	bl	8008eb4 <pbuf_free>
        break;
 80110f2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80110f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011124 <ip4_input+0x240>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80110fa:	4b0a      	ldr	r3, [pc, #40]	@ (8011124 <ip4_input+0x240>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8011100:	4b08      	ldr	r3, [pc, #32]	@ (8011124 <ip4_input+0x240>)
 8011102:	2200      	movs	r2, #0
 8011104:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8011106:	4b07      	ldr	r3, [pc, #28]	@ (8011124 <ip4_input+0x240>)
 8011108:	2200      	movs	r2, #0
 801110a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801110c:	4b05      	ldr	r3, [pc, #20]	@ (8011124 <ip4_input+0x240>)
 801110e:	2200      	movs	r2, #0
 8011110:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8011112:	4b04      	ldr	r3, [pc, #16]	@ (8011124 <ip4_input+0x240>)
 8011114:	2200      	movs	r2, #0
 8011116:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3718      	adds	r7, #24
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	200046e8 	.word	0x200046e8
 8011128:	200077dc 	.word	0x200077dc

0801112c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b08a      	sub	sp, #40	@ 0x28
 8011130:	af04      	add	r7, sp, #16
 8011132:	60f8      	str	r0, [r7, #12]
 8011134:	60b9      	str	r1, [r7, #8]
 8011136:	607a      	str	r2, [r7, #4]
 8011138:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d009      	beq.n	8011158 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d003      	beq.n	8011152 <ip4_output_if+0x26>
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d102      	bne.n	8011158 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8011152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011154:	3304      	adds	r3, #4
 8011156:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8011158:	78fa      	ldrb	r2, [r7, #3]
 801115a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115c:	9302      	str	r3, [sp, #8]
 801115e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011162:	9301      	str	r3, [sp, #4]
 8011164:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011168:	9300      	str	r3, [sp, #0]
 801116a:	4613      	mov	r3, r2
 801116c:	687a      	ldr	r2, [r7, #4]
 801116e:	6979      	ldr	r1, [r7, #20]
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f000 f805 	bl	8011180 <ip4_output_if_src>
 8011176:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8011178:	4618      	mov	r0, r3
 801117a:	3718      	adds	r7, #24
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}

08011180 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8011180:	b580      	push	{r7, lr}
 8011182:	b088      	sub	sp, #32
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 801118e:	2300      	movs	r3, #0
 8011190:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	7b9b      	ldrb	r3, [r3, #14]
 8011196:	2b01      	cmp	r3, #1
 8011198:	d006      	beq.n	80111a8 <ip4_output_if_src+0x28>
 801119a:	4b7d      	ldr	r3, [pc, #500]	@ (8011390 <ip4_output_if_src+0x210>)
 801119c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80111a0:	497c      	ldr	r1, [pc, #496]	@ (8011394 <ip4_output_if_src+0x214>)
 80111a2:	487d      	ldr	r0, [pc, #500]	@ (8011398 <ip4_output_if_src+0x218>)
 80111a4:	f001 fd74 	bl	8012c90 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 80c4 	beq.w	8011338 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 80111b0:	2314      	movs	r3, #20
 80111b2:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80111b4:	2114      	movs	r1, #20
 80111b6:	68f8      	ldr	r0, [r7, #12]
 80111b8:	f7f7 fde6 	bl	8008d88 <pbuf_add_header>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80111c2:	f06f 0301 	mvn.w	r3, #1
 80111c6:	e0df      	b.n	8011388 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	685b      	ldr	r3, [r3, #4]
 80111cc:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	895b      	ldrh	r3, [r3, #10]
 80111d2:	2b13      	cmp	r3, #19
 80111d4:	d806      	bhi.n	80111e4 <ip4_output_if_src+0x64>
 80111d6:	4b6e      	ldr	r3, [pc, #440]	@ (8011390 <ip4_output_if_src+0x210>)
 80111d8:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80111dc:	496f      	ldr	r1, [pc, #444]	@ (801139c <ip4_output_if_src+0x21c>)
 80111de:	486e      	ldr	r0, [pc, #440]	@ (8011398 <ip4_output_if_src+0x218>)
 80111e0:	f001 fd56 	bl	8012c90 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	78fa      	ldrb	r2, [r7, #3]
 80111e8:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80111f0:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 80111f2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80111f6:	78fb      	ldrb	r3, [r7, #3]
 80111f8:	021b      	lsls	r3, r3, #8
 80111fa:	4313      	orrs	r3, r2
 80111fc:	021b      	lsls	r3, r3, #8
 80111fe:	b21a      	sxth	r2, r3
 8011200:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8011204:	78fb      	ldrb	r3, [r7, #3]
 8011206:	021b      	lsls	r3, r3, #8
 8011208:	430b      	orrs	r3, r1
 801120a:	121b      	asrs	r3, r3, #8
 801120c:	b21b      	sxth	r3, r3
 801120e:	b2db      	uxtb	r3, r3
 8011210:	b21b      	sxth	r3, r3
 8011212:	4313      	orrs	r3, r2
 8011214:	b21b      	sxth	r3, r3
 8011216:	b29b      	uxth	r3, r3
 8011218:	461a      	mov	r2, r3
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	4413      	add	r3, r2
 801121e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8011228:	69bb      	ldr	r3, [r7, #24]
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	b29b      	uxth	r3, r3
 801122e:	69fa      	ldr	r2, [r7, #28]
 8011230:	4413      	add	r3, r2
 8011232:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8011234:	69bb      	ldr	r3, [r7, #24]
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	0c1b      	lsrs	r3, r3, #16
 801123a:	69fa      	ldr	r2, [r7, #28]
 801123c:	4413      	add	r3, r2
 801123e:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8011240:	8afb      	ldrh	r3, [r7, #22]
 8011242:	089b      	lsrs	r3, r3, #2
 8011244:	b29b      	uxth	r3, r3
 8011246:	b2db      	uxtb	r3, r3
 8011248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801124c:	b2da      	uxtb	r2, r3
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011258:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801125a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801125e:	69bb      	ldr	r3, [r7, #24]
 8011260:	781b      	ldrb	r3, [r3, #0]
 8011262:	021b      	lsls	r3, r3, #8
 8011264:	4313      	orrs	r3, r2
 8011266:	021b      	lsls	r3, r3, #8
 8011268:	b21a      	sxth	r2, r3
 801126a:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	021b      	lsls	r3, r3, #8
 8011274:	430b      	orrs	r3, r1
 8011276:	121b      	asrs	r3, r3, #8
 8011278:	b21b      	sxth	r3, r3
 801127a:	b2db      	uxtb	r3, r3
 801127c:	b21b      	sxth	r3, r3
 801127e:	4313      	orrs	r3, r2
 8011280:	b21b      	sxth	r3, r3
 8011282:	b29b      	uxth	r3, r3
 8011284:	461a      	mov	r2, r3
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	4413      	add	r3, r2
 801128a:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	891b      	ldrh	r3, [r3, #8]
 8011290:	4618      	mov	r0, r3
 8011292:	f7f6 f92d 	bl	80074f0 <lwip_htons>
 8011296:	4603      	mov	r3, r0
 8011298:	461a      	mov	r2, r3
 801129a:	69bb      	ldr	r3, [r7, #24]
 801129c:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	885b      	ldrh	r3, [r3, #2]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	461a      	mov	r2, r3
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	4413      	add	r3, r2
 80112aa:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	2200      	movs	r2, #0
 80112b0:	719a      	strb	r2, [r3, #6]
 80112b2:	2200      	movs	r2, #0
 80112b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80112b6:	4b3a      	ldr	r3, [pc, #232]	@ (80113a0 <ip4_output_if_src+0x220>)
 80112b8:	881b      	ldrh	r3, [r3, #0]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7f6 f918 	bl	80074f0 <lwip_htons>
 80112c0:	4603      	mov	r3, r0
 80112c2:	461a      	mov	r2, r3
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	889b      	ldrh	r3, [r3, #4]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	461a      	mov	r2, r3
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	4413      	add	r3, r2
 80112d4:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80112d6:	4b32      	ldr	r3, [pc, #200]	@ (80113a0 <ip4_output_if_src+0x220>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	3301      	adds	r3, #1
 80112dc:	b29a      	uxth	r2, r3
 80112de:	4b30      	ldr	r3, [pc, #192]	@ (80113a0 <ip4_output_if_src+0x220>)
 80112e0:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d104      	bne.n	80112f2 <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80112e8:	4b2e      	ldr	r3, [pc, #184]	@ (80113a4 <ip4_output_if_src+0x224>)
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	60da      	str	r2, [r3, #12]
 80112f0:	e003      	b.n	80112fa <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	68db      	ldr	r3, [r3, #12]
 80112fe:	b29b      	uxth	r3, r3
 8011300:	69fa      	ldr	r2, [r7, #28]
 8011302:	4413      	add	r3, r2
 8011304:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	0c1b      	lsrs	r3, r3, #16
 801130c:	69fa      	ldr	r2, [r7, #28]
 801130e:	4413      	add	r3, r2
 8011310:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	0c1a      	lsrs	r2, r3, #16
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	b29b      	uxth	r3, r3
 801131a:	4413      	add	r3, r2
 801131c:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	0c1b      	lsrs	r3, r3, #16
 8011322:	69fa      	ldr	r2, [r7, #28]
 8011324:	4413      	add	r3, r2
 8011326:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	43db      	mvns	r3, r3
 801132c:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	b29a      	uxth	r2, r3
 8011332:	69bb      	ldr	r3, [r7, #24]
 8011334:	815a      	strh	r2, [r3, #10]
 8011336:	e00f      	b.n	8011358 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	895b      	ldrh	r3, [r3, #10]
 801133c:	2b13      	cmp	r3, #19
 801133e:	d802      	bhi.n	8011346 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8011340:	f06f 0301 	mvn.w	r3, #1
 8011344:	e020      	b.n	8011388 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	685b      	ldr	r3, [r3, #4]
 801134a:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	691b      	ldr	r3, [r3, #16]
 8011350:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8011352:	f107 0310 	add.w	r3, r7, #16
 8011356:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8011358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801135c:	2b00      	cmp	r3, #0
 801135e:	d00c      	beq.n	801137a <ip4_output_if_src+0x1fa>
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	891a      	ldrh	r2, [r3, #8]
 8011364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011366:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011368:	429a      	cmp	r2, r3
 801136a:	d906      	bls.n	801137a <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 801136c:	687a      	ldr	r2, [r7, #4]
 801136e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011370:	68f8      	ldr	r0, [r7, #12]
 8011372:	f000 fd59 	bl	8011e28 <ip4_frag>
 8011376:	4603      	mov	r3, r0
 8011378:	e006      	b.n	8011388 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801137a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	687a      	ldr	r2, [r7, #4]
 8011380:	68f9      	ldr	r1, [r7, #12]
 8011382:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011384:	4798      	blx	r3
 8011386:	4603      	mov	r3, r0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3720      	adds	r7, #32
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	08016548 	.word	0x08016548
 8011394:	0801657c 	.word	0x0801657c
 8011398:	08016588 	.word	0x08016588
 801139c:	080165b0 	.word	0x080165b0
 80113a0:	20007938 	.word	0x20007938
 80113a4:	08017888 	.word	0x08017888

080113a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b085      	sub	sp, #20
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
 80113b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80113bc:	d002      	beq.n	80113c4 <ip4_addr_isbroadcast_u32+0x1c>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d101      	bne.n	80113c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80113c4:	2301      	movs	r3, #1
 80113c6:	e02a      	b.n	801141e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80113c8:	683b      	ldr	r3, [r7, #0]
 80113ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80113ce:	f003 0302 	and.w	r3, r3, #2
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d101      	bne.n	80113da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80113d6:	2300      	movs	r3, #0
 80113d8:	e021      	b.n	801141e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	3304      	adds	r3, #4
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d101      	bne.n	80113ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80113e6:	2300      	movs	r3, #0
 80113e8:	e019      	b.n	801141e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	3304      	adds	r3, #4
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	405a      	eors	r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	3308      	adds	r3, #8
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	4013      	ands	r3, r2
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d10d      	bne.n	801141c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	3308      	adds	r3, #8
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	43da      	mvns	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	3308      	adds	r3, #8
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8011414:	429a      	cmp	r2, r3
 8011416:	d101      	bne.n	801141c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8011418:	2301      	movs	r3, #1
 801141a:	e000      	b.n	801141e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801141c:	2300      	movs	r3, #0
  }
}
 801141e:	4618      	mov	r0, r3
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	bc80      	pop	{r7}
 8011426:	4770      	bx	lr

08011428 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801142e:	2300      	movs	r3, #0
 8011430:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8011432:	4b12      	ldr	r3, [pc, #72]	@ (801147c <ip_reass_tmr+0x54>)
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8011438:	e018      	b.n	801146c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	7fdb      	ldrb	r3, [r3, #31]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00b      	beq.n	801145a <ip_reass_tmr+0x32>
      r->timer--;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	7fdb      	ldrb	r3, [r3, #31]
 8011446:	3b01      	subs	r3, #1
 8011448:	b2da      	uxtb	r2, r3
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	60fb      	str	r3, [r7, #12]
 8011458:	e008      	b.n	801146c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8011464:	68b9      	ldr	r1, [r7, #8]
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 f80a 	bl	8011480 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1e3      	bne.n	801143a <ip_reass_tmr+0x12>
    }
  }
}
 8011472:	bf00      	nop
 8011474:	bf00      	nop
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	2000793c 	.word	0x2000793c

08011480 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b088      	sub	sp, #32
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801148a:	2300      	movs	r3, #0
 801148c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	429a      	cmp	r2, r3
 8011494:	d105      	bne.n	80114a2 <ip_reass_free_complete_datagram+0x22>
 8011496:	4b45      	ldr	r3, [pc, #276]	@ (80115ac <ip_reass_free_complete_datagram+0x12c>)
 8011498:	22ab      	movs	r2, #171	@ 0xab
 801149a:	4945      	ldr	r1, [pc, #276]	@ (80115b0 <ip_reass_free_complete_datagram+0x130>)
 801149c:	4845      	ldr	r0, [pc, #276]	@ (80115b4 <ip_reass_free_complete_datagram+0x134>)
 801149e:	f001 fbf7 	bl	8012c90 <iprintf>
  if (prev != NULL) {
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d00a      	beq.n	80114be <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	687a      	ldr	r2, [r7, #4]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d005      	beq.n	80114be <ip_reass_free_complete_datagram+0x3e>
 80114b2:	4b3e      	ldr	r3, [pc, #248]	@ (80115ac <ip_reass_free_complete_datagram+0x12c>)
 80114b4:	22ad      	movs	r2, #173	@ 0xad
 80114b6:	4940      	ldr	r1, [pc, #256]	@ (80115b8 <ip_reass_free_complete_datagram+0x138>)
 80114b8:	483e      	ldr	r0, [pc, #248]	@ (80115b4 <ip_reass_free_complete_datagram+0x134>)
 80114ba:	f001 fbe9 	bl	8012c90 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	685b      	ldr	r3, [r3, #4]
 80114c4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	889b      	ldrh	r3, [r3, #4]
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d12a      	bne.n	8011526 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	681a      	ldr	r2, [r3, #0]
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	6858      	ldr	r0, [r3, #4]
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	3308      	adds	r3, #8
 80114e6:	2214      	movs	r2, #20
 80114e8:	4619      	mov	r1, r3
 80114ea:	f001 fd20 	bl	8012f2e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80114ee:	2101      	movs	r1, #1
 80114f0:	69b8      	ldr	r0, [r7, #24]
 80114f2:	f7ff fbdb 	bl	8010cac <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80114f6:	69b8      	ldr	r0, [r7, #24]
 80114f8:	f7f7 fd6a 	bl	8008fd0 <pbuf_clen>
 80114fc:	4603      	mov	r3, r0
 80114fe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011500:	8bfa      	ldrh	r2, [r7, #30]
 8011502:	8a7b      	ldrh	r3, [r7, #18]
 8011504:	4413      	add	r3, r2
 8011506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801150a:	db05      	blt.n	8011518 <ip_reass_free_complete_datagram+0x98>
 801150c:	4b27      	ldr	r3, [pc, #156]	@ (80115ac <ip_reass_free_complete_datagram+0x12c>)
 801150e:	22bc      	movs	r2, #188	@ 0xbc
 8011510:	492a      	ldr	r1, [pc, #168]	@ (80115bc <ip_reass_free_complete_datagram+0x13c>)
 8011512:	4828      	ldr	r0, [pc, #160]	@ (80115b4 <ip_reass_free_complete_datagram+0x134>)
 8011514:	f001 fbbc 	bl	8012c90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011518:	8bfa      	ldrh	r2, [r7, #30]
 801151a:	8a7b      	ldrh	r3, [r7, #18]
 801151c:	4413      	add	r3, r2
 801151e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8011520:	69b8      	ldr	r0, [r7, #24]
 8011522:	f7f7 fcc7 	bl	8008eb4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	685b      	ldr	r3, [r3, #4]
 801152a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801152c:	e01f      	b.n	801156e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801152e:	69bb      	ldr	r3, [r7, #24]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	617b      	str	r3, [r7, #20]
    pcur = p;
 8011534:	69bb      	ldr	r3, [r7, #24]
 8011536:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	f7f7 fd46 	bl	8008fd0 <pbuf_clen>
 8011544:	4603      	mov	r3, r0
 8011546:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8011548:	8bfa      	ldrh	r2, [r7, #30]
 801154a:	8a7b      	ldrh	r3, [r7, #18]
 801154c:	4413      	add	r3, r2
 801154e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011552:	db05      	blt.n	8011560 <ip_reass_free_complete_datagram+0xe0>
 8011554:	4b15      	ldr	r3, [pc, #84]	@ (80115ac <ip_reass_free_complete_datagram+0x12c>)
 8011556:	22cc      	movs	r2, #204	@ 0xcc
 8011558:	4918      	ldr	r1, [pc, #96]	@ (80115bc <ip_reass_free_complete_datagram+0x13c>)
 801155a:	4816      	ldr	r0, [pc, #88]	@ (80115b4 <ip_reass_free_complete_datagram+0x134>)
 801155c:	f001 fb98 	bl	8012c90 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8011560:	8bfa      	ldrh	r2, [r7, #30]
 8011562:	8a7b      	ldrh	r3, [r7, #18]
 8011564:	4413      	add	r3, r2
 8011566:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8011568:	68f8      	ldr	r0, [r7, #12]
 801156a:	f7f7 fca3 	bl	8008eb4 <pbuf_free>
  while (p != NULL) {
 801156e:	69bb      	ldr	r3, [r7, #24]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d1dc      	bne.n	801152e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8011574:	6839      	ldr	r1, [r7, #0]
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 f8c2 	bl	8011700 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801157c:	4b10      	ldr	r3, [pc, #64]	@ (80115c0 <ip_reass_free_complete_datagram+0x140>)
 801157e:	881b      	ldrh	r3, [r3, #0]
 8011580:	8bfa      	ldrh	r2, [r7, #30]
 8011582:	429a      	cmp	r2, r3
 8011584:	d905      	bls.n	8011592 <ip_reass_free_complete_datagram+0x112>
 8011586:	4b09      	ldr	r3, [pc, #36]	@ (80115ac <ip_reass_free_complete_datagram+0x12c>)
 8011588:	22d2      	movs	r2, #210	@ 0xd2
 801158a:	490e      	ldr	r1, [pc, #56]	@ (80115c4 <ip_reass_free_complete_datagram+0x144>)
 801158c:	4809      	ldr	r0, [pc, #36]	@ (80115b4 <ip_reass_free_complete_datagram+0x134>)
 801158e:	f001 fb7f 	bl	8012c90 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8011592:	4b0b      	ldr	r3, [pc, #44]	@ (80115c0 <ip_reass_free_complete_datagram+0x140>)
 8011594:	881a      	ldrh	r2, [r3, #0]
 8011596:	8bfb      	ldrh	r3, [r7, #30]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	b29a      	uxth	r2, r3
 801159c:	4b08      	ldr	r3, [pc, #32]	@ (80115c0 <ip_reass_free_complete_datagram+0x140>)
 801159e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80115a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3720      	adds	r7, #32
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	080165e0 	.word	0x080165e0
 80115b0:	0801661c 	.word	0x0801661c
 80115b4:	08016628 	.word	0x08016628
 80115b8:	08016650 	.word	0x08016650
 80115bc:	08016664 	.word	0x08016664
 80115c0:	20007940 	.word	0x20007940
 80115c4:	08016684 	.word	0x08016684

080115c8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b08a      	sub	sp, #40	@ 0x28
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80115d2:	2300      	movs	r3, #0
 80115d4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80115d6:	2300      	movs	r3, #0
 80115d8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80115da:	2300      	movs	r3, #0
 80115dc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80115de:	2300      	movs	r3, #0
 80115e0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80115e2:	2300      	movs	r3, #0
 80115e4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80115e6:	4b28      	ldr	r3, [pc, #160]	@ (8011688 <ip_reass_remove_oldest_datagram+0xc0>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80115ec:	e030      	b.n	8011650 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80115ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115f0:	695a      	ldr	r2, [r3, #20]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	68db      	ldr	r3, [r3, #12]
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d10c      	bne.n	8011614 <ip_reass_remove_oldest_datagram+0x4c>
 80115fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115fc:	699a      	ldr	r2, [r3, #24]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	691b      	ldr	r3, [r3, #16]
 8011602:	429a      	cmp	r2, r3
 8011604:	d106      	bne.n	8011614 <ip_reass_remove_oldest_datagram+0x4c>
 8011606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011608:	899a      	ldrh	r2, [r3, #12]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	889b      	ldrh	r3, [r3, #4]
 801160e:	b29b      	uxth	r3, r3
 8011610:	429a      	cmp	r2, r3
 8011612:	d014      	beq.n	801163e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	3301      	adds	r3, #1
 8011618:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801161a:	6a3b      	ldr	r3, [r7, #32]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d104      	bne.n	801162a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8011620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011622:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	61bb      	str	r3, [r7, #24]
 8011628:	e009      	b.n	801163e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162c:	7fda      	ldrb	r2, [r3, #31]
 801162e:	6a3b      	ldr	r3, [r7, #32]
 8011630:	7fdb      	ldrb	r3, [r3, #31]
 8011632:	429a      	cmp	r2, r3
 8011634:	d803      	bhi.n	801163e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8011636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011638:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8011646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011648:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8011650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1cb      	bne.n	80115ee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8011656:	6a3b      	ldr	r3, [r7, #32]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d008      	beq.n	801166e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801165c:	69b9      	ldr	r1, [r7, #24]
 801165e:	6a38      	ldr	r0, [r7, #32]
 8011660:	f7ff ff0e 	bl	8011480 <ip_reass_free_complete_datagram>
 8011664:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8011666:	697a      	ldr	r2, [r7, #20]
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4413      	add	r3, r2
 801166c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801166e:	697a      	ldr	r2, [r7, #20]
 8011670:	683b      	ldr	r3, [r7, #0]
 8011672:	429a      	cmp	r2, r3
 8011674:	da02      	bge.n	801167c <ip_reass_remove_oldest_datagram+0xb4>
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	2b01      	cmp	r3, #1
 801167a:	dcac      	bgt.n	80115d6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801167c:	697b      	ldr	r3, [r7, #20]
}
 801167e:	4618      	mov	r0, r3
 8011680:	3728      	adds	r7, #40	@ 0x28
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	2000793c 	.word	0x2000793c

0801168c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b084      	sub	sp, #16
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8011696:	2004      	movs	r0, #4
 8011698:	f7f6 fd82 	bl	80081a0 <memp_malloc>
 801169c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d110      	bne.n	80116c6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80116a4:	6839      	ldr	r1, [r7, #0]
 80116a6:	6878      	ldr	r0, [r7, #4]
 80116a8:	f7ff ff8e 	bl	80115c8 <ip_reass_remove_oldest_datagram>
 80116ac:	4602      	mov	r2, r0
 80116ae:	683b      	ldr	r3, [r7, #0]
 80116b0:	4293      	cmp	r3, r2
 80116b2:	dc03      	bgt.n	80116bc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80116b4:	2004      	movs	r0, #4
 80116b6:	f7f6 fd73 	bl	80081a0 <memp_malloc>
 80116ba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d101      	bne.n	80116c6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80116c2:	2300      	movs	r3, #0
 80116c4:	e016      	b.n	80116f4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80116c6:	2220      	movs	r2, #32
 80116c8:	2100      	movs	r1, #0
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f001 fb45 	bl	8012d5a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	220f      	movs	r2, #15
 80116d4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80116d6:	4b09      	ldr	r3, [pc, #36]	@ (80116fc <ip_reass_enqueue_new_datagram+0x70>)
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80116de:	4a07      	ldr	r2, [pc, #28]	@ (80116fc <ip_reass_enqueue_new_datagram+0x70>)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	3308      	adds	r3, #8
 80116e8:	2214      	movs	r2, #20
 80116ea:	6879      	ldr	r1, [r7, #4]
 80116ec:	4618      	mov	r0, r3
 80116ee:	f001 fc1e 	bl	8012f2e <memcpy>
  return ipr;
 80116f2:	68fb      	ldr	r3, [r7, #12]
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3710      	adds	r7, #16
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	2000793c 	.word	0x2000793c

08011700 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b082      	sub	sp, #8
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
 8011708:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801170a:	4b10      	ldr	r3, [pc, #64]	@ (801174c <ip_reass_dequeue_datagram+0x4c>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	429a      	cmp	r2, r3
 8011712:	d104      	bne.n	801171e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4a0c      	ldr	r2, [pc, #48]	@ (801174c <ip_reass_dequeue_datagram+0x4c>)
 801171a:	6013      	str	r3, [r2, #0]
 801171c:	e00d      	b.n	801173a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d106      	bne.n	8011732 <ip_reass_dequeue_datagram+0x32>
 8011724:	4b0a      	ldr	r3, [pc, #40]	@ (8011750 <ip_reass_dequeue_datagram+0x50>)
 8011726:	f240 1245 	movw	r2, #325	@ 0x145
 801172a:	490a      	ldr	r1, [pc, #40]	@ (8011754 <ip_reass_dequeue_datagram+0x54>)
 801172c:	480a      	ldr	r0, [pc, #40]	@ (8011758 <ip_reass_dequeue_datagram+0x58>)
 801172e:	f001 faaf 	bl	8012c90 <iprintf>
    prev->next = ipr->next;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801173a:	6879      	ldr	r1, [r7, #4]
 801173c:	2004      	movs	r0, #4
 801173e:	f7f6 fd81 	bl	8008244 <memp_free>
}
 8011742:	bf00      	nop
 8011744:	3708      	adds	r7, #8
 8011746:	46bd      	mov	sp, r7
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	2000793c 	.word	0x2000793c
 8011750:	080165e0 	.word	0x080165e0
 8011754:	080166a8 	.word	0x080166a8
 8011758:	08016628 	.word	0x08016628

0801175c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b08c      	sub	sp, #48	@ 0x30
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8011768:	2300      	movs	r3, #0
 801176a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801176c:	2301      	movs	r3, #1
 801176e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	685b      	ldr	r3, [r3, #4]
 8011774:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	885b      	ldrh	r3, [r3, #2]
 801177a:	b29b      	uxth	r3, r3
 801177c:	4618      	mov	r0, r3
 801177e:	f7f5 feb7 	bl	80074f0 <lwip_htons>
 8011782:	4603      	mov	r3, r0
 8011784:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	f003 030f 	and.w	r3, r3, #15
 801178e:	b2db      	uxtb	r3, r3
 8011790:	009b      	lsls	r3, r3, #2
 8011792:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8011794:	7e7b      	ldrb	r3, [r7, #25]
 8011796:	b29b      	uxth	r3, r3
 8011798:	8b7a      	ldrh	r2, [r7, #26]
 801179a:	429a      	cmp	r2, r3
 801179c:	d202      	bcs.n	80117a4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801179e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80117a2:	e135      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80117a4:	7e7b      	ldrb	r3, [r7, #25]
 80117a6:	b29b      	uxth	r3, r3
 80117a8:	8b7a      	ldrh	r2, [r7, #26]
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	88db      	ldrh	r3, [r3, #6]
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7f5 fe9b 	bl	80074f0 <lwip_htons>
 80117ba:	4603      	mov	r3, r0
 80117bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80117c0:	b29b      	uxth	r3, r3
 80117c2:	00db      	lsls	r3, r3, #3
 80117c4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 80117cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
 80117d2:	2200      	movs	r2, #0
 80117d4:	705a      	strb	r2, [r3, #1]
 80117d6:	2200      	movs	r2, #0
 80117d8:	709a      	strb	r2, [r3, #2]
 80117da:	2200      	movs	r2, #0
 80117dc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80117de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117e0:	8afa      	ldrh	r2, [r7, #22]
 80117e2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80117e4:	8afa      	ldrh	r2, [r7, #22]
 80117e6:	8b7b      	ldrh	r3, [r7, #26]
 80117e8:	4413      	add	r3, r2
 80117ea:	b29a      	uxth	r2, r3
 80117ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117ee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80117f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117f2:	88db      	ldrh	r3, [r3, #6]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	8afa      	ldrh	r2, [r7, #22]
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d902      	bls.n	8011802 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80117fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011800:	e106      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	685b      	ldr	r3, [r3, #4]
 8011806:	627b      	str	r3, [r7, #36]	@ 0x24
 8011808:	e068      	b.n	80118dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801180a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8011810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011812:	889b      	ldrh	r3, [r3, #4]
 8011814:	b29a      	uxth	r2, r3
 8011816:	693b      	ldr	r3, [r7, #16]
 8011818:	889b      	ldrh	r3, [r3, #4]
 801181a:	b29b      	uxth	r3, r3
 801181c:	429a      	cmp	r2, r3
 801181e:	d235      	bcs.n	801188c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8011820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011824:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8011826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011828:	2b00      	cmp	r3, #0
 801182a:	d020      	beq.n	801186e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182e:	889b      	ldrh	r3, [r3, #4]
 8011830:	b29a      	uxth	r2, r3
 8011832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011834:	88db      	ldrh	r3, [r3, #6]
 8011836:	b29b      	uxth	r3, r3
 8011838:	429a      	cmp	r2, r3
 801183a:	d307      	bcc.n	801184c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183e:	88db      	ldrh	r3, [r3, #6]
 8011840:	b29a      	uxth	r2, r3
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	889b      	ldrh	r3, [r3, #4]
 8011846:	b29b      	uxth	r3, r3
 8011848:	429a      	cmp	r2, r3
 801184a:	d902      	bls.n	8011852 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801184c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011850:	e0de      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8011852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8011858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801185a:	88db      	ldrh	r3, [r3, #6]
 801185c:	b29a      	uxth	r2, r3
 801185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011860:	889b      	ldrh	r3, [r3, #4]
 8011862:	b29b      	uxth	r3, r3
 8011864:	429a      	cmp	r2, r3
 8011866:	d03d      	beq.n	80118e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801186c:	e03a      	b.n	80118e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801186e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011870:	88db      	ldrh	r3, [r3, #6]
 8011872:	b29a      	uxth	r2, r3
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	889b      	ldrh	r3, [r3, #4]
 8011878:	b29b      	uxth	r3, r3
 801187a:	429a      	cmp	r2, r3
 801187c:	d902      	bls.n	8011884 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801187e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011882:	e0c5      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	68ba      	ldr	r2, [r7, #8]
 8011888:	605a      	str	r2, [r3, #4]
      break;
 801188a:	e02b      	b.n	80118e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801188c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801188e:	889b      	ldrh	r3, [r3, #4]
 8011890:	b29a      	uxth	r2, r3
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	889b      	ldrh	r3, [r3, #4]
 8011896:	b29b      	uxth	r3, r3
 8011898:	429a      	cmp	r2, r3
 801189a:	d102      	bne.n	80118a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801189c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118a0:	e0b6      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80118a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118a4:	889b      	ldrh	r3, [r3, #4]
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	88db      	ldrh	r3, [r3, #6]
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d202      	bcs.n	80118b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80118b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80118b6:	e0ab      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80118b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d009      	beq.n	80118d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80118be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c0:	88db      	ldrh	r3, [r3, #6]
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	889b      	ldrh	r3, [r3, #4]
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d001      	beq.n	80118d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80118ce:	2300      	movs	r3, #0
 80118d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80118d8:	693b      	ldr	r3, [r7, #16]
 80118da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80118dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d193      	bne.n	801180a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80118e2:	e000      	b.n	80118e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80118e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80118e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d12d      	bne.n	8011948 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80118ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d01c      	beq.n	801192c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80118f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f4:	88db      	ldrh	r3, [r3, #6]
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fa:	889b      	ldrh	r3, [r3, #4]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	429a      	cmp	r2, r3
 8011900:	d906      	bls.n	8011910 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8011902:	4b45      	ldr	r3, [pc, #276]	@ (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011904:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8011908:	4944      	ldr	r1, [pc, #272]	@ (8011a1c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801190a:	4845      	ldr	r0, [pc, #276]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801190c:	f001 f9c0 	bl	8012c90 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8011910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011912:	68ba      	ldr	r2, [r7, #8]
 8011914:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8011916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011918:	88db      	ldrh	r3, [r3, #6]
 801191a:	b29a      	uxth	r2, r3
 801191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191e:	889b      	ldrh	r3, [r3, #4]
 8011920:	b29b      	uxth	r3, r3
 8011922:	429a      	cmp	r2, r3
 8011924:	d010      	beq.n	8011948 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8011926:	2300      	movs	r3, #0
 8011928:	623b      	str	r3, [r7, #32]
 801192a:	e00d      	b.n	8011948 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	685b      	ldr	r3, [r3, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d006      	beq.n	8011942 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8011934:	4b38      	ldr	r3, [pc, #224]	@ (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8011936:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801193a:	493a      	ldr	r1, [pc, #232]	@ (8011a24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801193c:	4838      	ldr	r0, [pc, #224]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801193e:	f001 f9a7 	bl	8012c90 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	68ba      	ldr	r2, [r7, #8]
 8011946:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d105      	bne.n	801195a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	7f9b      	ldrb	r3, [r3, #30]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d059      	beq.n	8011a0e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801195a:	6a3b      	ldr	r3, [r7, #32]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d04f      	beq.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	685b      	ldr	r3, [r3, #4]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d006      	beq.n	8011976 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	685b      	ldr	r3, [r3, #4]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	889b      	ldrh	r3, [r3, #4]
 8011970:	b29b      	uxth	r3, r3
 8011972:	2b00      	cmp	r3, #0
 8011974:	d002      	beq.n	801197c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8011976:	2300      	movs	r3, #0
 8011978:	623b      	str	r3, [r7, #32]
 801197a:	e041      	b.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801197c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801197e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8011980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8011986:	e012      	b.n	80119ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8011988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801198e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011990:	88db      	ldrh	r3, [r3, #6]
 8011992:	b29a      	uxth	r2, r3
 8011994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011996:	889b      	ldrh	r3, [r3, #4]
 8011998:	b29b      	uxth	r3, r3
 801199a:	429a      	cmp	r2, r3
 801199c:	d002      	beq.n	80119a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801199e:	2300      	movs	r3, #0
 80119a0:	623b      	str	r3, [r7, #32]
            break;
 80119a2:	e007      	b.n	80119b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80119a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 80119a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 80119ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d1e9      	bne.n	8011988 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80119b4:	6a3b      	ldr	r3, [r7, #32]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d022      	beq.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d106      	bne.n	80119d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80119c2:	4b15      	ldr	r3, [pc, #84]	@ (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119c4:	f240 12df 	movw	r2, #479	@ 0x1df
 80119c8:	4917      	ldr	r1, [pc, #92]	@ (8011a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119ca:	4815      	ldr	r0, [pc, #84]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119cc:	f001 f960 	bl	8012c90 <iprintf>
          LWIP_ASSERT("sanity check",
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	685b      	ldr	r3, [r3, #4]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119d8:	429a      	cmp	r2, r3
 80119da:	d106      	bne.n	80119ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80119dc:	4b0e      	ldr	r3, [pc, #56]	@ (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80119e2:	4911      	ldr	r1, [pc, #68]	@ (8011a28 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80119e4:	480e      	ldr	r0, [pc, #56]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119e6:	f001 f953 	bl	8012c90 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80119ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d006      	beq.n	8011a00 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80119f2:	4b09      	ldr	r3, [pc, #36]	@ (8011a18 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80119f4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80119f8:	490c      	ldr	r1, [pc, #48]	@ (8011a2c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80119fa:	4809      	ldr	r0, [pc, #36]	@ (8011a20 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80119fc:	f001 f948 	bl	8012c90 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8011a00:	6a3b      	ldr	r3, [r7, #32]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	bf14      	ite	ne
 8011a06:	2301      	movne	r3, #1
 8011a08:	2300      	moveq	r3, #0
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	e000      	b.n	8011a10 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8011a0e:	2300      	movs	r3, #0
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3730      	adds	r7, #48	@ 0x30
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}
 8011a18:	080165e0 	.word	0x080165e0
 8011a1c:	080166c4 	.word	0x080166c4
 8011a20:	08016628 	.word	0x08016628
 8011a24:	080166e4 	.word	0x080166e4
 8011a28:	0801671c 	.word	0x0801671c
 8011a2c:	0801672c 	.word	0x0801672c

08011a30 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b08e      	sub	sp, #56	@ 0x38
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	685b      	ldr	r3, [r3, #4]
 8011a3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8011a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	f003 030f 	and.w	r3, r3, #15
 8011a46:	b2db      	uxtb	r3, r3
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	b2db      	uxtb	r3, r3
 8011a4c:	2b14      	cmp	r3, #20
 8011a4e:	f040 8179 	bne.w	8011d44 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8011a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a54:	88db      	ldrh	r3, [r3, #6]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7f5 fd49 	bl	80074f0 <lwip_htons>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	00db      	lsls	r3, r3, #3
 8011a68:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8011a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a6c:	885b      	ldrh	r3, [r3, #2]
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7f5 fd3d 	bl	80074f0 <lwip_htons>
 8011a76:	4603      	mov	r3, r0
 8011a78:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8011a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	f003 030f 	and.w	r3, r3, #15
 8011a82:	b2db      	uxtb	r3, r3
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8011a8a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011a92:	429a      	cmp	r2, r3
 8011a94:	f0c0 8158 	bcc.w	8011d48 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8011a98:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011a9c:	b29b      	uxth	r3, r3
 8011a9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011aa0:	1ad3      	subs	r3, r2, r3
 8011aa2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7f7 fa93 	bl	8008fd0 <pbuf_clen>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8011aae:	4b90      	ldr	r3, [pc, #576]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011ab0:	881b      	ldrh	r3, [r3, #0]
 8011ab2:	461a      	mov	r2, r3
 8011ab4:	8c3b      	ldrh	r3, [r7, #32]
 8011ab6:	4413      	add	r3, r2
 8011ab8:	2b0a      	cmp	r3, #10
 8011aba:	dd10      	ble.n	8011ade <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011abc:	8c3b      	ldrh	r3, [r7, #32]
 8011abe:	4619      	mov	r1, r3
 8011ac0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ac2:	f7ff fd81 	bl	80115c8 <ip_reass_remove_oldest_datagram>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 813f 	beq.w	8011d4c <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8011ace:	4b88      	ldr	r3, [pc, #544]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	8c3b      	ldrh	r3, [r7, #32]
 8011ad6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8011ad8:	2b0a      	cmp	r3, #10
 8011ada:	f300 8137 	bgt.w	8011d4c <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011ade:	4b85      	ldr	r3, [pc, #532]	@ (8011cf4 <ip4_reass+0x2c4>)
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	633b      	str	r3, [r7, #48]	@ 0x30
 8011ae4:	e015      	b.n	8011b12 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8011ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae8:	695a      	ldr	r2, [r3, #20]
 8011aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d10c      	bne.n	8011b0c <ip4_reass+0xdc>
 8011af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af4:	699a      	ldr	r2, [r3, #24]
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	691b      	ldr	r3, [r3, #16]
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d106      	bne.n	8011b0c <ip4_reass+0xdc>
 8011afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b00:	899a      	ldrh	r2, [r3, #12]
 8011b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b04:	889b      	ldrh	r3, [r3, #4]
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d006      	beq.n	8011b1a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8011b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8011b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d1e6      	bne.n	8011ae6 <ip4_reass+0xb6>
 8011b18:	e000      	b.n	8011b1c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8011b1a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8011b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d109      	bne.n	8011b36 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8011b22:	8c3b      	ldrh	r3, [r7, #32]
 8011b24:	4619      	mov	r1, r3
 8011b26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011b28:	f7ff fdb0 	bl	801168c <ip_reass_enqueue_new_datagram>
 8011b2c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8011b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d11c      	bne.n	8011b6e <ip4_reass+0x13e>
      goto nullreturn;
 8011b34:	e10d      	b.n	8011d52 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b38:	88db      	ldrh	r3, [r3, #6]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	f7f5 fcd7 	bl	80074f0 <lwip_htons>
 8011b42:	4603      	mov	r3, r0
 8011b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d110      	bne.n	8011b6e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8011b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b4e:	89db      	ldrh	r3, [r3, #14]
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7f5 fccd 	bl	80074f0 <lwip_htons>
 8011b56:	4603      	mov	r3, r0
 8011b58:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d006      	beq.n	8011b6e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8011b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b62:	3308      	adds	r3, #8
 8011b64:	2214      	movs	r2, #20
 8011b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 f9e0 	bl	8012f2e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8011b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b70:	88db      	ldrh	r3, [r3, #6]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	f003 0320 	and.w	r3, r3, #32
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	bf0c      	ite	eq
 8011b7c:	2301      	moveq	r3, #1
 8011b7e:	2300      	movne	r3, #0
 8011b80:	b2db      	uxtb	r3, r3
 8011b82:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00e      	beq.n	8011ba8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8011b8a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011b8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b8e:	4413      	add	r3, r2
 8011b90:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8011b92:	8b7a      	ldrh	r2, [r7, #26]
 8011b94:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011b96:	429a      	cmp	r2, r3
 8011b98:	f0c0 80a8 	bcc.w	8011cec <ip4_reass+0x2bc>
 8011b9c:	8b7b      	ldrh	r3, [r7, #26]
 8011b9e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	f200 80a2 	bhi.w	8011cec <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8011ba8:	69fa      	ldr	r2, [r7, #28]
 8011baa:	6879      	ldr	r1, [r7, #4]
 8011bac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bae:	f7ff fdd5 	bl	801175c <ip_reass_chain_frag_into_datagram_and_validate>
 8011bb2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011bba:	f000 80a3 	beq.w	8011d04 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8011bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011bc0:	881a      	ldrh	r2, [r3, #0]
 8011bc2:	8c3b      	ldrh	r3, [r7, #32]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	b29a      	uxth	r2, r3
 8011bc8:	4b49      	ldr	r3, [pc, #292]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011bca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d00d      	beq.n	8011bee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8011bd2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8011bd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011bd6:	4413      	add	r3, r2
 8011bd8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8011bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bdc:	8a7a      	ldrh	r2, [r7, #18]
 8011bde:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8011be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011be2:	7f9b      	ldrb	r3, [r3, #30]
 8011be4:	f043 0301 	orr.w	r3, r3, #1
 8011be8:	b2da      	uxtb	r2, r3
 8011bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	d179      	bne.n	8011ce8 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8011bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bf6:	8b9b      	ldrh	r3, [r3, #28]
 8011bf8:	3314      	adds	r3, #20
 8011bfa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8011bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bfe:	685b      	ldr	r3, [r3, #4]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8011c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8011c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c10:	3308      	adds	r3, #8
 8011c12:	2214      	movs	r2, #20
 8011c14:	4619      	mov	r1, r3
 8011c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c18:	f001 f989 	bl	8012f2e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8011c1c:	8a3b      	ldrh	r3, [r7, #16]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7f5 fc66 	bl	80074f0 <lwip_htons>
 8011c24:	4603      	mov	r3, r0
 8011c26:	461a      	mov	r2, r3
 8011c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8011c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c2e:	2200      	movs	r2, #0
 8011c30:	719a      	strb	r2, [r3, #6]
 8011c32:	2200      	movs	r2, #0
 8011c34:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8011c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c38:	2200      	movs	r2, #0
 8011c3a:	729a      	strb	r2, [r3, #10]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8011c40:	2114      	movs	r1, #20
 8011c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011c44:	f7f5 fdcf 	bl	80077e6 <inet_chksum>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c4e:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8011c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8011c56:	e00d      	b.n	8011c74 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8011c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c5a:	685b      	ldr	r3, [r3, #4]
 8011c5c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8011c5e:	2114      	movs	r1, #20
 8011c60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011c62:	f7f7 f8a1 	bl	8008da8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8011c66:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011c68:	6878      	ldr	r0, [r7, #4]
 8011c6a:	f7f7 f9ef 	bl	800904c <pbuf_cat>
      r = iprh->next_pbuf;
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8011c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d1ee      	bne.n	8011c58 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8011c7a:	4b1e      	ldr	r3, [pc, #120]	@ (8011cf4 <ip4_reass+0x2c4>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d102      	bne.n	8011c8a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8011c84:	2300      	movs	r3, #0
 8011c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c88:	e010      	b.n	8011cac <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8011cf4 <ip4_reass+0x2c4>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011c90:	e007      	b.n	8011ca2 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8011c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d006      	beq.n	8011caa <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8011c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d1f4      	bne.n	8011c92 <ip4_reass+0x262>
 8011ca8:	e000      	b.n	8011cac <ip4_reass+0x27c>
          break;
 8011caa:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8011cac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011cae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cb0:	f7ff fd26 	bl	8011700 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f7f7 f98b 	bl	8008fd0 <pbuf_clen>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8011cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	8c3a      	ldrh	r2, [r7, #32]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d906      	bls.n	8011cd6 <ip4_reass+0x2a6>
 8011cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf8 <ip4_reass+0x2c8>)
 8011cca:	f240 229b 	movw	r2, #667	@ 0x29b
 8011cce:	490b      	ldr	r1, [pc, #44]	@ (8011cfc <ip4_reass+0x2cc>)
 8011cd0:	480b      	ldr	r0, [pc, #44]	@ (8011d00 <ip4_reass+0x2d0>)
 8011cd2:	f000 ffdd 	bl	8012c90 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8011cd6:	4b06      	ldr	r3, [pc, #24]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011cd8:	881a      	ldrh	r2, [r3, #0]
 8011cda:	8c3b      	ldrh	r3, [r7, #32]
 8011cdc:	1ad3      	subs	r3, r2, r3
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	4b03      	ldr	r3, [pc, #12]	@ (8011cf0 <ip4_reass+0x2c0>)
 8011ce2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	e038      	b.n	8011d5a <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	e036      	b.n	8011d5a <ip4_reass+0x32a>
      goto nullreturn_ipr;
 8011cec:	bf00      	nop
 8011cee:	e00a      	b.n	8011d06 <ip4_reass+0x2d6>
 8011cf0:	20007940 	.word	0x20007940
 8011cf4:	2000793c 	.word	0x2000793c
 8011cf8:	080165e0 	.word	0x080165e0
 8011cfc:	08016750 	.word	0x08016750
 8011d00:	08016628 	.word	0x08016628
    goto nullreturn_ipr;
 8011d04:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8011d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d106      	bne.n	8011d1a <ip4_reass+0x2ea>
 8011d0c:	4b15      	ldr	r3, [pc, #84]	@ (8011d64 <ip4_reass+0x334>)
 8011d0e:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8011d12:	4915      	ldr	r1, [pc, #84]	@ (8011d68 <ip4_reass+0x338>)
 8011d14:	4815      	ldr	r0, [pc, #84]	@ (8011d6c <ip4_reass+0x33c>)
 8011d16:	f000 ffbb 	bl	8012c90 <iprintf>
  if (ipr->p == NULL) {
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d1c:	685b      	ldr	r3, [r3, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d116      	bne.n	8011d50 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8011d22:	4b13      	ldr	r3, [pc, #76]	@ (8011d70 <ip4_reass+0x340>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d006      	beq.n	8011d3a <ip4_reass+0x30a>
 8011d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8011d64 <ip4_reass+0x334>)
 8011d2e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011d32:	4910      	ldr	r1, [pc, #64]	@ (8011d74 <ip4_reass+0x344>)
 8011d34:	480d      	ldr	r0, [pc, #52]	@ (8011d6c <ip4_reass+0x33c>)
 8011d36:	f000 ffab 	bl	8012c90 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8011d3a:	2100      	movs	r1, #0
 8011d3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011d3e:	f7ff fcdf 	bl	8011700 <ip_reass_dequeue_datagram>
 8011d42:	e006      	b.n	8011d52 <ip4_reass+0x322>
    goto nullreturn;
 8011d44:	bf00      	nop
 8011d46:	e004      	b.n	8011d52 <ip4_reass+0x322>
    goto nullreturn;
 8011d48:	bf00      	nop
 8011d4a:	e002      	b.n	8011d52 <ip4_reass+0x322>
      goto nullreturn;
 8011d4c:	bf00      	nop
 8011d4e:	e000      	b.n	8011d52 <ip4_reass+0x322>
  }

nullreturn:
 8011d50:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f7f7 f8ae 	bl	8008eb4 <pbuf_free>
  return NULL;
 8011d58:	2300      	movs	r3, #0
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3738      	adds	r7, #56	@ 0x38
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}
 8011d62:	bf00      	nop
 8011d64:	080165e0 	.word	0x080165e0
 8011d68:	0801676c 	.word	0x0801676c
 8011d6c:	08016628 	.word	0x08016628
 8011d70:	2000793c 	.word	0x2000793c
 8011d74:	08016778 	.word	0x08016778

08011d78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8011d7c:	2005      	movs	r0, #5
 8011d7e:	f7f6 fa0f 	bl	80081a0 <memp_malloc>
 8011d82:	4603      	mov	r3, r0
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d106      	bne.n	8011da4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8011d96:	4b07      	ldr	r3, [pc, #28]	@ (8011db4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8011d98:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8011d9c:	4906      	ldr	r1, [pc, #24]	@ (8011db8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8011d9e:	4807      	ldr	r0, [pc, #28]	@ (8011dbc <ip_frag_free_pbuf_custom_ref+0x34>)
 8011da0:	f000 ff76 	bl	8012c90 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8011da4:	6879      	ldr	r1, [r7, #4]
 8011da6:	2005      	movs	r0, #5
 8011da8:	f7f6 fa4c 	bl	8008244 <memp_free>
}
 8011dac:	bf00      	nop
 8011dae:	3708      	adds	r7, #8
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}
 8011db4:	080165e0 	.word	0x080165e0
 8011db8:	08016798 	.word	0x08016798
 8011dbc:	08016628 	.word	0x08016628

08011dc0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d106      	bne.n	8011de0 <ipfrag_free_pbuf_custom+0x20>
 8011dd2:	4b11      	ldr	r3, [pc, #68]	@ (8011e18 <ipfrag_free_pbuf_custom+0x58>)
 8011dd4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8011dd8:	4910      	ldr	r1, [pc, #64]	@ (8011e1c <ipfrag_free_pbuf_custom+0x5c>)
 8011dda:	4811      	ldr	r0, [pc, #68]	@ (8011e20 <ipfrag_free_pbuf_custom+0x60>)
 8011ddc:	f000 ff58 	bl	8012c90 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d006      	beq.n	8011df6 <ipfrag_free_pbuf_custom+0x36>
 8011de8:	4b0b      	ldr	r3, [pc, #44]	@ (8011e18 <ipfrag_free_pbuf_custom+0x58>)
 8011dea:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8011dee:	490d      	ldr	r1, [pc, #52]	@ (8011e24 <ipfrag_free_pbuf_custom+0x64>)
 8011df0:	480b      	ldr	r0, [pc, #44]	@ (8011e20 <ipfrag_free_pbuf_custom+0x60>)
 8011df2:	f000 ff4d 	bl	8012c90 <iprintf>
  if (pcr->original != NULL) {
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	695b      	ldr	r3, [r3, #20]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d004      	beq.n	8011e08 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	695b      	ldr	r3, [r3, #20]
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7f7 f856 	bl	8008eb4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8011e08:	68f8      	ldr	r0, [r7, #12]
 8011e0a:	f7ff ffbd 	bl	8011d88 <ip_frag_free_pbuf_custom_ref>
}
 8011e0e:	bf00      	nop
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	080165e0 	.word	0x080165e0
 8011e1c:	080167a4 	.word	0x080167a4
 8011e20:	08016628 	.word	0x08016628
 8011e24:	080167b0 	.word	0x080167b0

08011e28 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b094      	sub	sp, #80	@ 0x50
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	60f8      	str	r0, [r7, #12]
 8011e30:	60b9      	str	r1, [r7, #8]
 8011e32:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8011e34:	2300      	movs	r3, #0
 8011e36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011e3e:	3b14      	subs	r3, #20
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	da00      	bge.n	8011e46 <ip4_frag+0x1e>
 8011e44:	3307      	adds	r3, #7
 8011e46:	10db      	asrs	r3, r3, #3
 8011e48:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8011e4a:	2314      	movs	r3, #20
 8011e4c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8011e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e56:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8011e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e5a:	781b      	ldrb	r3, [r3, #0]
 8011e5c:	f003 030f 	and.w	r3, r3, #15
 8011e60:	b2db      	uxtb	r3, r3
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	b2db      	uxtb	r3, r3
 8011e66:	2b14      	cmp	r3, #20
 8011e68:	d002      	beq.n	8011e70 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8011e6a:	f06f 0305 	mvn.w	r3, #5
 8011e6e:	e118      	b.n	80120a2 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	895b      	ldrh	r3, [r3, #10]
 8011e74:	2b13      	cmp	r3, #19
 8011e76:	d809      	bhi.n	8011e8c <ip4_frag+0x64>
 8011e78:	4b8c      	ldr	r3, [pc, #560]	@ (80120ac <ip4_frag+0x284>)
 8011e7a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8011e7e:	498c      	ldr	r1, [pc, #560]	@ (80120b0 <ip4_frag+0x288>)
 8011e80:	488c      	ldr	r0, [pc, #560]	@ (80120b4 <ip4_frag+0x28c>)
 8011e82:	f000 ff05 	bl	8012c90 <iprintf>
 8011e86:	f06f 0305 	mvn.w	r3, #5
 8011e8a:	e10a      	b.n	80120a2 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8011e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e8e:	88db      	ldrh	r3, [r3, #6]
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7f5 fb2c 	bl	80074f0 <lwip_htons>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8011e9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011ea2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8011ea6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011ea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011eac:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	891b      	ldrh	r3, [r3, #8]
 8011eb2:	3b14      	subs	r3, #20
 8011eb4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8011eb8:	e0e9      	b.n	801208e <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8011eba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8011ebc:	00db      	lsls	r3, r3, #3
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	bf28      	it	cs
 8011ec8:	4613      	movcs	r3, r2
 8011eca:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8011ecc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011ed0:	2114      	movs	r1, #20
 8011ed2:	200e      	movs	r0, #14
 8011ed4:	f7f6 fd0a 	bl	80088ec <pbuf_alloc>
 8011ed8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8011eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 80dd 	beq.w	801209c <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8011ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ee4:	895b      	ldrh	r3, [r3, #10]
 8011ee6:	2b13      	cmp	r3, #19
 8011ee8:	d806      	bhi.n	8011ef8 <ip4_frag+0xd0>
 8011eea:	4b70      	ldr	r3, [pc, #448]	@ (80120ac <ip4_frag+0x284>)
 8011eec:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8011ef0:	4971      	ldr	r1, [pc, #452]	@ (80120b8 <ip4_frag+0x290>)
 8011ef2:	4870      	ldr	r0, [pc, #448]	@ (80120b4 <ip4_frag+0x28c>)
 8011ef4:	f000 fecc 	bl	8012c90 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011efa:	685b      	ldr	r3, [r3, #4]
 8011efc:	2214      	movs	r2, #20
 8011efe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011f00:	4618      	mov	r0, r3
 8011f02:	f001 f814 	bl	8012f2e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8011f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f08:	685b      	ldr	r3, [r3, #4]
 8011f0a:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8011f0c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8011f12:	e064      	b.n	8011fde <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	895a      	ldrh	r2, [r3, #10]
 8011f18:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	895b      	ldrh	r3, [r3, #10]
 8011f22:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011f24:	429a      	cmp	r2, r3
 8011f26:	d906      	bls.n	8011f36 <ip4_frag+0x10e>
 8011f28:	4b60      	ldr	r3, [pc, #384]	@ (80120ac <ip4_frag+0x284>)
 8011f2a:	f240 322d 	movw	r2, #813	@ 0x32d
 8011f2e:	4963      	ldr	r1, [pc, #396]	@ (80120bc <ip4_frag+0x294>)
 8011f30:	4860      	ldr	r0, [pc, #384]	@ (80120b4 <ip4_frag+0x28c>)
 8011f32:	f000 fead 	bl	8012c90 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8011f36:	8bfa      	ldrh	r2, [r7, #30]
 8011f38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	bf28      	it	cs
 8011f40:	4613      	movcs	r3, r2
 8011f42:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8011f46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d105      	bne.n	8011f5a <ip4_frag+0x132>
        poff = 0;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	60fb      	str	r3, [r7, #12]
        continue;
 8011f58:	e041      	b.n	8011fde <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8011f5a:	f7ff ff0d 	bl	8011d78 <ip_frag_alloc_pbuf_custom_ref>
 8011f5e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8011f60:	69bb      	ldr	r3, [r7, #24]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d103      	bne.n	8011f6e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8011f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f68:	f7f6 ffa4 	bl	8008eb4 <pbuf_free>
        goto memerr;
 8011f6c:	e097      	b.n	801209e <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f6e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8011f74:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011f76:	4413      	add	r3, r2
 8011f78:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8011f7c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8011f80:	9201      	str	r2, [sp, #4]
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	4603      	mov	r3, r0
 8011f86:	2241      	movs	r2, #65	@ 0x41
 8011f88:	2000      	movs	r0, #0
 8011f8a:	f7f6 fdd9 	bl	8008b40 <pbuf_alloced_custom>
 8011f8e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d106      	bne.n	8011fa4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8011f96:	69b8      	ldr	r0, [r7, #24]
 8011f98:	f7ff fef6 	bl	8011d88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8011f9c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011f9e:	f7f6 ff89 	bl	8008eb4 <pbuf_free>
        goto memerr;
 8011fa2:	e07c      	b.n	801209e <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8011fa4:	68f8      	ldr	r0, [r7, #12]
 8011fa6:	f7f7 f829 	bl	8008ffc <pbuf_ref>
      pcr->original = p;
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8011fb0:	69bb      	ldr	r3, [r7, #24]
 8011fb2:	4a43      	ldr	r2, [pc, #268]	@ (80120c0 <ip4_frag+0x298>)
 8011fb4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8011fb6:	6979      	ldr	r1, [r7, #20]
 8011fb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011fba:	f7f7 f847 	bl	800904c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8011fbe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8011fc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011fc6:	1ad3      	subs	r3, r2, r3
 8011fc8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8011fcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d004      	beq.n	8011fde <ip4_frag+0x1b6>
        poff = 0;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8011fde:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d196      	bne.n	8011f14 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8011fe6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011fe8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8011fec:	4413      	add	r3, r2
 8011fee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011ff4:	f1a3 0213 	sub.w	r2, r3, #19
 8011ff8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	bfcc      	ite	gt
 8012000:	2301      	movgt	r3, #1
 8012002:	2300      	movle	r3, #0
 8012004:	b2db      	uxtb	r3, r3
 8012006:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8012008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801200c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012010:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8012012:	6a3b      	ldr	r3, [r7, #32]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d002      	beq.n	801201e <ip4_frag+0x1f6>
 8012018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801201a:	2b00      	cmp	r3, #0
 801201c:	d003      	beq.n	8012026 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801201e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012020:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8012024:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8012026:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012028:	4618      	mov	r0, r3
 801202a:	f7f5 fa61 	bl	80074f0 <lwip_htons>
 801202e:	4603      	mov	r3, r0
 8012030:	461a      	mov	r2, r3
 8012032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012034:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8012036:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012038:	3314      	adds	r3, #20
 801203a:	b29b      	uxth	r3, r3
 801203c:	4618      	mov	r0, r3
 801203e:	f7f5 fa57 	bl	80074f0 <lwip_htons>
 8012042:	4603      	mov	r3, r0
 8012044:	461a      	mov	r2, r3
 8012046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012048:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801204a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801204c:	2200      	movs	r2, #0
 801204e:	729a      	strb	r2, [r3, #10]
 8012050:	2200      	movs	r2, #0
 8012052:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8012054:	2114      	movs	r1, #20
 8012056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012058:	f7f5 fbc5 	bl	80077e6 <inet_chksum>
 801205c:	4603      	mov	r3, r0
 801205e:	461a      	mov	r2, r3
 8012060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012062:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	695b      	ldr	r3, [r3, #20]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801206c:	68b8      	ldr	r0, [r7, #8]
 801206e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8012070:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012072:	f7f6 ff1f 	bl	8008eb4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8012076:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801207a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8012082:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012086:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012088:	4413      	add	r3, r2
 801208a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801208e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012092:	2b00      	cmp	r3, #0
 8012094:	f47f af11 	bne.w	8011eba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	e002      	b.n	80120a2 <ip4_frag+0x27a>
      goto memerr;
 801209c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801209e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80120a2:	4618      	mov	r0, r3
 80120a4:	3748      	adds	r7, #72	@ 0x48
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	080165e0 	.word	0x080165e0
 80120b0:	080167bc 	.word	0x080167bc
 80120b4:	08016628 	.word	0x08016628
 80120b8:	080167d8 	.word	0x080167d8
 80120bc:	080167f8 	.word	0x080167f8
 80120c0:	08011dc1 	.word	0x08011dc1

080120c4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b086      	sub	sp, #24
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80120ce:	230e      	movs	r3, #14
 80120d0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	895b      	ldrh	r3, [r3, #10]
 80120d6:	2b0e      	cmp	r3, #14
 80120d8:	d96e      	bls.n	80121b8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	7bdb      	ldrb	r3, [r3, #15]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d106      	bne.n	80120f0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80120e2:	683b      	ldr	r3, [r7, #0]
 80120e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80120e8:	3301      	adds	r3, #1
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80120f6:	693b      	ldr	r3, [r7, #16]
 80120f8:	7b1a      	ldrb	r2, [r3, #12]
 80120fa:	7b5b      	ldrb	r3, [r3, #13]
 80120fc:	021b      	lsls	r3, r3, #8
 80120fe:	4313      	orrs	r3, r2
 8012100:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012102:	693b      	ldr	r3, [r7, #16]
 8012104:	781b      	ldrb	r3, [r3, #0]
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d023      	beq.n	8012156 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b01      	cmp	r3, #1
 8012114:	d10f      	bne.n	8012136 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	785b      	ldrb	r3, [r3, #1]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d11b      	bne.n	8012156 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012122:	2b5e      	cmp	r3, #94	@ 0x5e
 8012124:	d117      	bne.n	8012156 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	7b5b      	ldrb	r3, [r3, #13]
 801212a:	f043 0310 	orr.w	r3, r3, #16
 801212e:	b2da      	uxtb	r2, r3
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	735a      	strb	r2, [r3, #13]
 8012134:	e00f      	b.n	8012156 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8012136:	693b      	ldr	r3, [r7, #16]
 8012138:	2206      	movs	r2, #6
 801213a:	4928      	ldr	r1, [pc, #160]	@ (80121dc <ethernet_input+0x118>)
 801213c:	4618      	mov	r0, r3
 801213e:	f000 fdfc 	bl	8012d3a <memcmp>
 8012142:	4603      	mov	r3, r0
 8012144:	2b00      	cmp	r3, #0
 8012146:	d106      	bne.n	8012156 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	7b5b      	ldrb	r3, [r3, #13]
 801214c:	f043 0308 	orr.w	r3, r3, #8
 8012150:	b2da      	uxtb	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8012156:	89fb      	ldrh	r3, [r7, #14]
 8012158:	2b08      	cmp	r3, #8
 801215a:	d003      	beq.n	8012164 <ethernet_input+0xa0>
 801215c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8012160:	d014      	beq.n	801218c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012162:	e032      	b.n	80121ca <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801216a:	f003 0308 	and.w	r3, r3, #8
 801216e:	2b00      	cmp	r3, #0
 8012170:	d024      	beq.n	80121bc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8012172:	8afb      	ldrh	r3, [r7, #22]
 8012174:	4619      	mov	r1, r3
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7f6 fe16 	bl	8008da8 <pbuf_remove_header>
 801217c:	4603      	mov	r3, r0
 801217e:	2b00      	cmp	r3, #0
 8012180:	d11e      	bne.n	80121c0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8012182:	6839      	ldr	r1, [r7, #0]
 8012184:	6878      	ldr	r0, [r7, #4]
 8012186:	f7fe fead 	bl	8010ee4 <ip4_input>
      break;
 801218a:	e013      	b.n	80121b4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012192:	f003 0308 	and.w	r3, r3, #8
 8012196:	2b00      	cmp	r3, #0
 8012198:	d014      	beq.n	80121c4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801219a:	8afb      	ldrh	r3, [r7, #22]
 801219c:	4619      	mov	r1, r3
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f7f6 fe02 	bl	8008da8 <pbuf_remove_header>
 80121a4:	4603      	mov	r3, r0
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10e      	bne.n	80121c8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80121aa:	6839      	ldr	r1, [r7, #0]
 80121ac:	6878      	ldr	r0, [r7, #4]
 80121ae:	f7fe fafb 	bl	80107a8 <etharp_input>
      break;
 80121b2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	e00c      	b.n	80121d2 <ethernet_input+0x10e>
    goto free_and_return;
 80121b8:	bf00      	nop
 80121ba:	e006      	b.n	80121ca <ethernet_input+0x106>
        goto free_and_return;
 80121bc:	bf00      	nop
 80121be:	e004      	b.n	80121ca <ethernet_input+0x106>
        goto free_and_return;
 80121c0:	bf00      	nop
 80121c2:	e002      	b.n	80121ca <ethernet_input+0x106>
        goto free_and_return;
 80121c4:	bf00      	nop
 80121c6:	e000      	b.n	80121ca <ethernet_input+0x106>
        goto free_and_return;
 80121c8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7f6 fe72 	bl	8008eb4 <pbuf_free>
  return ERR_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3718      	adds	r7, #24
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	0801788c 	.word	0x0801788c

080121e0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80121ee:	8c3b      	ldrh	r3, [r7, #32]
 80121f0:	4618      	mov	r0, r3
 80121f2:	f7f5 f97d 	bl	80074f0 <lwip_htons>
 80121f6:	4603      	mov	r3, r0
 80121f8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80121fa:	210e      	movs	r1, #14
 80121fc:	68b8      	ldr	r0, [r7, #8]
 80121fe:	f7f6 fdc3 	bl	8008d88 <pbuf_add_header>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d125      	bne.n	8012254 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8012208:	68bb      	ldr	r3, [r7, #8]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	8afa      	ldrh	r2, [r7, #22]
 8012212:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8012214:	693b      	ldr	r3, [r7, #16]
 8012216:	2206      	movs	r2, #6
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fe87 	bl	8012f2e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8012220:	693b      	ldr	r3, [r7, #16]
 8012222:	3306      	adds	r3, #6
 8012224:	2206      	movs	r2, #6
 8012226:	6879      	ldr	r1, [r7, #4]
 8012228:	4618      	mov	r0, r3
 801222a:	f000 fe80 	bl	8012f2e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012234:	2b06      	cmp	r3, #6
 8012236:	d006      	beq.n	8012246 <ethernet_output+0x66>
 8012238:	4b0a      	ldr	r3, [pc, #40]	@ (8012264 <ethernet_output+0x84>)
 801223a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801223e:	490a      	ldr	r1, [pc, #40]	@ (8012268 <ethernet_output+0x88>)
 8012240:	480a      	ldr	r0, [pc, #40]	@ (801226c <ethernet_output+0x8c>)
 8012242:	f000 fd25 	bl	8012c90 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	699b      	ldr	r3, [r3, #24]
 801224a:	68b9      	ldr	r1, [r7, #8]
 801224c:	68f8      	ldr	r0, [r7, #12]
 801224e:	4798      	blx	r3
 8012250:	4603      	mov	r3, r0
 8012252:	e002      	b.n	801225a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012254:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8012256:	f06f 0301 	mvn.w	r3, #1
}
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	08016808 	.word	0x08016808
 8012268:	08016840 	.word	0x08016840
 801226c:	08016874 	.word	0x08016874

08012270 <sio_open>:
u8_t temp [RXBUFFER_SIZE];
u8_t rx_buffer [RXBUFFER_SIZE];
int read_index = 0;
int write_index = 0;

sio_fd_t sio_open(u8_t devnum) {
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	4603      	mov	r3, r0
 8012278:	71fb      	strb	r3, [r7, #7]

	return (sio_fd_t)&huart1;
 801227a:	4b03      	ldr	r3, [pc, #12]	@ (8012288 <sio_open+0x18>)

}
 801227c:	4618      	mov	r0, r3
 801227e:	370c      	adds	r7, #12
 8012280:	46bd      	mov	sp, r7
 8012282:	bc80      	pop	{r7}
 8012284:	4770      	bx	lr
 8012286:	bf00      	nop
 8012288:	20000334 	.word	0x20000334

0801228c <sio_send>:
void sio_send(u8_t* c, sio_fd_t fd, u16_t byte_count) {
 801228c:	b580      	push	{r7, lr}
 801228e:	b086      	sub	sp, #24
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	4613      	mov	r3, r2
 8012298:	80fb      	strh	r3, [r7, #6]

	UART_HandleTypeDef *uart = (UART_HandleTypeDef *)fd;
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit_DMA(uart, c, byte_count);
 801229e:	88fb      	ldrh	r3, [r7, #6]
 80122a0:	461a      	mov	r2, r3
 80122a2:	68f9      	ldr	r1, [r7, #12]
 80122a4:	6978      	ldr	r0, [r7, #20]
 80122a6:	f7f0 fb07 	bl	80028b8 <HAL_UART_Transmit_DMA>
}
 80122aa:	bf00      	nop
 80122ac:	3718      	adds	r7, #24
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}
	...

080122b4 <sio_tryread>:
    UART_HandleTypeDef *uart = (UART_HandleTypeDef *)fd;
    HAL_UART_Receive(uart, data, len, HAL_MAX_DELAY);
    return len;
}

u32_t sio_tryread(sio_fd_t fd, u8_t *data, u32_t len) {
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
    u32_t i = 0;
 80122c0:	2300      	movs	r3, #0
 80122c2:	617b      	str	r3, [r7, #20]
    taskENTER_CRITICAL();
 80122c4:	f7f3 fe7a 	bl	8005fbc <vPortEnterCritical>
    while (read_index != write_index && i < len) {
 80122c8:	e016      	b.n	80122f8 <sio_tryread+0x44>
        data[i] = rx_buffer[read_index];
 80122ca:	4b14      	ldr	r3, [pc, #80]	@ (801231c <sio_tryread+0x68>)
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	68b9      	ldr	r1, [r7, #8]
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	440b      	add	r3, r1
 80122d4:	4912      	ldr	r1, [pc, #72]	@ (8012320 <sio_tryread+0x6c>)
 80122d6:	5c8a      	ldrb	r2, [r1, r2]
 80122d8:	701a      	strb	r2, [r3, #0]
        read_index = (read_index + 1) % RXBUFFER_SIZE;
 80122da:	4b10      	ldr	r3, [pc, #64]	@ (801231c <sio_tryread+0x68>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	3301      	adds	r3, #1
 80122e0:	425a      	negs	r2, r3
 80122e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80122e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80122ea:	bf58      	it	pl
 80122ec:	4253      	negpl	r3, r2
 80122ee:	4a0b      	ldr	r2, [pc, #44]	@ (801231c <sio_tryread+0x68>)
 80122f0:	6013      	str	r3, [r2, #0]
        i++;
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	3301      	adds	r3, #1
 80122f6:	617b      	str	r3, [r7, #20]
    while (read_index != write_index && i < len) {
 80122f8:	4b08      	ldr	r3, [pc, #32]	@ (801231c <sio_tryread+0x68>)
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	4b09      	ldr	r3, [pc, #36]	@ (8012324 <sio_tryread+0x70>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	429a      	cmp	r2, r3
 8012302:	d003      	beq.n	801230c <sio_tryread+0x58>
 8012304:	697a      	ldr	r2, [r7, #20]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	429a      	cmp	r2, r3
 801230a:	d3de      	bcc.n	80122ca <sio_tryread+0x16>
    }
    taskEXIT_CRITICAL();
 801230c:	f7f3 fe86 	bl	800601c <vPortExitCritical>

    return i;
 8012310:	697b      	ldr	r3, [r7, #20]
}
 8012312:	4618      	mov	r0, r3
 8012314:	3718      	adds	r7, #24
 8012316:	46bd      	mov	sp, r7
 8012318:	bd80      	pop	{r7, pc}
 801231a:	bf00      	nop
 801231c:	20007d44 	.word	0x20007d44
 8012320:	20007944 	.word	0x20007944
 8012324:	20007d48 	.word	0x20007d48

08012328 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4a13      	ldr	r2, [pc, #76]	@ (8012380 <HAL_UART_RxCpltCallback+0x58>)
 8012334:	4293      	cmp	r3, r2
 8012336:	d11e      	bne.n	8012376 <HAL_UART_RxCpltCallback+0x4e>

        u32_t next_write_index = (write_index + 1) % RXBUFFER_SIZE;
 8012338:	4b12      	ldr	r3, [pc, #72]	@ (8012384 <HAL_UART_RxCpltCallback+0x5c>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	3301      	adds	r3, #1
 801233e:	425a      	negs	r2, r3
 8012340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012344:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8012348:	bf58      	it	pl
 801234a:	4253      	negpl	r3, r2
 801234c:	60fb      	str	r3, [r7, #12]
        if (next_write_index != read_index) {
 801234e:	4b0e      	ldr	r3, [pc, #56]	@ (8012388 <HAL_UART_RxCpltCallback+0x60>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	4293      	cmp	r3, r2
 8012358:	d008      	beq.n	801236c <HAL_UART_RxCpltCallback+0x44>
            rx_buffer[write_index] = rx_byte;
 801235a:	4b0a      	ldr	r3, [pc, #40]	@ (8012384 <HAL_UART_RxCpltCallback+0x5c>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4a0b      	ldr	r2, [pc, #44]	@ (801238c <HAL_UART_RxCpltCallback+0x64>)
 8012360:	7811      	ldrb	r1, [r2, #0]
 8012362:	4a0b      	ldr	r2, [pc, #44]	@ (8012390 <HAL_UART_RxCpltCallback+0x68>)
 8012364:	54d1      	strb	r1, [r2, r3]
            write_index = next_write_index;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	4a06      	ldr	r2, [pc, #24]	@ (8012384 <HAL_UART_RxCpltCallback+0x5c>)
 801236a:	6013      	str	r3, [r2, #0]
        }

        HAL_UART_Receive_IT(&huart1, &rx_byte, 1);
 801236c:	2201      	movs	r2, #1
 801236e:	4907      	ldr	r1, [pc, #28]	@ (801238c <HAL_UART_RxCpltCallback+0x64>)
 8012370:	4803      	ldr	r0, [pc, #12]	@ (8012380 <HAL_UART_RxCpltCallback+0x58>)
 8012372:	f7f0 fa7b 	bl	800286c <HAL_UART_Receive_IT>
    }
}
 8012376:	bf00      	nop
 8012378:	3710      	adds	r7, #16
 801237a:	46bd      	mov	sp, r7
 801237c:	bd80      	pop	{r7, pc}
 801237e:	bf00      	nop
 8012380:	20000334 	.word	0x20000334
 8012384:	20007d48 	.word	0x20007d48
 8012388:	20007d44 	.word	0x20007d44
 801238c:	20007942 	.word	0x20007942
 8012390:	20007944 	.word	0x20007944

08012394 <slipif_output>:
 * @param p the pbuf chain packet to send
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output(struct netif *netif, struct pbuf *p)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 801239a:	af00      	add	r7, sp, #0
 801239c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80123a0:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80123a4:	6018      	str	r0, [r3, #0]
 80123a6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80123aa:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80123ae:	6019      	str	r1, [r3, #0]
  struct slipif_priv *priv;
  struct pbuf *q;
  u16_t i;
  u16_t size = 0;
 80123b0:	2300      	movs	r3, #0
 80123b2:	f8a7 3410 	strh.w	r3, [r7, #1040]	@ 0x410
  u8_t c;
  u8_t uart_buffer [1024];

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80123b6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80123ba:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d105      	bne.n	80123d0 <slipif_output+0x3c>
 80123c4:	4b60      	ldr	r3, [pc, #384]	@ (8012548 <slipif_output+0x1b4>)
 80123c6:	227f      	movs	r2, #127	@ 0x7f
 80123c8:	4960      	ldr	r1, [pc, #384]	@ (801254c <slipif_output+0x1b8>)
 80123ca:	4861      	ldr	r0, [pc, #388]	@ (8012550 <slipif_output+0x1bc>)
 80123cc:	f000 fc60 	bl	8012c90 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 80123d0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80123d4:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	6a1b      	ldr	r3, [r3, #32]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d105      	bne.n	80123ec <slipif_output+0x58>
 80123e0:	4b59      	ldr	r3, [pc, #356]	@ (8012548 <slipif_output+0x1b4>)
 80123e2:	2280      	movs	r2, #128	@ 0x80
 80123e4:	495b      	ldr	r1, [pc, #364]	@ (8012554 <slipif_output+0x1c0>)
 80123e6:	485a      	ldr	r0, [pc, #360]	@ (8012550 <slipif_output+0x1bc>)
 80123e8:	f000 fc52 	bl	8012c90 <iprintf>
  LWIP_ASSERT("p != NULL", (p != NULL));
 80123ec:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80123f0:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d105      	bne.n	8012406 <slipif_output+0x72>
 80123fa:	4b53      	ldr	r3, [pc, #332]	@ (8012548 <slipif_output+0x1b4>)
 80123fc:	2281      	movs	r2, #129	@ 0x81
 80123fe:	4956      	ldr	r1, [pc, #344]	@ (8012558 <slipif_output+0x1c4>)
 8012400:	4853      	ldr	r0, [pc, #332]	@ (8012550 <slipif_output+0x1bc>)
 8012402:	f000 fc45 	bl	8012c90 <iprintf>

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_output: sending %"U16_F" bytes\n", p->tot_len));
  priv = (struct slipif_priv *)netif->state;
 8012406:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 801240a:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	6a1b      	ldr	r3, [r3, #32]
 8012412:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c

  /* Send pbuf out on the serial I/O device. */
  /* Start with packet delimiter. */
  //sio_send(SLIP_END, priv->sd);
  uart_buffer[size++] = SLIP_END;
 8012416:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 8012420:	461a      	mov	r2, r3
 8012422:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8012426:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 801242a:	21c0      	movs	r1, #192	@ 0xc0
 801242c:	5499      	strb	r1, [r3, r2]

  for (q = p; q != NULL; q = q->next) {
 801242e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8012432:	f5a3 6383 	sub.w	r3, r3, #1048	@ 0x418
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 801243c:	e064      	b.n	8012508 <slipif_output+0x174>
    for (i = 0; i < q->len; i++) {
 801243e:	2300      	movs	r3, #0
 8012440:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
 8012444:	e054      	b.n	80124f0 <slipif_output+0x15c>
      c = ((u8_t *)q->payload)[i];
 8012446:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 801244a:	685a      	ldr	r2, [r3, #4]
 801244c:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 8012450:	4413      	add	r3, r2
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	f887 340b 	strb.w	r3, [r7, #1035]	@ 0x40b
      switch (c) {
 8012458:	f897 340b 	ldrb.w	r3, [r7, #1035]	@ 0x40b
 801245c:	2bc0      	cmp	r3, #192	@ 0xc0
 801245e:	d002      	beq.n	8012466 <slipif_output+0xd2>
 8012460:	2bdb      	cmp	r3, #219	@ 0xdb
 8012462:	d019      	beq.n	8012498 <slipif_output+0x104>
 8012464:	e031      	b.n	80124ca <slipif_output+0x136>
        case SLIP_END:
          /* need to escape this byte (0xC0 -> 0xDB, 0xDC) */
		  uart_buffer[size++] = SLIP_ESC;
 8012466:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 801246a:	1c5a      	adds	r2, r3, #1
 801246c:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 8012470:	461a      	mov	r2, r3
 8012472:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8012476:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 801247a:	21db      	movs	r1, #219	@ 0xdb
 801247c:	5499      	strb	r1, [r3, r2]
		  uart_buffer[size++] = SLIP_ESC_END;
 801247e:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 8012488:	461a      	mov	r2, r3
 801248a:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 801248e:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8012492:	21dc      	movs	r1, #220	@ 0xdc
 8012494:	5499      	strb	r1, [r3, r2]
          break;
 8012496:	e026      	b.n	80124e6 <slipif_output+0x152>
        case SLIP_ESC:
          /* need to escape this byte (0xDB -> 0xDB, 0xDD) */
		  uart_buffer[size++] = SLIP_ESC;
 8012498:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 80124a2:	461a      	mov	r2, r3
 80124a4:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80124a8:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80124ac:	21db      	movs	r1, #219	@ 0xdb
 80124ae:	5499      	strb	r1, [r3, r2]
		  uart_buffer[size++] = SLIP_ESC_ESC;
 80124b0:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 80124b4:	1c5a      	adds	r2, r3, #1
 80124b6:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 80124ba:	461a      	mov	r2, r3
 80124bc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80124c0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80124c4:	21dd      	movs	r1, #221	@ 0xdd
 80124c6:	5499      	strb	r1, [r3, r2]
          break;
 80124c8:	e00d      	b.n	80124e6 <slipif_output+0x152>
        default:
          /* normal byte - no need for escaping */
		  uart_buffer[size++] = c;
 80124ca:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 80124ce:	1c5a      	adds	r2, r3, #1
 80124d0:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 80124d4:	4619      	mov	r1, r3
 80124d6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80124da:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 80124de:	f897 240b 	ldrb.w	r2, [r7, #1035]	@ 0x40b
 80124e2:	545a      	strb	r2, [r3, r1]
          break;
 80124e4:	bf00      	nop
    for (i = 0; i < q->len; i++) {
 80124e6:	f8b7 3412 	ldrh.w	r3, [r7, #1042]	@ 0x412
 80124ea:	3301      	adds	r3, #1
 80124ec:	f8a7 3412 	strh.w	r3, [r7, #1042]	@ 0x412
 80124f0:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80124f4:	895b      	ldrh	r3, [r3, #10]
 80124f6:	f8b7 2412 	ldrh.w	r2, [r7, #1042]	@ 0x412
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d3a3      	bcc.n	8012446 <slipif_output+0xb2>
  for (q = p; q != NULL; q = q->next) {
 80124fe:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8012508:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 801250c:	2b00      	cmp	r3, #0
 801250e:	d196      	bne.n	801243e <slipif_output+0xaa>
      }
    }
  }
  /* End with packet delimiter. */
  uart_buffer[size++] = SLIP_END;
 8012510:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	f8a7 2410 	strh.w	r2, [r7, #1040]	@ 0x410
 801251a:	461a      	mov	r2, r3
 801251c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8012520:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8012524:	21c0      	movs	r1, #192	@ 0xc0
 8012526:	5499      	strb	r1, [r3, r2]
  sio_send(uart_buffer, priv->sd, size);
 8012528:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 801252c:	6819      	ldr	r1, [r3, #0]
 801252e:	f8b7 2410 	ldrh.w	r2, [r7, #1040]	@ 0x410
 8012532:	f107 0308 	add.w	r3, r7, #8
 8012536:	4618      	mov	r0, r3
 8012538:	f7ff fea8 	bl	801228c <sio_send>
  return ERR_OK;
 801253c:	2300      	movs	r3, #0
}
 801253e:	4618      	mov	r0, r3
 8012540:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	0801689c 	.word	0x0801689c
 801254c:	080168d0 	.word	0x080168d0
 8012550:	080168e0 	.word	0x080168e0
 8012554:	08016908 	.word	0x08016908
 8012558:	08016920 	.word	0x08016920

0801255c <slipif_output_v4>:
 * @param ipaddr the ip address to send the packet to (not used for slipif)
 * @return always returns ERR_OK since the serial layer does not provide return values
 */
static err_t
slipif_output_v4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(ipaddr);
  return slipif_output(netif, p);
 8012568:	68b9      	ldr	r1, [r7, #8]
 801256a:	68f8      	ldr	r0, [r7, #12]
 801256c:	f7ff ff12 	bl	8012394 <slipif_output>
 8012570:	4603      	mov	r3, r0
}
 8012572:	4618      	mov	r0, r3
 8012574:	3710      	adds	r7, #16
 8012576:	46bd      	mov	sp, r7
 8012578:	bd80      	pop	{r7, pc}
	...

0801257c <slipif_rxbyte>:
 *        return a complete packet, NULL is returned before - used for polling)
 * @return The IP packet when SLIP_END is received
 */
static struct pbuf *
slipif_rxbyte(struct netif *netif, u8_t c)
{
 801257c:	b580      	push	{r7, lr}
 801257e:	b084      	sub	sp, #16
 8012580:	af00      	add	r7, sp, #0
 8012582:	6078      	str	r0, [r7, #4]
 8012584:	460b      	mov	r3, r1
 8012586:	70fb      	strb	r3, [r7, #3]
  struct slipif_priv *priv;
  struct pbuf *t;

  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d105      	bne.n	801259a <slipif_rxbyte+0x1e>
 801258e:	4b5e      	ldr	r3, [pc, #376]	@ (8012708 <slipif_rxbyte+0x18c>)
 8012590:	22da      	movs	r2, #218	@ 0xda
 8012592:	495e      	ldr	r1, [pc, #376]	@ (801270c <slipif_rxbyte+0x190>)
 8012594:	485e      	ldr	r0, [pc, #376]	@ (8012710 <slipif_rxbyte+0x194>)
 8012596:	f000 fb7b 	bl	8012c90 <iprintf>
  LWIP_ASSERT("netif->state != NULL", (netif->state != NULL));
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6a1b      	ldr	r3, [r3, #32]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d105      	bne.n	80125ae <slipif_rxbyte+0x32>
 80125a2:	4b59      	ldr	r3, [pc, #356]	@ (8012708 <slipif_rxbyte+0x18c>)
 80125a4:	22db      	movs	r2, #219	@ 0xdb
 80125a6:	495b      	ldr	r1, [pc, #364]	@ (8012714 <slipif_rxbyte+0x198>)
 80125a8:	4859      	ldr	r0, [pc, #356]	@ (8012710 <slipif_rxbyte+0x194>)
 80125aa:	f000 fb71 	bl	8012c90 <iprintf>

  priv = (struct slipif_priv *)netif->state;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6a1b      	ldr	r3, [r3, #32]
 80125b2:	60fb      	str	r3, [r7, #12]

  switch (priv->state) {
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	7b1b      	ldrb	r3, [r3, #12]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d002      	beq.n	80125c2 <slipif_rxbyte+0x46>
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d02d      	beq.n	801261c <slipif_rxbyte+0xa0>
          break;
      }
      priv->state = SLIP_RECV_NORMAL;
      break;
    default:
      break;
 80125c0:	e03c      	b.n	801263c <slipif_rxbyte+0xc0>
      switch (c) {
 80125c2:	78fb      	ldrb	r3, [r7, #3]
 80125c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80125c6:	d002      	beq.n	80125ce <slipif_rxbyte+0x52>
 80125c8:	2bdb      	cmp	r3, #219	@ 0xdb
 80125ca:	d021      	beq.n	8012610 <slipif_rxbyte+0x94>
          break;
 80125cc:	e025      	b.n	801261a <slipif_rxbyte+0x9e>
          if (priv->recved > 0) {
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	8a1b      	ldrh	r3, [r3, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d01a      	beq.n	801260c <slipif_rxbyte+0x90>
            pbuf_realloc(priv->q, priv->recved);
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	689a      	ldr	r2, [r3, #8]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	8a1b      	ldrh	r3, [r3, #16]
 80125de:	4619      	mov	r1, r3
 80125e0:	4610      	mov	r0, r2
 80125e2:	f7f6 fae1 	bl	8008ba8 <pbuf_realloc>
            t = priv->q;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	689b      	ldr	r3, [r3, #8]
 80125ea:	60bb      	str	r3, [r7, #8]
            priv->p = priv->q = NULL;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	2200      	movs	r2, #0
 80125f0:	609a      	str	r2, [r3, #8]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	689a      	ldr	r2, [r3, #8]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	605a      	str	r2, [r3, #4]
            priv->i = priv->recved = 0;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2200      	movs	r2, #0
 80125fe:	821a      	strh	r2, [r3, #16]
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	8a1a      	ldrh	r2, [r3, #16]
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	81da      	strh	r2, [r3, #14]
            return t;
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	e079      	b.n	8012700 <slipif_rxbyte+0x184>
          return NULL;
 801260c:	2300      	movs	r3, #0
 801260e:	e077      	b.n	8012700 <slipif_rxbyte+0x184>
          priv->state = SLIP_RECV_ESCAPE;
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	2201      	movs	r2, #1
 8012614:	731a      	strb	r2, [r3, #12]
          return NULL;
 8012616:	2300      	movs	r3, #0
 8012618:	e072      	b.n	8012700 <slipif_rxbyte+0x184>
      break;
 801261a:	e00f      	b.n	801263c <slipif_rxbyte+0xc0>
      switch (c) {
 801261c:	78fb      	ldrb	r3, [r7, #3]
 801261e:	2bdc      	cmp	r3, #220	@ 0xdc
 8012620:	d002      	beq.n	8012628 <slipif_rxbyte+0xac>
 8012622:	2bdd      	cmp	r3, #221	@ 0xdd
 8012624:	d003      	beq.n	801262e <slipif_rxbyte+0xb2>
          break;
 8012626:	e005      	b.n	8012634 <slipif_rxbyte+0xb8>
          c = SLIP_END;
 8012628:	23c0      	movs	r3, #192	@ 0xc0
 801262a:	70fb      	strb	r3, [r7, #3]
          break;
 801262c:	e002      	b.n	8012634 <slipif_rxbyte+0xb8>
          c = SLIP_ESC;
 801262e:	23db      	movs	r3, #219	@ 0xdb
 8012630:	70fb      	strb	r3, [r7, #3]
          break;
 8012632:	bf00      	nop
      priv->state = SLIP_RECV_NORMAL;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	2200      	movs	r2, #0
 8012638:	731a      	strb	r2, [r3, #12]
      break;
 801263a:	bf00      	nop
  } /* end switch (priv->state) */

  /* byte received, packet not yet completely received */
  if (priv->p == NULL) {
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d120      	bne.n	8012686 <slipif_rxbyte+0x10a>
    /* allocate a new pbuf */
    LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: alloc\n"));
    priv->p = pbuf_alloc(PBUF_LINK, (PBUF_POOL_BUFSIZE - PBUF_LINK_HLEN - PBUF_LINK_ENCAPSULATION_HLEN), PBUF_POOL);
 8012644:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8012648:	f240 2142 	movw	r1, #578	@ 0x242
 801264c:	200e      	movs	r0, #14
 801264e:	f7f6 f94d 	bl	80088ec <pbuf_alloc>
 8012652:	4602      	mov	r2, r0
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	605a      	str	r2, [r3, #4]

    if (priv->p == NULL) {
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d101      	bne.n	8012664 <slipif_rxbyte+0xe8>
      LINK_STATS_INC(link.drop);
      LWIP_DEBUGF(SLIP_DEBUG, ("slipif_input: no new pbuf! (DROP)\n"));
      /* don't process any further since we got no pbuf to receive to */
      return NULL;
 8012660:	2300      	movs	r3, #0
 8012662:	e04d      	b.n	8012700 <slipif_rxbyte+0x184>
    }

    if (priv->q != NULL) {
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	689b      	ldr	r3, [r3, #8]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d008      	beq.n	801267e <slipif_rxbyte+0x102>
      /* 'chain' the pbuf to the existing chain */
      pbuf_cat(priv->q, priv->p);
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	689a      	ldr	r2, [r3, #8]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	685b      	ldr	r3, [r3, #4]
 8012674:	4619      	mov	r1, r3
 8012676:	4610      	mov	r0, r2
 8012678:	f7f6 fce8 	bl	800904c <pbuf_cat>
 801267c:	e003      	b.n	8012686 <slipif_rxbyte+0x10a>
    } else {
      /* p is the first pbuf in the chain */
      priv->q = priv->p;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	685a      	ldr	r2, [r3, #4]
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	609a      	str	r2, [r3, #8]
    }
  }

  /* this automatically drops bytes if > SLIP_MAX_SIZE */
  if ((priv->p != NULL) && (priv->recved <= SLIP_MAX_SIZE)) {
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	685b      	ldr	r3, [r3, #4]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d037      	beq.n	80126fe <slipif_rxbyte+0x182>
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	8a1b      	ldrh	r3, [r3, #16]
 8012692:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8012696:	4293      	cmp	r3, r2
 8012698:	d831      	bhi.n	80126fe <slipif_rxbyte+0x182>
    ((u8_t *)priv->p->payload)[priv->i] = c;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	685b      	ldr	r3, [r3, #4]
 801269e:	685b      	ldr	r3, [r3, #4]
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	89d2      	ldrh	r2, [r2, #14]
 80126a4:	4413      	add	r3, r2
 80126a6:	78fa      	ldrb	r2, [r7, #3]
 80126a8:	701a      	strb	r2, [r3, #0]
    priv->recved++;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	8a1b      	ldrh	r3, [r3, #16]
 80126ae:	3301      	adds	r3, #1
 80126b0:	b29a      	uxth	r2, r3
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	821a      	strh	r2, [r3, #16]
    priv->i++;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	89db      	ldrh	r3, [r3, #14]
 80126ba:	3301      	adds	r3, #1
 80126bc:	b29a      	uxth	r2, r3
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	81da      	strh	r2, [r3, #14]
    if (priv->i >= priv->p->len) {
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	89da      	ldrh	r2, [r3, #14]
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	895b      	ldrh	r3, [r3, #10]
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d316      	bcc.n	80126fe <slipif_rxbyte+0x182>
      /* on to the next pbuf */
      priv->i = 0;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2200      	movs	r2, #0
 80126d4:	81da      	strh	r2, [r3, #14]
      if (priv->p->next != NULL && priv->p->next->len > 0) {
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00b      	beq.n	80126f8 <slipif_rxbyte+0x17c>
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	895b      	ldrh	r3, [r3, #10]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <slipif_rxbyte+0x17c>
        /* p is a chain, on to the next in the chain */
        priv->p = priv->p->next;
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	685b      	ldr	r3, [r3, #4]
 80126f0:	681a      	ldr	r2, [r3, #0]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	605a      	str	r2, [r3, #4]
 80126f6:	e002      	b.n	80126fe <slipif_rxbyte+0x182>
      } else {
        /* p is a single pbuf, set it to NULL so next time a new
         * pbuf is allocated */
        priv->p = NULL;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	2200      	movs	r2, #0
 80126fc:	605a      	str	r2, [r3, #4]
      }
    }
  }
  return NULL;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	0801689c 	.word	0x0801689c
 801270c:	080168d0 	.word	0x080168d0
 8012710:	080168e0 	.word	0x080168e0
 8012714:	08016908 	.word	0x08016908

08012718 <slipif_rxbyte_input>:
 * @param netif The lwip network interface structure for this slipif
 * @param c received character
 */
static void
slipif_rxbyte_input(struct netif *netif, u8_t c)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b084      	sub	sp, #16
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	460b      	mov	r3, r1
 8012722:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  p = slipif_rxbyte(netif, c);
 8012724:	78fb      	ldrb	r3, [r7, #3]
 8012726:	4619      	mov	r1, r3
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f7ff ff27 	bl	801257c <slipif_rxbyte>
 801272e:	60f8      	str	r0, [r7, #12]
  if (p != NULL) {
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00a      	beq.n	801274c <slipif_rxbyte_input+0x34>
    if (netif->input(p, netif) != ERR_OK) {
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	691b      	ldr	r3, [r3, #16]
 801273a:	6879      	ldr	r1, [r7, #4]
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	4798      	blx	r3
 8012740:	4603      	mov	r3, r0
 8012742:	2b00      	cmp	r3, #0
 8012744:	d002      	beq.n	801274c <slipif_rxbyte_input+0x34>
      pbuf_free(p);
 8012746:	68f8      	ldr	r0, [r7, #12]
 8012748:	f7f6 fbb4 	bl	8008eb4 <pbuf_free>
    }
  }
}
 801274c:	bf00      	nop
 801274e:	3710      	adds	r7, #16
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <slipif_loop_thread>:
 *
 * @param nf the lwip network interface structure for this slipif
 */
static void
slipif_loop_thread(void *nf)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b086      	sub	sp, #24
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  u8_t c;
  struct netif *netif = (struct netif *)nf;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	617b      	str	r3, [r7, #20]
  struct slipif_priv *priv = (struct slipif_priv *)netif->state;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	6a1b      	ldr	r3, [r3, #32]
 8012764:	613b      	str	r3, [r7, #16]

  while (1)
  {

	  if (sio_tryread(priv->sd, &c, 1) > 0)
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	f107 010f 	add.w	r1, r7, #15
 801276e:	2201      	movs	r2, #1
 8012770:	4618      	mov	r0, r3
 8012772:	f7ff fd9f 	bl	80122b4 <sio_tryread>
 8012776:	4603      	mov	r3, r0
 8012778:	2b00      	cmp	r3, #0
 801277a:	d0f4      	beq.n	8012766 <slipif_loop_thread+0x12>
	  {
		  slipif_rxbyte_input(netif, c);
 801277c:	7bfb      	ldrb	r3, [r7, #15]
 801277e:	4619      	mov	r1, r3
 8012780:	6978      	ldr	r0, [r7, #20]
 8012782:	f7ff ffc9 	bl	8012718 <slipif_rxbyte_input>
	  if (sio_tryread(priv->sd, &c, 1) > 0)
 8012786:	e7ee      	b.n	8012766 <slipif_loop_thread+0x12>

08012788 <slipif_init>:
 * @note If netif->state is interpreted as an u8_t serial port number.
 *
 */
err_t
slipif_init(struct netif *netif)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b086      	sub	sp, #24
 801278c:	af02      	add	r7, sp, #8
 801278e:	6078      	str	r0, [r7, #4]
  struct slipif_priv *priv;
  u8_t sio_num;

  LWIP_ASSERT("slipif needs an input callback", netif->input != NULL);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	691b      	ldr	r3, [r3, #16]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d106      	bne.n	80127a6 <slipif_init+0x1e>
 8012798:	4b2c      	ldr	r3, [pc, #176]	@ (801284c <slipif_init+0xc4>)
 801279a:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 801279e:	492c      	ldr	r1, [pc, #176]	@ (8012850 <slipif_init+0xc8>)
 80127a0:	482c      	ldr	r0, [pc, #176]	@ (8012854 <slipif_init+0xcc>)
 80127a2:	f000 fa75 	bl	8012c90 <iprintf>

  /* netif->state contains serial port number */
  sio_num = LWIP_PTR_NUMERIC_CAST(u8_t, netif->state);
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(SLIP_DEBUG, ("slipif_init: netif->num=%"U16_F"\n", (u16_t)sio_num));

  /* Allocate private data */
  priv = (struct slipif_priv *)mem_malloc(sizeof(struct slipif_priv));
 80127ac:	2014      	movs	r0, #20
 80127ae:	f7f5 fb75 	bl	8007e9c <mem_malloc>
 80127b2:	60b8      	str	r0, [r7, #8]
  if (!priv) {
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d102      	bne.n	80127c0 <slipif_init+0x38>
    return ERR_MEM;
 80127ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80127be:	e041      	b.n	8012844 <slipif_init+0xbc>
  }

  netif->name[0] = 's';
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2273      	movs	r2, #115	@ 0x73
 80127c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = 'l';
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	226c      	movs	r2, #108	@ 0x6c
 80127cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
#if LWIP_IPV4
  netif->output = slipif_output_v4;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	4a21      	ldr	r2, [pc, #132]	@ (8012858 <slipif_init+0xd0>)
 80127d4:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV4 */
#if LWIP_IPV6
  netif->output_ip6 = slipif_output_v6;
#endif /* LWIP_IPV6 */
  netif->mtu = SLIP_MAX_SIZE;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80127dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Try to open the serial port. */
  priv->sd = sio_open(sio_num);
 80127de:	7bfb      	ldrb	r3, [r7, #15]
 80127e0:	4618      	mov	r0, r3
 80127e2:	f7ff fd45 	bl	8012270 <sio_open>
 80127e6:	4602      	mov	r2, r0
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	601a      	str	r2, [r3, #0]
  if (!priv->sd) {
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d105      	bne.n	8012800 <slipif_init+0x78>
    /* Opening the serial port failed. */
    mem_free(priv);
 80127f4:	68b8      	ldr	r0, [r7, #8]
 80127f6:	f7f5 f9b7 	bl	8007b68 <mem_free>
    return ERR_IF;
 80127fa:	f06f 030b 	mvn.w	r3, #11
 80127fe:	e021      	b.n	8012844 <slipif_init+0xbc>
  }

  /* Initialize private data */
  priv->p = NULL;
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	2200      	movs	r2, #0
 8012804:	605a      	str	r2, [r3, #4]
  priv->q = NULL;
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	2200      	movs	r2, #0
 801280a:	609a      	str	r2, [r3, #8]
  priv->state = SLIP_RECV_NORMAL;
 801280c:	68bb      	ldr	r3, [r7, #8]
 801280e:	2200      	movs	r2, #0
 8012810:	731a      	strb	r2, [r3, #12]
  priv->i = 0;
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	2200      	movs	r2, #0
 8012816:	81da      	strh	r2, [r3, #14]
  priv->recved = 0;
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	2200      	movs	r2, #0
 801281c:	821a      	strh	r2, [r3, #16]
#if SLIP_RX_FROM_ISR
  priv->rxpackets = NULL;
#endif

  netif->state = priv;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	68ba      	ldr	r2, [r7, #8]
 8012822:	621a      	str	r2, [r3, #32]
  netif_set_up(netif);
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f7f5 fefb 	bl	8008620 <netif_set_up>
  netif_set_link_up(netif);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f7f5 ff64 	bl	80086f8 <netif_set_link_up>
  /* initialize the snmp variables and counters inside the struct netif */
  MIB2_INIT_NETIF(netif, snmp_ifType_slip, SLIP_SIO_SPEED(priv->sd));

#if SLIP_USE_RX_THREAD
  /* Create a thread to poll the serial line. */
  sys_thread_new(SLIPIF_THREAD_NAME, slipif_loop_thread, netif,
 8012830:	2300      	movs	r3, #0
 8012832:	9300      	str	r3, [sp, #0]
 8012834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	4908      	ldr	r1, [pc, #32]	@ (801285c <slipif_init+0xd4>)
 801283c:	4808      	ldr	r0, [pc, #32]	@ (8012860 <slipif_init+0xd8>)
 801283e:	f000 f8e3 	bl	8012a08 <sys_thread_new>
                 SLIPIF_THREAD_STACKSIZE, SLIPIF_THREAD_PRIO);

#endif /* SLIP_USE_RX_THREAD */
  return ERR_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	0801689c 	.word	0x0801689c
 8012850:	0801692c 	.word	0x0801692c
 8012854:	080168e0 	.word	0x080168e0
 8012858:	0801255d 	.word	0x0801255d
 801285c:	08012755 	.word	0x08012755
 8012860:	0801694c 	.word	0x0801694c

08012864 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b086      	sub	sp, #24
 8012868:	af00      	add	r7, sp, #0
 801286a:	6078      	str	r0, [r7, #4]
 801286c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	60bb      	str	r3, [r7, #8]
 8012872:	2304      	movs	r3, #4
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	2300      	movs	r3, #0
 8012878:	613b      	str	r3, [r7, #16]
 801287a:	2300      	movs	r3, #0
 801287c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801287e:	f107 0308 	add.w	r3, r7, #8
 8012882:	2100      	movs	r1, #0
 8012884:	4618      	mov	r0, r3
 8012886:	f7f1 f957 	bl	8003b38 <osMessageCreate>
 801288a:	4602      	mov	r2, r0
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d102      	bne.n	801289e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8012898:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801289c:	e000      	b.n	80128a0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	2200      	movs	r2, #0
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7f1 f964 	bl	8003b88 <osMessagePut>
 80128c0:	4603      	mov	r3, r0
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d102      	bne.n	80128cc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80128c6:	2300      	movs	r3, #0
 80128c8:	73fb      	strb	r3, [r7, #15]
 80128ca:	e001      	b.n	80128d0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80128cc:	23ff      	movs	r3, #255	@ 0xff
 80128ce:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80128d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3710      	adds	r7, #16
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b08c      	sub	sp, #48	@ 0x30
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	61f8      	str	r0, [r7, #28]
 80128e4:	61b9      	str	r1, [r7, #24]
 80128e6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80128e8:	f7f1 f819 	bl	800391e <osKernelSysTick>
 80128ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d017      	beq.n	8012924 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	6819      	ldr	r1, [r3, #0]
 80128f8:	f107 0320 	add.w	r3, r7, #32
 80128fc:	697a      	ldr	r2, [r7, #20]
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f1 f982 	bl	8003c08 <osMessageGet>

    if(event.status == osEventMessage)
 8012904:	6a3b      	ldr	r3, [r7, #32]
 8012906:	2b10      	cmp	r3, #16
 8012908:	d109      	bne.n	801291e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801290c:	461a      	mov	r2, r3
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012912:	f7f1 f804 	bl	800391e <osKernelSysTick>
 8012916:	4602      	mov	r2, r0
 8012918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801291a:	1ad3      	subs	r3, r2, r3
 801291c:	e019      	b.n	8012952 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801291e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012922:	e016      	b.n	8012952 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	6819      	ldr	r1, [r3, #0]
 8012928:	463b      	mov	r3, r7
 801292a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801292e:	4618      	mov	r0, r3
 8012930:	f7f1 f96a 	bl	8003c08 <osMessageGet>
 8012934:	f107 0320 	add.w	r3, r7, #32
 8012938:	463a      	mov	r2, r7
 801293a:	ca07      	ldmia	r2, {r0, r1, r2}
 801293c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012942:	461a      	mov	r2, r3
 8012944:	69bb      	ldr	r3, [r7, #24]
 8012946:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012948:	f7f0 ffe9 	bl	800391e <osKernelSysTick>
 801294c:	4602      	mov	r2, r0
 801294e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012950:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8012952:	4618      	mov	r0, r3
 8012954:	3730      	adds	r7, #48	@ 0x30
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801295a:	b480      	push	{r7}
 801295c:	b083      	sub	sp, #12
 801295e:	af00      	add	r7, sp, #0
 8012960:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d101      	bne.n	801296e <sys_mbox_valid+0x14>
    return 0;
 801296a:	2300      	movs	r3, #0
 801296c:	e000      	b.n	8012970 <sys_mbox_valid+0x16>
  else
    return 1;
 801296e:	2301      	movs	r3, #1
}
 8012970:	4618      	mov	r0, r3
 8012972:	370c      	adds	r7, #12
 8012974:	46bd      	mov	sp, r7
 8012976:	bc80      	pop	{r7}
 8012978:	4770      	bx	lr
	...

0801297c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012980:	4803      	ldr	r0, [pc, #12]	@ (8012990 <sys_init+0x14>)
 8012982:	f7f1 f83c 	bl	80039fe <osMutexCreate>
 8012986:	4603      	mov	r3, r0
 8012988:	4a02      	ldr	r2, [pc, #8]	@ (8012994 <sys_init+0x18>)
 801298a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801298c:	bf00      	nop
 801298e:	bd80      	pop	{r7, pc}
 8012990:	0801789c 	.word	0x0801789c
 8012994:	20007d4c 	.word	0x20007d4c

08012998 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80129a0:	2300      	movs	r3, #0
 80129a2:	60bb      	str	r3, [r7, #8]
 80129a4:	2300      	movs	r3, #0
 80129a6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80129a8:	f107 0308 	add.w	r3, r7, #8
 80129ac:	4618      	mov	r0, r3
 80129ae:	f7f1 f826 	bl	80039fe <osMutexCreate>
 80129b2:	4602      	mov	r2, r0
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d102      	bne.n	80129c6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80129c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80129c4:	e000      	b.n	80129c8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80129c6:	2300      	movs	r3, #0
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}

080129d0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7f1 f825 	bl	8003a30 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80129e6:	bf00      	nop
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b082      	sub	sp, #8
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	4618      	mov	r0, r3
 80129fc:	f7f1 f866 	bl	8003acc <osMutexRelease>
}
 8012a00:	bf00      	nop
 8012a02:	3708      	adds	r7, #8
 8012a04:	46bd      	mov	sp, r7
 8012a06:	bd80      	pop	{r7, pc}

08012a08 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b08c      	sub	sp, #48	@ 0x30
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012a16:	f107 0314 	add.w	r3, r7, #20
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	605a      	str	r2, [r3, #4]
 8012a20:	609a      	str	r2, [r3, #8]
 8012a22:	60da      	str	r2, [r3, #12]
 8012a24:	611a      	str	r2, [r3, #16]
 8012a26:	615a      	str	r2, [r3, #20]
 8012a28:	619a      	str	r2, [r3, #24]
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	617b      	str	r3, [r7, #20]
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	61bb      	str	r3, [r7, #24]
 8012a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a34:	b21b      	sxth	r3, r3
 8012a36:	83bb      	strh	r3, [r7, #28]
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012a3c:	f107 0314 	add.w	r3, r7, #20
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	4618      	mov	r0, r3
 8012a44:	f7f0 ff7b 	bl	800393e <osThreadCreate>
 8012a48:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3730      	adds	r7, #48	@ 0x30
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
	...

08012a54 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012a58:	4b04      	ldr	r3, [pc, #16]	@ (8012a6c <sys_arch_protect+0x18>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7f0 ffe5 	bl	8003a30 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8012a66:	2301      	movs	r3, #1
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	20007d4c 	.word	0x20007d4c

08012a70 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b082      	sub	sp, #8
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012a78:	4b04      	ldr	r3, [pc, #16]	@ (8012a8c <sys_arch_unprotect+0x1c>)
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7f1 f825 	bl	8003acc <osMutexRelease>
}
 8012a82:	bf00      	nop
 8012a84:	3708      	adds	r7, #8
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}
 8012a8a:	bf00      	nop
 8012a8c:	20007d4c 	.word	0x20007d4c

08012a90 <rand>:
 8012a90:	4b16      	ldr	r3, [pc, #88]	@ (8012aec <rand+0x5c>)
 8012a92:	b510      	push	{r4, lr}
 8012a94:	681c      	ldr	r4, [r3, #0]
 8012a96:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8012a98:	b9b3      	cbnz	r3, 8012ac8 <rand+0x38>
 8012a9a:	2018      	movs	r0, #24
 8012a9c:	f000 fabc 	bl	8013018 <malloc>
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	6320      	str	r0, [r4, #48]	@ 0x30
 8012aa4:	b920      	cbnz	r0, 8012ab0 <rand+0x20>
 8012aa6:	2152      	movs	r1, #82	@ 0x52
 8012aa8:	4b11      	ldr	r3, [pc, #68]	@ (8012af0 <rand+0x60>)
 8012aaa:	4812      	ldr	r0, [pc, #72]	@ (8012af4 <rand+0x64>)
 8012aac:	f000 fa4e 	bl	8012f4c <__assert_func>
 8012ab0:	4911      	ldr	r1, [pc, #68]	@ (8012af8 <rand+0x68>)
 8012ab2:	4b12      	ldr	r3, [pc, #72]	@ (8012afc <rand+0x6c>)
 8012ab4:	e9c0 1300 	strd	r1, r3, [r0]
 8012ab8:	4b11      	ldr	r3, [pc, #68]	@ (8012b00 <rand+0x70>)
 8012aba:	2100      	movs	r1, #0
 8012abc:	6083      	str	r3, [r0, #8]
 8012abe:	230b      	movs	r3, #11
 8012ac0:	8183      	strh	r3, [r0, #12]
 8012ac2:	2001      	movs	r0, #1
 8012ac4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012ac8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012aca:	480e      	ldr	r0, [pc, #56]	@ (8012b04 <rand+0x74>)
 8012acc:	690b      	ldr	r3, [r1, #16]
 8012ace:	694c      	ldr	r4, [r1, #20]
 8012ad0:	4358      	muls	r0, r3
 8012ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8012b08 <rand+0x78>)
 8012ad4:	fb02 0004 	mla	r0, r2, r4, r0
 8012ad8:	fba3 3202 	umull	r3, r2, r3, r2
 8012adc:	3301      	adds	r3, #1
 8012ade:	eb40 0002 	adc.w	r0, r0, r2
 8012ae2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012ae6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8012aea:	bd10      	pop	{r4, pc}
 8012aec:	20000028 	.word	0x20000028
 8012af0:	080178a4 	.word	0x080178a4
 8012af4:	080178bb 	.word	0x080178bb
 8012af8:	abcd330e 	.word	0xabcd330e
 8012afc:	e66d1234 	.word	0xe66d1234
 8012b00:	0005deec 	.word	0x0005deec
 8012b04:	5851f42d 	.word	0x5851f42d
 8012b08:	4c957f2d 	.word	0x4c957f2d

08012b0c <std>:
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	b510      	push	{r4, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	e9c0 3300 	strd	r3, r3, [r0]
 8012b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012b1a:	6083      	str	r3, [r0, #8]
 8012b1c:	8181      	strh	r1, [r0, #12]
 8012b1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012b20:	81c2      	strh	r2, [r0, #14]
 8012b22:	6183      	str	r3, [r0, #24]
 8012b24:	4619      	mov	r1, r3
 8012b26:	2208      	movs	r2, #8
 8012b28:	305c      	adds	r0, #92	@ 0x5c
 8012b2a:	f000 f916 	bl	8012d5a <memset>
 8012b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8012b64 <std+0x58>)
 8012b30:	6224      	str	r4, [r4, #32]
 8012b32:	6263      	str	r3, [r4, #36]	@ 0x24
 8012b34:	4b0c      	ldr	r3, [pc, #48]	@ (8012b68 <std+0x5c>)
 8012b36:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012b38:	4b0c      	ldr	r3, [pc, #48]	@ (8012b6c <std+0x60>)
 8012b3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8012b70 <std+0x64>)
 8012b3e:	6323      	str	r3, [r4, #48]	@ 0x30
 8012b40:	4b0c      	ldr	r3, [pc, #48]	@ (8012b74 <std+0x68>)
 8012b42:	429c      	cmp	r4, r3
 8012b44:	d006      	beq.n	8012b54 <std+0x48>
 8012b46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012b4a:	4294      	cmp	r4, r2
 8012b4c:	d002      	beq.n	8012b54 <std+0x48>
 8012b4e:	33d0      	adds	r3, #208	@ 0xd0
 8012b50:	429c      	cmp	r4, r3
 8012b52:	d105      	bne.n	8012b60 <std+0x54>
 8012b54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5c:	f000 b9e4 	b.w	8012f28 <__retarget_lock_init_recursive>
 8012b60:	bd10      	pop	{r4, pc}
 8012b62:	bf00      	nop
 8012b64:	08012cb5 	.word	0x08012cb5
 8012b68:	08012cd7 	.word	0x08012cd7
 8012b6c:	08012d0f 	.word	0x08012d0f
 8012b70:	08012d33 	.word	0x08012d33
 8012b74:	20007d50 	.word	0x20007d50

08012b78 <stdio_exit_handler>:
 8012b78:	4a02      	ldr	r2, [pc, #8]	@ (8012b84 <stdio_exit_handler+0xc>)
 8012b7a:	4903      	ldr	r1, [pc, #12]	@ (8012b88 <stdio_exit_handler+0x10>)
 8012b7c:	4803      	ldr	r0, [pc, #12]	@ (8012b8c <stdio_exit_handler+0x14>)
 8012b7e:	f000 b869 	b.w	8012c54 <_fwalk_sglue>
 8012b82:	bf00      	nop
 8012b84:	2000001c 	.word	0x2000001c
 8012b88:	08013829 	.word	0x08013829
 8012b8c:	2000002c 	.word	0x2000002c

08012b90 <cleanup_stdio>:
 8012b90:	6841      	ldr	r1, [r0, #4]
 8012b92:	4b0c      	ldr	r3, [pc, #48]	@ (8012bc4 <cleanup_stdio+0x34>)
 8012b94:	b510      	push	{r4, lr}
 8012b96:	4299      	cmp	r1, r3
 8012b98:	4604      	mov	r4, r0
 8012b9a:	d001      	beq.n	8012ba0 <cleanup_stdio+0x10>
 8012b9c:	f000 fe44 	bl	8013828 <_fflush_r>
 8012ba0:	68a1      	ldr	r1, [r4, #8]
 8012ba2:	4b09      	ldr	r3, [pc, #36]	@ (8012bc8 <cleanup_stdio+0x38>)
 8012ba4:	4299      	cmp	r1, r3
 8012ba6:	d002      	beq.n	8012bae <cleanup_stdio+0x1e>
 8012ba8:	4620      	mov	r0, r4
 8012baa:	f000 fe3d 	bl	8013828 <_fflush_r>
 8012bae:	68e1      	ldr	r1, [r4, #12]
 8012bb0:	4b06      	ldr	r3, [pc, #24]	@ (8012bcc <cleanup_stdio+0x3c>)
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	d004      	beq.n	8012bc0 <cleanup_stdio+0x30>
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bbc:	f000 be34 	b.w	8013828 <_fflush_r>
 8012bc0:	bd10      	pop	{r4, pc}
 8012bc2:	bf00      	nop
 8012bc4:	20007d50 	.word	0x20007d50
 8012bc8:	20007db8 	.word	0x20007db8
 8012bcc:	20007e20 	.word	0x20007e20

08012bd0 <global_stdio_init.part.0>:
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8012c00 <global_stdio_init.part.0+0x30>)
 8012bd4:	4c0b      	ldr	r4, [pc, #44]	@ (8012c04 <global_stdio_init.part.0+0x34>)
 8012bd6:	4a0c      	ldr	r2, [pc, #48]	@ (8012c08 <global_stdio_init.part.0+0x38>)
 8012bd8:	4620      	mov	r0, r4
 8012bda:	601a      	str	r2, [r3, #0]
 8012bdc:	2104      	movs	r1, #4
 8012bde:	2200      	movs	r2, #0
 8012be0:	f7ff ff94 	bl	8012b0c <std>
 8012be4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012be8:	2201      	movs	r2, #1
 8012bea:	2109      	movs	r1, #9
 8012bec:	f7ff ff8e 	bl	8012b0c <std>
 8012bf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012bf4:	2202      	movs	r2, #2
 8012bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012bfa:	2112      	movs	r1, #18
 8012bfc:	f7ff bf86 	b.w	8012b0c <std>
 8012c00:	20007e88 	.word	0x20007e88
 8012c04:	20007d50 	.word	0x20007d50
 8012c08:	08012b79 	.word	0x08012b79

08012c0c <__sfp_lock_acquire>:
 8012c0c:	4801      	ldr	r0, [pc, #4]	@ (8012c14 <__sfp_lock_acquire+0x8>)
 8012c0e:	f000 b98c 	b.w	8012f2a <__retarget_lock_acquire_recursive>
 8012c12:	bf00      	nop
 8012c14:	20007e91 	.word	0x20007e91

08012c18 <__sfp_lock_release>:
 8012c18:	4801      	ldr	r0, [pc, #4]	@ (8012c20 <__sfp_lock_release+0x8>)
 8012c1a:	f000 b987 	b.w	8012f2c <__retarget_lock_release_recursive>
 8012c1e:	bf00      	nop
 8012c20:	20007e91 	.word	0x20007e91

08012c24 <__sinit>:
 8012c24:	b510      	push	{r4, lr}
 8012c26:	4604      	mov	r4, r0
 8012c28:	f7ff fff0 	bl	8012c0c <__sfp_lock_acquire>
 8012c2c:	6a23      	ldr	r3, [r4, #32]
 8012c2e:	b11b      	cbz	r3, 8012c38 <__sinit+0x14>
 8012c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012c34:	f7ff bff0 	b.w	8012c18 <__sfp_lock_release>
 8012c38:	4b04      	ldr	r3, [pc, #16]	@ (8012c4c <__sinit+0x28>)
 8012c3a:	6223      	str	r3, [r4, #32]
 8012c3c:	4b04      	ldr	r3, [pc, #16]	@ (8012c50 <__sinit+0x2c>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d1f5      	bne.n	8012c30 <__sinit+0xc>
 8012c44:	f7ff ffc4 	bl	8012bd0 <global_stdio_init.part.0>
 8012c48:	e7f2      	b.n	8012c30 <__sinit+0xc>
 8012c4a:	bf00      	nop
 8012c4c:	08012b91 	.word	0x08012b91
 8012c50:	20007e88 	.word	0x20007e88

08012c54 <_fwalk_sglue>:
 8012c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012c58:	4607      	mov	r7, r0
 8012c5a:	4688      	mov	r8, r1
 8012c5c:	4614      	mov	r4, r2
 8012c5e:	2600      	movs	r6, #0
 8012c60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012c64:	f1b9 0901 	subs.w	r9, r9, #1
 8012c68:	d505      	bpl.n	8012c76 <_fwalk_sglue+0x22>
 8012c6a:	6824      	ldr	r4, [r4, #0]
 8012c6c:	2c00      	cmp	r4, #0
 8012c6e:	d1f7      	bne.n	8012c60 <_fwalk_sglue+0xc>
 8012c70:	4630      	mov	r0, r6
 8012c72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012c76:	89ab      	ldrh	r3, [r5, #12]
 8012c78:	2b01      	cmp	r3, #1
 8012c7a:	d907      	bls.n	8012c8c <_fwalk_sglue+0x38>
 8012c7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012c80:	3301      	adds	r3, #1
 8012c82:	d003      	beq.n	8012c8c <_fwalk_sglue+0x38>
 8012c84:	4629      	mov	r1, r5
 8012c86:	4638      	mov	r0, r7
 8012c88:	47c0      	blx	r8
 8012c8a:	4306      	orrs	r6, r0
 8012c8c:	3568      	adds	r5, #104	@ 0x68
 8012c8e:	e7e9      	b.n	8012c64 <_fwalk_sglue+0x10>

08012c90 <iprintf>:
 8012c90:	b40f      	push	{r0, r1, r2, r3}
 8012c92:	b507      	push	{r0, r1, r2, lr}
 8012c94:	4906      	ldr	r1, [pc, #24]	@ (8012cb0 <iprintf+0x20>)
 8012c96:	ab04      	add	r3, sp, #16
 8012c98:	6808      	ldr	r0, [r1, #0]
 8012c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012c9e:	6881      	ldr	r1, [r0, #8]
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	f000 fa97 	bl	80131d4 <_vfiprintf_r>
 8012ca6:	b003      	add	sp, #12
 8012ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012cac:	b004      	add	sp, #16
 8012cae:	4770      	bx	lr
 8012cb0:	20000028 	.word	0x20000028

08012cb4 <__sread>:
 8012cb4:	b510      	push	{r4, lr}
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cbc:	f000 f8ec 	bl	8012e98 <_read_r>
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	bfab      	itete	ge
 8012cc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8012cc8:	181b      	addge	r3, r3, r0
 8012cca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012cce:	bfac      	ite	ge
 8012cd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012cd2:	81a3      	strhlt	r3, [r4, #12]
 8012cd4:	bd10      	pop	{r4, pc}

08012cd6 <__swrite>:
 8012cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cda:	461f      	mov	r7, r3
 8012cdc:	898b      	ldrh	r3, [r1, #12]
 8012cde:	4605      	mov	r5, r0
 8012ce0:	05db      	lsls	r3, r3, #23
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	4616      	mov	r6, r2
 8012ce6:	d505      	bpl.n	8012cf4 <__swrite+0x1e>
 8012ce8:	2302      	movs	r3, #2
 8012cea:	2200      	movs	r2, #0
 8012cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cf0:	f000 f8c0 	bl	8012e74 <_lseek_r>
 8012cf4:	89a3      	ldrh	r3, [r4, #12]
 8012cf6:	4632      	mov	r2, r6
 8012cf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012cfc:	81a3      	strh	r3, [r4, #12]
 8012cfe:	4628      	mov	r0, r5
 8012d00:	463b      	mov	r3, r7
 8012d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d0a:	f000 b8d7 	b.w	8012ebc <_write_r>

08012d0e <__sseek>:
 8012d0e:	b510      	push	{r4, lr}
 8012d10:	460c      	mov	r4, r1
 8012d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d16:	f000 f8ad 	bl	8012e74 <_lseek_r>
 8012d1a:	1c43      	adds	r3, r0, #1
 8012d1c:	89a3      	ldrh	r3, [r4, #12]
 8012d1e:	bf15      	itete	ne
 8012d20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d2a:	81a3      	strheq	r3, [r4, #12]
 8012d2c:	bf18      	it	ne
 8012d2e:	81a3      	strhne	r3, [r4, #12]
 8012d30:	bd10      	pop	{r4, pc}

08012d32 <__sclose>:
 8012d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d36:	f000 b837 	b.w	8012da8 <_close_r>

08012d3a <memcmp>:
 8012d3a:	b510      	push	{r4, lr}
 8012d3c:	3901      	subs	r1, #1
 8012d3e:	4402      	add	r2, r0
 8012d40:	4290      	cmp	r0, r2
 8012d42:	d101      	bne.n	8012d48 <memcmp+0xe>
 8012d44:	2000      	movs	r0, #0
 8012d46:	e005      	b.n	8012d54 <memcmp+0x1a>
 8012d48:	7803      	ldrb	r3, [r0, #0]
 8012d4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8012d4e:	42a3      	cmp	r3, r4
 8012d50:	d001      	beq.n	8012d56 <memcmp+0x1c>
 8012d52:	1b18      	subs	r0, r3, r4
 8012d54:	bd10      	pop	{r4, pc}
 8012d56:	3001      	adds	r0, #1
 8012d58:	e7f2      	b.n	8012d40 <memcmp+0x6>

08012d5a <memset>:
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	4402      	add	r2, r0
 8012d5e:	4293      	cmp	r3, r2
 8012d60:	d100      	bne.n	8012d64 <memset+0xa>
 8012d62:	4770      	bx	lr
 8012d64:	f803 1b01 	strb.w	r1, [r3], #1
 8012d68:	e7f9      	b.n	8012d5e <memset+0x4>

08012d6a <strchr>:
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	b2c9      	uxtb	r1, r1
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d74:	b112      	cbz	r2, 8012d7c <strchr+0x12>
 8012d76:	428a      	cmp	r2, r1
 8012d78:	d1f9      	bne.n	8012d6e <strchr+0x4>
 8012d7a:	4770      	bx	lr
 8012d7c:	2900      	cmp	r1, #0
 8012d7e:	bf18      	it	ne
 8012d80:	2000      	movne	r0, #0
 8012d82:	4770      	bx	lr

08012d84 <strncmp>:
 8012d84:	b510      	push	{r4, lr}
 8012d86:	b16a      	cbz	r2, 8012da4 <strncmp+0x20>
 8012d88:	3901      	subs	r1, #1
 8012d8a:	1884      	adds	r4, r0, r2
 8012d8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d103      	bne.n	8012da0 <strncmp+0x1c>
 8012d98:	42a0      	cmp	r0, r4
 8012d9a:	d001      	beq.n	8012da0 <strncmp+0x1c>
 8012d9c:	2a00      	cmp	r2, #0
 8012d9e:	d1f5      	bne.n	8012d8c <strncmp+0x8>
 8012da0:	1ad0      	subs	r0, r2, r3
 8012da2:	bd10      	pop	{r4, pc}
 8012da4:	4610      	mov	r0, r2
 8012da6:	e7fc      	b.n	8012da2 <strncmp+0x1e>

08012da8 <_close_r>:
 8012da8:	b538      	push	{r3, r4, r5, lr}
 8012daa:	2300      	movs	r3, #0
 8012dac:	4d05      	ldr	r5, [pc, #20]	@ (8012dc4 <_close_r+0x1c>)
 8012dae:	4604      	mov	r4, r0
 8012db0:	4608      	mov	r0, r1
 8012db2:	602b      	str	r3, [r5, #0]
 8012db4:	f7ed ff64 	bl	8000c80 <_close>
 8012db8:	1c43      	adds	r3, r0, #1
 8012dba:	d102      	bne.n	8012dc2 <_close_r+0x1a>
 8012dbc:	682b      	ldr	r3, [r5, #0]
 8012dbe:	b103      	cbz	r3, 8012dc2 <_close_r+0x1a>
 8012dc0:	6023      	str	r3, [r4, #0]
 8012dc2:	bd38      	pop	{r3, r4, r5, pc}
 8012dc4:	20007e8c 	.word	0x20007e8c

08012dc8 <_reclaim_reent>:
 8012dc8:	4b29      	ldr	r3, [pc, #164]	@ (8012e70 <_reclaim_reent+0xa8>)
 8012dca:	b570      	push	{r4, r5, r6, lr}
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4604      	mov	r4, r0
 8012dd0:	4283      	cmp	r3, r0
 8012dd2:	d04b      	beq.n	8012e6c <_reclaim_reent+0xa4>
 8012dd4:	69c3      	ldr	r3, [r0, #28]
 8012dd6:	b1ab      	cbz	r3, 8012e04 <_reclaim_reent+0x3c>
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	b16b      	cbz	r3, 8012df8 <_reclaim_reent+0x30>
 8012ddc:	2500      	movs	r5, #0
 8012dde:	69e3      	ldr	r3, [r4, #28]
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	5959      	ldr	r1, [r3, r5]
 8012de4:	2900      	cmp	r1, #0
 8012de6:	d13b      	bne.n	8012e60 <_reclaim_reent+0x98>
 8012de8:	3504      	adds	r5, #4
 8012dea:	2d80      	cmp	r5, #128	@ 0x80
 8012dec:	d1f7      	bne.n	8012dde <_reclaim_reent+0x16>
 8012dee:	69e3      	ldr	r3, [r4, #28]
 8012df0:	4620      	mov	r0, r4
 8012df2:	68d9      	ldr	r1, [r3, #12]
 8012df4:	f000 f8c8 	bl	8012f88 <_free_r>
 8012df8:	69e3      	ldr	r3, [r4, #28]
 8012dfa:	6819      	ldr	r1, [r3, #0]
 8012dfc:	b111      	cbz	r1, 8012e04 <_reclaim_reent+0x3c>
 8012dfe:	4620      	mov	r0, r4
 8012e00:	f000 f8c2 	bl	8012f88 <_free_r>
 8012e04:	6961      	ldr	r1, [r4, #20]
 8012e06:	b111      	cbz	r1, 8012e0e <_reclaim_reent+0x46>
 8012e08:	4620      	mov	r0, r4
 8012e0a:	f000 f8bd 	bl	8012f88 <_free_r>
 8012e0e:	69e1      	ldr	r1, [r4, #28]
 8012e10:	b111      	cbz	r1, 8012e18 <_reclaim_reent+0x50>
 8012e12:	4620      	mov	r0, r4
 8012e14:	f000 f8b8 	bl	8012f88 <_free_r>
 8012e18:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012e1a:	b111      	cbz	r1, 8012e22 <_reclaim_reent+0x5a>
 8012e1c:	4620      	mov	r0, r4
 8012e1e:	f000 f8b3 	bl	8012f88 <_free_r>
 8012e22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e24:	b111      	cbz	r1, 8012e2c <_reclaim_reent+0x64>
 8012e26:	4620      	mov	r0, r4
 8012e28:	f000 f8ae 	bl	8012f88 <_free_r>
 8012e2c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012e2e:	b111      	cbz	r1, 8012e36 <_reclaim_reent+0x6e>
 8012e30:	4620      	mov	r0, r4
 8012e32:	f000 f8a9 	bl	8012f88 <_free_r>
 8012e36:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012e38:	b111      	cbz	r1, 8012e40 <_reclaim_reent+0x78>
 8012e3a:	4620      	mov	r0, r4
 8012e3c:	f000 f8a4 	bl	8012f88 <_free_r>
 8012e40:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012e42:	b111      	cbz	r1, 8012e4a <_reclaim_reent+0x82>
 8012e44:	4620      	mov	r0, r4
 8012e46:	f000 f89f 	bl	8012f88 <_free_r>
 8012e4a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012e4c:	b111      	cbz	r1, 8012e54 <_reclaim_reent+0x8c>
 8012e4e:	4620      	mov	r0, r4
 8012e50:	f000 f89a 	bl	8012f88 <_free_r>
 8012e54:	6a23      	ldr	r3, [r4, #32]
 8012e56:	b14b      	cbz	r3, 8012e6c <_reclaim_reent+0xa4>
 8012e58:	4620      	mov	r0, r4
 8012e5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e5e:	4718      	bx	r3
 8012e60:	680e      	ldr	r6, [r1, #0]
 8012e62:	4620      	mov	r0, r4
 8012e64:	f000 f890 	bl	8012f88 <_free_r>
 8012e68:	4631      	mov	r1, r6
 8012e6a:	e7bb      	b.n	8012de4 <_reclaim_reent+0x1c>
 8012e6c:	bd70      	pop	{r4, r5, r6, pc}
 8012e6e:	bf00      	nop
 8012e70:	20000028 	.word	0x20000028

08012e74 <_lseek_r>:
 8012e74:	b538      	push	{r3, r4, r5, lr}
 8012e76:	4604      	mov	r4, r0
 8012e78:	4608      	mov	r0, r1
 8012e7a:	4611      	mov	r1, r2
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	4d05      	ldr	r5, [pc, #20]	@ (8012e94 <_lseek_r+0x20>)
 8012e80:	602a      	str	r2, [r5, #0]
 8012e82:	461a      	mov	r2, r3
 8012e84:	f7ed ff20 	bl	8000cc8 <_lseek>
 8012e88:	1c43      	adds	r3, r0, #1
 8012e8a:	d102      	bne.n	8012e92 <_lseek_r+0x1e>
 8012e8c:	682b      	ldr	r3, [r5, #0]
 8012e8e:	b103      	cbz	r3, 8012e92 <_lseek_r+0x1e>
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	bd38      	pop	{r3, r4, r5, pc}
 8012e94:	20007e8c 	.word	0x20007e8c

08012e98 <_read_r>:
 8012e98:	b538      	push	{r3, r4, r5, lr}
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	4608      	mov	r0, r1
 8012e9e:	4611      	mov	r1, r2
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	4d05      	ldr	r5, [pc, #20]	@ (8012eb8 <_read_r+0x20>)
 8012ea4:	602a      	str	r2, [r5, #0]
 8012ea6:	461a      	mov	r2, r3
 8012ea8:	f7ed feb1 	bl	8000c0e <_read>
 8012eac:	1c43      	adds	r3, r0, #1
 8012eae:	d102      	bne.n	8012eb6 <_read_r+0x1e>
 8012eb0:	682b      	ldr	r3, [r5, #0]
 8012eb2:	b103      	cbz	r3, 8012eb6 <_read_r+0x1e>
 8012eb4:	6023      	str	r3, [r4, #0]
 8012eb6:	bd38      	pop	{r3, r4, r5, pc}
 8012eb8:	20007e8c 	.word	0x20007e8c

08012ebc <_write_r>:
 8012ebc:	b538      	push	{r3, r4, r5, lr}
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4608      	mov	r0, r1
 8012ec2:	4611      	mov	r1, r2
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	4d05      	ldr	r5, [pc, #20]	@ (8012edc <_write_r+0x20>)
 8012ec8:	602a      	str	r2, [r5, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	f7ed febc 	bl	8000c48 <_write>
 8012ed0:	1c43      	adds	r3, r0, #1
 8012ed2:	d102      	bne.n	8012eda <_write_r+0x1e>
 8012ed4:	682b      	ldr	r3, [r5, #0]
 8012ed6:	b103      	cbz	r3, 8012eda <_write_r+0x1e>
 8012ed8:	6023      	str	r3, [r4, #0]
 8012eda:	bd38      	pop	{r3, r4, r5, pc}
 8012edc:	20007e8c 	.word	0x20007e8c

08012ee0 <__libc_init_array>:
 8012ee0:	b570      	push	{r4, r5, r6, lr}
 8012ee2:	2600      	movs	r6, #0
 8012ee4:	4d0c      	ldr	r5, [pc, #48]	@ (8012f18 <__libc_init_array+0x38>)
 8012ee6:	4c0d      	ldr	r4, [pc, #52]	@ (8012f1c <__libc_init_array+0x3c>)
 8012ee8:	1b64      	subs	r4, r4, r5
 8012eea:	10a4      	asrs	r4, r4, #2
 8012eec:	42a6      	cmp	r6, r4
 8012eee:	d109      	bne.n	8012f04 <__libc_init_array+0x24>
 8012ef0:	f000 fe54 	bl	8013b9c <_init>
 8012ef4:	2600      	movs	r6, #0
 8012ef6:	4d0a      	ldr	r5, [pc, #40]	@ (8012f20 <__libc_init_array+0x40>)
 8012ef8:	4c0a      	ldr	r4, [pc, #40]	@ (8012f24 <__libc_init_array+0x44>)
 8012efa:	1b64      	subs	r4, r4, r5
 8012efc:	10a4      	asrs	r4, r4, #2
 8012efe:	42a6      	cmp	r6, r4
 8012f00:	d105      	bne.n	8012f0e <__libc_init_array+0x2e>
 8012f02:	bd70      	pop	{r4, r5, r6, pc}
 8012f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f08:	4798      	blx	r3
 8012f0a:	3601      	adds	r6, #1
 8012f0c:	e7ee      	b.n	8012eec <__libc_init_array+0xc>
 8012f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f12:	4798      	blx	r3
 8012f14:	3601      	adds	r6, #1
 8012f16:	e7f2      	b.n	8012efe <__libc_init_array+0x1e>
 8012f18:	0801798c 	.word	0x0801798c
 8012f1c:	0801798c 	.word	0x0801798c
 8012f20:	0801798c 	.word	0x0801798c
 8012f24:	08017990 	.word	0x08017990

08012f28 <__retarget_lock_init_recursive>:
 8012f28:	4770      	bx	lr

08012f2a <__retarget_lock_acquire_recursive>:
 8012f2a:	4770      	bx	lr

08012f2c <__retarget_lock_release_recursive>:
 8012f2c:	4770      	bx	lr

08012f2e <memcpy>:
 8012f2e:	440a      	add	r2, r1
 8012f30:	4291      	cmp	r1, r2
 8012f32:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012f36:	d100      	bne.n	8012f3a <memcpy+0xc>
 8012f38:	4770      	bx	lr
 8012f3a:	b510      	push	{r4, lr}
 8012f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f40:	4291      	cmp	r1, r2
 8012f42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f46:	d1f9      	bne.n	8012f3c <memcpy+0xe>
 8012f48:	bd10      	pop	{r4, pc}
	...

08012f4c <__assert_func>:
 8012f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f4e:	4614      	mov	r4, r2
 8012f50:	461a      	mov	r2, r3
 8012f52:	4b09      	ldr	r3, [pc, #36]	@ (8012f78 <__assert_func+0x2c>)
 8012f54:	4605      	mov	r5, r0
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	68d8      	ldr	r0, [r3, #12]
 8012f5a:	b954      	cbnz	r4, 8012f72 <__assert_func+0x26>
 8012f5c:	4b07      	ldr	r3, [pc, #28]	@ (8012f7c <__assert_func+0x30>)
 8012f5e:	461c      	mov	r4, r3
 8012f60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f64:	9100      	str	r1, [sp, #0]
 8012f66:	462b      	mov	r3, r5
 8012f68:	4905      	ldr	r1, [pc, #20]	@ (8012f80 <__assert_func+0x34>)
 8012f6a:	f000 fc85 	bl	8013878 <fiprintf>
 8012f6e:	f000 fd47 	bl	8013a00 <abort>
 8012f72:	4b04      	ldr	r3, [pc, #16]	@ (8012f84 <__assert_func+0x38>)
 8012f74:	e7f4      	b.n	8012f60 <__assert_func+0x14>
 8012f76:	bf00      	nop
 8012f78:	20000028 	.word	0x20000028
 8012f7c:	0801794e 	.word	0x0801794e
 8012f80:	08017920 	.word	0x08017920
 8012f84:	08017913 	.word	0x08017913

08012f88 <_free_r>:
 8012f88:	b538      	push	{r3, r4, r5, lr}
 8012f8a:	4605      	mov	r5, r0
 8012f8c:	2900      	cmp	r1, #0
 8012f8e:	d040      	beq.n	8013012 <_free_r+0x8a>
 8012f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f94:	1f0c      	subs	r4, r1, #4
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	bfb8      	it	lt
 8012f9a:	18e4      	addlt	r4, r4, r3
 8012f9c:	f000 f8e6 	bl	801316c <__malloc_lock>
 8012fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8013014 <_free_r+0x8c>)
 8012fa2:	6813      	ldr	r3, [r2, #0]
 8012fa4:	b933      	cbnz	r3, 8012fb4 <_free_r+0x2c>
 8012fa6:	6063      	str	r3, [r4, #4]
 8012fa8:	6014      	str	r4, [r2, #0]
 8012faa:	4628      	mov	r0, r5
 8012fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012fb0:	f000 b8e2 	b.w	8013178 <__malloc_unlock>
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	d908      	bls.n	8012fca <_free_r+0x42>
 8012fb8:	6820      	ldr	r0, [r4, #0]
 8012fba:	1821      	adds	r1, r4, r0
 8012fbc:	428b      	cmp	r3, r1
 8012fbe:	bf01      	itttt	eq
 8012fc0:	6819      	ldreq	r1, [r3, #0]
 8012fc2:	685b      	ldreq	r3, [r3, #4]
 8012fc4:	1809      	addeq	r1, r1, r0
 8012fc6:	6021      	streq	r1, [r4, #0]
 8012fc8:	e7ed      	b.n	8012fa6 <_free_r+0x1e>
 8012fca:	461a      	mov	r2, r3
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	b10b      	cbz	r3, 8012fd4 <_free_r+0x4c>
 8012fd0:	42a3      	cmp	r3, r4
 8012fd2:	d9fa      	bls.n	8012fca <_free_r+0x42>
 8012fd4:	6811      	ldr	r1, [r2, #0]
 8012fd6:	1850      	adds	r0, r2, r1
 8012fd8:	42a0      	cmp	r0, r4
 8012fda:	d10b      	bne.n	8012ff4 <_free_r+0x6c>
 8012fdc:	6820      	ldr	r0, [r4, #0]
 8012fde:	4401      	add	r1, r0
 8012fe0:	1850      	adds	r0, r2, r1
 8012fe2:	4283      	cmp	r3, r0
 8012fe4:	6011      	str	r1, [r2, #0]
 8012fe6:	d1e0      	bne.n	8012faa <_free_r+0x22>
 8012fe8:	6818      	ldr	r0, [r3, #0]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	4408      	add	r0, r1
 8012fee:	6010      	str	r0, [r2, #0]
 8012ff0:	6053      	str	r3, [r2, #4]
 8012ff2:	e7da      	b.n	8012faa <_free_r+0x22>
 8012ff4:	d902      	bls.n	8012ffc <_free_r+0x74>
 8012ff6:	230c      	movs	r3, #12
 8012ff8:	602b      	str	r3, [r5, #0]
 8012ffa:	e7d6      	b.n	8012faa <_free_r+0x22>
 8012ffc:	6820      	ldr	r0, [r4, #0]
 8012ffe:	1821      	adds	r1, r4, r0
 8013000:	428b      	cmp	r3, r1
 8013002:	bf01      	itttt	eq
 8013004:	6819      	ldreq	r1, [r3, #0]
 8013006:	685b      	ldreq	r3, [r3, #4]
 8013008:	1809      	addeq	r1, r1, r0
 801300a:	6021      	streq	r1, [r4, #0]
 801300c:	6063      	str	r3, [r4, #4]
 801300e:	6054      	str	r4, [r2, #4]
 8013010:	e7cb      	b.n	8012faa <_free_r+0x22>
 8013012:	bd38      	pop	{r3, r4, r5, pc}
 8013014:	20007e98 	.word	0x20007e98

08013018 <malloc>:
 8013018:	4b02      	ldr	r3, [pc, #8]	@ (8013024 <malloc+0xc>)
 801301a:	4601      	mov	r1, r0
 801301c:	6818      	ldr	r0, [r3, #0]
 801301e:	f000 b825 	b.w	801306c <_malloc_r>
 8013022:	bf00      	nop
 8013024:	20000028 	.word	0x20000028

08013028 <sbrk_aligned>:
 8013028:	b570      	push	{r4, r5, r6, lr}
 801302a:	4e0f      	ldr	r6, [pc, #60]	@ (8013068 <sbrk_aligned+0x40>)
 801302c:	460c      	mov	r4, r1
 801302e:	6831      	ldr	r1, [r6, #0]
 8013030:	4605      	mov	r5, r0
 8013032:	b911      	cbnz	r1, 801303a <sbrk_aligned+0x12>
 8013034:	f000 fcc6 	bl	80139c4 <_sbrk_r>
 8013038:	6030      	str	r0, [r6, #0]
 801303a:	4621      	mov	r1, r4
 801303c:	4628      	mov	r0, r5
 801303e:	f000 fcc1 	bl	80139c4 <_sbrk_r>
 8013042:	1c43      	adds	r3, r0, #1
 8013044:	d103      	bne.n	801304e <sbrk_aligned+0x26>
 8013046:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801304a:	4620      	mov	r0, r4
 801304c:	bd70      	pop	{r4, r5, r6, pc}
 801304e:	1cc4      	adds	r4, r0, #3
 8013050:	f024 0403 	bic.w	r4, r4, #3
 8013054:	42a0      	cmp	r0, r4
 8013056:	d0f8      	beq.n	801304a <sbrk_aligned+0x22>
 8013058:	1a21      	subs	r1, r4, r0
 801305a:	4628      	mov	r0, r5
 801305c:	f000 fcb2 	bl	80139c4 <_sbrk_r>
 8013060:	3001      	adds	r0, #1
 8013062:	d1f2      	bne.n	801304a <sbrk_aligned+0x22>
 8013064:	e7ef      	b.n	8013046 <sbrk_aligned+0x1e>
 8013066:	bf00      	nop
 8013068:	20007e94 	.word	0x20007e94

0801306c <_malloc_r>:
 801306c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013070:	1ccd      	adds	r5, r1, #3
 8013072:	f025 0503 	bic.w	r5, r5, #3
 8013076:	3508      	adds	r5, #8
 8013078:	2d0c      	cmp	r5, #12
 801307a:	bf38      	it	cc
 801307c:	250c      	movcc	r5, #12
 801307e:	2d00      	cmp	r5, #0
 8013080:	4606      	mov	r6, r0
 8013082:	db01      	blt.n	8013088 <_malloc_r+0x1c>
 8013084:	42a9      	cmp	r1, r5
 8013086:	d904      	bls.n	8013092 <_malloc_r+0x26>
 8013088:	230c      	movs	r3, #12
 801308a:	6033      	str	r3, [r6, #0]
 801308c:	2000      	movs	r0, #0
 801308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013168 <_malloc_r+0xfc>
 8013096:	f000 f869 	bl	801316c <__malloc_lock>
 801309a:	f8d8 3000 	ldr.w	r3, [r8]
 801309e:	461c      	mov	r4, r3
 80130a0:	bb44      	cbnz	r4, 80130f4 <_malloc_r+0x88>
 80130a2:	4629      	mov	r1, r5
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7ff ffbf 	bl	8013028 <sbrk_aligned>
 80130aa:	1c43      	adds	r3, r0, #1
 80130ac:	4604      	mov	r4, r0
 80130ae:	d158      	bne.n	8013162 <_malloc_r+0xf6>
 80130b0:	f8d8 4000 	ldr.w	r4, [r8]
 80130b4:	4627      	mov	r7, r4
 80130b6:	2f00      	cmp	r7, #0
 80130b8:	d143      	bne.n	8013142 <_malloc_r+0xd6>
 80130ba:	2c00      	cmp	r4, #0
 80130bc:	d04b      	beq.n	8013156 <_malloc_r+0xea>
 80130be:	6823      	ldr	r3, [r4, #0]
 80130c0:	4639      	mov	r1, r7
 80130c2:	4630      	mov	r0, r6
 80130c4:	eb04 0903 	add.w	r9, r4, r3
 80130c8:	f000 fc7c 	bl	80139c4 <_sbrk_r>
 80130cc:	4581      	cmp	r9, r0
 80130ce:	d142      	bne.n	8013156 <_malloc_r+0xea>
 80130d0:	6821      	ldr	r1, [r4, #0]
 80130d2:	4630      	mov	r0, r6
 80130d4:	1a6d      	subs	r5, r5, r1
 80130d6:	4629      	mov	r1, r5
 80130d8:	f7ff ffa6 	bl	8013028 <sbrk_aligned>
 80130dc:	3001      	adds	r0, #1
 80130de:	d03a      	beq.n	8013156 <_malloc_r+0xea>
 80130e0:	6823      	ldr	r3, [r4, #0]
 80130e2:	442b      	add	r3, r5
 80130e4:	6023      	str	r3, [r4, #0]
 80130e6:	f8d8 3000 	ldr.w	r3, [r8]
 80130ea:	685a      	ldr	r2, [r3, #4]
 80130ec:	bb62      	cbnz	r2, 8013148 <_malloc_r+0xdc>
 80130ee:	f8c8 7000 	str.w	r7, [r8]
 80130f2:	e00f      	b.n	8013114 <_malloc_r+0xa8>
 80130f4:	6822      	ldr	r2, [r4, #0]
 80130f6:	1b52      	subs	r2, r2, r5
 80130f8:	d420      	bmi.n	801313c <_malloc_r+0xd0>
 80130fa:	2a0b      	cmp	r2, #11
 80130fc:	d917      	bls.n	801312e <_malloc_r+0xc2>
 80130fe:	1961      	adds	r1, r4, r5
 8013100:	42a3      	cmp	r3, r4
 8013102:	6025      	str	r5, [r4, #0]
 8013104:	bf18      	it	ne
 8013106:	6059      	strne	r1, [r3, #4]
 8013108:	6863      	ldr	r3, [r4, #4]
 801310a:	bf08      	it	eq
 801310c:	f8c8 1000 	streq.w	r1, [r8]
 8013110:	5162      	str	r2, [r4, r5]
 8013112:	604b      	str	r3, [r1, #4]
 8013114:	4630      	mov	r0, r6
 8013116:	f000 f82f 	bl	8013178 <__malloc_unlock>
 801311a:	f104 000b 	add.w	r0, r4, #11
 801311e:	1d23      	adds	r3, r4, #4
 8013120:	f020 0007 	bic.w	r0, r0, #7
 8013124:	1ac2      	subs	r2, r0, r3
 8013126:	bf1c      	itt	ne
 8013128:	1a1b      	subne	r3, r3, r0
 801312a:	50a3      	strne	r3, [r4, r2]
 801312c:	e7af      	b.n	801308e <_malloc_r+0x22>
 801312e:	6862      	ldr	r2, [r4, #4]
 8013130:	42a3      	cmp	r3, r4
 8013132:	bf0c      	ite	eq
 8013134:	f8c8 2000 	streq.w	r2, [r8]
 8013138:	605a      	strne	r2, [r3, #4]
 801313a:	e7eb      	b.n	8013114 <_malloc_r+0xa8>
 801313c:	4623      	mov	r3, r4
 801313e:	6864      	ldr	r4, [r4, #4]
 8013140:	e7ae      	b.n	80130a0 <_malloc_r+0x34>
 8013142:	463c      	mov	r4, r7
 8013144:	687f      	ldr	r7, [r7, #4]
 8013146:	e7b6      	b.n	80130b6 <_malloc_r+0x4a>
 8013148:	461a      	mov	r2, r3
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	42a3      	cmp	r3, r4
 801314e:	d1fb      	bne.n	8013148 <_malloc_r+0xdc>
 8013150:	2300      	movs	r3, #0
 8013152:	6053      	str	r3, [r2, #4]
 8013154:	e7de      	b.n	8013114 <_malloc_r+0xa8>
 8013156:	230c      	movs	r3, #12
 8013158:	4630      	mov	r0, r6
 801315a:	6033      	str	r3, [r6, #0]
 801315c:	f000 f80c 	bl	8013178 <__malloc_unlock>
 8013160:	e794      	b.n	801308c <_malloc_r+0x20>
 8013162:	6005      	str	r5, [r0, #0]
 8013164:	e7d6      	b.n	8013114 <_malloc_r+0xa8>
 8013166:	bf00      	nop
 8013168:	20007e98 	.word	0x20007e98

0801316c <__malloc_lock>:
 801316c:	4801      	ldr	r0, [pc, #4]	@ (8013174 <__malloc_lock+0x8>)
 801316e:	f7ff bedc 	b.w	8012f2a <__retarget_lock_acquire_recursive>
 8013172:	bf00      	nop
 8013174:	20007e90 	.word	0x20007e90

08013178 <__malloc_unlock>:
 8013178:	4801      	ldr	r0, [pc, #4]	@ (8013180 <__malloc_unlock+0x8>)
 801317a:	f7ff bed7 	b.w	8012f2c <__retarget_lock_release_recursive>
 801317e:	bf00      	nop
 8013180:	20007e90 	.word	0x20007e90

08013184 <__sfputc_r>:
 8013184:	6893      	ldr	r3, [r2, #8]
 8013186:	b410      	push	{r4}
 8013188:	3b01      	subs	r3, #1
 801318a:	2b00      	cmp	r3, #0
 801318c:	6093      	str	r3, [r2, #8]
 801318e:	da07      	bge.n	80131a0 <__sfputc_r+0x1c>
 8013190:	6994      	ldr	r4, [r2, #24]
 8013192:	42a3      	cmp	r3, r4
 8013194:	db01      	blt.n	801319a <__sfputc_r+0x16>
 8013196:	290a      	cmp	r1, #10
 8013198:	d102      	bne.n	80131a0 <__sfputc_r+0x1c>
 801319a:	bc10      	pop	{r4}
 801319c:	f000 bb7e 	b.w	801389c <__swbuf_r>
 80131a0:	6813      	ldr	r3, [r2, #0]
 80131a2:	1c58      	adds	r0, r3, #1
 80131a4:	6010      	str	r0, [r2, #0]
 80131a6:	7019      	strb	r1, [r3, #0]
 80131a8:	4608      	mov	r0, r1
 80131aa:	bc10      	pop	{r4}
 80131ac:	4770      	bx	lr

080131ae <__sfputs_r>:
 80131ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131b0:	4606      	mov	r6, r0
 80131b2:	460f      	mov	r7, r1
 80131b4:	4614      	mov	r4, r2
 80131b6:	18d5      	adds	r5, r2, r3
 80131b8:	42ac      	cmp	r4, r5
 80131ba:	d101      	bne.n	80131c0 <__sfputs_r+0x12>
 80131bc:	2000      	movs	r0, #0
 80131be:	e007      	b.n	80131d0 <__sfputs_r+0x22>
 80131c0:	463a      	mov	r2, r7
 80131c2:	4630      	mov	r0, r6
 80131c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c8:	f7ff ffdc 	bl	8013184 <__sfputc_r>
 80131cc:	1c43      	adds	r3, r0, #1
 80131ce:	d1f3      	bne.n	80131b8 <__sfputs_r+0xa>
 80131d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131d4 <_vfiprintf_r>:
 80131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d8:	460d      	mov	r5, r1
 80131da:	4614      	mov	r4, r2
 80131dc:	4698      	mov	r8, r3
 80131de:	4606      	mov	r6, r0
 80131e0:	b09d      	sub	sp, #116	@ 0x74
 80131e2:	b118      	cbz	r0, 80131ec <_vfiprintf_r+0x18>
 80131e4:	6a03      	ldr	r3, [r0, #32]
 80131e6:	b90b      	cbnz	r3, 80131ec <_vfiprintf_r+0x18>
 80131e8:	f7ff fd1c 	bl	8012c24 <__sinit>
 80131ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131ee:	07d9      	lsls	r1, r3, #31
 80131f0:	d405      	bmi.n	80131fe <_vfiprintf_r+0x2a>
 80131f2:	89ab      	ldrh	r3, [r5, #12]
 80131f4:	059a      	lsls	r2, r3, #22
 80131f6:	d402      	bmi.n	80131fe <_vfiprintf_r+0x2a>
 80131f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131fa:	f7ff fe96 	bl	8012f2a <__retarget_lock_acquire_recursive>
 80131fe:	89ab      	ldrh	r3, [r5, #12]
 8013200:	071b      	lsls	r3, r3, #28
 8013202:	d501      	bpl.n	8013208 <_vfiprintf_r+0x34>
 8013204:	692b      	ldr	r3, [r5, #16]
 8013206:	b99b      	cbnz	r3, 8013230 <_vfiprintf_r+0x5c>
 8013208:	4629      	mov	r1, r5
 801320a:	4630      	mov	r0, r6
 801320c:	f000 fb84 	bl	8013918 <__swsetup_r>
 8013210:	b170      	cbz	r0, 8013230 <_vfiprintf_r+0x5c>
 8013212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013214:	07dc      	lsls	r4, r3, #31
 8013216:	d504      	bpl.n	8013222 <_vfiprintf_r+0x4e>
 8013218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801321c:	b01d      	add	sp, #116	@ 0x74
 801321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013222:	89ab      	ldrh	r3, [r5, #12]
 8013224:	0598      	lsls	r0, r3, #22
 8013226:	d4f7      	bmi.n	8013218 <_vfiprintf_r+0x44>
 8013228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801322a:	f7ff fe7f 	bl	8012f2c <__retarget_lock_release_recursive>
 801322e:	e7f3      	b.n	8013218 <_vfiprintf_r+0x44>
 8013230:	2300      	movs	r3, #0
 8013232:	9309      	str	r3, [sp, #36]	@ 0x24
 8013234:	2320      	movs	r3, #32
 8013236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801323a:	2330      	movs	r3, #48	@ 0x30
 801323c:	f04f 0901 	mov.w	r9, #1
 8013240:	f8cd 800c 	str.w	r8, [sp, #12]
 8013244:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80133f0 <_vfiprintf_r+0x21c>
 8013248:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801324c:	4623      	mov	r3, r4
 801324e:	469a      	mov	sl, r3
 8013250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013254:	b10a      	cbz	r2, 801325a <_vfiprintf_r+0x86>
 8013256:	2a25      	cmp	r2, #37	@ 0x25
 8013258:	d1f9      	bne.n	801324e <_vfiprintf_r+0x7a>
 801325a:	ebba 0b04 	subs.w	fp, sl, r4
 801325e:	d00b      	beq.n	8013278 <_vfiprintf_r+0xa4>
 8013260:	465b      	mov	r3, fp
 8013262:	4622      	mov	r2, r4
 8013264:	4629      	mov	r1, r5
 8013266:	4630      	mov	r0, r6
 8013268:	f7ff ffa1 	bl	80131ae <__sfputs_r>
 801326c:	3001      	adds	r0, #1
 801326e:	f000 80a7 	beq.w	80133c0 <_vfiprintf_r+0x1ec>
 8013272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013274:	445a      	add	r2, fp
 8013276:	9209      	str	r2, [sp, #36]	@ 0x24
 8013278:	f89a 3000 	ldrb.w	r3, [sl]
 801327c:	2b00      	cmp	r3, #0
 801327e:	f000 809f 	beq.w	80133c0 <_vfiprintf_r+0x1ec>
 8013282:	2300      	movs	r3, #0
 8013284:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801328c:	f10a 0a01 	add.w	sl, sl, #1
 8013290:	9304      	str	r3, [sp, #16]
 8013292:	9307      	str	r3, [sp, #28]
 8013294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013298:	931a      	str	r3, [sp, #104]	@ 0x68
 801329a:	4654      	mov	r4, sl
 801329c:	2205      	movs	r2, #5
 801329e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132a2:	4853      	ldr	r0, [pc, #332]	@ (80133f0 <_vfiprintf_r+0x21c>)
 80132a4:	f000 fb9e 	bl	80139e4 <memchr>
 80132a8:	9a04      	ldr	r2, [sp, #16]
 80132aa:	b9d8      	cbnz	r0, 80132e4 <_vfiprintf_r+0x110>
 80132ac:	06d1      	lsls	r1, r2, #27
 80132ae:	bf44      	itt	mi
 80132b0:	2320      	movmi	r3, #32
 80132b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132b6:	0713      	lsls	r3, r2, #28
 80132b8:	bf44      	itt	mi
 80132ba:	232b      	movmi	r3, #43	@ 0x2b
 80132bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132c0:	f89a 3000 	ldrb.w	r3, [sl]
 80132c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80132c6:	d015      	beq.n	80132f4 <_vfiprintf_r+0x120>
 80132c8:	4654      	mov	r4, sl
 80132ca:	2000      	movs	r0, #0
 80132cc:	f04f 0c0a 	mov.w	ip, #10
 80132d0:	9a07      	ldr	r2, [sp, #28]
 80132d2:	4621      	mov	r1, r4
 80132d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132d8:	3b30      	subs	r3, #48	@ 0x30
 80132da:	2b09      	cmp	r3, #9
 80132dc:	d94b      	bls.n	8013376 <_vfiprintf_r+0x1a2>
 80132de:	b1b0      	cbz	r0, 801330e <_vfiprintf_r+0x13a>
 80132e0:	9207      	str	r2, [sp, #28]
 80132e2:	e014      	b.n	801330e <_vfiprintf_r+0x13a>
 80132e4:	eba0 0308 	sub.w	r3, r0, r8
 80132e8:	fa09 f303 	lsl.w	r3, r9, r3
 80132ec:	4313      	orrs	r3, r2
 80132ee:	46a2      	mov	sl, r4
 80132f0:	9304      	str	r3, [sp, #16]
 80132f2:	e7d2      	b.n	801329a <_vfiprintf_r+0xc6>
 80132f4:	9b03      	ldr	r3, [sp, #12]
 80132f6:	1d19      	adds	r1, r3, #4
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	9103      	str	r1, [sp, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	bfbb      	ittet	lt
 8013300:	425b      	neglt	r3, r3
 8013302:	f042 0202 	orrlt.w	r2, r2, #2
 8013306:	9307      	strge	r3, [sp, #28]
 8013308:	9307      	strlt	r3, [sp, #28]
 801330a:	bfb8      	it	lt
 801330c:	9204      	strlt	r2, [sp, #16]
 801330e:	7823      	ldrb	r3, [r4, #0]
 8013310:	2b2e      	cmp	r3, #46	@ 0x2e
 8013312:	d10a      	bne.n	801332a <_vfiprintf_r+0x156>
 8013314:	7863      	ldrb	r3, [r4, #1]
 8013316:	2b2a      	cmp	r3, #42	@ 0x2a
 8013318:	d132      	bne.n	8013380 <_vfiprintf_r+0x1ac>
 801331a:	9b03      	ldr	r3, [sp, #12]
 801331c:	3402      	adds	r4, #2
 801331e:	1d1a      	adds	r2, r3, #4
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	9203      	str	r2, [sp, #12]
 8013324:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013328:	9305      	str	r3, [sp, #20]
 801332a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80133f4 <_vfiprintf_r+0x220>
 801332e:	2203      	movs	r2, #3
 8013330:	4650      	mov	r0, sl
 8013332:	7821      	ldrb	r1, [r4, #0]
 8013334:	f000 fb56 	bl	80139e4 <memchr>
 8013338:	b138      	cbz	r0, 801334a <_vfiprintf_r+0x176>
 801333a:	2240      	movs	r2, #64	@ 0x40
 801333c:	9b04      	ldr	r3, [sp, #16]
 801333e:	eba0 000a 	sub.w	r0, r0, sl
 8013342:	4082      	lsls	r2, r0
 8013344:	4313      	orrs	r3, r2
 8013346:	3401      	adds	r4, #1
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801334e:	2206      	movs	r2, #6
 8013350:	4829      	ldr	r0, [pc, #164]	@ (80133f8 <_vfiprintf_r+0x224>)
 8013352:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013356:	f000 fb45 	bl	80139e4 <memchr>
 801335a:	2800      	cmp	r0, #0
 801335c:	d03f      	beq.n	80133de <_vfiprintf_r+0x20a>
 801335e:	4b27      	ldr	r3, [pc, #156]	@ (80133fc <_vfiprintf_r+0x228>)
 8013360:	bb1b      	cbnz	r3, 80133aa <_vfiprintf_r+0x1d6>
 8013362:	9b03      	ldr	r3, [sp, #12]
 8013364:	3307      	adds	r3, #7
 8013366:	f023 0307 	bic.w	r3, r3, #7
 801336a:	3308      	adds	r3, #8
 801336c:	9303      	str	r3, [sp, #12]
 801336e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013370:	443b      	add	r3, r7
 8013372:	9309      	str	r3, [sp, #36]	@ 0x24
 8013374:	e76a      	b.n	801324c <_vfiprintf_r+0x78>
 8013376:	460c      	mov	r4, r1
 8013378:	2001      	movs	r0, #1
 801337a:	fb0c 3202 	mla	r2, ip, r2, r3
 801337e:	e7a8      	b.n	80132d2 <_vfiprintf_r+0xfe>
 8013380:	2300      	movs	r3, #0
 8013382:	f04f 0c0a 	mov.w	ip, #10
 8013386:	4619      	mov	r1, r3
 8013388:	3401      	adds	r4, #1
 801338a:	9305      	str	r3, [sp, #20]
 801338c:	4620      	mov	r0, r4
 801338e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013392:	3a30      	subs	r2, #48	@ 0x30
 8013394:	2a09      	cmp	r2, #9
 8013396:	d903      	bls.n	80133a0 <_vfiprintf_r+0x1cc>
 8013398:	2b00      	cmp	r3, #0
 801339a:	d0c6      	beq.n	801332a <_vfiprintf_r+0x156>
 801339c:	9105      	str	r1, [sp, #20]
 801339e:	e7c4      	b.n	801332a <_vfiprintf_r+0x156>
 80133a0:	4604      	mov	r4, r0
 80133a2:	2301      	movs	r3, #1
 80133a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80133a8:	e7f0      	b.n	801338c <_vfiprintf_r+0x1b8>
 80133aa:	ab03      	add	r3, sp, #12
 80133ac:	9300      	str	r3, [sp, #0]
 80133ae:	462a      	mov	r2, r5
 80133b0:	4630      	mov	r0, r6
 80133b2:	4b13      	ldr	r3, [pc, #76]	@ (8013400 <_vfiprintf_r+0x22c>)
 80133b4:	a904      	add	r1, sp, #16
 80133b6:	f3af 8000 	nop.w
 80133ba:	4607      	mov	r7, r0
 80133bc:	1c78      	adds	r0, r7, #1
 80133be:	d1d6      	bne.n	801336e <_vfiprintf_r+0x19a>
 80133c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133c2:	07d9      	lsls	r1, r3, #31
 80133c4:	d405      	bmi.n	80133d2 <_vfiprintf_r+0x1fe>
 80133c6:	89ab      	ldrh	r3, [r5, #12]
 80133c8:	059a      	lsls	r2, r3, #22
 80133ca:	d402      	bmi.n	80133d2 <_vfiprintf_r+0x1fe>
 80133cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133ce:	f7ff fdad 	bl	8012f2c <__retarget_lock_release_recursive>
 80133d2:	89ab      	ldrh	r3, [r5, #12]
 80133d4:	065b      	lsls	r3, r3, #25
 80133d6:	f53f af1f 	bmi.w	8013218 <_vfiprintf_r+0x44>
 80133da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133dc:	e71e      	b.n	801321c <_vfiprintf_r+0x48>
 80133de:	ab03      	add	r3, sp, #12
 80133e0:	9300      	str	r3, [sp, #0]
 80133e2:	462a      	mov	r2, r5
 80133e4:	4630      	mov	r0, r6
 80133e6:	4b06      	ldr	r3, [pc, #24]	@ (8013400 <_vfiprintf_r+0x22c>)
 80133e8:	a904      	add	r1, sp, #16
 80133ea:	f000 f87d 	bl	80134e8 <_printf_i>
 80133ee:	e7e4      	b.n	80133ba <_vfiprintf_r+0x1e6>
 80133f0:	0801794f 	.word	0x0801794f
 80133f4:	08017955 	.word	0x08017955
 80133f8:	08017959 	.word	0x08017959
 80133fc:	00000000 	.word	0x00000000
 8013400:	080131af 	.word	0x080131af

08013404 <_printf_common>:
 8013404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013408:	4616      	mov	r6, r2
 801340a:	4698      	mov	r8, r3
 801340c:	688a      	ldr	r2, [r1, #8]
 801340e:	690b      	ldr	r3, [r1, #16]
 8013410:	4607      	mov	r7, r0
 8013412:	4293      	cmp	r3, r2
 8013414:	bfb8      	it	lt
 8013416:	4613      	movlt	r3, r2
 8013418:	6033      	str	r3, [r6, #0]
 801341a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801341e:	460c      	mov	r4, r1
 8013420:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013424:	b10a      	cbz	r2, 801342a <_printf_common+0x26>
 8013426:	3301      	adds	r3, #1
 8013428:	6033      	str	r3, [r6, #0]
 801342a:	6823      	ldr	r3, [r4, #0]
 801342c:	0699      	lsls	r1, r3, #26
 801342e:	bf42      	ittt	mi
 8013430:	6833      	ldrmi	r3, [r6, #0]
 8013432:	3302      	addmi	r3, #2
 8013434:	6033      	strmi	r3, [r6, #0]
 8013436:	6825      	ldr	r5, [r4, #0]
 8013438:	f015 0506 	ands.w	r5, r5, #6
 801343c:	d106      	bne.n	801344c <_printf_common+0x48>
 801343e:	f104 0a19 	add.w	sl, r4, #25
 8013442:	68e3      	ldr	r3, [r4, #12]
 8013444:	6832      	ldr	r2, [r6, #0]
 8013446:	1a9b      	subs	r3, r3, r2
 8013448:	42ab      	cmp	r3, r5
 801344a:	dc2b      	bgt.n	80134a4 <_printf_common+0xa0>
 801344c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013450:	6822      	ldr	r2, [r4, #0]
 8013452:	3b00      	subs	r3, #0
 8013454:	bf18      	it	ne
 8013456:	2301      	movne	r3, #1
 8013458:	0692      	lsls	r2, r2, #26
 801345a:	d430      	bmi.n	80134be <_printf_common+0xba>
 801345c:	4641      	mov	r1, r8
 801345e:	4638      	mov	r0, r7
 8013460:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013464:	47c8      	blx	r9
 8013466:	3001      	adds	r0, #1
 8013468:	d023      	beq.n	80134b2 <_printf_common+0xae>
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	6922      	ldr	r2, [r4, #16]
 801346e:	f003 0306 	and.w	r3, r3, #6
 8013472:	2b04      	cmp	r3, #4
 8013474:	bf14      	ite	ne
 8013476:	2500      	movne	r5, #0
 8013478:	6833      	ldreq	r3, [r6, #0]
 801347a:	f04f 0600 	mov.w	r6, #0
 801347e:	bf08      	it	eq
 8013480:	68e5      	ldreq	r5, [r4, #12]
 8013482:	f104 041a 	add.w	r4, r4, #26
 8013486:	bf08      	it	eq
 8013488:	1aed      	subeq	r5, r5, r3
 801348a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 801348e:	bf08      	it	eq
 8013490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013494:	4293      	cmp	r3, r2
 8013496:	bfc4      	itt	gt
 8013498:	1a9b      	subgt	r3, r3, r2
 801349a:	18ed      	addgt	r5, r5, r3
 801349c:	42b5      	cmp	r5, r6
 801349e:	d11a      	bne.n	80134d6 <_printf_common+0xd2>
 80134a0:	2000      	movs	r0, #0
 80134a2:	e008      	b.n	80134b6 <_printf_common+0xb2>
 80134a4:	2301      	movs	r3, #1
 80134a6:	4652      	mov	r2, sl
 80134a8:	4641      	mov	r1, r8
 80134aa:	4638      	mov	r0, r7
 80134ac:	47c8      	blx	r9
 80134ae:	3001      	adds	r0, #1
 80134b0:	d103      	bne.n	80134ba <_printf_common+0xb6>
 80134b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80134b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ba:	3501      	adds	r5, #1
 80134bc:	e7c1      	b.n	8013442 <_printf_common+0x3e>
 80134be:	2030      	movs	r0, #48	@ 0x30
 80134c0:	18e1      	adds	r1, r4, r3
 80134c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134c6:	1c5a      	adds	r2, r3, #1
 80134c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80134cc:	4422      	add	r2, r4
 80134ce:	3302      	adds	r3, #2
 80134d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80134d4:	e7c2      	b.n	801345c <_printf_common+0x58>
 80134d6:	2301      	movs	r3, #1
 80134d8:	4622      	mov	r2, r4
 80134da:	4641      	mov	r1, r8
 80134dc:	4638      	mov	r0, r7
 80134de:	47c8      	blx	r9
 80134e0:	3001      	adds	r0, #1
 80134e2:	d0e6      	beq.n	80134b2 <_printf_common+0xae>
 80134e4:	3601      	adds	r6, #1
 80134e6:	e7d9      	b.n	801349c <_printf_common+0x98>

080134e8 <_printf_i>:
 80134e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134ec:	7e0f      	ldrb	r7, [r1, #24]
 80134ee:	4691      	mov	r9, r2
 80134f0:	2f78      	cmp	r7, #120	@ 0x78
 80134f2:	4680      	mov	r8, r0
 80134f4:	460c      	mov	r4, r1
 80134f6:	469a      	mov	sl, r3
 80134f8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80134fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80134fe:	d807      	bhi.n	8013510 <_printf_i+0x28>
 8013500:	2f62      	cmp	r7, #98	@ 0x62
 8013502:	d80a      	bhi.n	801351a <_printf_i+0x32>
 8013504:	2f00      	cmp	r7, #0
 8013506:	f000 80d3 	beq.w	80136b0 <_printf_i+0x1c8>
 801350a:	2f58      	cmp	r7, #88	@ 0x58
 801350c:	f000 80ba 	beq.w	8013684 <_printf_i+0x19c>
 8013510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013514:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013518:	e03a      	b.n	8013590 <_printf_i+0xa8>
 801351a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801351e:	2b15      	cmp	r3, #21
 8013520:	d8f6      	bhi.n	8013510 <_printf_i+0x28>
 8013522:	a101      	add	r1, pc, #4	@ (adr r1, 8013528 <_printf_i+0x40>)
 8013524:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013528:	08013581 	.word	0x08013581
 801352c:	08013595 	.word	0x08013595
 8013530:	08013511 	.word	0x08013511
 8013534:	08013511 	.word	0x08013511
 8013538:	08013511 	.word	0x08013511
 801353c:	08013511 	.word	0x08013511
 8013540:	08013595 	.word	0x08013595
 8013544:	08013511 	.word	0x08013511
 8013548:	08013511 	.word	0x08013511
 801354c:	08013511 	.word	0x08013511
 8013550:	08013511 	.word	0x08013511
 8013554:	08013697 	.word	0x08013697
 8013558:	080135bf 	.word	0x080135bf
 801355c:	08013651 	.word	0x08013651
 8013560:	08013511 	.word	0x08013511
 8013564:	08013511 	.word	0x08013511
 8013568:	080136b9 	.word	0x080136b9
 801356c:	08013511 	.word	0x08013511
 8013570:	080135bf 	.word	0x080135bf
 8013574:	08013511 	.word	0x08013511
 8013578:	08013511 	.word	0x08013511
 801357c:	08013659 	.word	0x08013659
 8013580:	6833      	ldr	r3, [r6, #0]
 8013582:	1d1a      	adds	r2, r3, #4
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	6032      	str	r2, [r6, #0]
 8013588:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801358c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013590:	2301      	movs	r3, #1
 8013592:	e09e      	b.n	80136d2 <_printf_i+0x1ea>
 8013594:	6833      	ldr	r3, [r6, #0]
 8013596:	6820      	ldr	r0, [r4, #0]
 8013598:	1d19      	adds	r1, r3, #4
 801359a:	6031      	str	r1, [r6, #0]
 801359c:	0606      	lsls	r6, r0, #24
 801359e:	d501      	bpl.n	80135a4 <_printf_i+0xbc>
 80135a0:	681d      	ldr	r5, [r3, #0]
 80135a2:	e003      	b.n	80135ac <_printf_i+0xc4>
 80135a4:	0645      	lsls	r5, r0, #25
 80135a6:	d5fb      	bpl.n	80135a0 <_printf_i+0xb8>
 80135a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80135ac:	2d00      	cmp	r5, #0
 80135ae:	da03      	bge.n	80135b8 <_printf_i+0xd0>
 80135b0:	232d      	movs	r3, #45	@ 0x2d
 80135b2:	426d      	negs	r5, r5
 80135b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135b8:	230a      	movs	r3, #10
 80135ba:	4859      	ldr	r0, [pc, #356]	@ (8013720 <_printf_i+0x238>)
 80135bc:	e011      	b.n	80135e2 <_printf_i+0xfa>
 80135be:	6821      	ldr	r1, [r4, #0]
 80135c0:	6833      	ldr	r3, [r6, #0]
 80135c2:	0608      	lsls	r0, r1, #24
 80135c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80135c8:	d402      	bmi.n	80135d0 <_printf_i+0xe8>
 80135ca:	0649      	lsls	r1, r1, #25
 80135cc:	bf48      	it	mi
 80135ce:	b2ad      	uxthmi	r5, r5
 80135d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80135d2:	6033      	str	r3, [r6, #0]
 80135d4:	bf14      	ite	ne
 80135d6:	230a      	movne	r3, #10
 80135d8:	2308      	moveq	r3, #8
 80135da:	4851      	ldr	r0, [pc, #324]	@ (8013720 <_printf_i+0x238>)
 80135dc:	2100      	movs	r1, #0
 80135de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80135e2:	6866      	ldr	r6, [r4, #4]
 80135e4:	2e00      	cmp	r6, #0
 80135e6:	bfa8      	it	ge
 80135e8:	6821      	ldrge	r1, [r4, #0]
 80135ea:	60a6      	str	r6, [r4, #8]
 80135ec:	bfa4      	itt	ge
 80135ee:	f021 0104 	bicge.w	r1, r1, #4
 80135f2:	6021      	strge	r1, [r4, #0]
 80135f4:	b90d      	cbnz	r5, 80135fa <_printf_i+0x112>
 80135f6:	2e00      	cmp	r6, #0
 80135f8:	d04b      	beq.n	8013692 <_printf_i+0x1aa>
 80135fa:	4616      	mov	r6, r2
 80135fc:	fbb5 f1f3 	udiv	r1, r5, r3
 8013600:	fb03 5711 	mls	r7, r3, r1, r5
 8013604:	5dc7      	ldrb	r7, [r0, r7]
 8013606:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801360a:	462f      	mov	r7, r5
 801360c:	42bb      	cmp	r3, r7
 801360e:	460d      	mov	r5, r1
 8013610:	d9f4      	bls.n	80135fc <_printf_i+0x114>
 8013612:	2b08      	cmp	r3, #8
 8013614:	d10b      	bne.n	801362e <_printf_i+0x146>
 8013616:	6823      	ldr	r3, [r4, #0]
 8013618:	07df      	lsls	r7, r3, #31
 801361a:	d508      	bpl.n	801362e <_printf_i+0x146>
 801361c:	6923      	ldr	r3, [r4, #16]
 801361e:	6861      	ldr	r1, [r4, #4]
 8013620:	4299      	cmp	r1, r3
 8013622:	bfde      	ittt	le
 8013624:	2330      	movle	r3, #48	@ 0x30
 8013626:	f806 3c01 	strble.w	r3, [r6, #-1]
 801362a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801362e:	1b92      	subs	r2, r2, r6
 8013630:	6122      	str	r2, [r4, #16]
 8013632:	464b      	mov	r3, r9
 8013634:	4621      	mov	r1, r4
 8013636:	4640      	mov	r0, r8
 8013638:	f8cd a000 	str.w	sl, [sp]
 801363c:	aa03      	add	r2, sp, #12
 801363e:	f7ff fee1 	bl	8013404 <_printf_common>
 8013642:	3001      	adds	r0, #1
 8013644:	d14a      	bne.n	80136dc <_printf_i+0x1f4>
 8013646:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801364a:	b004      	add	sp, #16
 801364c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	f043 0320 	orr.w	r3, r3, #32
 8013656:	6023      	str	r3, [r4, #0]
 8013658:	2778      	movs	r7, #120	@ 0x78
 801365a:	4832      	ldr	r0, [pc, #200]	@ (8013724 <_printf_i+0x23c>)
 801365c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013660:	6823      	ldr	r3, [r4, #0]
 8013662:	6831      	ldr	r1, [r6, #0]
 8013664:	061f      	lsls	r7, r3, #24
 8013666:	f851 5b04 	ldr.w	r5, [r1], #4
 801366a:	d402      	bmi.n	8013672 <_printf_i+0x18a>
 801366c:	065f      	lsls	r7, r3, #25
 801366e:	bf48      	it	mi
 8013670:	b2ad      	uxthmi	r5, r5
 8013672:	6031      	str	r1, [r6, #0]
 8013674:	07d9      	lsls	r1, r3, #31
 8013676:	bf44      	itt	mi
 8013678:	f043 0320 	orrmi.w	r3, r3, #32
 801367c:	6023      	strmi	r3, [r4, #0]
 801367e:	b11d      	cbz	r5, 8013688 <_printf_i+0x1a0>
 8013680:	2310      	movs	r3, #16
 8013682:	e7ab      	b.n	80135dc <_printf_i+0xf4>
 8013684:	4826      	ldr	r0, [pc, #152]	@ (8013720 <_printf_i+0x238>)
 8013686:	e7e9      	b.n	801365c <_printf_i+0x174>
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	f023 0320 	bic.w	r3, r3, #32
 801368e:	6023      	str	r3, [r4, #0]
 8013690:	e7f6      	b.n	8013680 <_printf_i+0x198>
 8013692:	4616      	mov	r6, r2
 8013694:	e7bd      	b.n	8013612 <_printf_i+0x12a>
 8013696:	6833      	ldr	r3, [r6, #0]
 8013698:	6825      	ldr	r5, [r4, #0]
 801369a:	1d18      	adds	r0, r3, #4
 801369c:	6961      	ldr	r1, [r4, #20]
 801369e:	6030      	str	r0, [r6, #0]
 80136a0:	062e      	lsls	r6, r5, #24
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	d501      	bpl.n	80136aa <_printf_i+0x1c2>
 80136a6:	6019      	str	r1, [r3, #0]
 80136a8:	e002      	b.n	80136b0 <_printf_i+0x1c8>
 80136aa:	0668      	lsls	r0, r5, #25
 80136ac:	d5fb      	bpl.n	80136a6 <_printf_i+0x1be>
 80136ae:	8019      	strh	r1, [r3, #0]
 80136b0:	2300      	movs	r3, #0
 80136b2:	4616      	mov	r6, r2
 80136b4:	6123      	str	r3, [r4, #16]
 80136b6:	e7bc      	b.n	8013632 <_printf_i+0x14a>
 80136b8:	6833      	ldr	r3, [r6, #0]
 80136ba:	2100      	movs	r1, #0
 80136bc:	1d1a      	adds	r2, r3, #4
 80136be:	6032      	str	r2, [r6, #0]
 80136c0:	681e      	ldr	r6, [r3, #0]
 80136c2:	6862      	ldr	r2, [r4, #4]
 80136c4:	4630      	mov	r0, r6
 80136c6:	f000 f98d 	bl	80139e4 <memchr>
 80136ca:	b108      	cbz	r0, 80136d0 <_printf_i+0x1e8>
 80136cc:	1b80      	subs	r0, r0, r6
 80136ce:	6060      	str	r0, [r4, #4]
 80136d0:	6863      	ldr	r3, [r4, #4]
 80136d2:	6123      	str	r3, [r4, #16]
 80136d4:	2300      	movs	r3, #0
 80136d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136da:	e7aa      	b.n	8013632 <_printf_i+0x14a>
 80136dc:	4632      	mov	r2, r6
 80136de:	4649      	mov	r1, r9
 80136e0:	4640      	mov	r0, r8
 80136e2:	6923      	ldr	r3, [r4, #16]
 80136e4:	47d0      	blx	sl
 80136e6:	3001      	adds	r0, #1
 80136e8:	d0ad      	beq.n	8013646 <_printf_i+0x15e>
 80136ea:	6823      	ldr	r3, [r4, #0]
 80136ec:	079b      	lsls	r3, r3, #30
 80136ee:	d413      	bmi.n	8013718 <_printf_i+0x230>
 80136f0:	68e0      	ldr	r0, [r4, #12]
 80136f2:	9b03      	ldr	r3, [sp, #12]
 80136f4:	4298      	cmp	r0, r3
 80136f6:	bfb8      	it	lt
 80136f8:	4618      	movlt	r0, r3
 80136fa:	e7a6      	b.n	801364a <_printf_i+0x162>
 80136fc:	2301      	movs	r3, #1
 80136fe:	4632      	mov	r2, r6
 8013700:	4649      	mov	r1, r9
 8013702:	4640      	mov	r0, r8
 8013704:	47d0      	blx	sl
 8013706:	3001      	adds	r0, #1
 8013708:	d09d      	beq.n	8013646 <_printf_i+0x15e>
 801370a:	3501      	adds	r5, #1
 801370c:	68e3      	ldr	r3, [r4, #12]
 801370e:	9903      	ldr	r1, [sp, #12]
 8013710:	1a5b      	subs	r3, r3, r1
 8013712:	42ab      	cmp	r3, r5
 8013714:	dcf2      	bgt.n	80136fc <_printf_i+0x214>
 8013716:	e7eb      	b.n	80136f0 <_printf_i+0x208>
 8013718:	2500      	movs	r5, #0
 801371a:	f104 0619 	add.w	r6, r4, #25
 801371e:	e7f5      	b.n	801370c <_printf_i+0x224>
 8013720:	08017960 	.word	0x08017960
 8013724:	08017971 	.word	0x08017971

08013728 <__sflush_r>:
 8013728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801372e:	0716      	lsls	r6, r2, #28
 8013730:	4605      	mov	r5, r0
 8013732:	460c      	mov	r4, r1
 8013734:	d454      	bmi.n	80137e0 <__sflush_r+0xb8>
 8013736:	684b      	ldr	r3, [r1, #4]
 8013738:	2b00      	cmp	r3, #0
 801373a:	dc02      	bgt.n	8013742 <__sflush_r+0x1a>
 801373c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801373e:	2b00      	cmp	r3, #0
 8013740:	dd48      	ble.n	80137d4 <__sflush_r+0xac>
 8013742:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013744:	2e00      	cmp	r6, #0
 8013746:	d045      	beq.n	80137d4 <__sflush_r+0xac>
 8013748:	2300      	movs	r3, #0
 801374a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801374e:	682f      	ldr	r7, [r5, #0]
 8013750:	6a21      	ldr	r1, [r4, #32]
 8013752:	602b      	str	r3, [r5, #0]
 8013754:	d030      	beq.n	80137b8 <__sflush_r+0x90>
 8013756:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013758:	89a3      	ldrh	r3, [r4, #12]
 801375a:	0759      	lsls	r1, r3, #29
 801375c:	d505      	bpl.n	801376a <__sflush_r+0x42>
 801375e:	6863      	ldr	r3, [r4, #4]
 8013760:	1ad2      	subs	r2, r2, r3
 8013762:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013764:	b10b      	cbz	r3, 801376a <__sflush_r+0x42>
 8013766:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013768:	1ad2      	subs	r2, r2, r3
 801376a:	2300      	movs	r3, #0
 801376c:	4628      	mov	r0, r5
 801376e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013770:	6a21      	ldr	r1, [r4, #32]
 8013772:	47b0      	blx	r6
 8013774:	1c43      	adds	r3, r0, #1
 8013776:	89a3      	ldrh	r3, [r4, #12]
 8013778:	d106      	bne.n	8013788 <__sflush_r+0x60>
 801377a:	6829      	ldr	r1, [r5, #0]
 801377c:	291d      	cmp	r1, #29
 801377e:	d82b      	bhi.n	80137d8 <__sflush_r+0xb0>
 8013780:	4a28      	ldr	r2, [pc, #160]	@ (8013824 <__sflush_r+0xfc>)
 8013782:	410a      	asrs	r2, r1
 8013784:	07d6      	lsls	r6, r2, #31
 8013786:	d427      	bmi.n	80137d8 <__sflush_r+0xb0>
 8013788:	2200      	movs	r2, #0
 801378a:	6062      	str	r2, [r4, #4]
 801378c:	6922      	ldr	r2, [r4, #16]
 801378e:	04d9      	lsls	r1, r3, #19
 8013790:	6022      	str	r2, [r4, #0]
 8013792:	d504      	bpl.n	801379e <__sflush_r+0x76>
 8013794:	1c42      	adds	r2, r0, #1
 8013796:	d101      	bne.n	801379c <__sflush_r+0x74>
 8013798:	682b      	ldr	r3, [r5, #0]
 801379a:	b903      	cbnz	r3, 801379e <__sflush_r+0x76>
 801379c:	6560      	str	r0, [r4, #84]	@ 0x54
 801379e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137a0:	602f      	str	r7, [r5, #0]
 80137a2:	b1b9      	cbz	r1, 80137d4 <__sflush_r+0xac>
 80137a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137a8:	4299      	cmp	r1, r3
 80137aa:	d002      	beq.n	80137b2 <__sflush_r+0x8a>
 80137ac:	4628      	mov	r0, r5
 80137ae:	f7ff fbeb 	bl	8012f88 <_free_r>
 80137b2:	2300      	movs	r3, #0
 80137b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80137b6:	e00d      	b.n	80137d4 <__sflush_r+0xac>
 80137b8:	2301      	movs	r3, #1
 80137ba:	4628      	mov	r0, r5
 80137bc:	47b0      	blx	r6
 80137be:	4602      	mov	r2, r0
 80137c0:	1c50      	adds	r0, r2, #1
 80137c2:	d1c9      	bne.n	8013758 <__sflush_r+0x30>
 80137c4:	682b      	ldr	r3, [r5, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d0c6      	beq.n	8013758 <__sflush_r+0x30>
 80137ca:	2b1d      	cmp	r3, #29
 80137cc:	d001      	beq.n	80137d2 <__sflush_r+0xaa>
 80137ce:	2b16      	cmp	r3, #22
 80137d0:	d11d      	bne.n	801380e <__sflush_r+0xe6>
 80137d2:	602f      	str	r7, [r5, #0]
 80137d4:	2000      	movs	r0, #0
 80137d6:	e021      	b.n	801381c <__sflush_r+0xf4>
 80137d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137dc:	b21b      	sxth	r3, r3
 80137de:	e01a      	b.n	8013816 <__sflush_r+0xee>
 80137e0:	690f      	ldr	r7, [r1, #16]
 80137e2:	2f00      	cmp	r7, #0
 80137e4:	d0f6      	beq.n	80137d4 <__sflush_r+0xac>
 80137e6:	0793      	lsls	r3, r2, #30
 80137e8:	bf18      	it	ne
 80137ea:	2300      	movne	r3, #0
 80137ec:	680e      	ldr	r6, [r1, #0]
 80137ee:	bf08      	it	eq
 80137f0:	694b      	ldreq	r3, [r1, #20]
 80137f2:	1bf6      	subs	r6, r6, r7
 80137f4:	600f      	str	r7, [r1, #0]
 80137f6:	608b      	str	r3, [r1, #8]
 80137f8:	2e00      	cmp	r6, #0
 80137fa:	ddeb      	ble.n	80137d4 <__sflush_r+0xac>
 80137fc:	4633      	mov	r3, r6
 80137fe:	463a      	mov	r2, r7
 8013800:	4628      	mov	r0, r5
 8013802:	6a21      	ldr	r1, [r4, #32]
 8013804:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8013808:	47e0      	blx	ip
 801380a:	2800      	cmp	r0, #0
 801380c:	dc07      	bgt.n	801381e <__sflush_r+0xf6>
 801380e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801381a:	81a3      	strh	r3, [r4, #12]
 801381c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801381e:	4407      	add	r7, r0
 8013820:	1a36      	subs	r6, r6, r0
 8013822:	e7e9      	b.n	80137f8 <__sflush_r+0xd0>
 8013824:	dfbffffe 	.word	0xdfbffffe

08013828 <_fflush_r>:
 8013828:	b538      	push	{r3, r4, r5, lr}
 801382a:	690b      	ldr	r3, [r1, #16]
 801382c:	4605      	mov	r5, r0
 801382e:	460c      	mov	r4, r1
 8013830:	b913      	cbnz	r3, 8013838 <_fflush_r+0x10>
 8013832:	2500      	movs	r5, #0
 8013834:	4628      	mov	r0, r5
 8013836:	bd38      	pop	{r3, r4, r5, pc}
 8013838:	b118      	cbz	r0, 8013842 <_fflush_r+0x1a>
 801383a:	6a03      	ldr	r3, [r0, #32]
 801383c:	b90b      	cbnz	r3, 8013842 <_fflush_r+0x1a>
 801383e:	f7ff f9f1 	bl	8012c24 <__sinit>
 8013842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d0f3      	beq.n	8013832 <_fflush_r+0xa>
 801384a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801384c:	07d0      	lsls	r0, r2, #31
 801384e:	d404      	bmi.n	801385a <_fflush_r+0x32>
 8013850:	0599      	lsls	r1, r3, #22
 8013852:	d402      	bmi.n	801385a <_fflush_r+0x32>
 8013854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013856:	f7ff fb68 	bl	8012f2a <__retarget_lock_acquire_recursive>
 801385a:	4628      	mov	r0, r5
 801385c:	4621      	mov	r1, r4
 801385e:	f7ff ff63 	bl	8013728 <__sflush_r>
 8013862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013864:	4605      	mov	r5, r0
 8013866:	07da      	lsls	r2, r3, #31
 8013868:	d4e4      	bmi.n	8013834 <_fflush_r+0xc>
 801386a:	89a3      	ldrh	r3, [r4, #12]
 801386c:	059b      	lsls	r3, r3, #22
 801386e:	d4e1      	bmi.n	8013834 <_fflush_r+0xc>
 8013870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013872:	f7ff fb5b 	bl	8012f2c <__retarget_lock_release_recursive>
 8013876:	e7dd      	b.n	8013834 <_fflush_r+0xc>

08013878 <fiprintf>:
 8013878:	b40e      	push	{r1, r2, r3}
 801387a:	b503      	push	{r0, r1, lr}
 801387c:	4601      	mov	r1, r0
 801387e:	ab03      	add	r3, sp, #12
 8013880:	4805      	ldr	r0, [pc, #20]	@ (8013898 <fiprintf+0x20>)
 8013882:	f853 2b04 	ldr.w	r2, [r3], #4
 8013886:	6800      	ldr	r0, [r0, #0]
 8013888:	9301      	str	r3, [sp, #4]
 801388a:	f7ff fca3 	bl	80131d4 <_vfiprintf_r>
 801388e:	b002      	add	sp, #8
 8013890:	f85d eb04 	ldr.w	lr, [sp], #4
 8013894:	b003      	add	sp, #12
 8013896:	4770      	bx	lr
 8013898:	20000028 	.word	0x20000028

0801389c <__swbuf_r>:
 801389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801389e:	460e      	mov	r6, r1
 80138a0:	4614      	mov	r4, r2
 80138a2:	4605      	mov	r5, r0
 80138a4:	b118      	cbz	r0, 80138ae <__swbuf_r+0x12>
 80138a6:	6a03      	ldr	r3, [r0, #32]
 80138a8:	b90b      	cbnz	r3, 80138ae <__swbuf_r+0x12>
 80138aa:	f7ff f9bb 	bl	8012c24 <__sinit>
 80138ae:	69a3      	ldr	r3, [r4, #24]
 80138b0:	60a3      	str	r3, [r4, #8]
 80138b2:	89a3      	ldrh	r3, [r4, #12]
 80138b4:	071a      	lsls	r2, r3, #28
 80138b6:	d501      	bpl.n	80138bc <__swbuf_r+0x20>
 80138b8:	6923      	ldr	r3, [r4, #16]
 80138ba:	b943      	cbnz	r3, 80138ce <__swbuf_r+0x32>
 80138bc:	4621      	mov	r1, r4
 80138be:	4628      	mov	r0, r5
 80138c0:	f000 f82a 	bl	8013918 <__swsetup_r>
 80138c4:	b118      	cbz	r0, 80138ce <__swbuf_r+0x32>
 80138c6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80138ca:	4638      	mov	r0, r7
 80138cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ce:	6823      	ldr	r3, [r4, #0]
 80138d0:	6922      	ldr	r2, [r4, #16]
 80138d2:	b2f6      	uxtb	r6, r6
 80138d4:	1a98      	subs	r0, r3, r2
 80138d6:	6963      	ldr	r3, [r4, #20]
 80138d8:	4637      	mov	r7, r6
 80138da:	4283      	cmp	r3, r0
 80138dc:	dc05      	bgt.n	80138ea <__swbuf_r+0x4e>
 80138de:	4621      	mov	r1, r4
 80138e0:	4628      	mov	r0, r5
 80138e2:	f7ff ffa1 	bl	8013828 <_fflush_r>
 80138e6:	2800      	cmp	r0, #0
 80138e8:	d1ed      	bne.n	80138c6 <__swbuf_r+0x2a>
 80138ea:	68a3      	ldr	r3, [r4, #8]
 80138ec:	3b01      	subs	r3, #1
 80138ee:	60a3      	str	r3, [r4, #8]
 80138f0:	6823      	ldr	r3, [r4, #0]
 80138f2:	1c5a      	adds	r2, r3, #1
 80138f4:	6022      	str	r2, [r4, #0]
 80138f6:	701e      	strb	r6, [r3, #0]
 80138f8:	6962      	ldr	r2, [r4, #20]
 80138fa:	1c43      	adds	r3, r0, #1
 80138fc:	429a      	cmp	r2, r3
 80138fe:	d004      	beq.n	801390a <__swbuf_r+0x6e>
 8013900:	89a3      	ldrh	r3, [r4, #12]
 8013902:	07db      	lsls	r3, r3, #31
 8013904:	d5e1      	bpl.n	80138ca <__swbuf_r+0x2e>
 8013906:	2e0a      	cmp	r6, #10
 8013908:	d1df      	bne.n	80138ca <__swbuf_r+0x2e>
 801390a:	4621      	mov	r1, r4
 801390c:	4628      	mov	r0, r5
 801390e:	f7ff ff8b 	bl	8013828 <_fflush_r>
 8013912:	2800      	cmp	r0, #0
 8013914:	d0d9      	beq.n	80138ca <__swbuf_r+0x2e>
 8013916:	e7d6      	b.n	80138c6 <__swbuf_r+0x2a>

08013918 <__swsetup_r>:
 8013918:	b538      	push	{r3, r4, r5, lr}
 801391a:	4b29      	ldr	r3, [pc, #164]	@ (80139c0 <__swsetup_r+0xa8>)
 801391c:	4605      	mov	r5, r0
 801391e:	6818      	ldr	r0, [r3, #0]
 8013920:	460c      	mov	r4, r1
 8013922:	b118      	cbz	r0, 801392c <__swsetup_r+0x14>
 8013924:	6a03      	ldr	r3, [r0, #32]
 8013926:	b90b      	cbnz	r3, 801392c <__swsetup_r+0x14>
 8013928:	f7ff f97c 	bl	8012c24 <__sinit>
 801392c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013930:	0719      	lsls	r1, r3, #28
 8013932:	d422      	bmi.n	801397a <__swsetup_r+0x62>
 8013934:	06da      	lsls	r2, r3, #27
 8013936:	d407      	bmi.n	8013948 <__swsetup_r+0x30>
 8013938:	2209      	movs	r2, #9
 801393a:	602a      	str	r2, [r5, #0]
 801393c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013940:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013944:	81a3      	strh	r3, [r4, #12]
 8013946:	e033      	b.n	80139b0 <__swsetup_r+0x98>
 8013948:	0758      	lsls	r0, r3, #29
 801394a:	d512      	bpl.n	8013972 <__swsetup_r+0x5a>
 801394c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801394e:	b141      	cbz	r1, 8013962 <__swsetup_r+0x4a>
 8013950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013954:	4299      	cmp	r1, r3
 8013956:	d002      	beq.n	801395e <__swsetup_r+0x46>
 8013958:	4628      	mov	r0, r5
 801395a:	f7ff fb15 	bl	8012f88 <_free_r>
 801395e:	2300      	movs	r3, #0
 8013960:	6363      	str	r3, [r4, #52]	@ 0x34
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013968:	81a3      	strh	r3, [r4, #12]
 801396a:	2300      	movs	r3, #0
 801396c:	6063      	str	r3, [r4, #4]
 801396e:	6923      	ldr	r3, [r4, #16]
 8013970:	6023      	str	r3, [r4, #0]
 8013972:	89a3      	ldrh	r3, [r4, #12]
 8013974:	f043 0308 	orr.w	r3, r3, #8
 8013978:	81a3      	strh	r3, [r4, #12]
 801397a:	6923      	ldr	r3, [r4, #16]
 801397c:	b94b      	cbnz	r3, 8013992 <__swsetup_r+0x7a>
 801397e:	89a3      	ldrh	r3, [r4, #12]
 8013980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013988:	d003      	beq.n	8013992 <__swsetup_r+0x7a>
 801398a:	4621      	mov	r1, r4
 801398c:	4628      	mov	r0, r5
 801398e:	f000 f863 	bl	8013a58 <__smakebuf_r>
 8013992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013996:	f013 0201 	ands.w	r2, r3, #1
 801399a:	d00a      	beq.n	80139b2 <__swsetup_r+0x9a>
 801399c:	2200      	movs	r2, #0
 801399e:	60a2      	str	r2, [r4, #8]
 80139a0:	6962      	ldr	r2, [r4, #20]
 80139a2:	4252      	negs	r2, r2
 80139a4:	61a2      	str	r2, [r4, #24]
 80139a6:	6922      	ldr	r2, [r4, #16]
 80139a8:	b942      	cbnz	r2, 80139bc <__swsetup_r+0xa4>
 80139aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80139ae:	d1c5      	bne.n	801393c <__swsetup_r+0x24>
 80139b0:	bd38      	pop	{r3, r4, r5, pc}
 80139b2:	0799      	lsls	r1, r3, #30
 80139b4:	bf58      	it	pl
 80139b6:	6962      	ldrpl	r2, [r4, #20]
 80139b8:	60a2      	str	r2, [r4, #8]
 80139ba:	e7f4      	b.n	80139a6 <__swsetup_r+0x8e>
 80139bc:	2000      	movs	r0, #0
 80139be:	e7f7      	b.n	80139b0 <__swsetup_r+0x98>
 80139c0:	20000028 	.word	0x20000028

080139c4 <_sbrk_r>:
 80139c4:	b538      	push	{r3, r4, r5, lr}
 80139c6:	2300      	movs	r3, #0
 80139c8:	4d05      	ldr	r5, [pc, #20]	@ (80139e0 <_sbrk_r+0x1c>)
 80139ca:	4604      	mov	r4, r0
 80139cc:	4608      	mov	r0, r1
 80139ce:	602b      	str	r3, [r5, #0]
 80139d0:	f7ed f986 	bl	8000ce0 <_sbrk>
 80139d4:	1c43      	adds	r3, r0, #1
 80139d6:	d102      	bne.n	80139de <_sbrk_r+0x1a>
 80139d8:	682b      	ldr	r3, [r5, #0]
 80139da:	b103      	cbz	r3, 80139de <_sbrk_r+0x1a>
 80139dc:	6023      	str	r3, [r4, #0]
 80139de:	bd38      	pop	{r3, r4, r5, pc}
 80139e0:	20007e8c 	.word	0x20007e8c

080139e4 <memchr>:
 80139e4:	4603      	mov	r3, r0
 80139e6:	b510      	push	{r4, lr}
 80139e8:	b2c9      	uxtb	r1, r1
 80139ea:	4402      	add	r2, r0
 80139ec:	4293      	cmp	r3, r2
 80139ee:	4618      	mov	r0, r3
 80139f0:	d101      	bne.n	80139f6 <memchr+0x12>
 80139f2:	2000      	movs	r0, #0
 80139f4:	e003      	b.n	80139fe <memchr+0x1a>
 80139f6:	7804      	ldrb	r4, [r0, #0]
 80139f8:	3301      	adds	r3, #1
 80139fa:	428c      	cmp	r4, r1
 80139fc:	d1f6      	bne.n	80139ec <memchr+0x8>
 80139fe:	bd10      	pop	{r4, pc}

08013a00 <abort>:
 8013a00:	2006      	movs	r0, #6
 8013a02:	b508      	push	{r3, lr}
 8013a04:	f000 f88c 	bl	8013b20 <raise>
 8013a08:	2001      	movs	r0, #1
 8013a0a:	f7ed f8f5 	bl	8000bf8 <_exit>

08013a0e <__swhatbuf_r>:
 8013a0e:	b570      	push	{r4, r5, r6, lr}
 8013a10:	460c      	mov	r4, r1
 8013a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a16:	4615      	mov	r5, r2
 8013a18:	2900      	cmp	r1, #0
 8013a1a:	461e      	mov	r6, r3
 8013a1c:	b096      	sub	sp, #88	@ 0x58
 8013a1e:	da0c      	bge.n	8013a3a <__swhatbuf_r+0x2c>
 8013a20:	89a3      	ldrh	r3, [r4, #12]
 8013a22:	2100      	movs	r1, #0
 8013a24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013a28:	bf14      	ite	ne
 8013a2a:	2340      	movne	r3, #64	@ 0x40
 8013a2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013a30:	2000      	movs	r0, #0
 8013a32:	6031      	str	r1, [r6, #0]
 8013a34:	602b      	str	r3, [r5, #0]
 8013a36:	b016      	add	sp, #88	@ 0x58
 8013a38:	bd70      	pop	{r4, r5, r6, pc}
 8013a3a:	466a      	mov	r2, sp
 8013a3c:	f000 f878 	bl	8013b30 <_fstat_r>
 8013a40:	2800      	cmp	r0, #0
 8013a42:	dbed      	blt.n	8013a20 <__swhatbuf_r+0x12>
 8013a44:	9901      	ldr	r1, [sp, #4]
 8013a46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013a4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013a4e:	4259      	negs	r1, r3
 8013a50:	4159      	adcs	r1, r3
 8013a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013a56:	e7eb      	b.n	8013a30 <__swhatbuf_r+0x22>

08013a58 <__smakebuf_r>:
 8013a58:	898b      	ldrh	r3, [r1, #12]
 8013a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a5c:	079d      	lsls	r5, r3, #30
 8013a5e:	4606      	mov	r6, r0
 8013a60:	460c      	mov	r4, r1
 8013a62:	d507      	bpl.n	8013a74 <__smakebuf_r+0x1c>
 8013a64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013a68:	6023      	str	r3, [r4, #0]
 8013a6a:	6123      	str	r3, [r4, #16]
 8013a6c:	2301      	movs	r3, #1
 8013a6e:	6163      	str	r3, [r4, #20]
 8013a70:	b003      	add	sp, #12
 8013a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a74:	466a      	mov	r2, sp
 8013a76:	ab01      	add	r3, sp, #4
 8013a78:	f7ff ffc9 	bl	8013a0e <__swhatbuf_r>
 8013a7c:	9f00      	ldr	r7, [sp, #0]
 8013a7e:	4605      	mov	r5, r0
 8013a80:	4639      	mov	r1, r7
 8013a82:	4630      	mov	r0, r6
 8013a84:	f7ff faf2 	bl	801306c <_malloc_r>
 8013a88:	b948      	cbnz	r0, 8013a9e <__smakebuf_r+0x46>
 8013a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a8e:	059a      	lsls	r2, r3, #22
 8013a90:	d4ee      	bmi.n	8013a70 <__smakebuf_r+0x18>
 8013a92:	f023 0303 	bic.w	r3, r3, #3
 8013a96:	f043 0302 	orr.w	r3, r3, #2
 8013a9a:	81a3      	strh	r3, [r4, #12]
 8013a9c:	e7e2      	b.n	8013a64 <__smakebuf_r+0xc>
 8013a9e:	89a3      	ldrh	r3, [r4, #12]
 8013aa0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013aa8:	81a3      	strh	r3, [r4, #12]
 8013aaa:	9b01      	ldr	r3, [sp, #4]
 8013aac:	6020      	str	r0, [r4, #0]
 8013aae:	b15b      	cbz	r3, 8013ac8 <__smakebuf_r+0x70>
 8013ab0:	4630      	mov	r0, r6
 8013ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013ab6:	f000 f84d 	bl	8013b54 <_isatty_r>
 8013aba:	b128      	cbz	r0, 8013ac8 <__smakebuf_r+0x70>
 8013abc:	89a3      	ldrh	r3, [r4, #12]
 8013abe:	f023 0303 	bic.w	r3, r3, #3
 8013ac2:	f043 0301 	orr.w	r3, r3, #1
 8013ac6:	81a3      	strh	r3, [r4, #12]
 8013ac8:	89a3      	ldrh	r3, [r4, #12]
 8013aca:	431d      	orrs	r5, r3
 8013acc:	81a5      	strh	r5, [r4, #12]
 8013ace:	e7cf      	b.n	8013a70 <__smakebuf_r+0x18>

08013ad0 <_raise_r>:
 8013ad0:	291f      	cmp	r1, #31
 8013ad2:	b538      	push	{r3, r4, r5, lr}
 8013ad4:	4605      	mov	r5, r0
 8013ad6:	460c      	mov	r4, r1
 8013ad8:	d904      	bls.n	8013ae4 <_raise_r+0x14>
 8013ada:	2316      	movs	r3, #22
 8013adc:	6003      	str	r3, [r0, #0]
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ae2:	bd38      	pop	{r3, r4, r5, pc}
 8013ae4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013ae6:	b112      	cbz	r2, 8013aee <_raise_r+0x1e>
 8013ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013aec:	b94b      	cbnz	r3, 8013b02 <_raise_r+0x32>
 8013aee:	4628      	mov	r0, r5
 8013af0:	f000 f852 	bl	8013b98 <_getpid_r>
 8013af4:	4622      	mov	r2, r4
 8013af6:	4601      	mov	r1, r0
 8013af8:	4628      	mov	r0, r5
 8013afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013afe:	f000 b839 	b.w	8013b74 <_kill_r>
 8013b02:	2b01      	cmp	r3, #1
 8013b04:	d00a      	beq.n	8013b1c <_raise_r+0x4c>
 8013b06:	1c59      	adds	r1, r3, #1
 8013b08:	d103      	bne.n	8013b12 <_raise_r+0x42>
 8013b0a:	2316      	movs	r3, #22
 8013b0c:	6003      	str	r3, [r0, #0]
 8013b0e:	2001      	movs	r0, #1
 8013b10:	e7e7      	b.n	8013ae2 <_raise_r+0x12>
 8013b12:	2100      	movs	r1, #0
 8013b14:	4620      	mov	r0, r4
 8013b16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b1a:	4798      	blx	r3
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	e7e0      	b.n	8013ae2 <_raise_r+0x12>

08013b20 <raise>:
 8013b20:	4b02      	ldr	r3, [pc, #8]	@ (8013b2c <raise+0xc>)
 8013b22:	4601      	mov	r1, r0
 8013b24:	6818      	ldr	r0, [r3, #0]
 8013b26:	f7ff bfd3 	b.w	8013ad0 <_raise_r>
 8013b2a:	bf00      	nop
 8013b2c:	20000028 	.word	0x20000028

08013b30 <_fstat_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	2300      	movs	r3, #0
 8013b34:	4d06      	ldr	r5, [pc, #24]	@ (8013b50 <_fstat_r+0x20>)
 8013b36:	4604      	mov	r4, r0
 8013b38:	4608      	mov	r0, r1
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	602b      	str	r3, [r5, #0]
 8013b3e:	f7ed f8aa 	bl	8000c96 <_fstat>
 8013b42:	1c43      	adds	r3, r0, #1
 8013b44:	d102      	bne.n	8013b4c <_fstat_r+0x1c>
 8013b46:	682b      	ldr	r3, [r5, #0]
 8013b48:	b103      	cbz	r3, 8013b4c <_fstat_r+0x1c>
 8013b4a:	6023      	str	r3, [r4, #0]
 8013b4c:	bd38      	pop	{r3, r4, r5, pc}
 8013b4e:	bf00      	nop
 8013b50:	20007e8c 	.word	0x20007e8c

08013b54 <_isatty_r>:
 8013b54:	b538      	push	{r3, r4, r5, lr}
 8013b56:	2300      	movs	r3, #0
 8013b58:	4d05      	ldr	r5, [pc, #20]	@ (8013b70 <_isatty_r+0x1c>)
 8013b5a:	4604      	mov	r4, r0
 8013b5c:	4608      	mov	r0, r1
 8013b5e:	602b      	str	r3, [r5, #0]
 8013b60:	f7ed f8a8 	bl	8000cb4 <_isatty>
 8013b64:	1c43      	adds	r3, r0, #1
 8013b66:	d102      	bne.n	8013b6e <_isatty_r+0x1a>
 8013b68:	682b      	ldr	r3, [r5, #0]
 8013b6a:	b103      	cbz	r3, 8013b6e <_isatty_r+0x1a>
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	bd38      	pop	{r3, r4, r5, pc}
 8013b70:	20007e8c 	.word	0x20007e8c

08013b74 <_kill_r>:
 8013b74:	b538      	push	{r3, r4, r5, lr}
 8013b76:	2300      	movs	r3, #0
 8013b78:	4d06      	ldr	r5, [pc, #24]	@ (8013b94 <_kill_r+0x20>)
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	4608      	mov	r0, r1
 8013b7e:	4611      	mov	r1, r2
 8013b80:	602b      	str	r3, [r5, #0]
 8013b82:	f7ed f827 	bl	8000bd4 <_kill>
 8013b86:	1c43      	adds	r3, r0, #1
 8013b88:	d102      	bne.n	8013b90 <_kill_r+0x1c>
 8013b8a:	682b      	ldr	r3, [r5, #0]
 8013b8c:	b103      	cbz	r3, 8013b90 <_kill_r+0x1c>
 8013b8e:	6023      	str	r3, [r4, #0]
 8013b90:	bd38      	pop	{r3, r4, r5, pc}
 8013b92:	bf00      	nop
 8013b94:	20007e8c 	.word	0x20007e8c

08013b98 <_getpid_r>:
 8013b98:	f7ed b814 	b.w	8000bc4 <_getpid>

08013b9c <_init>:
 8013b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b9e:	bf00      	nop
 8013ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ba2:	bc08      	pop	{r3}
 8013ba4:	469e      	mov	lr, r3
 8013ba6:	4770      	bx	lr

08013ba8 <_fini>:
 8013ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013baa:	bf00      	nop
 8013bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bae:	bc08      	pop	{r3}
 8013bb0:	469e      	mov	lr, r3
 8013bb2:	4770      	bx	lr
